
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00802000  00001cba  00001d4e  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000193  0080213a  0080213a  00001e8a  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001eb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  00001ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000908c  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000486b  00000000  00000000  0000b364  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005f4f  00000000  00000000  0000fbcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000920  00000000  00000000  00015b20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00035aaf  00000000  00000000  00016440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022b8  00000000  00000000  0004beef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  0004e1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000badc  00000000  00000000  0004e528  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	23 c1       	rjmp	.+582    	; 0x24c <__bad_interrupt>
       6:	00 00       	nop
       8:	21 c1       	rjmp	.+578    	; 0x24c <__bad_interrupt>
       a:	00 00       	nop
       c:	1f c1       	rjmp	.+574    	; 0x24c <__bad_interrupt>
       e:	00 00       	nop
      10:	1d c1       	rjmp	.+570    	; 0x24c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c1       	rjmp	.+566    	; 0x24c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c1       	rjmp	.+562    	; 0x24c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c1       	rjmp	.+558    	; 0x24c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c1       	rjmp	.+554    	; 0x24c <__bad_interrupt>
      22:	00 00       	nop
      24:	13 c1       	rjmp	.+550    	; 0x24c <__bad_interrupt>
      26:	00 00       	nop
      28:	11 c1       	rjmp	.+546    	; 0x24c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0f c1       	rjmp	.+542    	; 0x24c <__bad_interrupt>
      2e:	00 00       	nop
      30:	0d c1       	rjmp	.+538    	; 0x24c <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c1       	rjmp	.+534    	; 0x24c <__bad_interrupt>
      36:	00 00       	nop
      38:	09 c1       	rjmp	.+530    	; 0x24c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	07 c1       	rjmp	.+526    	; 0x24c <__bad_interrupt>
      3e:	00 00       	nop
      40:	05 c1       	rjmp	.+522    	; 0x24c <__bad_interrupt>
      42:	00 00       	nop
      44:	03 c1       	rjmp	.+518    	; 0x24c <__bad_interrupt>
      46:	00 00       	nop
      48:	01 c1       	rjmp	.+514    	; 0x24c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ff c0       	rjmp	.+510    	; 0x24c <__bad_interrupt>
      4e:	00 00       	nop
      50:	fd c0       	rjmp	.+506    	; 0x24c <__bad_interrupt>
      52:	00 00       	nop
      54:	fb c0       	rjmp	.+502    	; 0x24c <__bad_interrupt>
      56:	00 00       	nop
      58:	f9 c0       	rjmp	.+498    	; 0x24c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f7 c0       	rjmp	.+494    	; 0x24c <__bad_interrupt>
      5e:	00 00       	nop
      60:	f5 c0       	rjmp	.+490    	; 0x24c <__bad_interrupt>
      62:	00 00       	nop
      64:	f3 c0       	rjmp	.+486    	; 0x24c <__bad_interrupt>
      66:	00 00       	nop
      68:	f1 c0       	rjmp	.+482    	; 0x24c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ef c0       	rjmp	.+478    	; 0x24c <__bad_interrupt>
      6e:	00 00       	nop
      70:	ed c0       	rjmp	.+474    	; 0x24c <__bad_interrupt>
      72:	00 00       	nop
      74:	eb c0       	rjmp	.+470    	; 0x24c <__bad_interrupt>
      76:	00 00       	nop
      78:	e9 c0       	rjmp	.+466    	; 0x24c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e7 c0       	rjmp	.+462    	; 0x24c <__bad_interrupt>
      7e:	00 00       	nop
      80:	e5 c0       	rjmp	.+458    	; 0x24c <__bad_interrupt>
      82:	00 00       	nop
      84:	e3 c0       	rjmp	.+454    	; 0x24c <__bad_interrupt>
      86:	00 00       	nop
      88:	e1 c0       	rjmp	.+450    	; 0x24c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	df c0       	rjmp	.+446    	; 0x24c <__bad_interrupt>
      8e:	00 00       	nop
      90:	dd c0       	rjmp	.+442    	; 0x24c <__bad_interrupt>
      92:	00 00       	nop
      94:	db c0       	rjmp	.+438    	; 0x24c <__bad_interrupt>
      96:	00 00       	nop
      98:	d9 c0       	rjmp	.+434    	; 0x24c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d7 c0       	rjmp	.+430    	; 0x24c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d5 c0       	rjmp	.+426    	; 0x24c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d3 c0       	rjmp	.+422    	; 0x24c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d1 c0       	rjmp	.+418    	; 0x24c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cf c0       	rjmp	.+414    	; 0x24c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cd c0       	rjmp	.+410    	; 0x24c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cb c0       	rjmp	.+406    	; 0x24c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c9 c0       	rjmp	.+402    	; 0x24c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c7 c0       	rjmp	.+398    	; 0x24c <__bad_interrupt>
      be:	00 00       	nop
      c0:	c5 c0       	rjmp	.+394    	; 0x24c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c3 c0       	rjmp	.+390    	; 0x24c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c1 c0       	rjmp	.+386    	; 0x24c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bf c0       	rjmp	.+382    	; 0x24c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	bd c0       	rjmp	.+378    	; 0x24c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	bb c0       	rjmp	.+374    	; 0x24c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b9 c0       	rjmp	.+370    	; 0x24c <__bad_interrupt>
      da:	00 00       	nop
      dc:	b7 c0       	rjmp	.+366    	; 0x24c <__bad_interrupt>
      de:	00 00       	nop
      e0:	b5 c0       	rjmp	.+362    	; 0x24c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b3 c0       	rjmp	.+358    	; 0x24c <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b1 c0       	rjmp	.+354    	; 0x24c <__bad_interrupt>
      ea:	00 00       	nop
      ec:	af c0       	rjmp	.+350    	; 0x24c <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ad c0       	rjmp	.+346    	; 0x24c <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ab c0       	rjmp	.+342    	; 0x24c <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a9 c0       	rjmp	.+338    	; 0x24c <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a7 c0       	rjmp	.+334    	; 0x24c <__bad_interrupt>
      fe:	00 00       	nop
     100:	a5 c0       	rjmp	.+330    	; 0x24c <__bad_interrupt>
     102:	00 00       	nop
     104:	a3 c0       	rjmp	.+326    	; 0x24c <__bad_interrupt>
     106:	00 00       	nop
     108:	a1 c0       	rjmp	.+322    	; 0x24c <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9f c0       	rjmp	.+318    	; 0x24c <__bad_interrupt>
     10e:	00 00       	nop
     110:	9d c0       	rjmp	.+314    	; 0x24c <__bad_interrupt>
     112:	00 00       	nop
     114:	9b c0       	rjmp	.+310    	; 0x24c <__bad_interrupt>
     116:	00 00       	nop
     118:	99 c0       	rjmp	.+306    	; 0x24c <__bad_interrupt>
     11a:	00 00       	nop
     11c:	97 c0       	rjmp	.+302    	; 0x24c <__bad_interrupt>
     11e:	00 00       	nop
     120:	95 c0       	rjmp	.+298    	; 0x24c <__bad_interrupt>
     122:	00 00       	nop
     124:	93 c0       	rjmp	.+294    	; 0x24c <__bad_interrupt>
     126:	00 00       	nop
     128:	91 c0       	rjmp	.+290    	; 0x24c <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8f c0       	rjmp	.+286    	; 0x24c <__bad_interrupt>
     12e:	00 00       	nop
     130:	8d c0       	rjmp	.+282    	; 0x24c <__bad_interrupt>
     132:	00 00       	nop
     134:	8b c0       	rjmp	.+278    	; 0x24c <__bad_interrupt>
     136:	00 00       	nop
     138:	89 c0       	rjmp	.+274    	; 0x24c <__bad_interrupt>
     13a:	00 00       	nop
     13c:	87 c0       	rjmp	.+270    	; 0x24c <__bad_interrupt>
     13e:	00 00       	nop
     140:	85 c0       	rjmp	.+266    	; 0x24c <__bad_interrupt>
     142:	00 00       	nop
     144:	83 c0       	rjmp	.+262    	; 0x24c <__bad_interrupt>
     146:	00 00       	nop
     148:	81 c0       	rjmp	.+258    	; 0x24c <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7f c0       	rjmp	.+254    	; 0x24c <__bad_interrupt>
     14e:	00 00       	nop
     150:	7d c0       	rjmp	.+250    	; 0x24c <__bad_interrupt>
     152:	00 00       	nop
     154:	7b c0       	rjmp	.+246    	; 0x24c <__bad_interrupt>
     156:	00 00       	nop
     158:	79 c0       	rjmp	.+242    	; 0x24c <__bad_interrupt>
     15a:	00 00       	nop
     15c:	77 c0       	rjmp	.+238    	; 0x24c <__bad_interrupt>
     15e:	00 00       	nop
     160:	75 c0       	rjmp	.+234    	; 0x24c <__bad_interrupt>
     162:	00 00       	nop
     164:	73 c0       	rjmp	.+230    	; 0x24c <__bad_interrupt>
     166:	00 00       	nop
     168:	71 c0       	rjmp	.+226    	; 0x24c <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6f c0       	rjmp	.+222    	; 0x24c <__bad_interrupt>
     16e:	00 00       	nop
     170:	6d c0       	rjmp	.+218    	; 0x24c <__bad_interrupt>
     172:	00 00       	nop
     174:	6b c0       	rjmp	.+214    	; 0x24c <__bad_interrupt>
     176:	00 00       	nop
     178:	69 c0       	rjmp	.+210    	; 0x24c <__bad_interrupt>
     17a:	00 00       	nop
     17c:	67 c0       	rjmp	.+206    	; 0x24c <__bad_interrupt>
     17e:	00 00       	nop
     180:	65 c0       	rjmp	.+202    	; 0x24c <__bad_interrupt>
     182:	00 00       	nop
     184:	63 c0       	rjmp	.+198    	; 0x24c <__bad_interrupt>
     186:	00 00       	nop
     188:	61 c0       	rjmp	.+194    	; 0x24c <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5f c0       	rjmp	.+190    	; 0x24c <__bad_interrupt>
     18e:	00 00       	nop
     190:	5d c0       	rjmp	.+186    	; 0x24c <__bad_interrupt>
     192:	00 00       	nop
     194:	5b c0       	rjmp	.+182    	; 0x24c <__bad_interrupt>
     196:	00 00       	nop
     198:	59 c0       	rjmp	.+178    	; 0x24c <__bad_interrupt>
     19a:	00 00       	nop
     19c:	57 c0       	rjmp	.+174    	; 0x24c <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	55 c0       	rjmp	.+170    	; 0x24c <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	53 c0       	rjmp	.+166    	; 0x24c <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	51 c0       	rjmp	.+162    	; 0x24c <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4f c0       	rjmp	.+158    	; 0x24c <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	4d c0       	rjmp	.+154    	; 0x24c <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	4b c0       	rjmp	.+150    	; 0x24c <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	49 c0       	rjmp	.+146    	; 0x24c <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	47 c0       	rjmp	.+142    	; 0x24c <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	45 c0       	rjmp	.+138    	; 0x24c <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	43 c0       	rjmp	.+134    	; 0x24c <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	41 c0       	rjmp	.+130    	; 0x24c <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3f c0       	rjmp	.+126    	; 0x24c <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	3d c0       	rjmp	.+122    	; 0x24c <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	3b c0       	rjmp	.+118    	; 0x24c <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	39 c0       	rjmp	.+114    	; 0x24c <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	37 c0       	rjmp	.+110    	; 0x24c <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	35 c0       	rjmp	.+106    	; 0x24c <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	33 c0       	rjmp	.+102    	; 0x24c <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	31 c0       	rjmp	.+98     	; 0x24c <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2f c0       	rjmp	.+94     	; 0x24c <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2d c0       	rjmp	.+90     	; 0x24c <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__vector_125>
     1f8:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__vector_126>
     1fc:	19 08       	sbc	r1, r9
     1fe:	1c 08       	sbc	r1, r12
     200:	1f 08       	sbc	r1, r15
     202:	22 08       	sbc	r2, r2
     204:	25 08       	sbc	r2, r5
     206:	28 08       	sbc	r2, r8
     208:	2b 08       	sbc	r2, r11

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e5       	ldi	r29, 0x5F	; 95
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60

0000021a <__do_copy_data>:
     21a:	11 e2       	ldi	r17, 0x21	; 33
     21c:	a0 e0       	ldi	r26, 0x00	; 0
     21e:	b0 e2       	ldi	r27, 0x20	; 32
     220:	ea eb       	ldi	r30, 0xBA	; 186
     222:	fc e1       	ldi	r31, 0x1C	; 28
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0b bf       	out	0x3b, r16	; 59
     228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
     22a:	07 90       	elpm	r0, Z+
     22c:	0d 92       	st	X+, r0
     22e:	aa 33       	cpi	r26, 0x3A	; 58
     230:	b1 07       	cpc	r27, r17
     232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>

00000234 <__do_clear_bss>:
     234:	22 e2       	ldi	r18, 0x22	; 34
     236:	aa e3       	ldi	r26, 0x3A	; 58
     238:	b1 e2       	ldi	r27, 0x21	; 33
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	ad 3c       	cpi	r26, 0xCD	; 205
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <main>
     248:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <_exit>

0000024c <__bad_interrupt>:
     24c:	d9 ce       	rjmp	.-590    	; 0x0 <__vectors>

0000024e <BD76319_ui_kbd_led>:

// Procedure for Keyboard USB Class - Slightly modified - Refer to Mircrochip example project --> KEYBOARD_EXAMPLE1
void BD76319_ui_kbd_led(uint8_t value)
{
	// Write Alarm information to Alarm LEDs
	PORTA.OUT = ~value;
     24e:	80 95       	com	r24
     250:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x7be604>
     254:	08 95       	ret

00000256 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
     262:	27 97       	sbiw	r28, 0x07	; 7
     264:	cd bf       	out	0x3d, r28	; 61
     266:	de bf       	out	0x3e, r29	; 62
     268:	8f ef       	ldi	r24, 0xFF	; 255
     26a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     26e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     272:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     276:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     27a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     27e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     282:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     286:	65 e0       	ldi	r22, 0x05	; 5
     288:	81 e4       	ldi	r24, 0x41	; 65
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	cf d5       	rcall	.+2974   	; 0xe2c <ccp_write_io>
     28e:	6c e1       	ldi	r22, 0x1C	; 28
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	82 e0       	ldi	r24, 0x02	; 2
     294:	c1 d5       	rcall	.+2946   	; 0xe18 <nvm_read_byte>
     296:	8a 83       	std	Y+2, r24	; 0x02
     298:	6d e1       	ldi	r22, 0x1D	; 29
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	bc d5       	rcall	.+2936   	; 0xe18 <nvm_read_byte>
     2a0:	89 83       	std	Y+1, r24	; 0x01
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	9a 81       	ldd	r25, Y+2	; 0x02
     2a6:	01 96       	adiw	r24, 0x01	; 1
     2a8:	21 f4       	brne	.+8      	; 0x2b2 <sysclk_init+0x5c>
     2aa:	80 e4       	ldi	r24, 0x40	; 64
     2ac:	93 e2       	ldi	r25, 0x23	; 35
     2ae:	89 83       	std	Y+1, r24	; 0x01
     2b0:	9a 83       	std	Y+2, r25	; 0x02
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	9a 81       	ldd	r25, Y+2	; 0x02
     2b6:	8b 83       	std	Y+3, r24	; 0x03
     2b8:	9c 83       	std	Y+4, r25	; 0x04
     2ba:	e0 e6       	ldi	r30, 0x60	; 96
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	82 83       	std	Z+2, r24	; 0x02
     2c0:	8c 81       	ldd	r24, Y+4	; 0x04
     2c2:	83 83       	std	Z+3, r24	; 0x03
     2c4:	8f b7       	in	r24, 0x3f	; 63
     2c6:	8e 83       	std	Y+6, r24	; 0x06
     2c8:	f8 94       	cli
     2ca:	9e 81       	ldd	r25, Y+6	; 0x06
     2cc:	e0 e5       	ldi	r30, 0x50	; 80
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	82 60       	ori	r24, 0x02	; 2
     2d4:	80 83       	st	Z, r24
     2d6:	9f bf       	out	0x3f, r25	; 63
     2d8:	81 81       	ldd	r24, Z+1	; 0x01
     2da:	81 ff       	sbrs	r24, 1
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <sysclk_init+0x82>
     2de:	8f b7       	in	r24, 0x3f	; 63
     2e0:	8f 83       	std	Y+7, r24	; 0x07
     2e2:	f8 94       	cli
     2e4:	9f 81       	ldd	r25, Y+7	; 0x07
     2e6:	00 e5       	ldi	r16, 0x50	; 80
     2e8:	10 e0       	ldi	r17, 0x00	; 0
     2ea:	d8 01       	movw	r26, r16
     2ec:	16 96       	adiw	r26, 0x06	; 6
     2ee:	8c 91       	ld	r24, X
     2f0:	16 97       	sbiw	r26, 0x06	; 6
     2f2:	89 7f       	andi	r24, 0xF9	; 249
     2f4:	16 96       	adiw	r26, 0x06	; 6
     2f6:	8c 93       	st	X, r24
     2f8:	16 97       	sbiw	r26, 0x06	; 6
     2fa:	e0 e6       	ldi	r30, 0x60	; 96
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	80 e8       	ldi	r24, 0x80	; 128
     300:	85 83       	std	Z+5, r24	; 0x05
     302:	8b eb       	ldi	r24, 0xBB	; 187
     304:	86 83       	std	Z+6, r24	; 0x06
     306:	16 96       	adiw	r26, 0x06	; 6
     308:	8c 91       	ld	r24, X
     30a:	16 97       	sbiw	r26, 0x06	; 6
     30c:	84 60       	ori	r24, 0x04	; 4
     30e:	16 96       	adiw	r26, 0x06	; 6
     310:	8c 93       	st	X, r24
     312:	80 81       	ld	r24, Z
     314:	81 60       	ori	r24, 0x01	; 1
     316:	80 83       	st	Z, r24
     318:	9f bf       	out	0x3f, r25	; 63
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	80 e4       	ldi	r24, 0x40	; 64
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	85 d5       	rcall	.+2826   	; 0xe2c <ccp_write_io>
     322:	8f b7       	in	r24, 0x3f	; 63
     324:	8d 83       	std	Y+5, r24	; 0x05
     326:	f8 94       	cli
     328:	9d 81       	ldd	r25, Y+5	; 0x05
     32a:	f8 01       	movw	r30, r16
     32c:	80 81       	ld	r24, Z
     32e:	8e 7f       	andi	r24, 0xFE	; 254
     330:	80 83       	st	Z, r24
     332:	9f bf       	out	0x3f, r25	; 63
     334:	27 96       	adiw	r28, 0x07	; 7
     336:	cd bf       	out	0x3d, r28	; 61
     338:	de bf       	out	0x3e, r29	; 62
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	08 95       	ret

00000344 <sysclk_enable_module>:
     344:	cf 93       	push	r28
     346:	df 93       	push	r29
     348:	1f 92       	push	r1
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	9f b7       	in	r25, 0x3f	; 63
     350:	99 83       	std	Y+1, r25	; 0x01
     352:	f8 94       	cli
     354:	99 81       	ldd	r25, Y+1	; 0x01
     356:	e8 2f       	mov	r30, r24
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	e0 59       	subi	r30, 0x90	; 144
     35c:	ff 4f       	sbci	r31, 0xFF	; 255
     35e:	60 95       	com	r22
     360:	80 81       	ld	r24, Z
     362:	68 23       	and	r22, r24
     364:	60 83       	st	Z, r22
     366:	9f bf       	out	0x3f, r25	; 63
     368:	0f 90       	pop	r0
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	1f 92       	push	r1
     376:	1f 92       	push	r1
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     37c:	86 30       	cpi	r24, 0x06	; 6
     37e:	11 f0       	breq	.+4      	; 0x384 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	01 c0       	rjmp	.+2      	; 0x386 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     384:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     386:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     38a:	81 fd       	sbrc	r24, 1
     38c:	2a c0       	rjmp	.+84     	; 0x3e2 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     38e:	8f b7       	in	r24, 0x3f	; 63
     390:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     392:	f8 94       	cli
	return flags;
     394:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     396:	e0 e5       	ldi	r30, 0x50	; 80
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	82 60       	ori	r24, 0x02	; 2
     39e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3a0:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     3a2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     3a4:	81 ff       	sbrs	r24, 1
     3a6:	fd cf       	rjmp	.-6      	; 0x3a2 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3a8:	8f b7       	in	r24, 0x3f	; 63
     3aa:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     3ac:	f8 94       	cli
	return flags;
     3ae:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     3b0:	a0 e5       	ldi	r26, 0x50	; 80
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	16 96       	adiw	r26, 0x06	; 6
     3b6:	8c 91       	ld	r24, X
     3b8:	16 97       	sbiw	r26, 0x06	; 6
     3ba:	89 7f       	andi	r24, 0xF9	; 249
     3bc:	16 96       	adiw	r26, 0x06	; 6
     3be:	8c 93       	st	X, r24
     3c0:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     3c2:	e0 e6       	ldi	r30, 0x60	; 96
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 e8       	ldi	r24, 0x80	; 128
     3c8:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     3ca:	8b eb       	ldi	r24, 0xBB	; 187
     3cc:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     3ce:	16 96       	adiw	r26, 0x06	; 6
     3d0:	8c 91       	ld	r24, X
     3d2:	16 97       	sbiw	r26, 0x06	; 6
     3d4:	84 60       	ori	r24, 0x04	; 4
     3d6:	16 96       	adiw	r26, 0x06	; 6
     3d8:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     3da:	80 81       	ld	r24, Z
     3dc:	81 60       	ori	r24, 0x01	; 1
     3de:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3e0:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     3e2:	63 60       	ori	r22, 0x03	; 3
     3e4:	84 e4       	ldi	r24, 0x44	; 68
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	21 d5       	rcall	.+2626   	; 0xe2c <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     3ea:	60 e4       	ldi	r22, 0x40	; 64
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	aa df       	rcall	.-172    	; 0x344 <sysclk_enable_module>
}
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <udi_hid_generic_getsetting>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	08 95       	ret

000003fe <udi_hid_generic_setreport>:
     3fe:	30 91 bf 22 	lds	r19, 0x22BF	; 0x8022bf <udd_g_ctrlreq+0x2>
     402:	20 91 c0 22 	lds	r18, 0x22C0	; 0x8022c0 <udd_g_ctrlreq+0x3>
     406:	82 2f       	mov	r24, r18
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	03 97       	sbiw	r24, 0x03	; 3
     40c:	b1 f4       	brne	.+44     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     40e:	31 11       	cpse	r19, r1
     410:	16 c0       	rjmp	.+44     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     412:	80 91 c3 22 	lds	r24, 0x22C3	; 0x8022c3 <udd_g_ctrlreq+0x6>
     416:	90 91 c4 22 	lds	r25, 0x22C4	; 0x8022c4 <udd_g_ctrlreq+0x7>
     41a:	89 2b       	or	r24, r25
     41c:	91 f4       	brne	.+36     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     41e:	ed eb       	ldi	r30, 0xBD	; 189
     420:	f2 e2       	ldi	r31, 0x22	; 34
     422:	8a e3       	ldi	r24, 0x3A	; 58
     424:	91 e2       	ldi	r25, 0x21	; 33
     426:	80 87       	std	Z+8, r24	; 0x08
     428:	91 87       	std	Z+9, r25	; 0x09
     42a:	83 e2       	ldi	r24, 0x23	; 35
     42c:	92 e0       	ldi	r25, 0x02	; 2
     42e:	84 87       	std	Z+12, r24	; 0x0c
     430:	95 87       	std	Z+13, r25	; 0x0d
     432:	12 86       	std	Z+10, r1	; 0x0a
     434:	13 86       	std	Z+11, r1	; 0x0b
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	08 95       	ret
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	08 95       	ret
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	08 95       	ret
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	08 95       	ret

00000446 <udi_hid_generic_setfeature_valid>:
     446:	08 95       	ret

00000448 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
     448:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
     44c:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	80 93 3a 21 	sts	0x213A, r24	; 0x80213a <__data_end>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
     456:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <main_generic_enable>
}
     45a:	08 95       	ret

0000045c <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
     45c:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <main_generic_disable>
     460:	08 95       	ret

00000462 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
     462:	2f ef       	ldi	r18, 0xFF	; 255
     464:	31 e0       	ldi	r19, 0x01	; 1
     466:	4c e5       	ldi	r20, 0x5C	; 92
     468:	50 e2       	ldi	r21, 0x20	; 32
     46a:	6c e3       	ldi	r22, 0x3C	; 60
     46c:	71 e2       	ldi	r23, 0x21	; 33
     46e:	8e e3       	ldi	r24, 0x3E	; 62
     470:	91 e2       	ldi	r25, 0x21	; 33
     472:	4b c0       	rjmp	.+150    	; 0x50a <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
     474:	08 95       	ret

00000476 <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
	return 0;
}
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	08 95       	ret

0000047a <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
     47a:	30 91 bf 22 	lds	r19, 0x22BF	; 0x8022bf <udd_g_ctrlreq+0x2>
     47e:	20 91 c0 22 	lds	r18, 0x22C0	; 0x8022c0 <udd_g_ctrlreq+0x3>
     482:	82 2f       	mov	r24, r18
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	02 97       	sbiw	r24, 0x02	; 2
     488:	b9 f4       	brne	.+46     	; 0x4b8 <udi_hid_kbd_setreport+0x3e>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     48a:	31 11       	cpse	r19, r1
     48c:	17 c0       	rjmp	.+46     	; 0x4bc <udi_hid_kbd_setreport+0x42>
			&& (1 == udd_g_ctrlreq.req.wLength)) {
     48e:	80 91 c3 22 	lds	r24, 0x22C3	; 0x8022c3 <udd_g_ctrlreq+0x6>
     492:	90 91 c4 22 	lds	r25, 0x22C4	; 0x8022c4 <udd_g_ctrlreq+0x7>
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	99 f4       	brne	.+38     	; 0x4c0 <udi_hid_kbd_setreport+0x46>
		// Report OUT type on report ID 0 from USB Host
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
     49a:	ed eb       	ldi	r30, 0xBD	; 189
     49c:	f2 e2       	ldi	r31, 0x22	; 34
     49e:	8a e4       	ldi	r24, 0x4A	; 74
     4a0:	91 e2       	ldi	r25, 0x21	; 33
     4a2:	80 87       	std	Z+8, r24	; 0x08
     4a4:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
     4a6:	81 e8       	ldi	r24, 0x81	; 129
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	84 87       	std	Z+12, r24	; 0x0c
     4ac:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size = 1;
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	82 87       	std	Z+10, r24	; 0x0a
     4b4:	93 87       	std	Z+11, r25	; 0x0b
		return true;
     4b6:	08 95       	ret
	}
	return false;
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	08 95       	ret
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	08 95       	ret
     4c0:	80 e0       	ldi	r24, 0x00	; 0
}
     4c2:	08 95       	ret

000004c4 <udi_hid_kbd_enable>:
//------ Interface for UDI HID level

bool udi_hid_kbd_enable(void)
{
	// Initialize internal values
	udi_hid_kbd_rate = 0;
     4c4:	10 92 4e 21 	sts	0x214E, r1	; 0x80214e <udi_hid_kbd_rate>
	udi_hid_kbd_protocol = 0;
     4c8:	10 92 4c 21 	sts	0x214C, r1	; 0x80214c <udi_hid_kbd_protocol>
	udi_hid_kbd_b_report_trans_ongoing = false;
     4cc:	10 92 40 21 	sts	0x2140, r1	; 0x802140 <udi_hid_kbd_b_report_trans_ongoing>
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
     4d0:	88 e0       	ldi	r24, 0x08	; 8
     4d2:	e1 e4       	ldi	r30, 0x41	; 65
     4d4:	f1 e2       	ldi	r31, 0x21	; 33
     4d6:	df 01       	movw	r26, r30
     4d8:	1d 92       	st	X+, r1
     4da:	8a 95       	dec	r24
     4dc:	e9 f7       	brne	.-6      	; 0x4d8 <udi_hid_kbd_enable+0x14>
	udi_hid_kbd_b_report_valid = false;
     4de:	10 92 49 21 	sts	0x2149, r1	; 0x802149 <udi_hid_kbd_b_report_valid>
	return UDI_HID_KBD_ENABLE_EXT();
     4e2:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <main_kbd_enable>
}
     4e6:	08 95       	ret

000004e8 <udi_hid_kbd_disable>:


void udi_hid_kbd_disable(void)
{
	UDI_HID_KBD_DISABLE_EXT();
     4e8:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <main_kbd_disable>
     4ec:	08 95       	ret

000004ee <udi_hid_kbd_setup>:
}


bool udi_hid_kbd_setup(void)
{
	return udi_hid_setup(&udi_hid_kbd_rate,
     4ee:	2d e3       	ldi	r18, 0x3D	; 61
     4f0:	32 e0       	ldi	r19, 0x02	; 2
     4f2:	41 e8       	ldi	r20, 0x81	; 129
     4f4:	50 e2       	ldi	r21, 0x20	; 32
     4f6:	6c e4       	ldi	r22, 0x4C	; 76
     4f8:	71 e2       	ldi	r23, 0x21	; 33
     4fa:	8e e4       	ldi	r24, 0x4E	; 78
     4fc:	91 e2       	ldi	r25, 0x21	; 33
     4fe:	05 c0       	rjmp	.+10     	; 0x50a <udi_hid_setup>
								&udi_hid_kbd_protocol,
								(uint8_t *) &udi_hid_kbd_report_desc,
								udi_hid_kbd_setreport);
}
     500:	08 95       	ret

00000502 <udi_hid_kbd_setreport_valid>:
	}
}

static void udi_hid_kbd_setreport_valid(void)
{
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
     502:	80 91 4a 21 	lds	r24, 0x214A	; 0x80214a <udi_hid_kbd_report_set>
     506:	a3 ce       	rjmp	.-698    	; 0x24e <BD76319_ui_kbd_led>
     508:	08 95       	ret

0000050a <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	dc 01       	movw	r26, r24
     510:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
     512:	90 91 bd 22 	lds	r25, 0x22BD	; 0x8022bd <udd_g_ctrlreq>
     516:	99 23       	and	r25, r25
     518:	0c f0       	brlt	.+2      	; 0x51c <udi_hid_setup+0x12>
     51a:	68 c0       	rjmp	.+208    	; 0x5ec <udi_hid_setup+0xe2>
     51c:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     51e:	09 f0       	breq	.+2      	; 0x522 <udi_hid_setup+0x18>
     520:	45 c0       	rjmp	.+138    	; 0x5ac <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     522:	80 91 be 22 	lds	r24, 0x22BE	; 0x8022be <udd_g_ctrlreq+0x1>
     526:	86 30       	cpi	r24, 0x06	; 6
     528:	09 f0       	breq	.+2      	; 0x52c <udi_hid_setup+0x22>
     52a:	40 c0       	rjmp	.+128    	; 0x5ac <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
     52c:	76 d1       	rcall	.+748    	; 0x81a <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     52e:	dc 01       	movw	r26, r24
     530:	1a 96       	adiw	r26, 0x0a	; 10
     532:	2c 91       	ld	r18, X
     534:	1a 97       	sbiw	r26, 0x0a	; 10
     536:	21 32       	cpi	r18, 0x21	; 33
     538:	09 f0       	breq	.+2      	; 0x53c <udi_hid_setup+0x32>
     53a:	77 c0       	rjmp	.+238    	; 0x62a <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     53c:	20 91 c0 22 	lds	r18, 0x22C0	; 0x8022c0 <udd_g_ctrlreq+0x3>
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	21 32       	cpi	r18, 0x21	; 33
     544:	31 05       	cpc	r19, r1
     546:	b1 f4       	brne	.+44     	; 0x574 <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     548:	9c 01       	movw	r18, r24
     54a:	27 5f       	subi	r18, 0xF7	; 247
     54c:	3f 4f       	sbci	r19, 0xFF	; 255
     54e:	20 93 c5 22 	sts	0x22C5, r18	; 0x8022c5 <udd_g_ctrlreq+0x8>
     552:	30 93 c6 22 	sts	0x22C6, r19	; 0x8022c6 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
     556:	ed eb       	ldi	r30, 0xBD	; 189
     558:	f2 e2       	ldi	r31, 0x22	; 34
     55a:	19 96       	adiw	r26, 0x09	; 9
     55c:	8c 91       	ld	r24, X
     55e:	26 81       	ldd	r18, Z+6	; 0x06
     560:	37 81       	ldd	r19, Z+7	; 0x07
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	28 17       	cp	r18, r24
     566:	39 07       	cpc	r19, r25
     568:	08 f4       	brcc	.+2      	; 0x56c <udi_hid_setup+0x62>
     56a:	c9 01       	movw	r24, r18
     56c:	82 87       	std	Z+10, r24	; 0x0a
     56e:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	68 c0       	rjmp	.+208    	; 0x644 <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     574:	fc 01       	movw	r30, r24
     576:	47 85       	ldd	r20, Z+15	; 0x0f
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	42 17       	cp	r20, r18
     57c:	53 07       	cpc	r21, r19
     57e:	09 f0       	breq	.+2      	; 0x582 <udi_hid_setup+0x78>
     580:	56 c0       	rjmp	.+172    	; 0x62e <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
     582:	c0 93 c5 22 	sts	0x22C5, r28	; 0x8022c5 <udd_g_ctrlreq+0x8>
     586:	d0 93 c6 22 	sts	0x22C6, r29	; 0x8022c6 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
     58a:	ed eb       	ldi	r30, 0xBD	; 189
     58c:	f2 e2       	ldi	r31, 0x22	; 34
     58e:	26 81       	ldd	r18, Z+6	; 0x06
     590:	37 81       	ldd	r19, Z+7	; 0x07
     592:	dc 01       	movw	r26, r24
     594:	50 96       	adiw	r26, 0x10	; 16
     596:	8d 91       	ld	r24, X+
     598:	9c 91       	ld	r25, X
     59a:	51 97       	sbiw	r26, 0x11	; 17
     59c:	28 17       	cp	r18, r24
     59e:	39 07       	cpc	r19, r25
     5a0:	08 f4       	brcc	.+2      	; 0x5a4 <udi_hid_setup+0x9a>
     5a2:	c9 01       	movw	r24, r18
     5a4:	82 87       	std	Z+10, r24	; 0x0a
     5a6:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	4c c0       	rjmp	.+152    	; 0x644 <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     5ac:	90 32       	cpi	r25, 0x20	; 32
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <udi_hid_setup+0xa8>
     5b0:	40 c0       	rjmp	.+128    	; 0x632 <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     5b2:	80 91 be 22 	lds	r24, 0x22BE	; 0x8022be <udd_g_ctrlreq+0x1>
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	39 f0       	breq	.+14     	; 0x5c8 <udi_hid_setup+0xbe>
     5ba:	83 30       	cpi	r24, 0x03	; 3
     5bc:	71 f0       	breq	.+28     	; 0x5da <udi_hid_setup+0xd0>
     5be:	81 30       	cpi	r24, 0x01	; 1
     5c0:	d1 f5       	brne	.+116    	; 0x636 <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
     5c2:	f9 01       	movw	r30, r18
     5c4:	19 95       	eicall
     5c6:	3e c0       	rjmp	.+124    	; 0x644 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
     5c8:	ed eb       	ldi	r30, 0xBD	; 189
     5ca:	f2 e2       	ldi	r31, 0x22	; 34
     5cc:	a0 87       	std	Z+8, r26	; 0x08
     5ce:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	82 87       	std	Z+10, r24	; 0x0a
     5d6:	93 87       	std	Z+11, r25	; 0x0b
				return true;
     5d8:	35 c0       	rjmp	.+106    	; 0x644 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
     5da:	ed eb       	ldi	r30, 0xBD	; 189
     5dc:	f2 e2       	ldi	r31, 0x22	; 34
     5de:	60 87       	std	Z+8, r22	; 0x08
     5e0:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	82 87       	std	Z+10, r24	; 0x0a
     5e8:	93 87       	std	Z+11, r25	; 0x0b
				return true;
     5ea:	2c c0       	rjmp	.+88     	; 0x644 <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     5ec:	90 76       	andi	r25, 0x60	; 96
     5ee:	90 32       	cpi	r25, 0x20	; 32
     5f0:	21 f5       	brne	.+72     	; 0x63a <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     5f2:	80 91 be 22 	lds	r24, 0x22BE	; 0x8022be <udd_g_ctrlreq+0x1>
     5f6:	8a 30       	cpi	r24, 0x0A	; 10
     5f8:	39 f0       	breq	.+14     	; 0x608 <udi_hid_setup+0xfe>
     5fa:	8b 30       	cpi	r24, 0x0B	; 11
     5fc:	51 f0       	breq	.+20     	; 0x612 <udi_hid_setup+0x108>
     5fe:	89 30       	cpi	r24, 0x09	; 9
     600:	f1 f4       	brne	.+60     	; 0x63e <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
     602:	f9 01       	movw	r30, r18
     604:	19 95       	eicall
     606:	1e c0       	rjmp	.+60     	; 0x644 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
     608:	80 91 c0 22 	lds	r24, 0x22C0	; 0x8022c0 <udd_g_ctrlreq+0x3>
     60c:	8c 93       	st	X, r24
				return true;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	19 c0       	rjmp	.+50     	; 0x644 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
     612:	80 91 c3 22 	lds	r24, 0x22C3	; 0x8022c3 <udd_g_ctrlreq+0x6>
     616:	90 91 c4 22 	lds	r25, 0x22C4	; 0x8022c4 <udd_g_ctrlreq+0x7>
     61a:	89 2b       	or	r24, r25
     61c:	91 f4       	brne	.+36     	; 0x642 <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
     61e:	80 91 bf 22 	lds	r24, 0x22BF	; 0x8022bf <udd_g_ctrlreq+0x2>
     622:	db 01       	movw	r26, r22
     624:	8c 93       	st	X, r24
				return true;
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	0d c0       	rjmp	.+26     	; 0x644 <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0b c0       	rjmp	.+22     	; 0x644 <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	09 c0       	rjmp	.+18     	; 0x644 <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	07 c0       	rjmp	.+14     	; 0x644 <udi_hid_setup+0x13a>
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	05 c0       	rjmp	.+10     	; 0x644 <udi_hid_setup+0x13a>
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	03 c0       	rjmp	.+6      	; 0x644 <udi_hid_setup+0x13a>
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	01 c0       	rjmp	.+2      	; 0x644 <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
     642:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     64a:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <udc_ptr_conf>
     64e:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <udc_ptr_conf+0x1>
     652:	01 90       	ld	r0, Z+
     654:	f0 81       	ld	r31, Z
     656:	e0 2d       	mov	r30, r0
     658:	22 81       	ldd	r18, Z+2	; 0x02
     65a:	33 81       	ldd	r19, Z+3	; 0x03
     65c:	2e 0f       	add	r18, r30
     65e:	3f 1f       	adc	r19, r31
     660:	fc 01       	movw	r30, r24
     662:	40 81       	ld	r20, Z
     664:	e4 0f       	add	r30, r20
     666:	f1 1d       	adc	r31, r1
     668:	e2 17       	cp	r30, r18
     66a:	f3 07       	cpc	r31, r19
     66c:	a0 f4       	brcc	.+40     	; 0x696 <udc_next_desc_in_iface+0x4c>
     66e:	81 81       	ldd	r24, Z+1	; 0x01
     670:	84 30       	cpi	r24, 0x04	; 4
     672:	a1 f0       	breq	.+40     	; 0x69c <udc_next_desc_in_iface+0x52>
     674:	86 13       	cpse	r24, r22
     676:	06 c0       	rjmp	.+12     	; 0x684 <udc_next_desc_in_iface+0x3a>
     678:	14 c0       	rjmp	.+40     	; 0x6a2 <udc_next_desc_in_iface+0x58>
     67a:	81 81       	ldd	r24, Z+1	; 0x01
     67c:	84 30       	cpi	r24, 0x04	; 4
     67e:	a1 f0       	breq	.+40     	; 0x6a8 <udc_next_desc_in_iface+0x5e>
     680:	86 17       	cp	r24, r22
     682:	a9 f0       	breq	.+42     	; 0x6ae <udc_next_desc_in_iface+0x64>
     684:	80 81       	ld	r24, Z
     686:	e8 0f       	add	r30, r24
     688:	f1 1d       	adc	r31, r1
     68a:	e2 17       	cp	r30, r18
     68c:	f3 07       	cpc	r31, r19
     68e:	a8 f3       	brcs	.-22     	; 0x67a <udc_next_desc_in_iface+0x30>
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	08 95       	ret
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	08 95       	ret
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	08 95       	ret
     6a2:	8e 2f       	mov	r24, r30
     6a4:	9f 2f       	mov	r25, r31
     6a6:	08 95       	ret
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	08 95       	ret
     6ae:	8e 2f       	mov	r24, r30
     6b0:	9f 2f       	mov	r25, r31
     6b2:	08 95       	ret

000006b4 <udc_valid_address>:
     6b4:	80 91 bf 22 	lds	r24, 0x22BF	; 0x8022bf <udd_g_ctrlreq+0x2>
     6b8:	8f 77       	andi	r24, 0x7F	; 127
     6ba:	7c c7       	rjmp	.+3832   	; 0x15b4 <udd_set_address>
     6bc:	08 95       	ret

000006be <udc_update_iface_desc>:
     6be:	90 91 56 21 	lds	r25, 0x2156	; 0x802156 <udc_num_configuration>
     6c2:	99 23       	and	r25, r25
     6c4:	81 f1       	breq	.+96     	; 0x726 <udc_update_iface_desc+0x68>
     6c6:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <udc_ptr_conf>
     6ca:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <udc_ptr_conf+0x1>
     6ce:	01 90       	ld	r0, Z+
     6d0:	f0 81       	ld	r31, Z
     6d2:	e0 2d       	mov	r30, r0
     6d4:	94 81       	ldd	r25, Z+4	; 0x04
     6d6:	89 17       	cp	r24, r25
     6d8:	40 f5       	brcc	.+80     	; 0x72a <udc_update_iface_desc+0x6c>
     6da:	e0 93 52 21 	sts	0x2152, r30	; 0x802152 <udc_ptr_iface>
     6de:	f0 93 53 21 	sts	0x2153, r31	; 0x802153 <udc_ptr_iface+0x1>
     6e2:	22 81       	ldd	r18, Z+2	; 0x02
     6e4:	33 81       	ldd	r19, Z+3	; 0x03
     6e6:	2e 0f       	add	r18, r30
     6e8:	3f 1f       	adc	r19, r31
     6ea:	e2 17       	cp	r30, r18
     6ec:	f3 07       	cpc	r31, r19
     6ee:	f8 f4       	brcc	.+62     	; 0x72e <udc_update_iface_desc+0x70>
     6f0:	91 81       	ldd	r25, Z+1	; 0x01
     6f2:	94 30       	cpi	r25, 0x04	; 4
     6f4:	61 f4       	brne	.+24     	; 0x70e <udc_update_iface_desc+0x50>
     6f6:	92 81       	ldd	r25, Z+2	; 0x02
     6f8:	89 13       	cpse	r24, r25
     6fa:	09 c0       	rjmp	.+18     	; 0x70e <udc_update_iface_desc+0x50>
     6fc:	93 81       	ldd	r25, Z+3	; 0x03
     6fe:	96 13       	cpse	r25, r22
     700:	06 c0       	rjmp	.+12     	; 0x70e <udc_update_iface_desc+0x50>
     702:	e0 93 52 21 	sts	0x2152, r30	; 0x802152 <udc_ptr_iface>
     706:	f0 93 53 21 	sts	0x2153, r31	; 0x802153 <udc_ptr_iface+0x1>
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	08 95       	ret
     70e:	90 81       	ld	r25, Z
     710:	e9 0f       	add	r30, r25
     712:	f1 1d       	adc	r31, r1
     714:	e2 17       	cp	r30, r18
     716:	f3 07       	cpc	r31, r19
     718:	58 f3       	brcs	.-42     	; 0x6f0 <udc_update_iface_desc+0x32>
     71a:	e0 93 52 21 	sts	0x2152, r30	; 0x802152 <udc_ptr_iface>
     71e:	f0 93 53 21 	sts	0x2153, r31	; 0x802153 <udc_ptr_iface+0x1>
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	08 95       	ret
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	08 95       	ret
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	08 95       	ret
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	08 95       	ret

00000732 <udc_iface_disable>:
     732:	ef 92       	push	r14
     734:	ff 92       	push	r15
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	c8 2f       	mov	r28, r24
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	be df       	rcall	.-132    	; 0x6be <udc_update_iface_desc>
     742:	18 2f       	mov	r17, r24
     744:	88 23       	and	r24, r24
     746:	81 f1       	breq	.+96     	; 0x7a8 <udc_iface_disable+0x76>
     748:	a0 91 54 21 	lds	r26, 0x2154	; 0x802154 <udc_ptr_conf>
     74c:	b0 91 55 21 	lds	r27, 0x2155	; 0x802155 <udc_ptr_conf+0x1>
     750:	ec 2f       	mov	r30, r28
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	ee 0f       	add	r30, r30
     756:	ff 1f       	adc	r31, r31
     758:	12 96       	adiw	r26, 0x02	; 2
     75a:	8d 91       	ld	r24, X+
     75c:	9c 91       	ld	r25, X
     75e:	13 97       	sbiw	r26, 0x03	; 3
     760:	e8 0f       	add	r30, r24
     762:	f9 1f       	adc	r31, r25
     764:	e0 80       	ld	r14, Z
     766:	f1 80       	ldd	r15, Z+1	; 0x01
     768:	d7 01       	movw	r26, r14
     76a:	16 96       	adiw	r26, 0x06	; 6
     76c:	ed 91       	ld	r30, X+
     76e:	fc 91       	ld	r31, X
     770:	17 97       	sbiw	r26, 0x07	; 7
     772:	19 95       	eicall
     774:	68 2f       	mov	r22, r24
     776:	8c 2f       	mov	r24, r28
     778:	a2 df       	rcall	.-188    	; 0x6be <udc_update_iface_desc>
     77a:	18 2f       	mov	r17, r24
     77c:	88 23       	and	r24, r24
     77e:	a1 f0       	breq	.+40     	; 0x7a8 <udc_iface_disable+0x76>
     780:	c0 91 52 21 	lds	r28, 0x2152	; 0x802152 <udc_ptr_iface>
     784:	d0 91 53 21 	lds	r29, 0x2153	; 0x802153 <udc_ptr_iface+0x1>
     788:	65 e0       	ldi	r22, 0x05	; 5
     78a:	ce 01       	movw	r24, r28
     78c:	5e df       	rcall	.-324    	; 0x64a <udc_next_desc_in_iface>
     78e:	ec 01       	movw	r28, r24
     790:	89 2b       	or	r24, r25
     792:	21 f0       	breq	.+8      	; 0x79c <udc_iface_disable+0x6a>
     794:	8a 81       	ldd	r24, Y+2	; 0x02
     796:	0e 94 24 0c 	call	0x1848	; 0x1848 <udd_ep_free>
     79a:	f6 cf       	rjmp	.-20     	; 0x788 <udc_iface_disable+0x56>
     79c:	d7 01       	movw	r26, r14
     79e:	12 96       	adiw	r26, 0x02	; 2
     7a0:	ed 91       	ld	r30, X+
     7a2:	fc 91       	ld	r31, X
     7a4:	13 97       	sbiw	r26, 0x03	; 3
     7a6:	19 95       	eicall
     7a8:	81 2f       	mov	r24, r17
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	ff 90       	pop	r15
     7b2:	ef 90       	pop	r14
     7b4:	08 95       	ret

000007b6 <udc_iface_enable>:
     7b6:	1f 93       	push	r17
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	18 2f       	mov	r17, r24
     7be:	7f df       	rcall	.-258    	; 0x6be <udc_update_iface_desc>
     7c0:	88 23       	and	r24, r24
     7c2:	39 f1       	breq	.+78     	; 0x812 <udc_iface_enable+0x5c>
     7c4:	c0 91 52 21 	lds	r28, 0x2152	; 0x802152 <udc_ptr_iface>
     7c8:	d0 91 53 21 	lds	r29, 0x2153	; 0x802153 <udc_ptr_iface+0x1>
     7cc:	65 e0       	ldi	r22, 0x05	; 5
     7ce:	ce 01       	movw	r24, r28
     7d0:	3c df       	rcall	.-392    	; 0x64a <udc_next_desc_in_iface>
     7d2:	ec 01       	movw	r28, r24
     7d4:	89 2b       	or	r24, r25
     7d6:	41 f0       	breq	.+16     	; 0x7e8 <udc_iface_enable+0x32>
     7d8:	4c 81       	ldd	r20, Y+4	; 0x04
     7da:	5d 81       	ldd	r21, Y+5	; 0x05
     7dc:	6b 81       	ldd	r22, Y+3	; 0x03
     7de:	8a 81       	ldd	r24, Y+2	; 0x02
     7e0:	f6 d6       	rcall	.+3564   	; 0x15ce <udd_ep_alloc>
     7e2:	81 11       	cpse	r24, r1
     7e4:	f3 cf       	rjmp	.-26     	; 0x7cc <udc_iface_enable+0x16>
     7e6:	15 c0       	rjmp	.+42     	; 0x812 <udc_iface_enable+0x5c>
     7e8:	a0 91 54 21 	lds	r26, 0x2154	; 0x802154 <udc_ptr_conf>
     7ec:	b0 91 55 21 	lds	r27, 0x2155	; 0x802155 <udc_ptr_conf+0x1>
     7f0:	e1 2f       	mov	r30, r17
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	ee 0f       	add	r30, r30
     7f6:	ff 1f       	adc	r31, r31
     7f8:	12 96       	adiw	r26, 0x02	; 2
     7fa:	8d 91       	ld	r24, X+
     7fc:	9c 91       	ld	r25, X
     7fe:	13 97       	sbiw	r26, 0x03	; 3
     800:	e8 0f       	add	r30, r24
     802:	f9 1f       	adc	r31, r25
     804:	01 90       	ld	r0, Z+
     806:	f0 81       	ld	r31, Z
     808:	e0 2d       	mov	r30, r0
     80a:	01 90       	ld	r0, Z+
     80c:	f0 81       	ld	r31, Z
     80e:	e0 2d       	mov	r30, r0
     810:	19 95       	eicall
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	08 95       	ret

0000081a <udc_get_interface_desc>:
     81a:	80 91 52 21 	lds	r24, 0x2152	; 0x802152 <udc_ptr_iface>
     81e:	90 91 53 21 	lds	r25, 0x2153	; 0x802153 <udc_ptr_iface+0x1>
     822:	08 95       	ret

00000824 <udc_start>:
     824:	32 c6       	rjmp	.+3172   	; 0x148a <udd_enable>
     826:	08 95       	ret

00000828 <udc_reset>:
     828:	cf 93       	push	r28
     82a:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <udc_num_configuration>
     82e:	88 23       	and	r24, r24
     830:	c1 f0       	breq	.+48     	; 0x862 <udc_reset+0x3a>
     832:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <udc_ptr_conf>
     836:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <udc_ptr_conf+0x1>
     83a:	01 90       	ld	r0, Z+
     83c:	f0 81       	ld	r31, Z
     83e:	e0 2d       	mov	r30, r0
     840:	84 81       	ldd	r24, Z+4	; 0x04
     842:	88 23       	and	r24, r24
     844:	71 f0       	breq	.+28     	; 0x862 <udc_reset+0x3a>
     846:	c0 e0       	ldi	r28, 0x00	; 0
     848:	8c 2f       	mov	r24, r28
     84a:	73 df       	rcall	.-282    	; 0x732 <udc_iface_disable>
     84c:	cf 5f       	subi	r28, 0xFF	; 255
     84e:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <udc_ptr_conf>
     852:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <udc_ptr_conf+0x1>
     856:	01 90       	ld	r0, Z+
     858:	f0 81       	ld	r31, Z
     85a:	e0 2d       	mov	r30, r0
     85c:	84 81       	ldd	r24, Z+4	; 0x04
     85e:	c8 17       	cp	r28, r24
     860:	98 f3       	brcs	.-26     	; 0x848 <udc_reset+0x20>
     862:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <udc_num_configuration>
     866:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <udc_device_status>
     86a:	81 fd       	sbrc	r24, 1
     86c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <main_remotewakeup_disable>
     870:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <udc_device_status>
     874:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <udc_device_status+0x1>
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     87c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     87e:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <udc_num_configuration>
     882:	88 23       	and	r24, r24
     884:	49 f1       	breq	.+82     	; 0x8d8 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     886:	a0 91 54 21 	lds	r26, 0x2154	; 0x802154 <udc_ptr_conf>
     88a:	b0 91 55 21 	lds	r27, 0x2155	; 0x802155 <udc_ptr_conf+0x1>
     88e:	ed 91       	ld	r30, X+
     890:	fc 91       	ld	r31, X
     892:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     894:	84 81       	ldd	r24, Z+4	; 0x04
     896:	88 23       	and	r24, r24
     898:	f9 f0       	breq	.+62     	; 0x8d8 <udc_sof_notify+0x5c>
     89a:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     89c:	ec 2f       	mov	r30, r28
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	ee 0f       	add	r30, r30
     8a2:	ff 1f       	adc	r31, r31
     8a4:	12 96       	adiw	r26, 0x02	; 2
     8a6:	8d 91       	ld	r24, X+
     8a8:	9c 91       	ld	r25, X
     8aa:	13 97       	sbiw	r26, 0x03	; 3
     8ac:	e8 0f       	add	r30, r24
     8ae:	f9 1f       	adc	r31, r25
     8b0:	01 90       	ld	r0, Z+
     8b2:	f0 81       	ld	r31, Z
     8b4:	e0 2d       	mov	r30, r0
     8b6:	00 84       	ldd	r0, Z+8	; 0x08
     8b8:	f1 85       	ldd	r31, Z+9	; 0x09
     8ba:	e0 2d       	mov	r30, r0
     8bc:	30 97       	sbiw	r30, 0x00	; 0
     8be:	09 f0       	breq	.+2      	; 0x8c2 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     8c0:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     8c2:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     8c4:	a0 91 54 21 	lds	r26, 0x2154	; 0x802154 <udc_ptr_conf>
     8c8:	b0 91 55 21 	lds	r27, 0x2155	; 0x802155 <udc_ptr_conf+0x1>
     8cc:	ed 91       	ld	r30, X+
     8ce:	fc 91       	ld	r31, X
     8d0:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     8d2:	84 81       	ldd	r24, Z+4	; 0x04
     8d4:	c8 17       	cp	r28, r24
     8d6:	10 f3       	brcs	.-60     	; 0x89c <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     8e4:	ed eb       	ldi	r30, 0xBD	; 189
     8e6:	f2 e2       	ldi	r31, 0x22	; 34
     8e8:	12 86       	std	Z+10, r1	; 0x0a
     8ea:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
     8ec:	14 86       	std	Z+12, r1	; 0x0c
     8ee:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
     8f0:	16 86       	std	Z+14, r1	; 0x0e
     8f2:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
     8f4:	80 81       	ld	r24, Z
     8f6:	88 23       	and	r24, r24
     8f8:	0c f0       	brlt	.+2      	; 0x8fc <udc_process_setup+0x20>
     8fa:	7e c2       	rjmp	.+1276   	; 0xdf8 <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
     8fc:	20 91 c3 22 	lds	r18, 0x22C3	; 0x8022c3 <udd_g_ctrlreq+0x6>
     900:	30 91 c4 22 	lds	r19, 0x22C4	; 0x8022c4 <udd_g_ctrlreq+0x7>
     904:	21 15       	cp	r18, r1
     906:	31 05       	cpc	r19, r1
     908:	09 f0       	breq	.+2      	; 0x90c <udc_process_setup+0x30>
     90a:	7b c2       	rjmp	.+1270   	; 0xe02 <udc_process_setup+0x526>
     90c:	6d c2       	rjmp	.+1242   	; 0xde8 <udc_process_setup+0x50c>
     90e:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     910:	09 f0       	breq	.+2      	; 0x914 <udc_process_setup+0x38>
     912:	a0 c0       	rjmp	.+320    	; 0xa54 <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     914:	90 91 be 22 	lds	r25, 0x22BE	; 0x8022be <udd_g_ctrlreq+0x1>
     918:	96 30       	cpi	r25, 0x06	; 6
     91a:	79 f0       	breq	.+30     	; 0x93a <udc_process_setup+0x5e>
     91c:	98 30       	cpi	r25, 0x08	; 8
     91e:	09 f4       	brne	.+2      	; 0x922 <udc_process_setup+0x46>
     920:	8f c0       	rjmp	.+286    	; 0xa40 <udc_process_setup+0x164>
     922:	91 11       	cpse	r25, r1
     924:	97 c0       	rjmp	.+302    	; 0xa54 <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     926:	22 30       	cpi	r18, 0x02	; 2
     928:	31 05       	cpc	r19, r1
     92a:	09 f0       	breq	.+2      	; 0x92e <udc_process_setup+0x52>
     92c:	19 c2       	rjmp	.+1074   	; 0xd60 <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     92e:	62 e0       	ldi	r22, 0x02	; 2
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	8a e5       	ldi	r24, 0x5A	; 90
     934:	91 e2       	ldi	r25, 0x21	; 33
     936:	44 d6       	rcall	.+3208   	; 0x15c0 <udd_set_setup_payload>
     938:	69 c2       	rjmp	.+1234   	; 0xe0c <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     93a:	80 91 bf 22 	lds	r24, 0x22BF	; 0x8022bf <udd_g_ctrlreq+0x2>
     93e:	90 91 c0 22 	lds	r25, 0x22C0	; 0x8022c0 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     942:	29 2f       	mov	r18, r25
     944:	33 27       	eor	r19, r19
     946:	22 30       	cpi	r18, 0x02	; 2
     948:	31 05       	cpc	r19, r1
     94a:	a9 f0       	breq	.+42     	; 0x976 <udc_process_setup+0x9a>
     94c:	20 f4       	brcc	.+8      	; 0x956 <udc_process_setup+0x7a>
     94e:	21 30       	cpi	r18, 0x01	; 1
     950:	31 05       	cpc	r19, r1
     952:	41 f0       	breq	.+16     	; 0x964 <udc_process_setup+0x88>
     954:	c7 c1       	rjmp	.+910    	; 0xce4 <udc_process_setup+0x408>
     956:	23 30       	cpi	r18, 0x03	; 3
     958:	31 05       	cpc	r19, r1
     95a:	d9 f1       	breq	.+118    	; 0x9d2 <udc_process_setup+0xf6>
     95c:	2f 30       	cpi	r18, 0x0F	; 15
     95e:	31 05       	cpc	r19, r1
     960:	51 f1       	breq	.+84     	; 0x9b6 <udc_process_setup+0xda>
     962:	c0 c1       	rjmp	.+896    	; 0xce4 <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     964:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     968:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     96c:	dc 01       	movw	r26, r24
     96e:	6c 91       	ld	r22, X
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	26 d6       	rcall	.+3148   	; 0x15c0 <udd_set_setup_payload>
     974:	56 c0       	rjmp	.+172    	; 0xa22 <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     976:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     97a:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     97e:	21 89       	ldd	r18, Z+17	; 0x11
     980:	82 17       	cp	r24, r18
     982:	08 f0       	brcs	.+2      	; 0x986 <udc_process_setup+0xaa>
     984:	ed c1       	rjmp	.+986    	; 0xd60 <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     986:	99 27       	eor	r25, r25
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
     994:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <__DATA_REGION_ORIGIN__+0x3>
     998:	e8 0f       	add	r30, r24
     99a:	f9 1f       	adc	r31, r25
     99c:	80 81       	ld	r24, Z
     99e:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     9a0:	fc 01       	movw	r30, r24
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	0c d6       	rcall	.+3096   	; 0x15c0 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     9a8:	e0 91 c5 22 	lds	r30, 0x22C5	; 0x8022c5 <udd_g_ctrlreq+0x8>
     9ac:	f0 91 c6 22 	lds	r31, 0x22C6	; 0x8022c6 <udd_g_ctrlreq+0x9>
     9b0:	82 e0       	ldi	r24, 0x02	; 2
     9b2:	81 83       	std	Z+1, r24	; 0x01
     9b4:	36 c0       	rjmp	.+108    	; 0xa22 <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     9b6:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <__DATA_REGION_ORIGIN__+0x4>
     9ba:	90 91 05 20 	lds	r25, 0x2005	; 0x802005 <__DATA_REGION_ORIGIN__+0x5>
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <udc_process_setup+0xe8>
     9c2:	ce c1       	rjmp	.+924    	; 0xd60 <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     9c4:	dc 01       	movw	r26, r24
     9c6:	12 96       	adiw	r26, 0x02	; 2
     9c8:	6d 91       	ld	r22, X+
     9ca:	7c 91       	ld	r23, X
     9cc:	13 97       	sbiw	r26, 0x03	; 3
     9ce:	f8 d5       	rcall	.+3056   	; 0x15c0 <udd_set_setup_payload>
     9d0:	28 c0       	rjmp	.+80     	; 0xa22 <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     9d2:	99 27       	eor	r25, r25
     9d4:	81 30       	cpi	r24, 0x01	; 1
     9d6:	91 05       	cpc	r25, r1
     9d8:	71 f0       	breq	.+28     	; 0x9f6 <udc_process_setup+0x11a>
     9da:	38 f0       	brcs	.+14     	; 0x9ea <udc_process_setup+0x10e>
     9dc:	02 97       	sbiw	r24, 0x02	; 2
     9de:	09 f0       	breq	.+2      	; 0x9e2 <udc_process_setup+0x106>
     9e0:	8a c1       	rjmp	.+788    	; 0xcf6 <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
     9e2:	ea e0       	ldi	r30, 0x0A	; 10
     9e4:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     9e6:	31 e2       	ldi	r19, 0x21	; 33
     9e8:	09 c0       	rjmp	.+18     	; 0x9fc <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     9ea:	64 e0       	ldi	r22, 0x04	; 4
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	86 e3       	ldi	r24, 0x36	; 54
     9f0:	91 e2       	ldi	r25, 0x21	; 33
     9f2:	e6 d5       	rcall	.+3020   	; 0x15c0 <udd_set_setup_payload>
     9f4:	16 c0       	rjmp	.+44     	; 0xa22 <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     9f6:	ec e2       	ldi	r30, 0x2C	; 44
     9f8:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     9fa:	39 e0       	ldi	r19, 0x09	; 9
     9fc:	a8 ec       	ldi	r26, 0xC8	; 200
     9fe:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     a00:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     a02:	81 91       	ld	r24, Z+
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	8d 93       	st	X+, r24
     a08:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     a0a:	2f 5f       	subi	r18, 0xFF	; 255
     a0c:	23 17       	cp	r18, r19
     a0e:	c8 f3       	brcs	.-14     	; 0xa02 <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     a10:	63 2f       	mov	r22, r19
     a12:	66 0f       	add	r22, r22
     a14:	6e 5f       	subi	r22, 0xFE	; 254
     a16:	60 93 c6 20 	sts	0x20C6, r22	; 0x8020c6 <udc_string_desc>
		udd_set_setup_payload(
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	86 ec       	ldi	r24, 0xC6	; 198
     a1e:	90 e2       	ldi	r25, 0x20	; 32
     a20:	cf d5       	rcall	.+2974   	; 0x15c0 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     a22:	ed eb       	ldi	r30, 0xBD	; 189
     a24:	f2 e2       	ldi	r31, 0x22	; 34
     a26:	86 81       	ldd	r24, Z+6	; 0x06
     a28:	97 81       	ldd	r25, Z+7	; 0x07
     a2a:	22 85       	ldd	r18, Z+10	; 0x0a
     a2c:	33 85       	ldd	r19, Z+11	; 0x0b
     a2e:	82 17       	cp	r24, r18
     a30:	93 07       	cpc	r25, r19
     a32:	08 f0       	brcs	.+2      	; 0xa36 <udc_process_setup+0x15a>
     a34:	eb c1       	rjmp	.+982    	; 0xe0c <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     a36:	80 93 c7 22 	sts	0x22C7, r24	; 0x8022c7 <udd_g_ctrlreq+0xa>
     a3a:	90 93 c8 22 	sts	0x22C8, r25	; 0x8022c8 <udd_g_ctrlreq+0xb>
     a3e:	e6 c1       	rjmp	.+972    	; 0xe0c <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     a40:	21 30       	cpi	r18, 0x01	; 1
     a42:	31 05       	cpc	r19, r1
     a44:	09 f0       	breq	.+2      	; 0xa48 <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     a46:	8c c1       	rjmp	.+792    	; 0xd60 <udc_process_setup+0x484>
     a48:	61 e0       	ldi	r22, 0x01	; 1
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	86 e5       	ldi	r24, 0x56	; 86
     a4e:	91 e2       	ldi	r25, 0x21	; 33
     a50:	b7 d5       	rcall	.+2926   	; 0x15c0 <udd_set_setup_payload>
     a52:	dc c1       	rjmp	.+952    	; 0xe0c <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     a54:	81 30       	cpi	r24, 0x01	; 1
     a56:	e1 f5       	brne	.+120    	; 0xad0 <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     a58:	90 91 be 22 	lds	r25, 0x22BE	; 0x8022be <udd_g_ctrlreq+0x1>
     a5c:	9a 30       	cpi	r25, 0x0A	; 10
     a5e:	c1 f5       	brne	.+112    	; 0xad0 <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     a60:	21 30       	cpi	r18, 0x01	; 1
     a62:	31 05       	cpc	r19, r1
     a64:	09 f0       	breq	.+2      	; 0xa68 <udc_process_setup+0x18c>
     a66:	4c c1       	rjmp	.+664    	; 0xd00 <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     a68:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <udc_num_configuration>
     a6c:	88 23       	and	r24, r24
     a6e:	09 f4       	brne	.+2      	; 0xa72 <udc_process_setup+0x196>
     a70:	47 c1       	rjmp	.+654    	; 0xd00 <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     a72:	c0 91 c1 22 	lds	r28, 0x22C1	; 0x8022c1 <udd_g_ctrlreq+0x4>
     a76:	d0 91 c2 22 	lds	r29, 0x22C2	; 0x8022c2 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     a7a:	00 91 54 21 	lds	r16, 0x2154	; 0x802154 <udc_ptr_conf>
     a7e:	10 91 55 21 	lds	r17, 0x2155	; 0x802155 <udc_ptr_conf+0x1>
     a82:	d8 01       	movw	r26, r16
     a84:	ed 91       	ld	r30, X+
     a86:	fc 91       	ld	r31, X
     a88:	84 81       	ldd	r24, Z+4	; 0x04
     a8a:	c8 17       	cp	r28, r24
     a8c:	08 f0       	brcs	.+2      	; 0xa90 <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     a8e:	38 c1       	rjmp	.+624    	; 0xd00 <udc_process_setup+0x424>
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	8c 2f       	mov	r24, r28
     a94:	14 de       	rcall	.-984    	; 0x6be <udc_update_iface_desc>
     a96:	88 23       	and	r24, r24
     a98:	09 f4       	brne	.+2      	; 0xa9c <udc_process_setup+0x1c0>
     a9a:	2d c1       	rjmp	.+602    	; 0xcf6 <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     a9c:	ce 01       	movw	r24, r28
     a9e:	99 27       	eor	r25, r25
     aa0:	88 0f       	add	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	d8 01       	movw	r26, r16
     aa6:	12 96       	adiw	r26, 0x02	; 2
     aa8:	ed 91       	ld	r30, X+
     aaa:	fc 91       	ld	r31, X
     aac:	13 97       	sbiw	r26, 0x03	; 3
     aae:	e8 0f       	add	r30, r24
     ab0:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     ab2:	01 90       	ld	r0, Z+
     ab4:	f0 81       	ld	r31, Z
     ab6:	e0 2d       	mov	r30, r0
     ab8:	86 81       	ldd	r24, Z+6	; 0x06
     aba:	97 81       	ldd	r25, Z+7	; 0x07
     abc:	fc 01       	movw	r30, r24
     abe:	19 95       	eicall
     ac0:	80 93 58 21 	sts	0x2158, r24	; 0x802158 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	88 e5       	ldi	r24, 0x58	; 88
     aca:	91 e2       	ldi	r25, 0x21	; 33
     acc:	79 d5       	rcall	.+2802   	; 0x15c0 <udd_set_setup_payload>
     ace:	9e c1       	rjmp	.+828    	; 0xe0c <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	09 f0       	breq	.+2      	; 0xad6 <udc_process_setup+0x1fa>
     ad4:	10 c1       	rjmp	.+544    	; 0xcf6 <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     ad6:	80 91 be 22 	lds	r24, 0x22BE	; 0x8022be <udd_g_ctrlreq+0x1>
     ada:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     adc:	05 c1       	rjmp	.+522    	; 0xce8 <udc_process_setup+0x40c>
     ade:	22 30       	cpi	r18, 0x02	; 2
     ae0:	31 05       	cpc	r19, r1
     ae2:	09 f0       	breq	.+2      	; 0xae6 <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     ae4:	3d c1       	rjmp	.+634    	; 0xd60 <udc_process_setup+0x484>
     ae6:	80 91 c1 22 	lds	r24, 0x22C1	; 0x8022c1 <udd_g_ctrlreq+0x4>
     aea:	02 d6       	rcall	.+3076   	; 0x16f0 <udd_ep_is_halted>
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <udc_ep_status.4556>
     af2:	90 93 51 21 	sts	0x2151, r25	; 0x802151 <udc_ep_status.4556+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     af6:	62 e0       	ldi	r22, 0x02	; 2
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	80 e5       	ldi	r24, 0x50	; 80
     afc:	91 e2       	ldi	r25, 0x21	; 33
     afe:	60 d5       	rcall	.+2752   	; 0x15c0 <udd_set_setup_payload>
     b00:	85 c1       	rjmp	.+778    	; 0xe0c <udc_process_setup+0x530>
     b02:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     b04:	09 f0       	breq	.+2      	; 0xb08 <udc_process_setup+0x22c>
     b06:	9f c0       	rjmp	.+318    	; 0xc46 <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     b08:	90 91 be 22 	lds	r25, 0x22BE	; 0x8022be <udd_g_ctrlreq+0x1>
     b0c:	93 30       	cpi	r25, 0x03	; 3
     b0e:	91 f1       	breq	.+100    	; 0xb74 <udc_process_setup+0x298>
     b10:	18 f4       	brcc	.+6      	; 0xb18 <udc_process_setup+0x23c>
     b12:	91 30       	cpi	r25, 0x01	; 1
     b14:	a9 f0       	breq	.+42     	; 0xb40 <udc_process_setup+0x264>
     b16:	97 c0       	rjmp	.+302    	; 0xc46 <udc_process_setup+0x36a>
     b18:	95 30       	cpi	r25, 0x05	; 5
     b1a:	21 f0       	breq	.+8      	; 0xb24 <udc_process_setup+0x248>
     b1c:	99 30       	cpi	r25, 0x09	; 9
     b1e:	09 f4       	brne	.+2      	; 0xb22 <udc_process_setup+0x246>
     b20:	43 c0       	rjmp	.+134    	; 0xba8 <udc_process_setup+0x2cc>
     b22:	91 c0       	rjmp	.+290    	; 0xc46 <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     b24:	80 91 c3 22 	lds	r24, 0x22C3	; 0x8022c3 <udd_g_ctrlreq+0x6>
     b28:	90 91 c4 22 	lds	r25, 0x22C4	; 0x8022c4 <udd_g_ctrlreq+0x7>
     b2c:	89 2b       	or	r24, r25
     b2e:	09 f0       	breq	.+2      	; 0xb32 <udc_process_setup+0x256>
     b30:	17 c1       	rjmp	.+558    	; 0xd60 <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     b32:	8a e5       	ldi	r24, 0x5A	; 90
     b34:	93 e0       	ldi	r25, 0x03	; 3
     b36:	80 93 c9 22 	sts	0x22C9, r24	; 0x8022c9 <udd_g_ctrlreq+0xc>
     b3a:	90 93 ca 22 	sts	0x22CA, r25	; 0x8022ca <udd_g_ctrlreq+0xd>
     b3e:	66 c1       	rjmp	.+716    	; 0xe0c <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     b40:	80 91 c3 22 	lds	r24, 0x22C3	; 0x8022c3 <udd_g_ctrlreq+0x6>
     b44:	90 91 c4 22 	lds	r25, 0x22C4	; 0x8022c4 <udd_g_ctrlreq+0x7>
     b48:	89 2b       	or	r24, r25
     b4a:	09 f0       	breq	.+2      	; 0xb4e <udc_process_setup+0x272>
     b4c:	09 c1       	rjmp	.+530    	; 0xd60 <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     b4e:	80 91 bf 22 	lds	r24, 0x22BF	; 0x8022bf <udd_g_ctrlreq+0x2>
     b52:	90 91 c0 22 	lds	r25, 0x22C0	; 0x8022c0 <udd_g_ctrlreq+0x3>
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	09 f0       	breq	.+2      	; 0xb5c <udc_process_setup+0x280>
     b5a:	02 c1       	rjmp	.+516    	; 0xd60 <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     b5c:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <udc_device_status>
     b60:	90 91 5b 21 	lds	r25, 0x215B	; 0x80215b <udc_device_status+0x1>
     b64:	8d 7f       	andi	r24, 0xFD	; 253
     b66:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <udc_device_status>
     b6a:	90 93 5b 21 	sts	0x215B, r25	; 0x80215b <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
     b6e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <main_remotewakeup_disable>
     b72:	4c c1       	rjmp	.+664    	; 0xe0c <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     b74:	80 91 c3 22 	lds	r24, 0x22C3	; 0x8022c3 <udd_g_ctrlreq+0x6>
     b78:	90 91 c4 22 	lds	r25, 0x22C4	; 0x8022c4 <udd_g_ctrlreq+0x7>
     b7c:	89 2b       	or	r24, r25
     b7e:	09 f0       	breq	.+2      	; 0xb82 <udc_process_setup+0x2a6>
     b80:	ef c0       	rjmp	.+478    	; 0xd60 <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
     b82:	80 91 bf 22 	lds	r24, 0x22BF	; 0x8022bf <udd_g_ctrlreq+0x2>
     b86:	90 91 c0 22 	lds	r25, 0x22C0	; 0x8022c0 <udd_g_ctrlreq+0x3>
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	09 f0       	breq	.+2      	; 0xb90 <udc_process_setup+0x2b4>
     b8e:	ae c0       	rjmp	.+348    	; 0xcec <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
     b90:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <udc_device_status>
     b94:	90 91 5b 21 	lds	r25, 0x215B	; 0x80215b <udc_device_status+0x1>
     b98:	82 60       	ori	r24, 0x02	; 2
     b9a:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <udc_device_status>
     b9e:	90 93 5b 21 	sts	0x215B, r25	; 0x80215b <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
     ba2:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     ba6:	32 c1       	rjmp	.+612    	; 0xe0c <udc_process_setup+0x530>
     ba8:	80 91 c3 22 	lds	r24, 0x22C3	; 0x8022c3 <udd_g_ctrlreq+0x6>
     bac:	90 91 c4 22 	lds	r25, 0x22C4	; 0x8022c4 <udd_g_ctrlreq+0x7>
     bb0:	89 2b       	or	r24, r25
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     bb4:	d5 c0       	rjmp	.+426    	; 0xd60 <udc_process_setup+0x484>
     bb6:	01 d5       	rcall	.+2562   	; 0x15ba <udd_getaddress>
     bb8:	88 23       	and	r24, r24
     bba:	09 f4       	brne	.+2      	; 0xbbe <udc_process_setup+0x2e2>
     bbc:	9c c0       	rjmp	.+312    	; 0xcf6 <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     bbe:	20 91 bf 22 	lds	r18, 0x22BF	; 0x8022bf <udd_g_ctrlreq+0x2>
     bc2:	30 91 c0 22 	lds	r19, 0x22C0	; 0x8022c0 <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
     bc6:	33 27       	eor	r19, r19
     bc8:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     bcc:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     bd0:	81 89       	ldd	r24, Z+17	; 0x11
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	82 17       	cp	r24, r18
     bd6:	93 07       	cpc	r25, r19
     bd8:	08 f4       	brcc	.+2      	; 0xbdc <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     bda:	8d c0       	rjmp	.+282    	; 0xcf6 <udc_process_setup+0x41a>
     bdc:	25 de       	rcall	.-950    	; 0x828 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     bde:	80 91 bf 22 	lds	r24, 0x22BF	; 0x8022bf <udd_g_ctrlreq+0x2>
     be2:	90 91 c0 22 	lds	r25, 0x22C0	; 0x8022c0 <udd_g_ctrlreq+0x3>
     be6:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <udc_num_configuration>
	if (udc_num_configuration == 0) {
     bea:	88 23       	and	r24, r24
     bec:	09 f4       	brne	.+2      	; 0xbf0 <udc_process_setup+0x314>
     bee:	0e c1       	rjmp	.+540    	; 0xe0c <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     bf0:	99 27       	eor	r25, r25
     bf2:	81 50       	subi	r24, 0x01	; 1
     bf4:	90 4c       	sbci	r25, 0xC0	; 192
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	e0 91 02 20 	lds	r30, 0x2002	; 0x802002 <__DATA_REGION_ORIGIN__+0x2>
     c02:	f0 91 03 20 	lds	r31, 0x2003	; 0x802003 <__DATA_REGION_ORIGIN__+0x3>
     c06:	e8 0f       	add	r30, r24
     c08:	f9 1f       	adc	r31, r25
     c0a:	e0 93 54 21 	sts	0x2154, r30	; 0x802154 <udc_ptr_conf>
     c0e:	f0 93 55 21 	sts	0x2155, r31	; 0x802155 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c12:	01 90       	ld	r0, Z+
     c14:	f0 81       	ld	r31, Z
     c16:	e0 2d       	mov	r30, r0
     c18:	84 81       	ldd	r24, Z+4	; 0x04
     c1a:	88 23       	and	r24, r24
     c1c:	09 f4       	brne	.+2      	; 0xc20 <udc_process_setup+0x344>
     c1e:	f6 c0       	rjmp	.+492    	; 0xe0c <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     c20:	c0 e0       	ldi	r28, 0x00	; 0
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	8c 2f       	mov	r24, r28
     c26:	c7 dd       	rcall	.-1138   	; 0x7b6 <udc_iface_enable>
     c28:	88 23       	and	r24, r24
     c2a:	09 f4       	brne	.+2      	; 0xc2e <udc_process_setup+0x352>
     c2c:	64 c0       	rjmp	.+200    	; 0xcf6 <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     c2e:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c30:	e0 91 54 21 	lds	r30, 0x2154	; 0x802154 <udc_ptr_conf>
     c34:	f0 91 55 21 	lds	r31, 0x2155	; 0x802155 <udc_ptr_conf+0x1>
     c38:	01 90       	ld	r0, Z+
     c3a:	f0 81       	ld	r31, Z
     c3c:	e0 2d       	mov	r30, r0
     c3e:	84 81       	ldd	r24, Z+4	; 0x04
     c40:	c8 17       	cp	r28, r24
     c42:	78 f3       	brcs	.-34     	; 0xc22 <udc_process_setup+0x346>
     c44:	e3 c0       	rjmp	.+454    	; 0xe0c <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     c46:	81 30       	cpi	r24, 0x01	; 1
     c48:	e9 f4       	brne	.+58     	; 0xc84 <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     c4a:	90 91 be 22 	lds	r25, 0x22BE	; 0x8022be <udd_g_ctrlreq+0x1>
     c4e:	9b 30       	cpi	r25, 0x0B	; 11
     c50:	c9 f4       	brne	.+50     	; 0xc84 <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     c52:	80 91 c3 22 	lds	r24, 0x22C3	; 0x8022c3 <udd_g_ctrlreq+0x6>
     c56:	90 91 c4 22 	lds	r25, 0x22C4	; 0x8022c4 <udd_g_ctrlreq+0x7>
     c5a:	89 2b       	or	r24, r25
     c5c:	09 f0       	breq	.+2      	; 0xc60 <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     c5e:	50 c0       	rjmp	.+160    	; 0xd00 <udc_process_setup+0x424>
     c60:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <udc_num_configuration>
     c64:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     c66:	09 f4       	brne	.+2      	; 0xc6a <udc_process_setup+0x38e>
     c68:	4b c0       	rjmp	.+150    	; 0xd00 <udc_process_setup+0x424>
     c6a:	ed eb       	ldi	r30, 0xBD	; 189
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     c6c:	f2 e2       	ldi	r31, 0x22	; 34

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     c6e:	c4 81       	ldd	r28, Z+4	; 0x04
     c70:	d2 81       	ldd	r29, Z+2	; 0x02
     c72:	8c 2f       	mov	r24, r28
     c74:	5e dd       	rcall	.-1348   	; 0x732 <udc_iface_disable>
     c76:	88 23       	and	r24, r24
     c78:	09 f4       	brne	.+2      	; 0xc7c <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     c7a:	3d c0       	rjmp	.+122    	; 0xcf6 <udc_process_setup+0x41a>
     c7c:	6d 2f       	mov	r22, r29
     c7e:	8c 2f       	mov	r24, r28
     c80:	9a dd       	rcall	.-1228   	; 0x7b6 <udc_iface_enable>
     c82:	37 c0       	rjmp	.+110    	; 0xcf2 <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	b9 f5       	brne	.+110    	; 0xcf6 <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     c88:	80 91 be 22 	lds	r24, 0x22BE	; 0x8022be <udd_g_ctrlreq+0x1>
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	19 f0       	breq	.+6      	; 0xc96 <udc_process_setup+0x3ba>
     c90:	83 30       	cpi	r24, 0x03	; 3
     c92:	99 f0       	breq	.+38     	; 0xcba <udc_process_setup+0x3de>
     c94:	2d c0       	rjmp	.+90     	; 0xcf0 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     c96:	80 91 c3 22 	lds	r24, 0x22C3	; 0x8022c3 <udd_g_ctrlreq+0x6>
     c9a:	90 91 c4 22 	lds	r25, 0x22C4	; 0x8022c4 <udd_g_ctrlreq+0x7>
     c9e:	89 2b       	or	r24, r25
     ca0:	09 f0       	breq	.+2      	; 0xca4 <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     ca2:	5e c0       	rjmp	.+188    	; 0xd60 <udc_process_setup+0x484>
     ca4:	80 91 bf 22 	lds	r24, 0x22BF	; 0x8022bf <udd_g_ctrlreq+0x2>
     ca8:	90 91 c0 22 	lds	r25, 0x22C0	; 0x8022c0 <udd_g_ctrlreq+0x3>
     cac:	89 2b       	or	r24, r25
     cae:	09 f0       	breq	.+2      	; 0xcb2 <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     cb0:	57 c0       	rjmp	.+174    	; 0xd60 <udc_process_setup+0x484>
     cb2:	80 91 c1 22 	lds	r24, 0x22C1	; 0x8022c1 <udd_g_ctrlreq+0x4>
     cb6:	37 d5       	rcall	.+2670   	; 0x1726 <udd_ep_clear_halt>
     cb8:	1c c0       	rjmp	.+56     	; 0xcf2 <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     cba:	80 91 c3 22 	lds	r24, 0x22C3	; 0x8022c3 <udd_g_ctrlreq+0x6>
     cbe:	90 91 c4 22 	lds	r25, 0x22C4	; 0x8022c4 <udd_g_ctrlreq+0x7>
     cc2:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <udc_process_setup+0x3ec>
     cc6:	4c c0       	rjmp	.+152    	; 0xd60 <udc_process_setup+0x484>
     cc8:	80 91 bf 22 	lds	r24, 0x22BF	; 0x8022bf <udd_g_ctrlreq+0x2>
     ccc:	90 91 c0 22 	lds	r25, 0x22C0	; 0x8022c0 <udd_g_ctrlreq+0x3>
     cd0:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <udc_process_setup+0x3fa>
     cd4:	45 c0       	rjmp	.+138    	; 0xd60 <udc_process_setup+0x484>
     cd6:	cd eb       	ldi	r28, 0xBD	; 189
     cd8:	d2 e2       	ldi	r29, 0x22	; 34
     cda:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     cdc:	66 d5       	rcall	.+2764   	; 0x17aa <udd_ep_abort>
     cde:	8c 81       	ldd	r24, Y+4	; 0x04
     ce0:	cf d5       	rcall	.+2974   	; 0x1880 <udd_ep_set_halt>
     ce2:	07 c0       	rjmp	.+14     	; 0xcf2 <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	05 c0       	rjmp	.+10     	; 0xcf2 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	03 c0       	rjmp	.+6      	; 0xcf2 <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
     cf0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     cf2:	81 11       	cpse	r24, r1
     cf4:	8c c0       	rjmp	.+280    	; 0xe0e <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     cf6:	80 91 bd 22 	lds	r24, 0x22BD	; 0x8022bd <udd_g_ctrlreq>
     cfa:	8f 71       	andi	r24, 0x1F	; 31
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	81 f5       	brne	.+96     	; 0xd60 <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     d00:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <udc_num_configuration>
     d04:	88 23       	and	r24, r24
     d06:	09 f4       	brne	.+2      	; 0xd0a <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     d08:	71 c0       	rjmp	.+226    	; 0xdec <udc_process_setup+0x510>
     d0a:	00 91 c1 22 	lds	r16, 0x22C1	; 0x8022c1 <udd_g_ctrlreq+0x4>
     d0e:	10 91 c2 22 	lds	r17, 0x22C2	; 0x8022c2 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     d12:	c0 91 54 21 	lds	r28, 0x2154	; 0x802154 <udc_ptr_conf>
     d16:	d0 91 55 21 	lds	r29, 0x2155	; 0x802155 <udc_ptr_conf+0x1>
     d1a:	e8 81       	ld	r30, Y
     d1c:	f9 81       	ldd	r31, Y+1	; 0x01
     d1e:	84 81       	ldd	r24, Z+4	; 0x04
     d20:	08 17       	cp	r16, r24
     d22:	08 f0       	brcs	.+2      	; 0xd26 <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     d24:	65 c0       	rjmp	.+202    	; 0xdf0 <udc_process_setup+0x514>
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	80 2f       	mov	r24, r16
     d2a:	c9 dc       	rcall	.-1646   	; 0x6be <udc_update_iface_desc>
     d2c:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     d2e:	c1 f0       	breq	.+48     	; 0xd60 <udc_process_setup+0x484>
     d30:	f8 01       	movw	r30, r16
     d32:	ff 27       	eor	r31, r31
     d34:	cf 01       	movw	r24, r30
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	ea 81       	ldd	r30, Y+2	; 0x02
     d3c:	fb 81       	ldd	r31, Y+3	; 0x03
     d3e:	e8 0f       	add	r30, r24
     d40:	f9 1f       	adc	r31, r25
     d42:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     d44:	d1 81       	ldd	r29, Z+1	; 0x01
     d46:	ee 81       	ldd	r30, Y+6	; 0x06
     d48:	ff 81       	ldd	r31, Y+7	; 0x07
     d4a:	19 95       	eicall
     d4c:	68 2f       	mov	r22, r24
     d4e:	80 2f       	mov	r24, r16
     d50:	b6 dc       	rcall	.-1684   	; 0x6be <udc_update_iface_desc>
     d52:	88 23       	and	r24, r24
     d54:	29 f0       	breq	.+10     	; 0xd60 <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     d56:	ec 81       	ldd	r30, Y+4	; 0x04
     d58:	fd 81       	ldd	r31, Y+5	; 0x05
     d5a:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     d5c:	81 11       	cpse	r24, r1
     d5e:	57 c0       	rjmp	.+174    	; 0xe0e <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     d60:	80 91 bd 22 	lds	r24, 0x22BD	; 0x8022bd <udd_g_ctrlreq>
     d64:	8f 71       	andi	r24, 0x1F	; 31
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	09 f0       	breq	.+2      	; 0xd6c <udc_process_setup+0x490>
     d6a:	44 c0       	rjmp	.+136    	; 0xdf4 <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     d6c:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <udc_num_configuration>
     d70:	88 23       	and	r24, r24
     d72:	b1 f1       	breq	.+108    	; 0xde0 <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d74:	a0 91 54 21 	lds	r26, 0x2154	; 0x802154 <udc_ptr_conf>
     d78:	b0 91 55 21 	lds	r27, 0x2155	; 0x802155 <udc_ptr_conf+0x1>
     d7c:	ed 91       	ld	r30, X+
     d7e:	fc 91       	ld	r31, X
     d80:	11 97       	sbiw	r26, 0x01	; 1
     d82:	84 81       	ldd	r24, Z+4	; 0x04
     d84:	88 23       	and	r24, r24
     d86:	71 f1       	breq	.+92     	; 0xde4 <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     d88:	c0 e0       	ldi	r28, 0x00	; 0
     d8a:	ec 2f       	mov	r30, r28
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	ee 0f       	add	r30, r30
     d90:	ff 1f       	adc	r31, r31
     d92:	12 96       	adiw	r26, 0x02	; 2
     d94:	8d 91       	ld	r24, X+
     d96:	9c 91       	ld	r25, X
     d98:	13 97       	sbiw	r26, 0x03	; 3
     d9a:	e8 0f       	add	r30, r24
     d9c:	f9 1f       	adc	r31, r25
     d9e:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     da0:	11 81       	ldd	r17, Z+1	; 0x01
     da2:	d8 01       	movw	r26, r16
     da4:	16 96       	adiw	r26, 0x06	; 6
     da6:	ed 91       	ld	r30, X+
     da8:	fc 91       	ld	r31, X
     daa:	17 97       	sbiw	r26, 0x07	; 7
     dac:	19 95       	eicall
     dae:	68 2f       	mov	r22, r24
     db0:	8c 2f       	mov	r24, r28
     db2:	85 dc       	rcall	.-1782   	; 0x6be <udc_update_iface_desc>
     db4:	88 23       	and	r24, r24
     db6:	59 f1       	breq	.+86     	; 0xe0e <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     db8:	d8 01       	movw	r26, r16
     dba:	14 96       	adiw	r26, 0x04	; 4
     dbc:	ed 91       	ld	r30, X+
     dbe:	fc 91       	ld	r31, X
     dc0:	15 97       	sbiw	r26, 0x05	; 5
     dc2:	19 95       	eicall
     dc4:	81 11       	cpse	r24, r1
     dc6:	23 c0       	rjmp	.+70     	; 0xe0e <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     dc8:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     dca:	a0 91 54 21 	lds	r26, 0x2154	; 0x802154 <udc_ptr_conf>
     dce:	b0 91 55 21 	lds	r27, 0x2155	; 0x802155 <udc_ptr_conf+0x1>
     dd2:	ed 91       	ld	r30, X+
     dd4:	fc 91       	ld	r31, X
     dd6:	11 97       	sbiw	r26, 0x01	; 1
     dd8:	94 81       	ldd	r25, Z+4	; 0x04
     dda:	c9 17       	cp	r28, r25
     ddc:	b0 f2       	brcs	.-84     	; 0xd8a <udc_process_setup+0x4ae>
     dde:	17 c0       	rjmp	.+46     	; 0xe0e <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	15 c0       	rjmp	.+42     	; 0xe0e <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	13 c0       	rjmp	.+38     	; 0xe0e <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	11 c0       	rjmp	.+34     	; 0xe0e <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	0f c0       	rjmp	.+30     	; 0xe0e <udc_process_setup+0x532>
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	0d c0       	rjmp	.+26     	; 0xe0e <udc_process_setup+0x532>
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	0b c0       	rjmp	.+22     	; 0xe0e <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     df8:	98 2f       	mov	r25, r24
     dfa:	90 76       	andi	r25, 0x60	; 96
     dfc:	09 f0       	breq	.+2      	; 0xe00 <udc_process_setup+0x524>
     dfe:	7b cf       	rjmp	.-266    	; 0xcf6 <udc_process_setup+0x41a>
     e00:	80 ce       	rjmp	.-768    	; 0xb02 <udc_process_setup+0x226>
     e02:	98 2f       	mov	r25, r24
     e04:	90 76       	andi	r25, 0x60	; 96
     e06:	09 f0       	breq	.+2      	; 0xe0a <udc_process_setup+0x52e>
     e08:	76 cf       	rjmp	.-276    	; 0xcf6 <udc_process_setup+0x41a>
     e0a:	81 cd       	rjmp	.-1278   	; 0x90e <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	08 95       	ret

00000e18 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     e18:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     e1c:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     e1e:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     e20:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     e24:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     e26:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     e2a:	08 95       	ret

00000e2c <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     e2c:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     e2e:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     e30:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     e32:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     e34:	60 83       	st	Z, r22
	ret                             // Return to caller
     e36:	08 95       	ret

00000e38 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	1f 92       	push	r1
     e3e:	1f 92       	push	r1
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	81 11       	cpse	r24, r1
     e46:	26 c0       	rjmp	.+76     	; 0xe94 <udd_sleep_mode+0x5c>
     e48:	90 91 b4 22 	lds	r25, 0x22B4	; 0x8022b4 <udd_b_idle>
     e4c:	99 23       	and	r25, r25
     e4e:	f9 f0       	breq	.+62     	; 0xe8e <udd_sleep_mode+0x56>
     e50:	90 91 b8 22 	lds	r25, 0x22B8	; 0x8022b8 <sleepmgr_locks+0x1>
     e54:	91 11       	cpse	r25, r1
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <udd_sleep_mode+0x22>
     e58:	ff cf       	rjmp	.-2      	; 0xe58 <udd_sleep_mode+0x20>
     e5a:	9f b7       	in	r25, 0x3f	; 63
     e5c:	9a 83       	std	Y+2, r25	; 0x02
     e5e:	f8 94       	cli
     e60:	2a 81       	ldd	r18, Y+2	; 0x02
     e62:	e7 eb       	ldi	r30, 0xB7	; 183
     e64:	f2 e2       	ldi	r31, 0x22	; 34
     e66:	91 81       	ldd	r25, Z+1	; 0x01
     e68:	91 50       	subi	r25, 0x01	; 1
     e6a:	91 83       	std	Z+1, r25	; 0x01
     e6c:	2f bf       	out	0x3f, r18	; 63
     e6e:	0f c0       	rjmp	.+30     	; 0xe8e <udd_sleep_mode+0x56>
     e70:	90 91 b8 22 	lds	r25, 0x22B8	; 0x8022b8 <sleepmgr_locks+0x1>
     e74:	9f 3f       	cpi	r25, 0xFF	; 255
     e76:	09 f4       	brne	.+2      	; 0xe7a <udd_sleep_mode+0x42>
     e78:	ff cf       	rjmp	.-2      	; 0xe78 <udd_sleep_mode+0x40>
     e7a:	9f b7       	in	r25, 0x3f	; 63
     e7c:	99 83       	std	Y+1, r25	; 0x01
     e7e:	f8 94       	cli
     e80:	29 81       	ldd	r18, Y+1	; 0x01
     e82:	e7 eb       	ldi	r30, 0xB7	; 183
     e84:	f2 e2       	ldi	r31, 0x22	; 34
     e86:	91 81       	ldd	r25, Z+1	; 0x01
     e88:	9f 5f       	subi	r25, 0xFF	; 255
     e8a:	91 83       	std	Z+1, r25	; 0x01
     e8c:	2f bf       	out	0x3f, r18	; 63
     e8e:	80 93 b4 22 	sts	0x22B4, r24	; 0x8022b4 <udd_b_idle>
     e92:	05 c0       	rjmp	.+10     	; 0xe9e <udd_sleep_mode+0x66>
     e94:	90 91 b4 22 	lds	r25, 0x22B4	; 0x8022b4 <udd_b_idle>
     e98:	99 23       	and	r25, r25
     e9a:	51 f3       	breq	.-44     	; 0xe70 <udd_sleep_mode+0x38>
     e9c:	f8 cf       	rjmp	.-16     	; 0xe8e <udd_sleep_mode+0x56>
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	08 95       	ret

00000ea8 <udd_ctrl_init>:
     ea8:	0f 93       	push	r16
     eaa:	e8 ec       	ldi	r30, 0xC8	; 200
     eac:	f4 e0       	ldi	r31, 0x04	; 4
     eae:	80 81       	ld	r24, Z
     eb0:	8f 7d       	andi	r24, 0xDF	; 223
     eb2:	80 83       	st	Z, r24
     eb4:	80 81       	ld	r24, Z
     eb6:	8f 7d       	andi	r24, 0xDF	; 223
     eb8:	80 83       	st	Z, r24
     eba:	e8 e7       	ldi	r30, 0x78	; 120
     ebc:	f2 e2       	ldi	r31, 0x22	; 34
     ebe:	02 e0       	ldi	r16, 0x02	; 2
     ec0:	05 93       	las	Z, r16
     ec2:	10 92 7a 22 	sts	0x227A, r1	; 0x80227a <udd_sram+0x1a>
     ec6:	10 92 7b 22 	sts	0x227B, r1	; 0x80227b <udd_sram+0x1b>
     eca:	00 e2       	ldi	r16, 0x20	; 32
     ecc:	06 93       	lac	Z, r16
     ece:	00 e4       	ldi	r16, 0x40	; 64
     ed0:	06 93       	lac	Z, r16
     ed2:	e0 e7       	ldi	r30, 0x70	; 112
     ed4:	f2 e2       	ldi	r31, 0x22	; 34
     ed6:	00 e4       	ldi	r16, 0x40	; 64
     ed8:	06 93       	lac	Z, r16
     eda:	ed eb       	ldi	r30, 0xBD	; 189
     edc:	f2 e2       	ldi	r31, 0x22	; 34
     ede:	14 86       	std	Z+12, r1	; 0x0c
     ee0:	15 86       	std	Z+13, r1	; 0x0d
     ee2:	16 86       	std	Z+14, r1	; 0x0e
     ee4:	17 86       	std	Z+15, r1	; 0x0f
     ee6:	12 86       	std	Z+10, r1	; 0x0a
     ee8:	13 86       	std	Z+11, r1	; 0x0b
     eea:	10 92 5f 22 	sts	0x225F, r1	; 0x80225f <udd_ep_control_state>
     eee:	0f 91       	pop	r16
     ef0:	08 95       	ret

00000ef2 <udd_ctrl_stall_data>:
     ef2:	0f 93       	push	r16
     ef4:	85 e0       	ldi	r24, 0x05	; 5
     ef6:	80 93 5f 22 	sts	0x225F, r24	; 0x80225f <udd_ep_control_state>
     efa:	e9 e7       	ldi	r30, 0x79	; 121
     efc:	f2 e2       	ldi	r31, 0x22	; 34
     efe:	04 e0       	ldi	r16, 0x04	; 4
     f00:	05 93       	las	Z, r16
     f02:	e1 e7       	ldi	r30, 0x71	; 113
     f04:	f2 e2       	ldi	r31, 0x22	; 34
     f06:	04 e0       	ldi	r16, 0x04	; 4
     f08:	05 93       	las	Z, r16
     f0a:	0f 91       	pop	r16
     f0c:	08 95       	ret

00000f0e <udd_ctrl_send_zlp_in>:
     f0e:	0f 93       	push	r16
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	80 93 5f 22 	sts	0x225F, r24	; 0x80225f <udd_ep_control_state>
     f16:	10 92 7a 22 	sts	0x227A, r1	; 0x80227a <udd_sram+0x1a>
     f1a:	10 92 7b 22 	sts	0x227B, r1	; 0x80227b <udd_sram+0x1b>
     f1e:	e8 e7       	ldi	r30, 0x78	; 120
     f20:	f2 e2       	ldi	r31, 0x22	; 34
     f22:	02 e0       	ldi	r16, 0x02	; 2
     f24:	06 93       	lac	Z, r16
     f26:	0f 91       	pop	r16
     f28:	08 95       	ret

00000f2a <udd_ctrl_endofrequest>:
     f2a:	e0 91 c9 22 	lds	r30, 0x22C9	; 0x8022c9 <udd_g_ctrlreq+0xc>
     f2e:	f0 91 ca 22 	lds	r31, 0x22CA	; 0x8022ca <udd_g_ctrlreq+0xd>
     f32:	30 97       	sbiw	r30, 0x00	; 0
     f34:	09 f0       	breq	.+2      	; 0xf38 <udd_ctrl_endofrequest+0xe>
     f36:	19 95       	eicall
     f38:	08 95       	ret

00000f3a <udd_ctrl_in_sent>:
     f3a:	0f 93       	push	r16
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	80 91 5f 22 	lds	r24, 0x225F	; 0x80225f <udd_ep_control_state>
     f44:	83 30       	cpi	r24, 0x03	; 3
     f46:	19 f4       	brne	.+6      	; 0xf4e <udd_ctrl_in_sent+0x14>
     f48:	f0 df       	rcall	.-32     	; 0xf2a <udd_ctrl_endofrequest>
     f4a:	ae df       	rcall	.-164    	; 0xea8 <udd_ctrl_init>
     f4c:	5e c0       	rjmp	.+188    	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
     f4e:	80 91 5b 22 	lds	r24, 0x225B	; 0x80225b <udd_ctrl_payload_nb_trans>
     f52:	90 91 5c 22 	lds	r25, 0x225C	; 0x80225c <udd_ctrl_payload_nb_trans+0x1>
     f56:	c0 91 c7 22 	lds	r28, 0x22C7	; 0x8022c7 <udd_g_ctrlreq+0xa>
     f5a:	d0 91 c8 22 	lds	r29, 0x22C8	; 0x8022c8 <udd_g_ctrlreq+0xb>
     f5e:	c8 1b       	sub	r28, r24
     f60:	d9 0b       	sbc	r29, r25
     f62:	71 f5       	brne	.+92     	; 0xfc0 <udd_ctrl_in_sent+0x86>
     f64:	20 91 5d 22 	lds	r18, 0x225D	; 0x80225d <udd_ctrl_prev_payload_nb_trans>
     f68:	30 91 5e 22 	lds	r19, 0x225E	; 0x80225e <udd_ctrl_prev_payload_nb_trans+0x1>
     f6c:	82 0f       	add	r24, r18
     f6e:	93 1f       	adc	r25, r19
     f70:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <udd_ctrl_prev_payload_nb_trans>
     f74:	90 93 5e 22 	sts	0x225E, r25	; 0x80225e <udd_ctrl_prev_payload_nb_trans+0x1>
     f78:	20 91 c3 22 	lds	r18, 0x22C3	; 0x8022c3 <udd_g_ctrlreq+0x6>
     f7c:	30 91 c4 22 	lds	r19, 0x22C4	; 0x8022c4 <udd_g_ctrlreq+0x7>
     f80:	82 17       	cp	r24, r18
     f82:	93 07       	cpc	r25, r19
     f84:	21 f0       	breq	.+8      	; 0xf8e <udd_ctrl_in_sent+0x54>
     f86:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <b_shortpacket.5272>
     f8a:	88 23       	and	r24, r24
     f8c:	41 f0       	breq	.+16     	; 0xf9e <udd_ctrl_in_sent+0x64>
     f8e:	84 e0       	ldi	r24, 0x04	; 4
     f90:	80 93 5f 22 	sts	0x225F, r24	; 0x80225f <udd_ep_control_state>
     f94:	e0 e7       	ldi	r30, 0x70	; 112
     f96:	f2 e2       	ldi	r31, 0x22	; 34
     f98:	02 e0       	ldi	r16, 0x02	; 2
     f9a:	06 93       	lac	Z, r16
     f9c:	36 c0       	rjmp	.+108    	; 0x100a <__EEPROM_REGION_LENGTH__+0xa>
     f9e:	e0 91 cb 22 	lds	r30, 0x22CB	; 0x8022cb <udd_g_ctrlreq+0xe>
     fa2:	f0 91 cc 22 	lds	r31, 0x22CC	; 0x8022cc <udd_g_ctrlreq+0xf>
     fa6:	30 97       	sbiw	r30, 0x00	; 0
     fa8:	99 f0       	breq	.+38     	; 0xfd0 <udd_ctrl_in_sent+0x96>
     faa:	19 95       	eicall
     fac:	88 23       	and	r24, r24
     fae:	81 f0       	breq	.+32     	; 0xfd0 <udd_ctrl_in_sent+0x96>
     fb0:	10 92 5b 22 	sts	0x225B, r1	; 0x80225b <udd_ctrl_payload_nb_trans>
     fb4:	10 92 5c 22 	sts	0x225C, r1	; 0x80225c <udd_ctrl_payload_nb_trans+0x1>
     fb8:	c0 91 c7 22 	lds	r28, 0x22C7	; 0x8022c7 <udd_g_ctrlreq+0xa>
     fbc:	d0 91 c8 22 	lds	r29, 0x22C8	; 0x8022c8 <udd_g_ctrlreq+0xb>
     fc0:	c8 30       	cpi	r28, 0x08	; 8
     fc2:	d1 05       	cpc	r29, r1
     fc4:	28 f0       	brcs	.+10     	; 0xfd0 <udd_ctrl_in_sent+0x96>
     fc6:	10 92 5c 21 	sts	0x215C, r1	; 0x80215c <b_shortpacket.5272>
     fca:	c8 e0       	ldi	r28, 0x08	; 8
     fcc:	d0 e0       	ldi	r29, 0x00	; 0
     fce:	03 c0       	rjmp	.+6      	; 0xfd6 <udd_ctrl_in_sent+0x9c>
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <b_shortpacket.5272>
     fd6:	e0 e6       	ldi	r30, 0x60	; 96
     fd8:	f2 e2       	ldi	r31, 0x22	; 34
     fda:	c2 8f       	std	Z+26, r28	; 0x1a
     fdc:	d3 8f       	std	Z+27, r29	; 0x1b
     fde:	80 91 5b 22 	lds	r24, 0x225B	; 0x80225b <udd_ctrl_payload_nb_trans>
     fe2:	90 91 5c 22 	lds	r25, 0x225C	; 0x80225c <udd_ctrl_payload_nb_trans+0x1>
     fe6:	20 91 c5 22 	lds	r18, 0x22C5	; 0x8022c5 <udd_g_ctrlreq+0x8>
     fea:	30 91 c6 22 	lds	r19, 0x22C6	; 0x8022c6 <udd_g_ctrlreq+0x9>
     fee:	28 0f       	add	r18, r24
     ff0:	39 1f       	adc	r19, r25
     ff2:	24 8f       	std	Z+28, r18	; 0x1c
     ff4:	35 8f       	std	Z+29, r19	; 0x1d
     ff6:	c8 0f       	add	r28, r24
     ff8:	d9 1f       	adc	r29, r25
     ffa:	c0 93 5b 22 	sts	0x225B, r28	; 0x80225b <udd_ctrl_payload_nb_trans>
     ffe:	d0 93 5c 22 	sts	0x225C, r29	; 0x80225c <udd_ctrl_payload_nb_trans+0x1>
    1002:	e8 e7       	ldi	r30, 0x78	; 120
    1004:	f2 e2       	ldi	r31, 0x22	; 34
    1006:	02 e0       	ldi	r16, 0x02	; 2
    1008:	06 93       	lac	Z, r16
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	0f 91       	pop	r16
    1010:	08 95       	ret

00001012 <udd_ep_get_size>:
    1012:	fc 01       	movw	r30, r24
    1014:	81 81       	ldd	r24, Z+1	; 0x01
    1016:	e8 2f       	mov	r30, r24
    1018:	e7 70       	andi	r30, 0x07	; 7
    101a:	8e 2f       	mov	r24, r30
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	fc 01       	movw	r30, r24
    1020:	31 97       	sbiw	r30, 0x01	; 1
    1022:	e7 30       	cpi	r30, 0x07	; 7
    1024:	f1 05       	cpc	r31, r1
    1026:	d0 f4       	brcc	.+52     	; 0x105c <udd_ep_get_size+0x4a>
    1028:	88 27       	eor	r24, r24
    102a:	e2 50       	subi	r30, 0x02	; 2
    102c:	ff 4f       	sbci	r31, 0xFF	; 255
    102e:	8f 4f       	sbci	r24, 0xFF	; 255
    1030:	31 c6       	rjmp	.+3170   	; 0x1c94 <__tablejump2__>
    1032:	80 e1       	ldi	r24, 0x10	; 16
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	08 95       	ret
    1038:	80 e2       	ldi	r24, 0x20	; 32
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	08 95       	ret
    103e:	80 e4       	ldi	r24, 0x40	; 64
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	08 95       	ret
    1044:	80 e8       	ldi	r24, 0x80	; 128
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	08 95       	ret
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	08 95       	ret
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	92 e0       	ldi	r25, 0x02	; 2
    1054:	08 95       	ret
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	93 e0       	ldi	r25, 0x03	; 3
    105a:	08 95       	ret
    105c:	88 e0       	ldi	r24, 0x08	; 8
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	08 95       	ret

00001062 <udd_ep_get_job>:
    1062:	28 2f       	mov	r18, r24
    1064:	2f 70       	andi	r18, 0x0F	; 15
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	22 0f       	add	r18, r18
    106a:	33 1f       	adc	r19, r19
    106c:	08 2e       	mov	r0, r24
    106e:	00 0c       	add	r0, r0
    1070:	99 0b       	sbc	r25, r25
    1072:	88 27       	eor	r24, r24
    1074:	99 0f       	add	r25, r25
    1076:	88 1f       	adc	r24, r24
    1078:	99 27       	eor	r25, r25
    107a:	82 0f       	add	r24, r18
    107c:	93 1f       	adc	r25, r19
    107e:	02 97       	sbiw	r24, 0x02	; 2
    1080:	9c 01       	movw	r18, r24
    1082:	22 0f       	add	r18, r18
    1084:	33 1f       	adc	r19, r19
    1086:	22 0f       	add	r18, r18
    1088:	33 1f       	adc	r19, r19
    108a:	22 0f       	add	r18, r18
    108c:	33 1f       	adc	r19, r19
    108e:	82 0f       	add	r24, r18
    1090:	93 1f       	adc	r25, r19
    1092:	83 5e       	subi	r24, 0xE3	; 227
    1094:	9d 4d       	sbci	r25, 0xDD	; 221
    1096:	08 95       	ret

00001098 <udd_ctrl_interrupt_tc_setup>:
    1098:	0f 93       	push	r16
    109a:	cf 93       	push	r28
    109c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    10a0:	80 ff       	sbrs	r24, 0
    10a2:	64 c0       	rjmp	.+200    	; 0x116c <udd_ctrl_interrupt_tc_setup+0xd4>
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    10aa:	e0 e7       	ldi	r30, 0x70	; 112
    10ac:	f2 e2       	ldi	r31, 0x22	; 34
    10ae:	00 e8       	ldi	r16, 0x80	; 128
    10b0:	06 93       	lac	Z, r16
    10b2:	e8 e7       	ldi	r30, 0x78	; 120
    10b4:	f2 e2       	ldi	r31, 0x22	; 34
    10b6:	00 e8       	ldi	r16, 0x80	; 128
    10b8:	06 93       	lac	Z, r16
    10ba:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    10be:	e0 e7       	ldi	r30, 0x70	; 112
    10c0:	f2 e2       	ldi	r31, 0x22	; 34
    10c2:	00 e1       	ldi	r16, 0x10	; 16
    10c4:	06 93       	lac	Z, r16
    10c6:	80 91 5f 22 	lds	r24, 0x225F	; 0x80225f <udd_ep_control_state>
    10ca:	88 23       	and	r24, r24
    10cc:	29 f0       	breq	.+10     	; 0x10d8 <udd_ctrl_interrupt_tc_setup+0x40>
    10ce:	83 50       	subi	r24, 0x03	; 3
    10d0:	82 30       	cpi	r24, 0x02	; 2
    10d2:	08 f4       	brcc	.+2      	; 0x10d6 <udd_ctrl_interrupt_tc_setup+0x3e>
    10d4:	2a df       	rcall	.-428    	; 0xf2a <udd_ctrl_endofrequest>
    10d6:	e8 de       	rcall	.-560    	; 0xea8 <udd_ctrl_init>
    10d8:	80 91 72 22 	lds	r24, 0x2272	; 0x802272 <udd_sram+0x12>
    10dc:	90 91 73 22 	lds	r25, 0x2273	; 0x802273 <udd_sram+0x13>
    10e0:	08 97       	sbiw	r24, 0x08	; 8
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <udd_ctrl_interrupt_tc_setup+0x4e>
    10e4:	45 c0       	rjmp	.+138    	; 0x1170 <udd_ctrl_interrupt_tc_setup+0xd8>
    10e6:	88 e0       	ldi	r24, 0x08	; 8
    10e8:	e3 e5       	ldi	r30, 0x53	; 83
    10ea:	f2 e2       	ldi	r31, 0x22	; 34
    10ec:	ad eb       	ldi	r26, 0xBD	; 189
    10ee:	b2 e2       	ldi	r27, 0x22	; 34
    10f0:	01 90       	ld	r0, Z+
    10f2:	0d 92       	st	X+, r0
    10f4:	8a 95       	dec	r24
    10f6:	e1 f7       	brne	.-8      	; 0x10f0 <udd_ctrl_interrupt_tc_setup+0x58>
    10f8:	e8 ec       	ldi	r30, 0xC8	; 200
    10fa:	f4 e0       	ldi	r31, 0x04	; 4
    10fc:	80 81       	ld	r24, Z
    10fe:	80 62       	ori	r24, 0x20	; 32
    1100:	80 83       	st	Z, r24
    1102:	80 81       	ld	r24, Z
    1104:	80 62       	ori	r24, 0x20	; 32
    1106:	80 83       	st	Z, r24
    1108:	e9 db       	rcall	.-2094   	; 0x8dc <udc_process_setup>
    110a:	c8 2f       	mov	r28, r24
    110c:	81 11       	cpse	r24, r1
    110e:	03 c0       	rjmp	.+6      	; 0x1116 <udd_ctrl_interrupt_tc_setup+0x7e>
    1110:	f0 de       	rcall	.-544    	; 0xef2 <udd_ctrl_stall_data>
    1112:	c1 e0       	ldi	r28, 0x01	; 1
    1114:	2e c0       	rjmp	.+92     	; 0x1172 <udd_ctrl_interrupt_tc_setup+0xda>
    1116:	80 91 bd 22 	lds	r24, 0x22BD	; 0x8022bd <udd_g_ctrlreq>
    111a:	88 23       	and	r24, r24
    111c:	6c f4       	brge	.+26     	; 0x1138 <udd_ctrl_interrupt_tc_setup+0xa0>
    111e:	10 92 5d 22 	sts	0x225D, r1	; 0x80225d <udd_ctrl_prev_payload_nb_trans>
    1122:	10 92 5e 22 	sts	0x225E, r1	; 0x80225e <udd_ctrl_prev_payload_nb_trans+0x1>
    1126:	10 92 5b 22 	sts	0x225B, r1	; 0x80225b <udd_ctrl_payload_nb_trans>
    112a:	10 92 5c 22 	sts	0x225C, r1	; 0x80225c <udd_ctrl_payload_nb_trans+0x1>
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	80 93 5f 22 	sts	0x225F, r24	; 0x80225f <udd_ep_control_state>
    1134:	02 df       	rcall	.-508    	; 0xf3a <udd_ctrl_in_sent>
    1136:	1d c0       	rjmp	.+58     	; 0x1172 <udd_ctrl_interrupt_tc_setup+0xda>
    1138:	80 91 c3 22 	lds	r24, 0x22C3	; 0x8022c3 <udd_g_ctrlreq+0x6>
    113c:	90 91 c4 22 	lds	r25, 0x22C4	; 0x8022c4 <udd_g_ctrlreq+0x7>
    1140:	89 2b       	or	r24, r25
    1142:	11 f4       	brne	.+4      	; 0x1148 <udd_ctrl_interrupt_tc_setup+0xb0>
    1144:	e4 de       	rcall	.-568    	; 0xf0e <udd_ctrl_send_zlp_in>
    1146:	15 c0       	rjmp	.+42     	; 0x1172 <udd_ctrl_interrupt_tc_setup+0xda>
    1148:	10 92 5d 22 	sts	0x225D, r1	; 0x80225d <udd_ctrl_prev_payload_nb_trans>
    114c:	10 92 5e 22 	sts	0x225E, r1	; 0x80225e <udd_ctrl_prev_payload_nb_trans+0x1>
    1150:	10 92 5b 22 	sts	0x225B, r1	; 0x80225b <udd_ctrl_payload_nb_trans>
    1154:	10 92 5c 22 	sts	0x225C, r1	; 0x80225c <udd_ctrl_payload_nb_trans+0x1>
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	80 93 5f 22 	sts	0x225F, r24	; 0x80225f <udd_ep_control_state>
    115e:	e0 e7       	ldi	r30, 0x70	; 112
    1160:	f2 e2       	ldi	r31, 0x22	; 34
    1162:	02 e0       	ldi	r16, 0x02	; 2
    1164:	06 93       	lac	Z, r16
    1166:	00 e2       	ldi	r16, 0x20	; 32
    1168:	06 93       	lac	Z, r16
    116a:	03 c0       	rjmp	.+6      	; 0x1172 <udd_ctrl_interrupt_tc_setup+0xda>
    116c:	c0 e0       	ldi	r28, 0x00	; 0
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <udd_ctrl_interrupt_tc_setup+0xda>
    1170:	c1 e0       	ldi	r28, 0x01	; 1
    1172:	8c 2f       	mov	r24, r28
    1174:	cf 91       	pop	r28
    1176:	0f 91       	pop	r16
    1178:	08 95       	ret

0000117a <udd_ep_trans_complet>:
    117a:	8f 92       	push	r8
    117c:	9f 92       	push	r9
    117e:	af 92       	push	r10
    1180:	bf 92       	push	r11
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	d8 2e       	mov	r13, r24
    1192:	67 df       	rcall	.-306    	; 0x1062 <udd_ep_get_job>
    1194:	8c 01       	movw	r16, r24
    1196:	cd 2d       	mov	r28, r13
    1198:	cf 70       	andi	r28, 0x0F	; 15
    119a:	d0 e0       	ldi	r29, 0x00	; 0
    119c:	ce 01       	movw	r24, r28
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	cd 2d       	mov	r28, r13
    11a4:	0d 2c       	mov	r0, r13
    11a6:	00 0c       	add	r0, r0
    11a8:	dd 0b       	sbc	r29, r29
    11aa:	cc 27       	eor	r28, r28
    11ac:	dd 0f       	add	r29, r29
    11ae:	cc 1f       	adc	r28, r28
    11b0:	dd 27       	eor	r29, r29
    11b2:	c8 0f       	add	r28, r24
    11b4:	d9 1f       	adc	r29, r25
    11b6:	ce 01       	movw	r24, r28
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	9c 01       	movw	r18, r24
    11c6:	20 59       	subi	r18, 0x90	; 144
    11c8:	3d 4d       	sbci	r19, 0xDD	; 221
    11ca:	79 01       	movw	r14, r18
    11cc:	c9 01       	movw	r24, r18
    11ce:	21 df       	rcall	.-446    	; 0x1012 <udd_ep_get_size>
    11d0:	4c 01       	movw	r8, r24
    11d2:	dd 20       	and	r13, r13
    11d4:	0c f0       	brlt	.+2      	; 0x11d8 <udd_ep_trans_complet+0x5e>
    11d6:	70 c0       	rjmp	.+224    	; 0x12b8 <udd_ep_trans_complet+0x13e>
    11d8:	fe 01       	movw	r30, r28
    11da:	ee 0f       	add	r30, r30
    11dc:	ff 1f       	adc	r31, r31
    11de:	ee 0f       	add	r30, r30
    11e0:	ff 1f       	adc	r31, r31
    11e2:	ee 0f       	add	r30, r30
    11e4:	ff 1f       	adc	r31, r31
    11e6:	e0 5a       	subi	r30, 0xA0	; 160
    11e8:	fd 4d       	sbci	r31, 0xDD	; 221
    11ea:	26 89       	ldd	r18, Z+22	; 0x16
    11ec:	37 89       	ldd	r19, Z+23	; 0x17
    11ee:	d8 01       	movw	r26, r16
    11f0:	15 96       	adiw	r26, 0x05	; 5
    11f2:	8d 91       	ld	r24, X+
    11f4:	9c 91       	ld	r25, X
    11f6:	16 97       	sbiw	r26, 0x06	; 6
    11f8:	82 0f       	add	r24, r18
    11fa:	93 1f       	adc	r25, r19
    11fc:	15 96       	adiw	r26, 0x05	; 5
    11fe:	8d 93       	st	X+, r24
    1200:	9c 93       	st	X, r25
    1202:	16 97       	sbiw	r26, 0x06	; 6
    1204:	13 96       	adiw	r26, 0x03	; 3
    1206:	2d 91       	ld	r18, X+
    1208:	3c 91       	ld	r19, X
    120a:	14 97       	sbiw	r26, 0x04	; 4
    120c:	82 17       	cp	r24, r18
    120e:	93 07       	cpc	r25, r19
    1210:	09 f4       	brne	.+2      	; 0x1214 <udd_ep_trans_complet+0x9a>
    1212:	3c c0       	rjmp	.+120    	; 0x128c <udd_ep_trans_complet+0x112>
    1214:	28 1b       	sub	r18, r24
    1216:	39 0b       	sbc	r19, r25
    1218:	21 15       	cp	r18, r1
    121a:	b4 e0       	ldi	r27, 0x04	; 4
    121c:	3b 07       	cpc	r19, r27
    121e:	38 f0       	brcs	.+14     	; 0x122e <udd_ep_trans_complet+0xb4>
    1220:	2f ef       	ldi	r18, 0xFF	; 255
    1222:	33 e0       	ldi	r19, 0x03	; 3
    1224:	c9 01       	movw	r24, r18
    1226:	b4 01       	movw	r22, r8
    1228:	21 d5       	rcall	.+2626   	; 0x1c6c <__udivmodhi4>
    122a:	28 1b       	sub	r18, r24
    122c:	39 0b       	sbc	r19, r25
    122e:	f8 01       	movw	r30, r16
    1230:	80 81       	ld	r24, Z
    1232:	81 ff       	sbrs	r24, 1
    1234:	09 c0       	rjmp	.+18     	; 0x1248 <udd_ep_trans_complet+0xce>
    1236:	c9 01       	movw	r24, r18
    1238:	b4 01       	movw	r22, r8
    123a:	18 d5       	rcall	.+2608   	; 0x1c6c <__udivmodhi4>
    123c:	41 e0       	ldi	r20, 0x01	; 1
    123e:	89 2b       	or	r24, r25
    1240:	09 f0       	breq	.+2      	; 0x1244 <udd_ep_trans_complet+0xca>
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	84 2f       	mov	r24, r20
    1246:	01 c0       	rjmp	.+2      	; 0x124a <udd_ep_trans_complet+0xd0>
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	d8 01       	movw	r26, r16
    124c:	9c 91       	ld	r25, X
    124e:	80 fb       	bst	r24, 0
    1250:	91 f9       	bld	r25, 1
    1252:	9c 93       	st	X, r25
    1254:	cc 0f       	add	r28, r28
    1256:	dd 1f       	adc	r29, r29
    1258:	cc 0f       	add	r28, r28
    125a:	dd 1f       	adc	r29, r29
    125c:	cc 0f       	add	r28, r28
    125e:	dd 1f       	adc	r29, r29
    1260:	c0 5a       	subi	r28, 0xA0	; 160
    1262:	dd 4d       	sbci	r29, 0xDD	; 221
    1264:	1e 8a       	std	Y+22, r1	; 0x16
    1266:	1f 8a       	std	Y+23, r1	; 0x17
    1268:	2a 8b       	std	Y+18, r18	; 0x12
    126a:	3b 8b       	std	Y+19, r19	; 0x13
    126c:	11 96       	adiw	r26, 0x01	; 1
    126e:	2d 91       	ld	r18, X+
    1270:	3c 91       	ld	r19, X
    1272:	12 97       	sbiw	r26, 0x02	; 2
    1274:	15 96       	adiw	r26, 0x05	; 5
    1276:	8d 91       	ld	r24, X+
    1278:	9c 91       	ld	r25, X
    127a:	16 97       	sbiw	r26, 0x06	; 6
    127c:	82 0f       	add	r24, r18
    127e:	93 1f       	adc	r25, r19
    1280:	8c 8b       	std	Y+20, r24	; 0x14
    1282:	9d 8b       	std	Y+21, r25	; 0x15
    1284:	f7 01       	movw	r30, r14
    1286:	02 e0       	ldi	r16, 0x02	; 2
    1288:	06 93       	lac	Z, r16
    128a:	c6 c0       	rjmp	.+396    	; 0x1418 <udd_ep_trans_complet+0x29e>
    128c:	d8 01       	movw	r26, r16
    128e:	8c 91       	ld	r24, X
    1290:	81 ff       	sbrs	r24, 1
    1292:	af c0       	rjmp	.+350    	; 0x13f2 <udd_ep_trans_complet+0x278>
    1294:	8d 7f       	andi	r24, 0xFD	; 253
    1296:	8c 93       	st	X, r24
    1298:	cc 0f       	add	r28, r28
    129a:	dd 1f       	adc	r29, r29
    129c:	cc 0f       	add	r28, r28
    129e:	dd 1f       	adc	r29, r29
    12a0:	cc 0f       	add	r28, r28
    12a2:	dd 1f       	adc	r29, r29
    12a4:	c0 5a       	subi	r28, 0xA0	; 160
    12a6:	dd 4d       	sbci	r29, 0xDD	; 221
    12a8:	1e 8a       	std	Y+22, r1	; 0x16
    12aa:	1f 8a       	std	Y+23, r1	; 0x17
    12ac:	1a 8a       	std	Y+18, r1	; 0x12
    12ae:	1b 8a       	std	Y+19, r1	; 0x13
    12b0:	f7 01       	movw	r30, r14
    12b2:	02 e0       	ldi	r16, 0x02	; 2
    12b4:	06 93       	lac	Z, r16
    12b6:	b0 c0       	rjmp	.+352    	; 0x1418 <udd_ep_trans_complet+0x29e>
    12b8:	fe 01       	movw	r30, r28
    12ba:	ee 0f       	add	r30, r30
    12bc:	ff 1f       	adc	r31, r31
    12be:	ee 0f       	add	r30, r30
    12c0:	ff 1f       	adc	r31, r31
    12c2:	ee 0f       	add	r30, r30
    12c4:	ff 1f       	adc	r31, r31
    12c6:	e0 5a       	subi	r30, 0xA0	; 160
    12c8:	fd 4d       	sbci	r31, 0xDD	; 221
    12ca:	a2 88       	ldd	r10, Z+18	; 0x12
    12cc:	b3 88       	ldd	r11, Z+19	; 0x13
    12ce:	d8 01       	movw	r26, r16
    12d0:	8c 91       	ld	r24, X
    12d2:	82 ff       	sbrs	r24, 2
    12d4:	19 c0       	rjmp	.+50     	; 0x1308 <udd_ep_trans_complet+0x18e>
    12d6:	11 96       	adiw	r26, 0x01	; 1
    12d8:	ed 91       	ld	r30, X+
    12da:	fc 91       	ld	r31, X
    12dc:	12 97       	sbiw	r26, 0x02	; 2
    12de:	15 96       	adiw	r26, 0x05	; 5
    12e0:	2d 91       	ld	r18, X+
    12e2:	3c 91       	ld	r19, X
    12e4:	16 97       	sbiw	r26, 0x06	; 6
    12e6:	13 96       	adiw	r26, 0x03	; 3
    12e8:	8d 91       	ld	r24, X+
    12ea:	9c 91       	ld	r25, X
    12ec:	14 97       	sbiw	r26, 0x04	; 4
    12ee:	b4 01       	movw	r22, r8
    12f0:	bd d4       	rcall	.+2426   	; 0x1c6c <__udivmodhi4>
    12f2:	b0 e4       	ldi	r27, 0x40	; 64
    12f4:	db 9e       	mul	r13, r27
    12f6:	b0 01       	movw	r22, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	63 5e       	subi	r22, 0xE3	; 227
    12fc:	7e 4d       	sbci	r23, 0xDE	; 222
    12fe:	ac 01       	movw	r20, r24
    1300:	cf 01       	movw	r24, r30
    1302:	82 0f       	add	r24, r18
    1304:	93 1f       	adc	r25, r19
    1306:	ce d4       	rcall	.+2460   	; 0x1ca4 <memcpy>
    1308:	f8 01       	movw	r30, r16
    130a:	25 81       	ldd	r18, Z+5	; 0x05
    130c:	36 81       	ldd	r19, Z+6	; 0x06
    130e:	2a 0d       	add	r18, r10
    1310:	3b 1d       	adc	r19, r11
    1312:	25 83       	std	Z+5, r18	; 0x05
    1314:	36 83       	std	Z+6, r19	; 0x06
    1316:	83 81       	ldd	r24, Z+3	; 0x03
    1318:	94 81       	ldd	r25, Z+4	; 0x04
    131a:	82 17       	cp	r24, r18
    131c:	93 07       	cpc	r25, r19
    131e:	68 f4       	brcc	.+26     	; 0x133a <udd_ep_trans_complet+0x1c0>
    1320:	85 83       	std	Z+5, r24	; 0x05
    1322:	96 83       	std	Z+6, r25	; 0x06
    1324:	cc 0f       	add	r28, r28
    1326:	dd 1f       	adc	r29, r29
    1328:	cc 0f       	add	r28, r28
    132a:	dd 1f       	adc	r29, r29
    132c:	cc 0f       	add	r28, r28
    132e:	dd 1f       	adc	r29, r29
    1330:	c0 5a       	subi	r28, 0xA0	; 160
    1332:	dd 4d       	sbci	r29, 0xDD	; 221
    1334:	8e 89       	ldd	r24, Y+22	; 0x16
    1336:	9f 89       	ldd	r25, Y+23	; 0x17
    1338:	5c c0       	rjmp	.+184    	; 0x13f2 <udd_ep_trans_complet+0x278>
    133a:	fe 01       	movw	r30, r28
    133c:	ee 0f       	add	r30, r30
    133e:	ff 1f       	adc	r31, r31
    1340:	ee 0f       	add	r30, r30
    1342:	ff 1f       	adc	r31, r31
    1344:	ee 0f       	add	r30, r30
    1346:	ff 1f       	adc	r31, r31
    1348:	e0 5a       	subi	r30, 0xA0	; 160
    134a:	fd 4d       	sbci	r31, 0xDD	; 221
    134c:	46 89       	ldd	r20, Z+22	; 0x16
    134e:	57 89       	ldd	r21, Z+23	; 0x17
    1350:	a4 16       	cp	r10, r20
    1352:	b5 06       	cpc	r11, r21
    1354:	09 f0       	breq	.+2      	; 0x1358 <udd_ep_trans_complet+0x1de>
    1356:	4d c0       	rjmp	.+154    	; 0x13f2 <udd_ep_trans_complet+0x278>
    1358:	28 17       	cp	r18, r24
    135a:	39 07       	cpc	r19, r25
    135c:	09 f4       	brne	.+2      	; 0x1360 <udd_ep_trans_complet+0x1e6>
    135e:	49 c0       	rjmp	.+146    	; 0x13f2 <udd_ep_trans_complet+0x278>
    1360:	ac 01       	movw	r20, r24
    1362:	42 1b       	sub	r20, r18
    1364:	53 0b       	sbc	r21, r19
    1366:	9a 01       	movw	r18, r20
    1368:	21 15       	cp	r18, r1
    136a:	54 e0       	ldi	r21, 0x04	; 4
    136c:	35 07       	cpc	r19, r21
    136e:	40 f0       	brcs	.+16     	; 0x1380 <udd_ep_trans_complet+0x206>
    1370:	2f ef       	ldi	r18, 0xFF	; 255
    1372:	33 e0       	ldi	r19, 0x03	; 3
    1374:	c9 01       	movw	r24, r18
    1376:	b4 01       	movw	r22, r8
    1378:	79 d4       	rcall	.+2290   	; 0x1c6c <__udivmodhi4>
    137a:	28 1b       	sub	r18, r24
    137c:	39 0b       	sbc	r19, r25
    137e:	05 c0       	rjmp	.+10     	; 0x138a <udd_ep_trans_complet+0x210>
    1380:	c9 01       	movw	r24, r18
    1382:	b4 01       	movw	r22, r8
    1384:	73 d4       	rcall	.+2278   	; 0x1c6c <__udivmodhi4>
    1386:	28 1b       	sub	r18, r24
    1388:	39 0b       	sbc	r19, r25
    138a:	fe 01       	movw	r30, r28
    138c:	ee 0f       	add	r30, r30
    138e:	ff 1f       	adc	r31, r31
    1390:	ee 0f       	add	r30, r30
    1392:	ff 1f       	adc	r31, r31
    1394:	ee 0f       	add	r30, r30
    1396:	ff 1f       	adc	r31, r31
    1398:	e0 5a       	subi	r30, 0xA0	; 160
    139a:	fd 4d       	sbci	r31, 0xDD	; 221
    139c:	12 8a       	std	Z+18, r1	; 0x12
    139e:	13 8a       	std	Z+19, r1	; 0x13
    13a0:	28 15       	cp	r18, r8
    13a2:	39 05       	cpc	r19, r9
    13a4:	78 f4       	brcc	.+30     	; 0x13c4 <udd_ep_trans_complet+0x24a>
    13a6:	d8 01       	movw	r26, r16
    13a8:	8c 91       	ld	r24, X
    13aa:	84 60       	ori	r24, 0x04	; 4
    13ac:	8c 93       	st	X, r24
    13ae:	b0 e4       	ldi	r27, 0x40	; 64
    13b0:	db 9e       	mul	r13, r27
    13b2:	c0 01       	movw	r24, r0
    13b4:	11 24       	eor	r1, r1
    13b6:	83 5e       	subi	r24, 0xE3	; 227
    13b8:	9e 4d       	sbci	r25, 0xDE	; 222
    13ba:	84 8b       	std	Z+20, r24	; 0x14
    13bc:	95 8b       	std	Z+21, r25	; 0x15
    13be:	86 8a       	std	Z+22, r8	; 0x16
    13c0:	97 8a       	std	Z+23, r9	; 0x17
    13c2:	13 c0       	rjmp	.+38     	; 0x13ea <udd_ep_trans_complet+0x270>
    13c4:	f8 01       	movw	r30, r16
    13c6:	41 81       	ldd	r20, Z+1	; 0x01
    13c8:	52 81       	ldd	r21, Z+2	; 0x02
    13ca:	85 81       	ldd	r24, Z+5	; 0x05
    13cc:	96 81       	ldd	r25, Z+6	; 0x06
    13ce:	84 0f       	add	r24, r20
    13d0:	95 1f       	adc	r25, r21
    13d2:	cc 0f       	add	r28, r28
    13d4:	dd 1f       	adc	r29, r29
    13d6:	cc 0f       	add	r28, r28
    13d8:	dd 1f       	adc	r29, r29
    13da:	cc 0f       	add	r28, r28
    13dc:	dd 1f       	adc	r29, r29
    13de:	c0 5a       	subi	r28, 0xA0	; 160
    13e0:	dd 4d       	sbci	r29, 0xDD	; 221
    13e2:	8c 8b       	std	Y+20, r24	; 0x14
    13e4:	9d 8b       	std	Y+21, r25	; 0x15
    13e6:	2e 8b       	std	Y+22, r18	; 0x16
    13e8:	3f 8b       	std	Y+23, r19	; 0x17
    13ea:	f7 01       	movw	r30, r14
    13ec:	02 e0       	ldi	r16, 0x02	; 2
    13ee:	06 93       	lac	Z, r16
    13f0:	13 c0       	rjmp	.+38     	; 0x1418 <udd_ep_trans_complet+0x29e>
    13f2:	d8 01       	movw	r26, r16
    13f4:	8c 91       	ld	r24, X
    13f6:	80 ff       	sbrs	r24, 0
    13f8:	0f c0       	rjmp	.+30     	; 0x1418 <udd_ep_trans_complet+0x29e>
    13fa:	8e 7f       	andi	r24, 0xFE	; 254
    13fc:	8c 93       	st	X, r24
    13fe:	17 96       	adiw	r26, 0x07	; 7
    1400:	ed 91       	ld	r30, X+
    1402:	fc 91       	ld	r31, X
    1404:	18 97       	sbiw	r26, 0x08	; 8
    1406:	30 97       	sbiw	r30, 0x00	; 0
    1408:	39 f0       	breq	.+14     	; 0x1418 <udd_ep_trans_complet+0x29e>
    140a:	15 96       	adiw	r26, 0x05	; 5
    140c:	6d 91       	ld	r22, X+
    140e:	7c 91       	ld	r23, X
    1410:	16 97       	sbiw	r26, 0x06	; 6
    1412:	4d 2d       	mov	r20, r13
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	19 95       	eicall
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	ff 90       	pop	r15
    1422:	ef 90       	pop	r14
    1424:	df 90       	pop	r13
    1426:	bf 90       	pop	r11
    1428:	af 90       	pop	r10
    142a:	9f 90       	pop	r9
    142c:	8f 90       	pop	r8
    142e:	08 95       	ret

00001430 <udd_attach>:
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	1f 92       	push	r1
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	8f b7       	in	r24, 0x3f	; 63
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	f8 94       	cli
    1442:	19 81       	ldd	r17, Y+1	; 0x01
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	f8 dc       	rcall	.-1552   	; 0xe38 <udd_sleep_mode>
    1448:	ea ec       	ldi	r30, 0xCA	; 202
    144a:	f4 e0       	ldi	r31, 0x04	; 4
    144c:	80 e4       	ldi	r24, 0x40	; 64
    144e:	80 83       	st	Z, r24
    1450:	80 e2       	ldi	r24, 0x20	; 32
    1452:	80 83       	st	Z, r24
    1454:	e1 ec       	ldi	r30, 0xC1	; 193
    1456:	f4 e0       	ldi	r31, 0x04	; 4
    1458:	80 81       	ld	r24, Z
    145a:	81 60       	ori	r24, 0x01	; 1
    145c:	80 83       	st	Z, r24
    145e:	a9 ec       	ldi	r26, 0xC9	; 201
    1460:	b4 e0       	ldi	r27, 0x04	; 4
    1462:	8c 91       	ld	r24, X
    1464:	82 60       	ori	r24, 0x02	; 2
    1466:	8c 93       	st	X, r24
    1468:	e8 ec       	ldi	r30, 0xC8	; 200
    146a:	f4 e0       	ldi	r31, 0x04	; 4
    146c:	80 81       	ld	r24, Z
    146e:	80 64       	ori	r24, 0x40	; 64
    1470:	80 83       	st	Z, r24
    1472:	8c 91       	ld	r24, X
    1474:	81 60       	ori	r24, 0x01	; 1
    1476:	8c 93       	st	X, r24
    1478:	80 81       	ld	r24, Z
    147a:	80 68       	ori	r24, 0x80	; 128
    147c:	80 83       	st	Z, r24
    147e:	1f bf       	out	0x3f, r17	; 63
    1480:	0f 90       	pop	r0
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	1f 91       	pop	r17
    1488:	08 95       	ret

0000148a <udd_enable>:
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	1f 92       	push	r1
    1494:	1f 92       	push	r1
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	00 e6       	ldi	r16, 0x60	; 96
    149c:	10 e0       	ldi	r17, 0x00	; 0
    149e:	f8 01       	movw	r30, r16
    14a0:	10 82       	st	Z, r1
    14a2:	80 e3       	ldi	r24, 0x30	; 48
    14a4:	0e 94 b8 01 	call	0x370	; 0x370 <sysclk_enable_usb>
    14a8:	e0 ec       	ldi	r30, 0xC0	; 192
    14aa:	f4 e0       	ldi	r31, 0x04	; 4
    14ac:	80 81       	ld	r24, Z
    14ae:	80 64       	ori	r24, 0x40	; 64
    14b0:	80 83       	st	Z, r24
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	f8 01       	movw	r30, r16
    14b6:	80 83       	st	Z, r24
    14b8:	8f b7       	in	r24, 0x3f	; 63
    14ba:	8a 83       	std	Y+2, r24	; 0x02
    14bc:	f8 94       	cli
    14be:	1a 81       	ldd	r17, Y+2	; 0x02
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	fc 01       	movw	r30, r24
    14c6:	ee 0f       	add	r30, r30
    14c8:	ff 1f       	adc	r31, r31
    14ca:	ee 0f       	add	r30, r30
    14cc:	ff 1f       	adc	r31, r31
    14ce:	ee 0f       	add	r30, r30
    14d0:	ff 1f       	adc	r31, r31
    14d2:	e0 5a       	subi	r30, 0xA0	; 160
    14d4:	fd 4d       	sbci	r31, 0xDD	; 221
    14d6:	11 8a       	std	Z+17, r1	; 0x11
    14d8:	01 96       	adiw	r24, 0x01	; 1
    14da:	88 30       	cpi	r24, 0x08	; 8
    14dc:	91 05       	cpc	r25, r1
    14de:	91 f7       	brne	.-28     	; 0x14c4 <udd_enable+0x3a>
    14e0:	ed e1       	ldi	r30, 0x1D	; 29
    14e2:	f2 e2       	ldi	r31, 0x22	; 34
    14e4:	80 81       	ld	r24, Z
    14e6:	8e 7f       	andi	r24, 0xFE	; 254
    14e8:	80 83       	st	Z, r24
    14ea:	e6 e2       	ldi	r30, 0x26	; 38
    14ec:	f2 e2       	ldi	r31, 0x22	; 34
    14ee:	80 81       	ld	r24, Z
    14f0:	8e 7f       	andi	r24, 0xFE	; 254
    14f2:	80 83       	st	Z, r24
    14f4:	ef e2       	ldi	r30, 0x2F	; 47
    14f6:	f2 e2       	ldi	r31, 0x22	; 34
    14f8:	80 81       	ld	r24, Z
    14fa:	8e 7f       	andi	r24, 0xFE	; 254
    14fc:	80 83       	st	Z, r24
    14fe:	e8 e3       	ldi	r30, 0x38	; 56
    1500:	f2 e2       	ldi	r31, 0x22	; 34
    1502:	80 81       	ld	r24, Z
    1504:	8e 7f       	andi	r24, 0xFE	; 254
    1506:	80 83       	st	Z, r24
    1508:	e1 e4       	ldi	r30, 0x41	; 65
    150a:	f2 e2       	ldi	r31, 0x22	; 34
    150c:	80 81       	ld	r24, Z
    150e:	8e 7f       	andi	r24, 0xFE	; 254
    1510:	80 83       	st	Z, r24
    1512:	ea e4       	ldi	r30, 0x4A	; 74
    1514:	f2 e2       	ldi	r31, 0x22	; 34
    1516:	80 81       	ld	r24, Z
    1518:	8e 7f       	andi	r24, 0xFE	; 254
    151a:	80 83       	st	Z, r24
    151c:	6a e1       	ldi	r22, 0x1A	; 26
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	82 e0       	ldi	r24, 0x02	; 2
    1522:	7a dc       	rcall	.-1804   	; 0xe18 <nvm_read_byte>
    1524:	8f 3f       	cpi	r24, 0xFF	; 255
    1526:	19 f0       	breq	.+6      	; 0x152e <udd_enable+0xa4>
    1528:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    152c:	03 c0       	rjmp	.+6      	; 0x1534 <udd_enable+0xaa>
    152e:	8f e1       	ldi	r24, 0x1F	; 31
    1530:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    1534:	6b e1       	ldi	r22, 0x1B	; 27
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	82 e0       	ldi	r24, 0x02	; 2
    153a:	6e dc       	rcall	.-1828   	; 0xe18 <nvm_read_byte>
    153c:	8f 3f       	cpi	r24, 0xFF	; 255
    153e:	19 f0       	breq	.+6      	; 0x1546 <udd_enable+0xbc>
    1540:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    1544:	03 c0       	rjmp	.+6      	; 0x154c <udd_enable+0xc2>
    1546:	8f e1       	ldi	r24, 0x1F	; 31
    1548:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    154c:	e0 ec       	ldi	r30, 0xC0	; 192
    154e:	f4 e0       	ldi	r31, 0x04	; 4
    1550:	80 81       	ld	r24, Z
    1552:	83 60       	ori	r24, 0x03	; 3
    1554:	80 83       	st	Z, r24
    1556:	80 81       	ld	r24, Z
    1558:	80 68       	ori	r24, 0x80	; 128
    155a:	80 83       	st	Z, r24
    155c:	80 81       	ld	r24, Z
    155e:	80 61       	ori	r24, 0x10	; 16
    1560:	80 83       	st	Z, r24
    1562:	80 e7       	ldi	r24, 0x70	; 112
    1564:	92 e2       	ldi	r25, 0x22	; 34
    1566:	86 83       	std	Z+6, r24	; 0x06
    1568:	97 83       	std	Z+7, r25	; 0x07
    156a:	80 81       	ld	r24, Z
    156c:	80 62       	ori	r24, 0x20	; 32
    156e:	80 83       	st	Z, r24
    1570:	8f ef       	ldi	r24, 0xFF	; 255
    1572:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    1576:	e8 ec       	ldi	r30, 0xC8	; 200
    1578:	f4 e0       	ldi	r31, 0x04	; 4
    157a:	80 81       	ld	r24, Z
    157c:	81 60       	ori	r24, 0x01	; 1
    157e:	80 83       	st	Z, r24
    1580:	10 92 b4 22 	sts	0x22B4, r1	; 0x8022b4 <udd_b_idle>
    1584:	80 91 bc 22 	lds	r24, 0x22BC	; 0x8022bc <sleepmgr_locks+0x5>
    1588:	8f 3f       	cpi	r24, 0xFF	; 255
    158a:	09 f4       	brne	.+2      	; 0x158e <udd_enable+0x104>
    158c:	ff cf       	rjmp	.-2      	; 0x158c <udd_enable+0x102>
    158e:	8f b7       	in	r24, 0x3f	; 63
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	f8 94       	cli
    1594:	99 81       	ldd	r25, Y+1	; 0x01
    1596:	e7 eb       	ldi	r30, 0xB7	; 183
    1598:	f2 e2       	ldi	r31, 0x22	; 34
    159a:	85 81       	ldd	r24, Z+5	; 0x05
    159c:	8f 5f       	subi	r24, 0xFF	; 255
    159e:	85 83       	std	Z+5, r24	; 0x05
    15a0:	9f bf       	out	0x3f, r25	; 63
    15a2:	46 df       	rcall	.-372    	; 0x1430 <udd_attach>
    15a4:	1f bf       	out	0x3f, r17	; 63
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	08 95       	ret

000015b4 <udd_set_address>:
    15b4:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    15b8:	08 95       	ret

000015ba <udd_getaddress>:
    15ba:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    15be:	08 95       	ret

000015c0 <udd_set_setup_payload>:
    15c0:	ed eb       	ldi	r30, 0xBD	; 189
    15c2:	f2 e2       	ldi	r31, 0x22	; 34
    15c4:	80 87       	std	Z+8, r24	; 0x08
    15c6:	91 87       	std	Z+9, r25	; 0x09
    15c8:	62 87       	std	Z+10, r22	; 0x0a
    15ca:	73 87       	std	Z+11, r23	; 0x0b
    15cc:	08 95       	ret

000015ce <udd_ep_alloc>:
    15ce:	28 2f       	mov	r18, r24
    15d0:	2f 70       	andi	r18, 0x0F	; 15
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	08 2e       	mov	r0, r24
    15da:	00 0c       	add	r0, r0
    15dc:	99 0b       	sbc	r25, r25
    15de:	88 27       	eor	r24, r24
    15e0:	99 0f       	add	r25, r25
    15e2:	88 1f       	adc	r24, r24
    15e4:	99 27       	eor	r25, r25
    15e6:	82 0f       	add	r24, r18
    15e8:	93 1f       	adc	r25, r19
    15ea:	fc 01       	movw	r30, r24
    15ec:	ee 0f       	add	r30, r30
    15ee:	ff 1f       	adc	r31, r31
    15f0:	ee 0f       	add	r30, r30
    15f2:	ff 1f       	adc	r31, r31
    15f4:	ee 0f       	add	r30, r30
    15f6:	ff 1f       	adc	r31, r31
    15f8:	e0 5a       	subi	r30, 0xA0	; 160
    15fa:	fd 4d       	sbci	r31, 0xDD	; 221
    15fc:	21 89       	ldd	r18, Z+17	; 0x11
    15fe:	20 7c       	andi	r18, 0xC0	; 192
    1600:	09 f0       	breq	.+2      	; 0x1604 <udd_ep_alloc+0x36>
    1602:	72 c0       	rjmp	.+228    	; 0x16e8 <udd_ep_alloc+0x11a>
    1604:	63 70       	andi	r22, 0x03	; 3
    1606:	61 30       	cpi	r22, 0x01	; 1
    1608:	11 f0       	breq	.+4      	; 0x160e <udd_ep_alloc+0x40>
    160a:	18 f4       	brcc	.+6      	; 0x1612 <udd_ep_alloc+0x44>
    160c:	04 c0       	rjmp	.+8      	; 0x1616 <udd_ep_alloc+0x48>
    160e:	60 ec       	ldi	r22, 0xC0	; 192
    1610:	03 c0       	rjmp	.+6      	; 0x1618 <udd_ep_alloc+0x4a>
    1612:	60 e8       	ldi	r22, 0x80	; 128
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <udd_ep_alloc+0x4a>
    1616:	60 e4       	ldi	r22, 0x40	; 64
    1618:	40 38       	cpi	r20, 0x80	; 128
    161a:	51 05       	cpc	r21, r1
    161c:	e9 f0       	breq	.+58     	; 0x1658 <udd_ep_alloc+0x8a>
    161e:	50 f4       	brcc	.+20     	; 0x1634 <udd_ep_alloc+0x66>
    1620:	40 32       	cpi	r20, 0x20	; 32
    1622:	51 05       	cpc	r21, r1
    1624:	a9 f0       	breq	.+42     	; 0x1650 <udd_ep_alloc+0x82>
    1626:	40 34       	cpi	r20, 0x40	; 64
    1628:	51 05       	cpc	r21, r1
    162a:	a1 f0       	breq	.+40     	; 0x1654 <udd_ep_alloc+0x86>
    162c:	40 31       	cpi	r20, 0x10	; 16
    162e:	51 05       	cpc	r21, r1
    1630:	d9 f4       	brne	.+54     	; 0x1668 <udd_ep_alloc+0x9a>
    1632:	0c c0       	rjmp	.+24     	; 0x164c <udd_ep_alloc+0x7e>
    1634:	41 15       	cp	r20, r1
    1636:	22 e0       	ldi	r18, 0x02	; 2
    1638:	52 07       	cpc	r21, r18
    163a:	91 f0       	breq	.+36     	; 0x1660 <udd_ep_alloc+0x92>
    163c:	4f 3f       	cpi	r20, 0xFF	; 255
    163e:	23 e0       	ldi	r18, 0x03	; 3
    1640:	52 07       	cpc	r21, r18
    1642:	81 f0       	breq	.+32     	; 0x1664 <udd_ep_alloc+0x96>
    1644:	41 15       	cp	r20, r1
    1646:	51 40       	sbci	r21, 0x01	; 1
    1648:	79 f4       	brne	.+30     	; 0x1668 <udd_ep_alloc+0x9a>
    164a:	08 c0       	rjmp	.+16     	; 0x165c <udd_ep_alloc+0x8e>
    164c:	21 e0       	ldi	r18, 0x01	; 1
    164e:	0d c0       	rjmp	.+26     	; 0x166a <udd_ep_alloc+0x9c>
    1650:	22 e0       	ldi	r18, 0x02	; 2
    1652:	0b c0       	rjmp	.+22     	; 0x166a <udd_ep_alloc+0x9c>
    1654:	23 e0       	ldi	r18, 0x03	; 3
    1656:	09 c0       	rjmp	.+18     	; 0x166a <udd_ep_alloc+0x9c>
    1658:	24 e0       	ldi	r18, 0x04	; 4
    165a:	07 c0       	rjmp	.+14     	; 0x166a <udd_ep_alloc+0x9c>
    165c:	25 e0       	ldi	r18, 0x05	; 5
    165e:	05 c0       	rjmp	.+10     	; 0x166a <udd_ep_alloc+0x9c>
    1660:	26 e0       	ldi	r18, 0x06	; 6
    1662:	03 c0       	rjmp	.+6      	; 0x166a <udd_ep_alloc+0x9c>
    1664:	27 e0       	ldi	r18, 0x07	; 7
    1666:	01 c0       	rjmp	.+2      	; 0x166a <udd_ep_alloc+0x9c>
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	fc 01       	movw	r30, r24
    166c:	ee 0f       	add	r30, r30
    166e:	ff 1f       	adc	r31, r31
    1670:	ee 0f       	add	r30, r30
    1672:	ff 1f       	adc	r31, r31
    1674:	ee 0f       	add	r30, r30
    1676:	ff 1f       	adc	r31, r31
    1678:	e0 5a       	subi	r30, 0xA0	; 160
    167a:	fd 4d       	sbci	r31, 0xDD	; 221
    167c:	11 8a       	std	Z+17, r1	; 0x11
    167e:	dc 01       	movw	r26, r24
    1680:	aa 0f       	add	r26, r26
    1682:	bb 1f       	adc	r27, r27
    1684:	aa 0f       	add	r26, r26
    1686:	bb 1f       	adc	r27, r27
    1688:	aa 0f       	add	r26, r26
    168a:	bb 1f       	adc	r27, r27
    168c:	a0 59       	subi	r26, 0x90	; 144
    168e:	bd 4d       	sbci	r27, 0xDD	; 221
    1690:	36 e0       	ldi	r19, 0x06	; 6
    1692:	3c 93       	st	X, r19
    1694:	26 2b       	or	r18, r22
    1696:	21 8b       	std	Z+17, r18	; 0x11
    1698:	fc 01       	movw	r30, r24
    169a:	ee 0f       	add	r30, r30
    169c:	ff 1f       	adc	r31, r31
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	ee 0f       	add	r30, r30
    16a4:	ff 1f       	adc	r31, r31
    16a6:	e0 5a       	subi	r30, 0xA0	; 160
    16a8:	fd 4d       	sbci	r31, 0xDD	; 221
    16aa:	21 89       	ldd	r18, Z+17	; 0x11
    16ac:	20 7c       	andi	r18, 0xC0	; 192
    16ae:	20 3c       	cpi	r18, 0xC0	; 192
    16b0:	69 f4       	brne	.+26     	; 0x16cc <udd_ep_alloc+0xfe>
    16b2:	fc 01       	movw	r30, r24
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	ee 0f       	add	r30, r30
    16ba:	ff 1f       	adc	r31, r31
    16bc:	ee 0f       	add	r30, r30
    16be:	ff 1f       	adc	r31, r31
    16c0:	e0 5a       	subi	r30, 0xA0	; 160
    16c2:	fd 4d       	sbci	r31, 0xDD	; 221
    16c4:	21 89       	ldd	r18, Z+17	; 0x11
    16c6:	27 70       	andi	r18, 0x07	; 7
    16c8:	27 30       	cpi	r18, 0x07	; 7
    16ca:	81 f0       	breq	.+32     	; 0x16ec <udd_ep_alloc+0x11e>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	fc 01       	movw	r30, r24
    16da:	e0 5a       	subi	r30, 0xA0	; 160
    16dc:	fd 4d       	sbci	r31, 0xDD	; 221
    16de:	81 89       	ldd	r24, Z+17	; 0x11
    16e0:	80 62       	ori	r24, 0x20	; 32
    16e2:	81 8b       	std	Z+17, r24	; 0x11
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	08 95       	ret
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	08 95       	ret
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	08 95       	ret

000016f0 <udd_ep_is_halted>:
    16f0:	e8 2f       	mov	r30, r24
    16f2:	ef 70       	andi	r30, 0x0F	; 15
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	ee 0f       	add	r30, r30
    16f8:	ff 1f       	adc	r31, r31
    16fa:	08 2e       	mov	r0, r24
    16fc:	00 0c       	add	r0, r0
    16fe:	99 0b       	sbc	r25, r25
    1700:	88 27       	eor	r24, r24
    1702:	99 0f       	add	r25, r25
    1704:	88 1f       	adc	r24, r24
    1706:	99 27       	eor	r25, r25
    1708:	e8 0f       	add	r30, r24
    170a:	f9 1f       	adc	r31, r25
    170c:	ee 0f       	add	r30, r30
    170e:	ff 1f       	adc	r31, r31
    1710:	ee 0f       	add	r30, r30
    1712:	ff 1f       	adc	r31, r31
    1714:	ee 0f       	add	r30, r30
    1716:	ff 1f       	adc	r31, r31
    1718:	e0 5a       	subi	r30, 0xA0	; 160
    171a:	fd 4d       	sbci	r31, 0xDD	; 221
    171c:	81 89       	ldd	r24, Z+17	; 0x11
    171e:	82 fb       	bst	r24, 2
    1720:	88 27       	eor	r24, r24
    1722:	80 f9       	bld	r24, 0
    1724:	08 95       	ret

00001726 <udd_ep_clear_halt>:
    1726:	0f 93       	push	r16
    1728:	28 2f       	mov	r18, r24
    172a:	2f 70       	andi	r18, 0x0F	; 15
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	a9 01       	movw	r20, r18
    1730:	44 0f       	add	r20, r20
    1732:	55 1f       	adc	r21, r21
    1734:	28 2f       	mov	r18, r24
    1736:	08 2e       	mov	r0, r24
    1738:	00 0c       	add	r0, r0
    173a:	33 0b       	sbc	r19, r19
    173c:	22 27       	eor	r18, r18
    173e:	33 0f       	add	r19, r19
    1740:	22 1f       	adc	r18, r18
    1742:	33 27       	eor	r19, r19
    1744:	24 0f       	add	r18, r20
    1746:	35 1f       	adc	r19, r21
    1748:	f9 01       	movw	r30, r18
    174a:	ee 0f       	add	r30, r30
    174c:	ff 1f       	adc	r31, r31
    174e:	ee 0f       	add	r30, r30
    1750:	ff 1f       	adc	r31, r31
    1752:	ee 0f       	add	r30, r30
    1754:	ff 1f       	adc	r31, r31
    1756:	e0 59       	subi	r30, 0x90	; 144
    1758:	fd 4d       	sbci	r31, 0xDD	; 221
    175a:	01 e0       	ldi	r16, 0x01	; 1
    175c:	06 93       	lac	Z, r16
    175e:	f9 01       	movw	r30, r18
    1760:	ee 0f       	add	r30, r30
    1762:	ff 1f       	adc	r31, r31
    1764:	ee 0f       	add	r30, r30
    1766:	ff 1f       	adc	r31, r31
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	e0 5a       	subi	r30, 0xA0	; 160
    176e:	fd 4d       	sbci	r31, 0xDD	; 221
    1770:	91 89       	ldd	r25, Z+17	; 0x11
    1772:	92 ff       	sbrs	r25, 2
    1774:	17 c0       	rjmp	.+46     	; 0x17a4 <udd_ep_clear_halt+0x7e>
    1776:	22 0f       	add	r18, r18
    1778:	33 1f       	adc	r19, r19
    177a:	22 0f       	add	r18, r18
    177c:	33 1f       	adc	r19, r19
    177e:	22 0f       	add	r18, r18
    1780:	33 1f       	adc	r19, r19
    1782:	f9 01       	movw	r30, r18
    1784:	e0 5a       	subi	r30, 0xA0	; 160
    1786:	fd 4d       	sbci	r31, 0xDD	; 221
    1788:	91 89       	ldd	r25, Z+17	; 0x11
    178a:	9b 7f       	andi	r25, 0xFB	; 251
    178c:	91 8b       	std	Z+17, r25	; 0x11
    178e:	69 dc       	rcall	.-1838   	; 0x1062 <udd_ep_get_job>
    1790:	fc 01       	movw	r30, r24
    1792:	80 81       	ld	r24, Z
    1794:	80 ff       	sbrs	r24, 0
    1796:	06 c0       	rjmp	.+12     	; 0x17a4 <udd_ep_clear_halt+0x7e>
    1798:	8e 7f       	andi	r24, 0xFE	; 254
    179a:	80 83       	st	Z, r24
    179c:	07 80       	ldd	r0, Z+7	; 0x07
    179e:	f0 85       	ldd	r31, Z+8	; 0x08
    17a0:	e0 2d       	mov	r30, r0
    17a2:	19 95       	eicall
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	0f 91       	pop	r16
    17a8:	08 95       	ret

000017aa <udd_ep_abort>:
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	18 2f       	mov	r17, r24
    17b6:	c8 2f       	mov	r28, r24
    17b8:	cf 70       	andi	r28, 0x0F	; 15
    17ba:	d0 e0       	ldi	r29, 0x00	; 0
    17bc:	ce 01       	movw	r24, r28
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	c1 2f       	mov	r28, r17
    17c4:	01 2e       	mov	r0, r17
    17c6:	00 0c       	add	r0, r0
    17c8:	dd 0b       	sbc	r29, r29
    17ca:	cc 27       	eor	r28, r28
    17cc:	dd 0f       	add	r29, r29
    17ce:	cc 1f       	adc	r28, r28
    17d0:	dd 27       	eor	r29, r29
    17d2:	c8 0f       	add	r28, r24
    17d4:	d9 1f       	adc	r29, r25
    17d6:	81 2f       	mov	r24, r17
    17d8:	44 dc       	rcall	.-1912   	; 0x1062 <udd_ep_get_job>
    17da:	dc 01       	movw	r26, r24
    17dc:	fe 01       	movw	r30, r28
    17de:	ee 0f       	add	r30, r30
    17e0:	ff 1f       	adc	r31, r31
    17e2:	ee 0f       	add	r30, r30
    17e4:	ff 1f       	adc	r31, r31
    17e6:	ee 0f       	add	r30, r30
    17e8:	ff 1f       	adc	r31, r31
    17ea:	e0 59       	subi	r30, 0x90	; 144
    17ec:	fd 4d       	sbci	r31, 0xDD	; 221
    17ee:	02 e0       	ldi	r16, 0x02	; 2
    17f0:	05 93       	las	Z, r16
    17f2:	8c 91       	ld	r24, X
    17f4:	80 ff       	sbrs	r24, 0
    17f6:	22 c0       	rjmp	.+68     	; 0x183c <udd_ep_abort+0x92>
    17f8:	8e 7f       	andi	r24, 0xFE	; 254
    17fa:	8c 93       	st	X, r24
    17fc:	17 96       	adiw	r26, 0x07	; 7
    17fe:	ed 91       	ld	r30, X+
    1800:	fc 91       	ld	r31, X
    1802:	18 97       	sbiw	r26, 0x08	; 8
    1804:	30 97       	sbiw	r30, 0x00	; 0
    1806:	d1 f0       	breq	.+52     	; 0x183c <udd_ep_abort+0x92>
    1808:	11 23       	and	r17, r17
    180a:	5c f4       	brge	.+22     	; 0x1822 <udd_ep_abort+0x78>
    180c:	cc 0f       	add	r28, r28
    180e:	dd 1f       	adc	r29, r29
    1810:	cc 0f       	add	r28, r28
    1812:	dd 1f       	adc	r29, r29
    1814:	cc 0f       	add	r28, r28
    1816:	dd 1f       	adc	r29, r29
    1818:	c0 5a       	subi	r28, 0xA0	; 160
    181a:	dd 4d       	sbci	r29, 0xDD	; 221
    181c:	6e 89       	ldd	r22, Y+22	; 0x16
    181e:	7f 89       	ldd	r23, Y+23	; 0x17
    1820:	0a c0       	rjmp	.+20     	; 0x1836 <udd_ep_abort+0x8c>
    1822:	cc 0f       	add	r28, r28
    1824:	dd 1f       	adc	r29, r29
    1826:	cc 0f       	add	r28, r28
    1828:	dd 1f       	adc	r29, r29
    182a:	cc 0f       	add	r28, r28
    182c:	dd 1f       	adc	r29, r29
    182e:	c0 5a       	subi	r28, 0xA0	; 160
    1830:	dd 4d       	sbci	r29, 0xDD	; 221
    1832:	6a 89       	ldd	r22, Y+18	; 0x12
    1834:	7b 89       	ldd	r23, Y+19	; 0x13
    1836:	41 2f       	mov	r20, r17
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	19 95       	eicall
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	ff 90       	pop	r15
    1846:	08 95       	ret

00001848 <udd_ep_free>:
    1848:	cf 93       	push	r28
    184a:	c8 2f       	mov	r28, r24
    184c:	ae df       	rcall	.-164    	; 0x17aa <udd_ep_abort>
    184e:	ec 2f       	mov	r30, r28
    1850:	ef 70       	andi	r30, 0x0F	; 15
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	ee 0f       	add	r30, r30
    1856:	ff 1f       	adc	r31, r31
    1858:	8c 2f       	mov	r24, r28
    185a:	cc 0f       	add	r28, r28
    185c:	99 0b       	sbc	r25, r25
    185e:	88 27       	eor	r24, r24
    1860:	99 0f       	add	r25, r25
    1862:	88 1f       	adc	r24, r24
    1864:	99 27       	eor	r25, r25
    1866:	e8 0f       	add	r30, r24
    1868:	f9 1f       	adc	r31, r25
    186a:	ee 0f       	add	r30, r30
    186c:	ff 1f       	adc	r31, r31
    186e:	ee 0f       	add	r30, r30
    1870:	ff 1f       	adc	r31, r31
    1872:	ee 0f       	add	r30, r30
    1874:	ff 1f       	adc	r31, r31
    1876:	e0 5a       	subi	r30, 0xA0	; 160
    1878:	fd 4d       	sbci	r31, 0xDD	; 221
    187a:	11 8a       	std	Z+17, r1	; 0x11
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

00001880 <udd_ep_set_halt>:
    1880:	e8 2f       	mov	r30, r24
    1882:	ef 70       	andi	r30, 0x0F	; 15
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	ee 0f       	add	r30, r30
    1888:	ff 1f       	adc	r31, r31
    188a:	28 2f       	mov	r18, r24
    188c:	08 2e       	mov	r0, r24
    188e:	00 0c       	add	r0, r0
    1890:	33 0b       	sbc	r19, r19
    1892:	22 27       	eor	r18, r18
    1894:	33 0f       	add	r19, r19
    1896:	22 1f       	adc	r18, r18
    1898:	33 27       	eor	r19, r19
    189a:	e2 0f       	add	r30, r18
    189c:	f3 1f       	adc	r31, r19
    189e:	ee 0f       	add	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	ee 0f       	add	r30, r30
    18a4:	ff 1f       	adc	r31, r31
    18a6:	ee 0f       	add	r30, r30
    18a8:	ff 1f       	adc	r31, r31
    18aa:	e0 5a       	subi	r30, 0xA0	; 160
    18ac:	fd 4d       	sbci	r31, 0xDD	; 221
    18ae:	91 89       	ldd	r25, Z+17	; 0x11
    18b0:	94 60       	ori	r25, 0x04	; 4
    18b2:	91 8b       	std	Z+17, r25	; 0x11
    18b4:	7a df       	rcall	.-268    	; 0x17aa <udd_ep_abort>
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	08 95       	ret

000018ba <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    18ba:	1f 92       	push	r1
    18bc:	0f 92       	push	r0
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	0f 92       	push	r0
    18c2:	11 24       	eor	r1, r1
    18c4:	0b b6       	in	r0, 0x3b	; 59
    18c6:	0f 92       	push	r0
    18c8:	0f 93       	push	r16
    18ca:	2f 93       	push	r18
    18cc:	3f 93       	push	r19
    18ce:	4f 93       	push	r20
    18d0:	5f 93       	push	r21
    18d2:	6f 93       	push	r22
    18d4:	7f 93       	push	r23
    18d6:	8f 93       	push	r24
    18d8:	9f 93       	push	r25
    18da:	af 93       	push	r26
    18dc:	bf 93       	push	r27
    18de:	ef 93       	push	r30
    18e0:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    18e2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    18e6:	88 23       	and	r24, r24
    18e8:	3c f4       	brge	.+14     	; 0x18f8 <__vector_125+0x3e>
		udd_ack_start_of_frame_event();
    18ea:	80 e8       	ldi	r24, 0x80	; 128
    18ec:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    18f0:	0e 94 3e 04 	call	0x87c	; 0x87c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    18f4:	a5 d1       	rcall	.+842    	; 0x1c40 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    18f6:	8c c0       	rjmp	.+280    	; 0x1a10 <__vector_125+0x156>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    18f8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    18fc:	82 ff       	sbrs	r24, 2
    18fe:	20 c0       	rjmp	.+64     	; 0x1940 <__vector_125+0x86>
		udd_ack_underflow_event();
    1900:	84 e0       	ldi	r24, 0x04	; 4
    1902:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    1906:	80 91 78 22 	lds	r24, 0x2278	; 0x802278 <udd_sram+0x18>
    190a:	86 ff       	sbrs	r24, 6
    190c:	81 c0       	rjmp	.+258    	; 0x1a10 <__vector_125+0x156>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    190e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1912:	81 fd       	sbrc	r24, 1
    1914:	7d c0       	rjmp	.+250    	; 0x1a10 <__vector_125+0x156>
    1916:	c0 db       	rcall	.-2176   	; 0x1098 <udd_ctrl_interrupt_tc_setup>
    1918:	81 11       	cpse	r24, r1
    191a:	7a c0       	rjmp	.+244    	; 0x1a10 <__vector_125+0x156>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    191c:	80 91 5f 22 	lds	r24, 0x225F	; 0x80225f <udd_ep_control_state>
    1920:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1922:	11 f4       	brne	.+4      	; 0x1928 <__vector_125+0x6e>
    1924:	f4 da       	rcall	.-2584   	; 0xf0e <udd_ctrl_send_zlp_in>
    1926:	74 c0       	rjmp	.+232    	; 0x1a10 <__vector_125+0x156>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1928:	84 30       	cpi	r24, 0x04	; 4
    192a:	09 f0       	breq	.+2      	; 0x192e <__vector_125+0x74>
    192c:	71 c0       	rjmp	.+226    	; 0x1a10 <__vector_125+0x156>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    192e:	e9 e7       	ldi	r30, 0x79	; 121
    1930:	f2 e2       	ldi	r31, 0x22	; 34
    1932:	04 e0       	ldi	r16, 0x04	; 4
    1934:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1936:	e1 e7       	ldi	r30, 0x71	; 113
    1938:	f2 e2       	ldi	r31, 0x22	; 34
    193a:	04 e0       	ldi	r16, 0x04	; 4
    193c:	05 93       	las	Z, r16
    193e:	68 c0       	rjmp	.+208    	; 0x1a10 <__vector_125+0x156>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    1940:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    1944:	81 ff       	sbrs	r24, 1
    1946:	5f c0       	rjmp	.+190    	; 0x1a06 <__vector_125+0x14c>
		udd_ack_overflow_event();
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    194e:	80 91 70 22 	lds	r24, 0x2270	; 0x802270 <udd_sram+0x10>
    1952:	86 ff       	sbrs	r24, 6
    1954:	5d c0       	rjmp	.+186    	; 0x1a10 <__vector_125+0x156>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    1956:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    195a:	81 fd       	sbrc	r24, 1
    195c:	59 c0       	rjmp	.+178    	; 0x1a10 <__vector_125+0x156>
    195e:	9c db       	rcall	.-2248   	; 0x1098 <udd_ctrl_interrupt_tc_setup>
    1960:	81 11       	cpse	r24, r1
    1962:	56 c0       	rjmp	.+172    	; 0x1a10 <__vector_125+0x156>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    1964:	80 91 5f 22 	lds	r24, 0x225F	; 0x80225f <udd_ep_control_state>
    1968:	82 30       	cpi	r24, 0x02	; 2
    196a:	41 f4       	brne	.+16     	; 0x197c <__vector_125+0xc2>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    196c:	84 e0       	ldi	r24, 0x04	; 4
    196e:	80 93 5f 22 	sts	0x225F, r24	; 0x80225f <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    1972:	e0 e7       	ldi	r30, 0x70	; 112
    1974:	f2 e2       	ldi	r31, 0x22	; 34
    1976:	02 e0       	ldi	r16, 0x02	; 2
    1978:	06 93       	lac	Z, r16
    197a:	4a c0       	rjmp	.+148    	; 0x1a10 <__vector_125+0x156>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    197c:	83 30       	cpi	r24, 0x03	; 3
    197e:	09 f0       	breq	.+2      	; 0x1982 <__vector_125+0xc8>
    1980:	47 c0       	rjmp	.+142    	; 0x1a10 <__vector_125+0x156>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1982:	e9 e7       	ldi	r30, 0x79	; 121
    1984:	f2 e2       	ldi	r31, 0x22	; 34
    1986:	04 e0       	ldi	r16, 0x04	; 4
    1988:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    198a:	e1 e7       	ldi	r30, 0x71	; 113
    198c:	f2 e2       	ldi	r31, 0x22	; 34
    198e:	04 e0       	ldi	r16, 0x04	; 4
    1990:	05 93       	las	Z, r16
    1992:	3e c0       	rjmp	.+124    	; 0x1a10 <__vector_125+0x156>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    1994:	80 e1       	ldi	r24, 0x10	; 16
    1996:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    199a:	81 e0       	ldi	r24, 0x01	; 1
			udd_ep_abort(i | USB_EP_DIR_IN);
    199c:	06 df       	rcall	.-500    	; 0x17aa <udd_ep_abort>
    199e:	81 e8       	ldi	r24, 0x81	; 129
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    19a0:	04 df       	rcall	.-504    	; 0x17aa <udd_ep_abort>
    19a2:	82 e0       	ldi	r24, 0x02	; 2
			udd_ep_abort(i | USB_EP_DIR_IN);
    19a4:	02 df       	rcall	.-508    	; 0x17aa <udd_ep_abort>
    19a6:	82 e8       	ldi	r24, 0x82	; 130
    19a8:	00 df       	rcall	.-512    	; 0x17aa <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	fe de       	rcall	.-516    	; 0x17aa <udd_ep_abort>
    19ae:	83 e8       	ldi	r24, 0x83	; 131
			udd_ep_abort(i | USB_EP_DIR_IN);
    19b0:	fc de       	rcall	.-520    	; 0x17aa <udd_ep_abort>
    19b2:	0e 94 14 04 	call	0x828	; 0x828 <udc_reset>
		}
#endif
		udc_reset();
    19b6:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>

		// Reset USB address to 0
		udd_set_device_address(0);
    19ba:	e0 e6       	ldi	r30, 0x60	; 96
    19bc:	f2 e2       	ldi	r31, 0x22	; 34
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    19be:	11 8a       	std	Z+17, r1	; 0x11
    19c0:	96 e0       	ldi	r25, 0x06	; 6
    19c2:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_clear_status(ep_ctrl);
    19c4:	80 e4       	ldi	r24, 0x40	; 64
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    19c6:	81 8b       	std	Z+17, r24	; 0x11
    19c8:	11 8e       	std	Z+25, r1	; 0x19
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    19ca:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_clear_status(ep_ctrl);
    19cc:	81 8f       	std	Z+25, r24	; 0x19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    19ce:	83 e5       	ldi	r24, 0x53	; 83
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    19d0:	92 e2       	ldi	r25, 0x22	; 34
    19d2:	84 8b       	std	Z+20, r24	; 0x14
    19d4:	95 8b       	std	Z+21, r25	; 0x15
    19d6:	68 da       	rcall	.-2864   	; 0xea8 <udd_ctrl_init>
		// Reset endpoint control management
		udd_ctrl_init();
    19d8:	1b c0       	rjmp	.+54     	; 0x1a10 <__vector_125+0x156>
		goto udd_interrupt_bus_event_end;
    19da:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
	}

	if (udd_is_suspend_event()) {
    19de:	86 ff       	sbrs	r24, 6
    19e0:	07 c0       	rjmp	.+14     	; 0x19f0 <__vector_125+0x136>
    19e2:	80 e4       	ldi	r24, 0x40	; 64
		udd_ack_suspend_event();
    19e4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    19e8:	80 e0       	ldi	r24, 0x00	; 0
		udd_sleep_mode(false); // Enter in SUSPEND mode
    19ea:	26 da       	rcall	.-2996   	; 0xe38 <udd_sleep_mode>
    19ec:	27 d1       	rcall	.+590    	; 0x1c3c <main_suspend_action>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    19ee:	10 c0       	rjmp	.+32     	; 0x1a10 <__vector_125+0x156>
    19f0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    19f4:	85 ff       	sbrs	r24, 5
    19f6:	0c c0       	rjmp	.+24     	; 0x1a10 <__vector_125+0x156>
    19f8:	80 e2       	ldi	r24, 0x20	; 32
    19fa:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udd_ack_resume_event();
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	1b da       	rcall	.-3018   	; 0xe38 <udd_sleep_mode>
		udd_sleep_mode(true); // Enter in power reduction mode
    1a02:	1d d1       	rcall	.+570    	; 0x1c3e <main_resume_action>
    1a04:	05 c0       	rjmp	.+10     	; 0x1a10 <__vector_125+0x156>
    1a06:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    1a0a:	84 fd       	sbrc	r24, 4
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    1a0c:	c3 cf       	rjmp	.-122    	; 0x1994 <__vector_125+0xda>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    1a0e:	e5 cf       	rjmp	.-54     	; 0x19da <__vector_125+0x120>
    1a10:	ff 91       	pop	r31
    1a12:	ef 91       	pop	r30
    1a14:	bf 91       	pop	r27
    1a16:	af 91       	pop	r26
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    1a18:	9f 91       	pop	r25
    1a1a:	8f 91       	pop	r24
    1a1c:	7f 91       	pop	r23
    1a1e:	6f 91       	pop	r22
    1a20:	5f 91       	pop	r21
    1a22:	4f 91       	pop	r20
    1a24:	3f 91       	pop	r19
    1a26:	2f 91       	pop	r18
    1a28:	0f 91       	pop	r16
    1a2a:	0f 90       	pop	r0
    1a2c:	0b be       	out	0x3b, r0	; 59
    1a2e:	0f 90       	pop	r0
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	0f 90       	pop	r0
    1a34:	1f 90       	pop	r1
    1a36:	18 95       	reti

00001a38 <__vector_126>:
    1a38:	1f 92       	push	r1
    1a3a:	0f 92       	push	r0
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	0f 92       	push	r0
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1a40:	11 24       	eor	r1, r1
    1a42:	0b b6       	in	r0, 0x3b	; 59
    1a44:	0f 92       	push	r0
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	2f 93       	push	r18
    1a4c:	3f 93       	push	r19
    1a4e:	4f 93       	push	r20
    1a50:	5f 93       	push	r21
    1a52:	6f 93       	push	r22
    1a54:	7f 93       	push	r23
    1a56:	8f 93       	push	r24
    1a58:	9f 93       	push	r25
    1a5a:	af 93       	push	r26
    1a5c:	bf 93       	push	r27
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	ef 93       	push	r30
    1a64:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1a66:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1a6a:	81 fd       	sbrc	r24, 1
    1a6c:	03 c0       	rjmp	.+6      	; 0x1a74 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    1a6e:	14 db       	rcall	.-2520   	; 0x1098 <udd_ctrl_interrupt_tc_setup>
    1a70:	81 11       	cpse	r24, r1
    1a72:	bb c0       	rjmp	.+374    	; 0x1bea <__vector_126+0x1b2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1a7a:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1a7e:	81 95       	neg	r24
    1a80:	88 0f       	add	r24, r24
    1a82:	e0 e7       	ldi	r30, 0x70	; 112
    1a84:	f2 e2       	ldi	r31, 0x22	; 34
    1a86:	e8 1b       	sub	r30, r24
    1a88:	f1 09       	sbc	r31, r1
    1a8a:	20 81       	ld	r18, Z
    1a8c:	31 81       	ldd	r19, Z+1	; 0x01
    1a8e:	20 57       	subi	r18, 0x70	; 112
    1a90:	32 42       	sbci	r19, 0x22	; 34
    1a92:	36 95       	lsr	r19
    1a94:	27 95       	ror	r18
    1a96:	36 95       	lsr	r19
    1a98:	27 95       	ror	r18
    1a9a:	36 95       	lsr	r19
    1a9c:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    1a9e:	82 2f       	mov	r24, r18
    1aa0:	86 95       	lsr	r24
    1aa2:	20 fd       	sbrc	r18, 0
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <__vector_126+0x72>
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <__vector_126+0x74>
    1aaa:	90 e8       	ldi	r25, 0x80	; 128
    1aac:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1aae:	e8 2f       	mov	r30, r24
    1ab0:	ef 70       	andi	r30, 0x0F	; 15
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	ee 0f       	add	r30, r30
    1ab6:	ff 1f       	adc	r31, r31
    1ab8:	28 2f       	mov	r18, r24
    1aba:	08 2e       	mov	r0, r24
    1abc:	00 0c       	add	r0, r0
    1abe:	33 0b       	sbc	r19, r19
    1ac0:	22 27       	eor	r18, r18
    1ac2:	33 0f       	add	r19, r19
    1ac4:	22 1f       	adc	r18, r18
    1ac6:	33 27       	eor	r19, r19
    1ac8:	e2 0f       	add	r30, r18
    1aca:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1acc:	df 01       	movw	r26, r30
    1ace:	aa 0f       	add	r26, r26
    1ad0:	bb 1f       	adc	r27, r27
    1ad2:	aa 0f       	add	r26, r26
    1ad4:	bb 1f       	adc	r27, r27
    1ad6:	aa 0f       	add	r26, r26
    1ad8:	bb 1f       	adc	r27, r27
    1ada:	a0 59       	subi	r26, 0x90	; 144
    1adc:	bd 4d       	sbci	r27, 0xDD	; 221
    1ade:	9c 91       	ld	r25, X
    1ae0:	95 ff       	sbrs	r25, 5
    1ae2:	83 c0       	rjmp	.+262    	; 0x1bea <__vector_126+0x1b2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    1ae4:	fd 01       	movw	r30, r26
    1ae6:	00 e2       	ldi	r16, 0x20	; 32
    1ae8:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    1aea:	81 11       	cpse	r24, r1
    1aec:	79 c0       	rjmp	.+242    	; 0x1be0 <__vector_126+0x1a8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1aee:	80 91 5f 22 	lds	r24, 0x225F	; 0x80225f <udd_ep_control_state>
    1af2:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    1af4:	19 f4       	brne	.+6      	; 0x1afc <__vector_126+0xc4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1af6:	19 da       	rcall	.-3022   	; 0xf2a <udd_ctrl_endofrequest>
    1af8:	d7 d9       	rcall	.-3154   	; 0xea8 <udd_ctrl_init>
    1afa:	77 c0       	rjmp	.+238    	; 0x1bea <__vector_126+0x1b2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1afc:	00 91 72 22 	lds	r16, 0x2272	; 0x802272 <udd_sram+0x12>
    1b00:	10 91 73 22 	lds	r17, 0x2273	; 0x802273 <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1b04:	80 91 c7 22 	lds	r24, 0x22C7	; 0x8022c7 <udd_g_ctrlreq+0xa>
    1b08:	90 91 c8 22 	lds	r25, 0x22C8	; 0x8022c8 <udd_g_ctrlreq+0xb>
    1b0c:	c0 91 5b 22 	lds	r28, 0x225B	; 0x80225b <udd_ctrl_payload_nb_trans>
    1b10:	d0 91 5c 22 	lds	r29, 0x225C	; 0x80225c <udd_ctrl_payload_nb_trans+0x1>
    1b14:	98 01       	movw	r18, r16
    1b16:	2c 0f       	add	r18, r28
    1b18:	3d 1f       	adc	r19, r29
    1b1a:	82 17       	cp	r24, r18
    1b1c:	93 07       	cpc	r25, r19
    1b1e:	18 f4       	brcc	.+6      	; 0x1b26 <__vector_126+0xee>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1b20:	8c 01       	movw	r16, r24
    1b22:	0c 1b       	sub	r16, r28
    1b24:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    1b26:	80 91 c5 22 	lds	r24, 0x22C5	; 0x8022c5 <udd_g_ctrlreq+0x8>
    1b2a:	90 91 c6 22 	lds	r25, 0x22C6	; 0x8022c6 <udd_g_ctrlreq+0x9>
    1b2e:	a8 01       	movw	r20, r16
    1b30:	63 e5       	ldi	r22, 0x53	; 83
    1b32:	72 e2       	ldi	r23, 0x22	; 34
    1b34:	8c 0f       	add	r24, r28
    1b36:	9d 1f       	adc	r25, r29
    1b38:	b5 d0       	rcall	.+362    	; 0x1ca4 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1b3a:	c0 0f       	add	r28, r16
    1b3c:	d1 1f       	adc	r29, r17
    1b3e:	c0 93 5b 22 	sts	0x225B, r28	; 0x80225b <udd_ctrl_payload_nb_trans>
    1b42:	d0 93 5c 22 	sts	0x225C, r29	; 0x80225c <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1b46:	08 30       	cpi	r16, 0x08	; 8
    1b48:	11 05       	cpc	r17, r1
    1b4a:	69 f4       	brne	.+26     	; 0x1b66 <__vector_126+0x12e>
    1b4c:	80 91 5d 22 	lds	r24, 0x225D	; 0x80225d <udd_ctrl_prev_payload_nb_trans>
    1b50:	90 91 5e 22 	lds	r25, 0x225E	; 0x80225e <udd_ctrl_prev_payload_nb_trans+0x1>
    1b54:	8c 0f       	add	r24, r28
    1b56:	9d 1f       	adc	r25, r29
    1b58:	20 91 c3 22 	lds	r18, 0x22C3	; 0x8022c3 <udd_g_ctrlreq+0x6>
    1b5c:	30 91 c4 22 	lds	r19, 0x22C4	; 0x8022c4 <udd_g_ctrlreq+0x7>
    1b60:	82 17       	cp	r24, r18
    1b62:	93 07       	cpc	r25, r19
    1b64:	80 f0       	brcs	.+32     	; 0x1b86 <__vector_126+0x14e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1b66:	ed eb       	ldi	r30, 0xBD	; 189
    1b68:	f2 e2       	ldi	r31, 0x22	; 34
    1b6a:	c2 87       	std	Z+10, r28	; 0x0a
    1b6c:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1b6e:	06 84       	ldd	r0, Z+14	; 0x0e
    1b70:	f7 85       	ldd	r31, Z+15	; 0x0f
    1b72:	e0 2d       	mov	r30, r0
    1b74:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    1b76:	29 f0       	breq	.+10     	; 0x1b82 <__vector_126+0x14a>
    1b78:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    1b7a:	81 11       	cpse	r24, r1
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <__vector_126+0x14a>
    1b7e:	b9 d9       	rcall	.-3214   	; 0xef2 <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    1b80:	34 c0       	rjmp	.+104    	; 0x1bea <__vector_126+0x1b2>
    1b82:	c5 d9       	rcall	.-3190   	; 0xf0e <udd_ctrl_send_zlp_in>
    1b84:	32 c0       	rjmp	.+100    	; 0x1bea <__vector_126+0x1b2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1b86:	80 91 c7 22 	lds	r24, 0x22C7	; 0x8022c7 <udd_g_ctrlreq+0xa>
    1b8a:	90 91 c8 22 	lds	r25, 0x22C8	; 0x8022c8 <udd_g_ctrlreq+0xb>
    1b8e:	c8 17       	cp	r28, r24
    1b90:	d9 07       	cpc	r29, r25
    1b92:	f9 f4       	brne	.+62     	; 0x1bd2 <__vector_126+0x19a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1b94:	e0 91 cb 22 	lds	r30, 0x22CB	; 0x8022cb <udd_g_ctrlreq+0xe>
    1b98:	f0 91 cc 22 	lds	r31, 0x22CC	; 0x8022cc <udd_g_ctrlreq+0xf>
    1b9c:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    1b9e:	11 f4       	brne	.+4      	; 0x1ba4 <__vector_126+0x16c>
    1ba0:	a8 d9       	rcall	.-3248   	; 0xef2 <udd_ctrl_stall_data>
    1ba2:	23 c0       	rjmp	.+70     	; 0x1bea <__vector_126+0x1b2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1ba4:	19 95       	eicall
    1ba6:	81 11       	cpse	r24, r1
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <__vector_126+0x176>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1baa:	a3 d9       	rcall	.-3258   	; 0xef2 <udd_ctrl_stall_data>
    1bac:	1e c0       	rjmp	.+60     	; 0x1bea <__vector_126+0x1b2>
    1bae:	20 91 5d 22 	lds	r18, 0x225D	; 0x80225d <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1bb2:	30 91 5e 22 	lds	r19, 0x225E	; 0x80225e <udd_ctrl_prev_payload_nb_trans+0x1>
    1bb6:	80 91 5b 22 	lds	r24, 0x225B	; 0x80225b <udd_ctrl_payload_nb_trans>
    1bba:	90 91 5c 22 	lds	r25, 0x225C	; 0x80225c <udd_ctrl_payload_nb_trans+0x1>
    1bbe:	82 0f       	add	r24, r18
    1bc0:	93 1f       	adc	r25, r19
    1bc2:	80 93 5d 22 	sts	0x225D, r24	; 0x80225d <udd_ctrl_prev_payload_nb_trans>
    1bc6:	90 93 5e 22 	sts	0x225E, r25	; 0x80225e <udd_ctrl_prev_payload_nb_trans+0x1>
    1bca:	10 92 5b 22 	sts	0x225B, r1	; 0x80225b <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1bce:	10 92 5c 22 	sts	0x225C, r1	; 0x80225c <udd_ctrl_payload_nb_trans+0x1>
    1bd2:	e0 e7       	ldi	r30, 0x70	; 112
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1bd4:	f2 e2       	ldi	r31, 0x22	; 34
    1bd6:	02 e0       	ldi	r16, 0x02	; 2
    1bd8:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    1bda:	00 e2       	ldi	r16, 0x20	; 32
    1bdc:	06 93       	lac	Z, r16
    1bde:	05 c0       	rjmp	.+10     	; 0x1bea <__vector_126+0x1b2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1be0:	80 38       	cpi	r24, 0x80	; 128
    1be2:	11 f4       	brne	.+4      	; 0x1be8 <__vector_126+0x1b0>
		udd_ctrl_in_sent();
    1be4:	aa d9       	rcall	.-3244   	; 0xf3a <udd_ctrl_in_sent>
    1be6:	01 c0       	rjmp	.+2      	; 0x1bea <__vector_126+0x1b2>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1be8:	c8 da       	rcall	.-2672   	; 0x117a <udd_ep_trans_complet>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1bea:	ff 91       	pop	r31
    1bec:	ef 91       	pop	r30
	}
#endif

udd_interrupt_tc_end:
	return;
}
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	bf 91       	pop	r27
    1bf4:	af 91       	pop	r26
    1bf6:	9f 91       	pop	r25
    1bf8:	8f 91       	pop	r24
    1bfa:	7f 91       	pop	r23
    1bfc:	6f 91       	pop	r22
    1bfe:	5f 91       	pop	r21
    1c00:	4f 91       	pop	r20
    1c02:	3f 91       	pop	r19
    1c04:	2f 91       	pop	r18
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	0f 90       	pop	r0
    1c0c:	0b be       	out	0x3b, r0	; 59
    1c0e:	0f 90       	pop	r0
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	0f 90       	pop	r0
    1c14:	1f 90       	pop	r1
    1c16:	18 95       	reti

00001c18 <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	irq_initialize_vectors();
    1c18:	87 e0       	ldi	r24, 0x07	; 7
    1c1a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();
    1c1e:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    1c20:	e7 eb       	ldi	r30, 0xB7	; 183
    1c22:	f2 e2       	ldi	r31, 0x22	; 34
    1c24:	10 82       	st	Z, r1
    1c26:	11 82       	std	Z+1, r1	; 0x01
    1c28:	12 82       	std	Z+2, r1	; 0x02
    1c2a:	13 82       	std	Z+3, r1	; 0x03
    1c2c:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();			// initialize sleep manager
	sysclk_init();				// initialize clock
    1c32:	0e 94 2b 01 	call	0x256	; 0x256 <sysclk_init>

	udc_start();
    1c36:	0e 94 12 04 	call	0x824	; 0x824 <udc_start>
    1c3a:	ff cf       	rjmp	.-2      	; 0x1c3a <main+0x22>

00001c3c <main_suspend_action>:
	while (true) { }
}

/* --------------------------------------------------------------------- */

void main_suspend_action(void) { }
    1c3c:	08 95       	ret

00001c3e <main_resume_action>:
void main_resume_action(void) { }
    1c3e:	08 95       	ret

00001c40 <main_sof_action>:

void main_sof_action(void) {
	if (!main_b_kbd_enable)
    1c40:	80 91 b6 22 	lds	r24, 0x22B6	; 0x8022b6 <main_b_kbd_enable>
    1c44:	81 11       	cpse	r24, r1
	return;
	if (!main_b_generic_enable)
    1c46:	80 91 b5 22 	lds	r24, 0x22B5	; 0x8022b5 <main_b_generic_enable>
    1c4a:	08 95       	ret

00001c4c <main_remotewakeup_enable>:
	// keypad_report();
	
	// BD76319_ui_process(udd_get_frame_number());
}

void main_remotewakeup_enable(void) { }
    1c4c:	08 95       	ret

00001c4e <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    1c4e:	08 95       	ret

00001c50 <main_kbd_enable>:

bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	80 93 b6 22 	sts	0x22B6, r24	; 0x8022b6 <main_b_kbd_enable>
	return true;
}
    1c56:	08 95       	ret

00001c58 <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    1c58:	10 92 b6 22 	sts	0x22B6, r1	; 0x8022b6 <main_b_kbd_enable>
    1c5c:	08 95       	ret

00001c5e <main_generic_enable>:

/* --------------------------------------------------------------------- */

bool main_generic_enable(void)
{
	main_b_generic_enable = true;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	80 93 b5 22 	sts	0x22B5, r24	; 0x8022b5 <main_b_generic_enable>
	return true;
}
    1c64:	08 95       	ret

00001c66 <main_generic_disable>:

void main_generic_disable(void)
{
	main_b_generic_enable = false;
    1c66:	10 92 b5 22 	sts	0x22B5, r1	; 0x8022b5 <main_b_generic_enable>
    1c6a:	08 95       	ret

00001c6c <__udivmodhi4>:
    1c6c:	aa 1b       	sub	r26, r26
    1c6e:	bb 1b       	sub	r27, r27
    1c70:	51 e1       	ldi	r21, 0x11	; 17
    1c72:	07 c0       	rjmp	.+14     	; 0x1c82 <__udivmodhi4_ep>

00001c74 <__udivmodhi4_loop>:
    1c74:	aa 1f       	adc	r26, r26
    1c76:	bb 1f       	adc	r27, r27
    1c78:	a6 17       	cp	r26, r22
    1c7a:	b7 07       	cpc	r27, r23
    1c7c:	10 f0       	brcs	.+4      	; 0x1c82 <__udivmodhi4_ep>
    1c7e:	a6 1b       	sub	r26, r22
    1c80:	b7 0b       	sbc	r27, r23

00001c82 <__udivmodhi4_ep>:
    1c82:	88 1f       	adc	r24, r24
    1c84:	99 1f       	adc	r25, r25
    1c86:	5a 95       	dec	r21
    1c88:	a9 f7       	brne	.-22     	; 0x1c74 <__udivmodhi4_loop>
    1c8a:	80 95       	com	r24
    1c8c:	90 95       	com	r25
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	08 95       	ret

00001c94 <__tablejump2__>:
    1c94:	ee 0f       	add	r30, r30
    1c96:	ff 1f       	adc	r31, r31
    1c98:	88 1f       	adc	r24, r24
    1c9a:	8b bf       	out	0x3b, r24	; 59
    1c9c:	07 90       	elpm	r0, Z+
    1c9e:	f6 91       	elpm	r31, Z
    1ca0:	e0 2d       	mov	r30, r0
    1ca2:	19 94       	eijmp

00001ca4 <memcpy>:
    1ca4:	fb 01       	movw	r30, r22
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <memcpy+0xa>
    1caa:	01 90       	ld	r0, Z+
    1cac:	0d 92       	st	X+, r0
    1cae:	41 50       	subi	r20, 0x01	; 1
    1cb0:	50 40       	sbci	r21, 0x00	; 0
    1cb2:	d8 f7       	brcc	.-10     	; 0x1caa <memcpy+0x6>
    1cb4:	08 95       	ret

00001cb6 <_exit>:
    1cb6:	f8 94       	cli

00001cb8 <__stop_program>:
    1cb8:	ff cf       	rjmp	.-2      	; 0x1cb8 <__stop_program>
