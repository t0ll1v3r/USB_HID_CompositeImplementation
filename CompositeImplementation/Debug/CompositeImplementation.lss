
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ad8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000198  00802000  00002ad8  00002b6c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000231  00802198  00802198  00002d04  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002d04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000568  00000000  00000000  00002d78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000af56  00000000  00000000  000032e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005203  00000000  00000000  0000e236  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a254  00000000  00000000  00013439  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c00  00000000  00000000  0001d690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036b9c  00000000  00000000  0001e290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000031fb  00000000  00000000  00054e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000698  00000000  00000000  00058028  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000d3ee  00000000  00000000  000586c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	2c c1       	rjmp	.+600    	; 0x25e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c1       	rjmp	.+596    	; 0x25e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c1       	rjmp	.+592    	; 0x25e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c1       	rjmp	.+588    	; 0x25e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c1       	rjmp	.+584    	; 0x25e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c1       	rjmp	.+580    	; 0x25e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c1       	rjmp	.+576    	; 0x25e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c1       	rjmp	.+572    	; 0x25e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c1       	rjmp	.+568    	; 0x25e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c1       	rjmp	.+564    	; 0x25e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	18 c1       	rjmp	.+560    	; 0x25e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c1       	rjmp	.+556    	; 0x25e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c1       	rjmp	.+552    	; 0x25e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c1       	rjmp	.+548    	; 0x25e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c1       	rjmp	.+544    	; 0x25e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c1       	rjmp	.+540    	; 0x25e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c1       	rjmp	.+536    	; 0x25e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c1       	rjmp	.+532    	; 0x25e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c1       	rjmp	.+528    	; 0x25e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c1       	rjmp	.+524    	; 0x25e <__bad_interrupt>
      52:	00 00       	nop
      54:	04 c1       	rjmp	.+520    	; 0x25e <__bad_interrupt>
      56:	00 00       	nop
      58:	02 c1       	rjmp	.+516    	; 0x25e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	00 c1       	rjmp	.+512    	; 0x25e <__bad_interrupt>
      5e:	00 00       	nop
      60:	fe c0       	rjmp	.+508    	; 0x25e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c0       	rjmp	.+504    	; 0x25e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c0       	rjmp	.+500    	; 0x25e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c0       	rjmp	.+496    	; 0x25e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c0       	rjmp	.+492    	; 0x25e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c0       	rjmp	.+488    	; 0x25e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c0       	rjmp	.+484    	; 0x25e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c0       	rjmp	.+480    	; 0x25e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c0       	rjmp	.+476    	; 0x25e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c0       	rjmp	.+472    	; 0x25e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c0       	rjmp	.+468    	; 0x25e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c0       	rjmp	.+464    	; 0x25e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c0       	rjmp	.+460    	; 0x25e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c0       	rjmp	.+456    	; 0x25e <__bad_interrupt>
      96:	00 00       	nop
      98:	e2 c0       	rjmp	.+452    	; 0x25e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e0 c0       	rjmp	.+448    	; 0x25e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	de c0       	rjmp	.+444    	; 0x25e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dc c0       	rjmp	.+440    	; 0x25e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	da c0       	rjmp	.+436    	; 0x25e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d8 c0       	rjmp	.+432    	; 0x25e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d6 c0       	rjmp	.+428    	; 0x25e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d4 c0       	rjmp	.+424    	; 0x25e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d2 c0       	rjmp	.+420    	; 0x25e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d0 c0       	rjmp	.+416    	; 0x25e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ce c0       	rjmp	.+412    	; 0x25e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cc c0       	rjmp	.+408    	; 0x25e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ca c0       	rjmp	.+404    	; 0x25e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c8 c0       	rjmp	.+400    	; 0x25e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c6 c0       	rjmp	.+396    	; 0x25e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c4 c0       	rjmp	.+392    	; 0x25e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c2 c0       	rjmp	.+388    	; 0x25e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <__bad_interrupt>
      de:	00 00       	nop
      e0:	be c0       	rjmp	.+380    	; 0x25e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bc c0       	rjmp	.+376    	; 0x25e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ba c0       	rjmp	.+372    	; 0x25e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b8 c0       	rjmp	.+368    	; 0x25e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b6 c0       	rjmp	.+364    	; 0x25e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b4 c0       	rjmp	.+360    	; 0x25e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b2 c0       	rjmp	.+356    	; 0x25e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b0 c0       	rjmp	.+352    	; 0x25e <__bad_interrupt>
      fe:	00 00       	nop
     100:	ae c0       	rjmp	.+348    	; 0x25e <__bad_interrupt>
     102:	00 00       	nop
     104:	ac c0       	rjmp	.+344    	; 0x25e <__bad_interrupt>
     106:	00 00       	nop
     108:	aa c0       	rjmp	.+340    	; 0x25e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a8 c0       	rjmp	.+336    	; 0x25e <__bad_interrupt>
     10e:	00 00       	nop
     110:	a6 c0       	rjmp	.+332    	; 0x25e <__bad_interrupt>
     112:	00 00       	nop
     114:	a4 c0       	rjmp	.+328    	; 0x25e <__bad_interrupt>
     116:	00 00       	nop
     118:	a2 c0       	rjmp	.+324    	; 0x25e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c0       	rjmp	.+320    	; 0x25e <__bad_interrupt>
     11e:	00 00       	nop
     120:	9e c0       	rjmp	.+316    	; 0x25e <__bad_interrupt>
     122:	00 00       	nop
     124:	9c c0       	rjmp	.+312    	; 0x25e <__bad_interrupt>
     126:	00 00       	nop
     128:	9a c0       	rjmp	.+308    	; 0x25e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	98 c0       	rjmp	.+304    	; 0x25e <__bad_interrupt>
     12e:	00 00       	nop
     130:	96 c0       	rjmp	.+300    	; 0x25e <__bad_interrupt>
     132:	00 00       	nop
     134:	94 c0       	rjmp	.+296    	; 0x25e <__bad_interrupt>
     136:	00 00       	nop
     138:	92 c0       	rjmp	.+292    	; 0x25e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	90 c0       	rjmp	.+288    	; 0x25e <__bad_interrupt>
     13e:	00 00       	nop
     140:	8e c0       	rjmp	.+284    	; 0x25e <__bad_interrupt>
     142:	00 00       	nop
     144:	8c c0       	rjmp	.+280    	; 0x25e <__bad_interrupt>
     146:	00 00       	nop
     148:	8a c0       	rjmp	.+276    	; 0x25e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	88 c0       	rjmp	.+272    	; 0x25e <__bad_interrupt>
     14e:	00 00       	nop
     150:	86 c0       	rjmp	.+268    	; 0x25e <__bad_interrupt>
     152:	00 00       	nop
     154:	84 c0       	rjmp	.+264    	; 0x25e <__bad_interrupt>
     156:	00 00       	nop
     158:	82 c0       	rjmp	.+260    	; 0x25e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	80 c0       	rjmp	.+256    	; 0x25e <__bad_interrupt>
     15e:	00 00       	nop
     160:	7e c0       	rjmp	.+252    	; 0x25e <__bad_interrupt>
     162:	00 00       	nop
     164:	7c c0       	rjmp	.+248    	; 0x25e <__bad_interrupt>
     166:	00 00       	nop
     168:	7a c0       	rjmp	.+244    	; 0x25e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	78 c0       	rjmp	.+240    	; 0x25e <__bad_interrupt>
     16e:	00 00       	nop
     170:	76 c0       	rjmp	.+236    	; 0x25e <__bad_interrupt>
     172:	00 00       	nop
     174:	74 c0       	rjmp	.+232    	; 0x25e <__bad_interrupt>
     176:	00 00       	nop
     178:	72 c0       	rjmp	.+228    	; 0x25e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	70 c0       	rjmp	.+224    	; 0x25e <__bad_interrupt>
     17e:	00 00       	nop
     180:	6e c0       	rjmp	.+220    	; 0x25e <__bad_interrupt>
     182:	00 00       	nop
     184:	6c c0       	rjmp	.+216    	; 0x25e <__bad_interrupt>
     186:	00 00       	nop
     188:	6a c0       	rjmp	.+212    	; 0x25e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	68 c0       	rjmp	.+208    	; 0x25e <__bad_interrupt>
     18e:	00 00       	nop
     190:	66 c0       	rjmp	.+204    	; 0x25e <__bad_interrupt>
     192:	00 00       	nop
     194:	64 c0       	rjmp	.+200    	; 0x25e <__bad_interrupt>
     196:	00 00       	nop
     198:	62 c0       	rjmp	.+196    	; 0x25e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	60 c0       	rjmp	.+192    	; 0x25e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5c c0       	rjmp	.+184    	; 0x25e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5a c0       	rjmp	.+180    	; 0x25e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	58 c0       	rjmp	.+176    	; 0x25e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	56 c0       	rjmp	.+172    	; 0x25e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	54 c0       	rjmp	.+168    	; 0x25e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	52 c0       	rjmp	.+164    	; 0x25e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	50 c0       	rjmp	.+160    	; 0x25e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4e c0       	rjmp	.+156    	; 0x25e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4c c0       	rjmp	.+152    	; 0x25e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4a c0       	rjmp	.+148    	; 0x25e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	48 c0       	rjmp	.+144    	; 0x25e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	46 c0       	rjmp	.+140    	; 0x25e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	44 c0       	rjmp	.+136    	; 0x25e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	40 c0       	rjmp	.+128    	; 0x25e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3e c0       	rjmp	.+124    	; 0x25e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3c c0       	rjmp	.+120    	; 0x25e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3a c0       	rjmp	.+116    	; 0x25e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	38 c0       	rjmp	.+112    	; 0x25e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	36 c0       	rjmp	.+108    	; 0x25e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 4d 13 	jmp	0x269a	; 0x269a <__vector_125>
     1f8:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__vector_126>
     1fc:	e6 03       	fmuls	r22, r22
     1fe:	2f 04       	cpc	r2, r15
     200:	dc 03       	fmulsu	r21, r20
     202:	31 04       	cpc	r3, r1
     204:	de 03       	fmulsu	r21, r22
     206:	e0 03       	fmuls	r22, r16
     208:	e2 03       	fmuls	r22, r18
     20a:	e4 03       	fmuls	r22, r20
     20c:	e6 03       	fmuls	r22, r22
     20e:	35 0e       	add	r3, r21
     210:	38 0e       	add	r3, r24
     212:	3b 0e       	add	r3, r27
     214:	3e 0e       	add	r3, r30
     216:	41 0e       	add	r4, r17
     218:	44 0e       	add	r4, r20
     21a:	47 0e       	add	r4, r23

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df e5       	ldi	r29, 0x5F	; 95
     226:	de bf       	out	0x3e, r29	; 62
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	11 e2       	ldi	r17, 0x21	; 33
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	e8 ed       	ldi	r30, 0xD8	; 216
     234:	fa e2       	ldi	r31, 0x2A	; 42
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a8 39       	cpi	r26, 0x98	; 152
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	23 e2       	ldi	r18, 0x23	; 35
     248:	a8 e9       	ldi	r26, 0x98	; 152
     24a:	b1 e2       	ldi	r27, 0x21	; 33
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	a9 3c       	cpi	r26, 0xC9	; 201
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 03 15 	call	0x2a06	; 0x2a06 <main>
     25a:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <_exit>

0000025e <__bad_interrupt>:
     25e:	d0 ce       	rjmp	.-608    	; 0x0 <__vectors>

00000260 <udi_hid_led_getsetting>:
		                 udi_hid_led_setreport);
}

uint8_t udi_hid_led_getsetting(void) {
	return 0;
}
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret

00000264 <udi_hid_led_setreport>:

static bool udi_hid_led_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8)) &&
     264:	30 91 bb 23 	lds	r19, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
     268:	20 91 bc 23 	lds	r18, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
     26c:	82 2f       	mov	r24, r18
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 97       	sbiw	r24, 0x02	; 2
     272:	c1 f4       	brne	.+48     	; 0x2a4 <udi_hid_led_setreport+0x40>
     274:	31 11       	cpse	r19, r1
     276:	18 c0       	rjmp	.+48     	; 0x2a8 <udi_hid_led_setreport+0x44>
	   (0 == (0xFF & udd_g_ctrlreq.req.wValue))                         &&
     278:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
     27c:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	a1 f4       	brne	.+40     	; 0x2ac <udi_hid_led_setreport+0x48>
	   (UDI_HID_LED_REPORT_OUT_SIZE == udd_g_ctrlreq.req.wLength))
	{
		udd_g_ctrlreq.payload      = udi_hid_led_report_out;
     284:	e9 eb       	ldi	r30, 0xB9	; 185
     286:	f3 e2       	ldi	r31, 0x23	; 35
     288:	88 e9       	ldi	r24, 0x98	; 152
     28a:	91 e2       	ldi	r25, 0x21	; 33
     28c:	80 87       	std	Z+8, r24	; 0x08
     28e:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.payload_size = UDI_HID_LED_REPORT_OUT_SIZE;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	82 87       	std	Z+10, r24	; 0x0a
     296:	93 87       	std	Z+11, r25	; 0x0b
		udd_g_ctrlreq.callback     = udi_hid_led_report_out_received;
     298:	84 e7       	ldi	r24, 0x74	; 116
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	84 87       	std	Z+12, r24	; 0x0c
     29e:	95 87       	std	Z+13, r25	; 0x0d
		return true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	08 95       	ret
	}
	return false;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 95       	ret
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
     2ac:	80 e0       	ldi	r24, 0x00	; 0
}
     2ae:	08 95       	ret

000002b0 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     2b4:	04 e7       	ldi	r16, 0x74	; 116
     2b6:	11 e0       	ldi	r17, 0x01	; 1
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	48 e9       	ldi	r20, 0x98	; 152
     2be:	51 e2       	ldi	r21, 0x21	; 33
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	08 95       	ret

000002ce <udi_hid_led_enable>:
		                                    iram_size_t     nb_received,
		                                    udd_ep_id_t     ep);

static bool udi_hid_led_report_out_enable(void);

bool udi_hid_led_enable(void) {
     2ce:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     2d0:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     2d4:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <__data_end>

	if(!udi_hid_led_report_out_enable())
     2d8:	eb df       	rcall	.-42     	; 0x2b0 <udi_hid_led_report_out_enable>
     2da:	c8 2f       	mov	r28, r24
     2dc:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     2de:	0e 94 39 15 	call	0x2a72	; 0x2a72 <main_led_enable>
	return true;
}
     2e2:	8c 2f       	mov	r24, r28
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     2e8:	81 11       	cpse	r24, r1
     2ea:	07 c0       	rjmp	.+14     	; 0x2fa <udi_hid_led_report_out_received+0x12>
     2ec:	61 30       	cpi	r22, 0x01	; 1
     2ee:	71 05       	cpc	r23, r1
     2f0:	21 f4       	brne	.+8      	; 0x2fa <udi_hid_led_report_out_received+0x12>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     2f2:	88 e9       	ldi	r24, 0x98	; 152
     2f4:	91 e2       	ldi	r25, 0x21	; 33
     2f6:	0e 94 40 15 	call	0x2a80	; 0x2a80 <main_led_report_out>
	}
	udi_hid_led_report_out_enable();
     2fa:	da cf       	rjmp	.-76     	; 0x2b0 <udi_hid_led_report_out_enable>
     2fc:	08 95       	ret

000002fe <udi_hid_led_disable>:
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     2fe:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <main_led_disable>
     302:	08 95       	ret

00000304 <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     304:	22 e3       	ldi	r18, 0x32	; 50
     306:	31 e0       	ldi	r19, 0x01	; 1
     308:	40 e0       	ldi	r20, 0x00	; 0
     30a:	50 e2       	ldi	r21, 0x20	; 32
     30c:	68 e9       	ldi	r22, 0x98	; 152
     30e:	71 e2       	ldi	r23, 0x21	; 33
     310:	8a e9       	ldi	r24, 0x9A	; 154
     312:	91 e2       	ldi	r25, 0x21	; 33
     314:	16 c7       	rjmp	.+3628   	; 0x1142 <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     316:	08 95       	ret

00000318 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     318:	e0 e0       	ldi	r30, 0x00	; 0
     31a:	f6 e0       	ldi	r31, 0x06	; 6
     31c:	9f ef       	ldi	r25, 0xFF	; 255
     31e:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     320:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     322:	e0 e2       	ldi	r30, 0x20	; 32
     324:	f6 e0       	ldi	r31, 0x06	; 6
     326:	3f e3       	ldi	r19, 0x3F	; 63
     328:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     32a:	88 e1       	ldi	r24, 0x18	; 24
     32c:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     32e:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     330:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     332:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     334:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     336:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     338:	20 ec       	ldi	r18, 0xC0	; 192
     33a:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     33c:	40 e4       	ldi	r20, 0x40	; 64
     33e:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     340:	40 e8       	ldi	r20, 0x80	; 128
     342:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     344:	e0 e4       	ldi	r30, 0x40	; 64
     346:	f6 e0       	ldi	r31, 0x06	; 6
     348:	4c ef       	ldi	r20, 0xFC	; 252
     34a:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     34c:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     34e:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     350:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     352:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     354:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     356:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     358:	43 e0       	ldi	r20, 0x03	; 3
     35a:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     35c:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     35e:	e0 e6       	ldi	r30, 0x60	; 96
     360:	f6 e0       	ldi	r31, 0x06	; 6
     362:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     364:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     366:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     368:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36a:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36c:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36e:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     370:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     372:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     374:	e0 e8       	ldi	r30, 0x80	; 128
     376:	f6 e0       	ldi	r31, 0x06	; 6
     378:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     37a:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     37c:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     37e:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     380:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     382:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     384:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     386:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     388:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     38a:	e0 ea       	ldi	r30, 0xA0	; 160
     38c:	f6 e0       	ldi	r31, 0x06	; 6
     38e:	90 ef       	ldi	r25, 0xF0	; 240
     390:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     392:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     394:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     396:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     398:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     39a:	8f e0       	ldi	r24, 0x0F	; 15
     39c:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     39e:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     3a0:	68 d2       	rcall	.+1232   	; 0x872 <led_init>
	keypad_init();
     3a2:	0d c1       	rjmp	.+538    	; 0x5be <keypad_init>
     3a4:	08 95       	ret

000003a6 <jstk_readVertIndex>:
     3a6:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     3aa:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	92 2b       	or	r25, r18
     3b2:	96 95       	lsr	r25
     3b4:	87 95       	ror	r24
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
     3ba:	bc 01       	movw	r22, r24
     3bc:	7f 70       	andi	r23, 0x0F	; 15
     3be:	80 ff       	sbrs	r24, 0
     3c0:	17 c0       	rjmp	.+46     	; 0x3f0 <jstk_readVertIndex+0x4a>
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	e1 e0       	ldi	r30, 0x01	; 1
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	82 2f       	mov	r24, r18
     3cc:	af 01       	movw	r20, r30
     3ce:	02 2e       	mov	r0, r18
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <jstk_readVertIndex+0x30>
     3d2:	44 0f       	add	r20, r20
     3d4:	55 1f       	adc	r21, r21
     3d6:	0a 94       	dec	r0
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <jstk_readVertIndex+0x2c>
     3da:	46 23       	and	r20, r22
     3dc:	57 23       	and	r21, r23
     3de:	45 2b       	or	r20, r21
     3e0:	41 f0       	breq	.+16     	; 0x3f2 <jstk_readVertIndex+0x4c>
     3e2:	2f 5f       	subi	r18, 0xFF	; 255
     3e4:	3f 4f       	sbci	r19, 0xFF	; 255
     3e6:	2c 30       	cpi	r18, 0x0C	; 12
     3e8:	31 05       	cpc	r19, r1
     3ea:	79 f7       	brne	.-34     	; 0x3ca <jstk_readVertIndex+0x24>
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	08 95       	ret
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	08 95       	ret

000003f4 <jstk_readHoriIndex>:
     3f4:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     3f8:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	92 2b       	or	r25, r18
     400:	bc 01       	movw	r22, r24
     402:	7f 70       	andi	r23, 0x0F	; 15
     404:	80 ff       	sbrs	r24, 0
     406:	17 c0       	rjmp	.+46     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     408:	21 e0       	ldi	r18, 0x01	; 1
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	e1 e0       	ldi	r30, 0x01	; 1
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	82 2f       	mov	r24, r18
     412:	af 01       	movw	r20, r30
     414:	02 2e       	mov	r0, r18
     416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     418:	44 0f       	add	r20, r20
     41a:	55 1f       	adc	r21, r21
     41c:	0a 94       	dec	r0
     41e:	e2 f7       	brpl	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     420:	46 23       	and	r20, r22
     422:	57 23       	and	r21, r23
     424:	45 2b       	or	r20, r21
     426:	41 f0       	breq	.+16     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     428:	2f 5f       	subi	r18, 0xFF	; 255
     42a:	3f 4f       	sbci	r19, 0xFF	; 255
     42c:	2c 30       	cpi	r18, 0x0C	; 12
     42e:	31 05       	cpc	r19, r1
     430:	79 f7       	brne	.-34     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	08 95       	ret
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	08 95       	ret

0000043a <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     43a:	88 23       	and	r24, r24
     43c:	f4 f1       	brlt	.+124    	; 0x4ba <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     43e:	9b ef       	ldi	r25, 0xFB	; 251
     440:	98 0f       	add	r25, r24
     442:	92 30       	cpi	r25, 0x02	; 2
     444:	e0 f1       	brcs	.+120    	; 0x4be <jstk_ledMask+0x84>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     446:	85 30       	cpi	r24, 0x05	; 5
     448:	34 f4       	brge	.+12     	; 0x456 <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     44a:	95 e0       	ldi	r25, 0x05	; 5
     44c:	98 1b       	sub	r25, r24
     44e:	92 30       	cpi	r25, 0x02	; 2
     450:	08 f0       	brcs	.+2      	; 0x454 <jstk_ledMask+0x1a>
     452:	42 c0       	rjmp	.+132    	; 0x4d8 <jstk_ledMask+0x9e>
     454:	36 c0       	rjmp	.+108    	; 0x4c2 <jstk_ledMask+0x88>
     456:	9a ef       	ldi	r25, 0xFA	; 250
     458:	98 0f       	add	r25, r24
     45a:	92 30       	cpi	r25, 0x02	; 2
     45c:	b0 f5       	brcc	.+108    	; 0x4ca <jstk_ledMask+0x90>
     45e:	31 c0       	rjmp	.+98     	; 0x4c2 <jstk_ledMask+0x88>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     460:	62 e0       	ldi	r22, 0x02	; 2
     462:	23 e0       	ldi	r18, 0x03	; 3
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     46a:	e1 e0       	ldi	r30, 0x01	; 1
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	af 01       	movw	r20, r30
     470:	02 2e       	mov	r0, r18
     472:	02 c0       	rjmp	.+4      	; 0x478 <jstk_ledMask+0x3e>
     474:	44 0f       	add	r20, r20
     476:	55 1f       	adc	r21, r21
     478:	0a 94       	dec	r0
     47a:	e2 f7       	brpl	.-8      	; 0x474 <jstk_ledMask+0x3a>
     47c:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     47e:	9f 5f       	subi	r25, 0xFF	; 255
     480:	21 50       	subi	r18, 0x01	; 1
     482:	31 09       	sbc	r19, r1
     484:	96 17       	cp	r25, r22
     486:	98 f3       	brcs	.-26     	; 0x46e <jstk_ledMask+0x34>
     488:	08 95       	ret
     48a:	81 50       	subi	r24, 0x01	; 1
     48c:	48 2f       	mov	r20, r24
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	4b 5f       	subi	r20, 0xFB	; 251
     492:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     494:	24 e0       	ldi	r18, 0x04	; 4
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     49a:	e1 e0       	ldi	r30, 0x01	; 1
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	bf 01       	movw	r22, r30
     4a0:	02 2e       	mov	r0, r18
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <jstk_ledMask+0x6e>
     4a4:	66 0f       	add	r22, r22
     4a6:	77 1f       	adc	r23, r23
     4a8:	0a 94       	dec	r0
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <jstk_ledMask+0x6a>
     4ac:	86 2b       	or	r24, r22
     4ae:	2f 5f       	subi	r18, 0xFF	; 255
     4b0:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     4b2:	24 17       	cp	r18, r20
     4b4:	35 07       	cpc	r19, r21
     4b6:	99 f7       	brne	.-26     	; 0x49e <jstk_ledMask+0x64>
     4b8:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     4be:	88 e1       	ldi	r24, 0x18	; 24
     4c0:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     4c2:	85 30       	cpi	r24, 0x05	; 5
     4c4:	6c f2       	brlt	.-102    	; 0x460 <jstk_ledMask+0x26>
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	e0 cf       	rjmp	.-64     	; 0x48a <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4ca:	85 50       	subi	r24, 0x05	; 5
     4cc:	85 30       	cpi	r24, 0x05	; 5
     4ce:	08 f0       	brcs	.+2      	; 0x4d2 <jstk_ledMask+0x98>
     4d0:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     4d2:	81 11       	cpse	r24, r1
     4d4:	da cf       	rjmp	.-76     	; 0x48a <jstk_ledMask+0x50>
     4d6:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4d8:	66 e0       	ldi	r22, 0x06	; 6
     4da:	68 1b       	sub	r22, r24
     4dc:	65 30       	cpi	r22, 0x05	; 5
     4de:	08 f0       	brcs	.+2      	; 0x4e2 <jstk_ledMask+0xa8>
     4e0:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     4e2:	61 11       	cpse	r22, r1
     4e4:	be cf       	rjmp	.-132    	; 0x462 <jstk_ledMask+0x28>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     4e8:	08 95       	ret

000004ea <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     4ea:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     4ec:	5c df       	rcall	.-328    	; 0x3a6 <jstk_readVertIndex>
     4ee:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     4f0:	81 df       	rcall	.-254    	; 0x3f4 <jstk_readHoriIndex>
     4f2:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     4f4:	24 f4       	brge	.+8      	; 0x4fe <jstk_readMask+0x14>
     4f6:	88 23       	and	r24, r24
     4f8:	c4 f0       	brlt	.+48     	; 0x52a <jstk_readMask+0x40>
     4fa:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     4fc:	09 c0       	rjmp	.+18     	; 0x510 <jstk_readMask+0x26>
     4fe:	c6 30       	cpi	r28, 0x06	; 6
     500:	1c f0       	brlt	.+6      	; 0x508 <jstk_readMask+0x1e>
     502:	9b ef       	ldi	r25, 0xFB	; 251
     504:	9c 0f       	add	r25, r28
     506:	02 c0       	rjmp	.+4      	; 0x50c <jstk_readMask+0x22>
     508:	95 e0       	ldi	r25, 0x05	; 5
     50a:	9c 1b       	sub	r25, r28
     50c:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     50e:	54 f0       	brlt	.+20     	; 0x524 <jstk_readMask+0x3a>
     510:	86 30       	cpi	r24, 0x06	; 6
     512:	1c f0       	brlt	.+6      	; 0x51a <jstk_readMask+0x30>
     514:	2b ef       	ldi	r18, 0xFB	; 251
     516:	28 0f       	add	r18, r24
     518:	02 c0       	rjmp	.+4      	; 0x51e <jstk_readMask+0x34>
     51a:	25 e0       	ldi	r18, 0x05	; 5
     51c:	28 1b       	sub	r18, r24
     51e:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     520:	08 f4       	brcc	.+2      	; 0x524 <jstk_readMask+0x3a>
     522:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     524:	8c 2f       	mov	r24, r28
     526:	89 df       	rcall	.-238    	; 0x43a <jstk_ledMask>
     528:	01 c0       	rjmp	.+2      	; 0x52c <jstk_readMask+0x42>
     52a:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     52c:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     52e:	08 95       	ret

00000530 <jstk_usbTask>:
     530:	61 df       	rcall	.-318    	; 0x3f4 <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     532:	88 23       	and	r24, r24
     534:	3c f0       	brlt	.+14     	; 0x544 <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     536:	e8 2f       	mov	r30, r24
     538:	88 0f       	add	r24, r24
     53a:	ff 0b       	sbc	r31, r31
     53c:	e4 57       	subi	r30, 0x74	; 116
     53e:	fe 4d       	sbci	r31, 0xDE	; 222
     540:	80 81       	ld	r24, Z
     542:	01 c0       	rjmp	.+2      	; 0x546 <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     544:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     546:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <jstk_usbReport>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     54a:	2d df       	rcall	.-422    	; 0x3a6 <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     54c:	88 23       	and	r24, r24
     54e:	3c f0       	brlt	.+14     	; 0x55e <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     550:	e8 2f       	mov	r30, r24
     552:	88 0f       	add	r24, r24
     554:	ff 0b       	sbc	r31, r31
     556:	e4 57       	subi	r30, 0x74	; 116
     558:	fe 4d       	sbci	r31, 0xDE	; 222
     55a:	80 81       	ld	r24, Z
     55c:	01 c0       	rjmp	.+2      	; 0x560 <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     55e:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     560:	ec e9       	ldi	r30, 0x9C	; 156
     562:	f1 e2       	ldi	r31, 0x21	; 33
     564:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     566:	20 81       	ld	r18, Z
     568:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     56c:	29 13       	cpse	r18, r25
     56e:	04 c0       	rjmp	.+8      	; 0x578 <jstk_usbTask+0x48>
     570:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     574:	98 17       	cp	r25, r24
     576:	71 f0       	breq	.+28     	; 0x594 <jstk_usbTask+0x64>
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     578:	8c e9       	ldi	r24, 0x9C	; 156
     57a:	91 e2       	ldi	r25, 0x21	; 33
     57c:	f1 d4       	rcall	.+2530   	; 0xf60 <udi_hid_generic_send_report_in>
     57e:	88 23       	and	r24, r24
     580:	49 f0       	breq	.+18     	; 0x594 <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     582:	e6 e2       	ldi	r30, 0x26	; 38
     584:	f0 e2       	ldi	r31, 0x20	; 32
     586:	ac e9       	ldi	r26, 0x9C	; 156
     588:	b1 e2       	ldi	r27, 0x21	; 33
     58a:	8c 91       	ld	r24, X
     58c:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     58e:	11 96       	adiw	r26, 0x01	; 1
     590:	8c 91       	ld	r24, X
     592:	81 83       	std	Z+1, r24	; 0x01
     594:	08 95       	ret

00000596 <joystick>:
    }
}

void joystick(void) 
{
    jstk_mask = jstk_readMask();            // pick LED's
     596:	a9 df       	rcall	.-174    	; 0x4ea <jstk_readMask>
     598:	80 93 b0 23 	sts	0x23B0, r24	; 0x8023b0 <jstk_mask>
    jstk_testMode = PORTB.IN;               // checks switch for testing mode
     59c:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     5a0:	90 93 b1 23 	sts	0x23B1, r25	; 0x8023b1 <jstk_testMode>

    if ((jstk_testMode & PIN4_bm) == 0) {   // test mode
     5a4:	90 91 b1 23 	lds	r25, 0x23B1	; 0x8023b1 <jstk_testMode>
     5a8:	94 fd       	sbrc	r25, 4
     5aa:	07 c0       	rjmp	.+14     	; 0x5ba <joystick+0x24>
        if (jstk_mask) {
     5ac:	88 23       	and	r24, r24
            led_allOff();
     5ae:	31 f0       	breq	.+12     	; 0x5bc <joystick+0x26>
     5b0:	66 d1       	rcall	.+716    	; 0x87e <led_allOff>
            led_on(jstk_mask);
     5b2:	80 91 b0 23 	lds	r24, 0x23B0	; 0x8023b0 <jstk_mask>
     5b6:	67 c1       	rjmp	.+718    	; 0x886 <led_on>
        }
    } else {                                // normal mode
        // led_allOff();                       // for testing
        jstk_usbTask();                     // send to USB
     5b8:	08 95       	ret
     5ba:	ba cf       	rjmp	.-140    	; 0x530 <jstk_usbTask>
     5bc:	08 95       	ret

000005be <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     5be:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <kpd_keyPressed>
     5c2:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <kpd_currState>
     5c6:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <kpd_prevState>
     5ca:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <kpd_exitTestMode>
     5ce:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <kpd_rowVal>
     5d2:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <kpd_code>
     5d6:	ed ea       	ldi	r30, 0xAD	; 173
     5d8:	f1 e2       	ldi	r31, 0x21	; 33
     5da:	81 e6       	ldi	r24, 0x61	; 97
     5dc:	80 83       	st	Z, r24
     5de:	80 e6       	ldi	r24, 0x60	; 96
     5e0:	81 83       	std	Z+1, r24	; 0x01
     5e2:	12 82       	std	Z+2, r1	; 0x02
     5e4:	13 82       	std	Z+3, r1	; 0x03
     5e6:	8f e5       	ldi	r24, 0x5F	; 95
     5e8:	84 83       	std	Z+4, r24	; 0x04
     5ea:	8e e5       	ldi	r24, 0x5E	; 94
     5ec:	85 83       	std	Z+5, r24	; 0x05
     5ee:	16 82       	std	Z+6, r1	; 0x06
     5f0:	17 82       	std	Z+7, r1	; 0x07
     5f2:	8d e5       	ldi	r24, 0x5D	; 93
     5f4:	80 87       	std	Z+8, r24	; 0x08
     5f6:	11 86       	std	Z+9, r1	; 0x09
     5f8:	12 86       	std	Z+10, r1	; 0x0a
     5fa:	13 86       	std	Z+11, r1	; 0x0b
     5fc:	14 86       	std	Z+12, r1	; 0x0c
     5fe:	15 86       	std	Z+13, r1	; 0x0d
     600:	89 e5       	ldi	r24, 0x59	; 89
     602:	86 87       	std	Z+14, r24	; 0x0e
     604:	8b e5       	ldi	r24, 0x5B	; 91
     606:	87 87       	std	Z+15, r24	; 0x0f
     608:	10 8a       	std	Z+16, r1	; 0x10
     60a:	11 8a       	std	Z+17, r1	; 0x11
     60c:	8a e5       	ldi	r24, 0x5A	; 90
     60e:	82 8b       	std	Z+18, r24	; 0x12
     610:	8c e5       	ldi	r24, 0x5C	; 92
     612:	83 8b       	std	Z+19, r24	; 0x13
     614:	e8 ea       	ldi	r30, 0xA8	; 168
     616:	f1 e2       	ldi	r31, 0x21	; 33
     618:	8e e0       	ldi	r24, 0x0E	; 14
     61a:	80 83       	st	Z, r24
     61c:	8d e0       	ldi	r24, 0x0D	; 13
     61e:	81 83       	std	Z+1, r24	; 0x01
     620:	8b e0       	ldi	r24, 0x0B	; 11
     622:	82 83       	std	Z+2, r24	; 0x02
     624:	87 e0       	ldi	r24, 0x07	; 7
     626:	83 83       	std	Z+3, r24	; 0x03
     628:	8f ef       	ldi	r24, 0xFF	; 255
     62a:	84 83       	std	Z+4, r24	; 0x04
     62c:	08 95       	ret

0000062e <keypad_poll>:
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <kpd_detectedCol>
     636:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <kpd_count.5310>
     63a:	a0 ea       	ldi	r26, 0xA0	; 160
     63c:	b6 e0       	ldi	r27, 0x06	; 6
     63e:	c0 e2       	ldi	r28, 0x20	; 32
     640:	d6 e0       	ldi	r29, 0x06	; 6
     642:	90 e8       	ldi	r25, 0x80	; 128
     644:	62 e0       	ldi	r22, 0x02	; 2
     646:	25 e0       	ldi	r18, 0x05	; 5
     648:	54 e0       	ldi	r21, 0x04	; 4
     64a:	41 e0       	ldi	r20, 0x01	; 1
     64c:	33 e0       	ldi	r19, 0x03	; 3
     64e:	57 c0       	rjmp	.+174    	; 0x6fe <keypad_poll+0xd0>
     650:	e0 91 9e 21 	lds	r30, 0x219E	; 0x80219e <kpd_count.5310>
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	e8 55       	subi	r30, 0x58	; 88
     658:	fe 4d       	sbci	r31, 0xDE	; 222
     65a:	80 81       	ld	r24, Z
     65c:	14 96       	adiw	r26, 0x04	; 4
     65e:	8c 93       	st	X, r24
     660:	14 97       	sbiw	r26, 0x04	; 4
     662:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <kpd_count.5310>
     666:	84 30       	cpi	r24, 0x04	; 4
     668:	11 f4       	brne	.+4      	; 0x66e <keypad_poll+0x40>
     66a:	9e 83       	std	Y+6, r25	; 0x06
     66c:	01 c0       	rjmp	.+2      	; 0x670 <keypad_poll+0x42>
     66e:	9d 83       	std	Y+5, r25	; 0x05
     670:	18 96       	adiw	r26, 0x08	; 8
     672:	8c 91       	ld	r24, X
     674:	18 97       	sbiw	r26, 0x08	; 8
     676:	80 7f       	andi	r24, 0xF0	; 240
     678:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <kpd_rowVal>
     67c:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <kpd_rowVal>
     680:	80 3b       	cpi	r24, 0xB0	; 176
     682:	d1 f0       	breq	.+52     	; 0x6b8 <keypad_poll+0x8a>
     684:	18 f4       	brcc	.+6      	; 0x68c <keypad_poll+0x5e>
     686:	80 37       	cpi	r24, 0x70	; 112
     688:	01 f1       	breq	.+64     	; 0x6ca <keypad_poll+0x9c>
     68a:	28 c0       	rjmp	.+80     	; 0x6dc <keypad_poll+0xae>
     68c:	80 3d       	cpi	r24, 0xD0	; 208
     68e:	59 f0       	breq	.+22     	; 0x6a6 <keypad_poll+0x78>
     690:	80 3e       	cpi	r24, 0xE0	; 224
     692:	21 f5       	brne	.+72     	; 0x6dc <keypad_poll+0xae>
     694:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <kpd_detectedRow>
     698:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <kpd_count.5310>
     69c:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <kpd_detectedCol>
     6a0:	20 93 9e 21 	sts	0x219E, r18	; 0x80219e <kpd_count.5310>
     6a4:	2c c0       	rjmp	.+88     	; 0x6fe <keypad_poll+0xd0>
     6a6:	40 93 a6 21 	sts	0x21A6, r20	; 0x8021a6 <kpd_detectedRow>
     6aa:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <kpd_count.5310>
     6ae:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <kpd_detectedCol>
     6b2:	20 93 9e 21 	sts	0x219E, r18	; 0x80219e <kpd_count.5310>
     6b6:	23 c0       	rjmp	.+70     	; 0x6fe <keypad_poll+0xd0>
     6b8:	60 93 a6 21 	sts	0x21A6, r22	; 0x8021a6 <kpd_detectedRow>
     6bc:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <kpd_count.5310>
     6c0:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <kpd_detectedCol>
     6c4:	20 93 9e 21 	sts	0x219E, r18	; 0x80219e <kpd_count.5310>
     6c8:	1a c0       	rjmp	.+52     	; 0x6fe <keypad_poll+0xd0>
     6ca:	30 93 a6 21 	sts	0x21A6, r19	; 0x8021a6 <kpd_detectedRow>
     6ce:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <kpd_count.5310>
     6d2:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <kpd_detectedCol>
     6d6:	20 93 9e 21 	sts	0x219E, r18	; 0x80219e <kpd_count.5310>
     6da:	11 c0       	rjmp	.+34     	; 0x6fe <keypad_poll+0xd0>
     6dc:	50 93 a6 21 	sts	0x21A6, r21	; 0x8021a6 <kpd_detectedRow>
     6e0:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <kpd_count.5310>
     6e4:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <kpd_detectedCol>
     6e8:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <kpd_count.5310>
     6ec:	85 30       	cpi	r24, 0x05	; 5
     6ee:	10 f0       	brcs	.+4      	; 0x6f4 <keypad_poll+0xc6>
     6f0:	20 93 a5 21 	sts	0x21A5, r18	; 0x8021a5 <kpd_detectedCol>
     6f4:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <kpd_count.5310>
     6f8:	8f 5f       	subi	r24, 0xFF	; 255
     6fa:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <kpd_count.5310>
     6fe:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <kpd_count.5310>
     702:	85 30       	cpi	r24, 0x05	; 5
     704:	08 f4       	brcc	.+2      	; 0x708 <keypad_poll+0xda>
     706:	a4 cf       	rjmp	.-184    	; 0x650 <keypad_poll+0x22>
     708:	80 e8       	ldi	r24, 0x80	; 128
     70a:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     70e:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <kpd_detectedRow>
     712:	84 30       	cpi	r24, 0x04	; 4
     714:	e0 f4       	brcc	.+56     	; 0x74e <keypad_poll+0x120>
     716:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <kpd_detectedCol>
     71a:	85 30       	cpi	r24, 0x05	; 5
     71c:	c0 f4       	brcc	.+48     	; 0x74e <keypad_poll+0x120>
     71e:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_keyPressed>
     722:	81 11       	cpse	r24, r1
     724:	1a c0       	rjmp	.+52     	; 0x75a <keypad_poll+0x12c>
     726:	e0 91 a5 21 	lds	r30, 0x21A5	; 0x8021a5 <kpd_detectedCol>
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <kpd_detectedRow>
     730:	ee 0f       	add	r30, r30
     732:	ff 1f       	adc	r31, r31
     734:	ee 0f       	add	r30, r30
     736:	ff 1f       	adc	r31, r31
     738:	e3 55       	subi	r30, 0x53	; 83
     73a:	fe 4d       	sbci	r31, 0xDE	; 222
     73c:	e8 0f       	add	r30, r24
     73e:	f1 1d       	adc	r31, r1
     740:	80 81       	ld	r24, Z
     742:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <kpd_code>
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <kpd_keyPressed>
     74c:	06 c0       	rjmp	.+12     	; 0x75a <keypad_poll+0x12c>
     74e:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_keyPressed>
     752:	81 30       	cpi	r24, 0x01	; 1
     754:	11 f4       	brne	.+4      	; 0x75a <keypad_poll+0x12c>
     756:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <kpd_keyPressed>
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <keypad_getState>:
     760:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_keyPressed>
     764:	08 95       	ret

00000766 <keypad_report>:

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     766:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     76a:	80 93 b2 23 	sts	0x23B2, r24	; 0x8023b2 <kpd_testMode>
	}
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     76e:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     772:	80 93 a1 21 	sts	0x21A1, r24	; 0x8021a1 <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     776:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_codeOut = keypad_getCode();    // current code to be outputed
     77a:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <kpd_codeOut>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     77e:	80 91 b2 23 	lds	r24, 0x23B2	; 0x8023b2 <kpd_testMode>
     782:	84 fd       	sbrc	r24, 4
     784:	29 c0       	rjmp	.+82     	; 0x7d8 <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     786:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <kpd_currState>
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	09 f0       	breq	.+2      	; 0x790 <keypad_report+0x2a>
     78e:	57 c0       	rjmp	.+174    	; 0x83e <keypad_report+0xd8>
     790:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <kpd_prevState>
     794:	81 11       	cpse	r24, r1
     796:	53 c0       	rjmp	.+166    	; 0x83e <keypad_report+0xd8>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
     798:	e0 91 a0 21 	lds	r30, 0x21A0	; 0x8021a0 <kpd_codeOut>
     79c:	8e 2f       	mov	r24, r30
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	fc 01       	movw	r30, r24
     7a2:	e9 55       	subi	r30, 0x59	; 89
     7a4:	f1 09       	sbc	r31, r1
     7a6:	e9 30       	cpi	r30, 0x09	; 9
     7a8:	f1 05       	cpc	r31, r1
     7aa:	90 f4       	brcc	.+36     	; 0x7d0 <keypad_report+0x6a>
     7ac:	88 27       	eor	r24, r24
     7ae:	e2 50       	subi	r30, 0x02	; 2
     7b0:	ff 4f       	sbci	r31, 0xFF	; 255
     7b2:	8f 4f       	sbci	r24, 0xFF	; 255
     7b4:	0c 94 59 15 	jmp	0x2ab2	; 0x2ab2 <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     7b8:	84 e0       	ldi	r24, 0x04	; 4
     7ba:	09 c0       	rjmp	.+18     	; 0x7ce <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     7bc:	80 e1       	ldi	r24, 0x10	; 16
     7be:	07 c0       	rjmp	.+14     	; 0x7ce <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     7c0:	80 e2       	ldi	r24, 0x20	; 32
     7c2:	05 c0       	rjmp	.+10     	; 0x7ce <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     7c4:	80 e4       	ldi	r24, 0x40	; 64
     7c6:	03 c0       	rjmp	.+6      	; 0x7ce <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     7c8:	80 e8       	ldi	r24, 0x80	; 128
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     7cc:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     7ce:	61 d0       	rcall	.+194    	; 0x892 <led_toggle>
			kpd_exitTestMode = 1;	// flag for exiting test mode
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	80 93 9f 21 	sts	0x219F, r24	; 0x80219f <kpd_exitTestMode>
     7d6:	33 c0       	rjmp	.+102    	; 0x83e <keypad_report+0xd8>
		}
	}
	else // normal mode
	{
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
     7d8:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <kpd_currState>
     7dc:	81 30       	cpi	r24, 0x01	; 1
     7de:	81 f4       	brne	.+32     	; 0x800 <keypad_report+0x9a>
     7e0:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <kpd_prevState>
     7e4:	81 11       	cpse	r24, r1
     7e6:	0c c0       	rjmp	.+24     	; 0x800 <keypad_report+0x9a>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     7e8:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <kpd_code>
		}
	}
	else // normal mode
	{
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
			kpd_codeOut = keypad_getCode();
     7ec:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <kpd_codeOut>
			BD76319_KeyToReport(kpd_currState, kpd_codeOut);
     7f0:	60 91 a0 21 	lds	r22, 0x21A0	; 0x8021a0 <kpd_codeOut>
     7f4:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <kpd_currState>
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	7e d2       	rcall	.+1276   	; 0xcfa <BD76319_KeyToReport>
     7fe:	13 c0       	rjmp	.+38     	; 0x826 <keypad_report+0xc0>
		} else if (kpd_currState == KEYPAD_RELEASED && kpd_prevState == KEYPAD_PRESSED) {
     800:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <kpd_currState>
     804:	81 11       	cpse	r24, r1
     806:	0f c0       	rjmp	.+30     	; 0x826 <keypad_report+0xc0>
     808:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <kpd_prevState>
     80c:	81 30       	cpi	r24, 0x01	; 1
     80e:	59 f4       	brne	.+22     	; 0x826 <keypad_report+0xc0>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     810:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <kpd_code>
	{
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
			kpd_codeOut = keypad_getCode();
			BD76319_KeyToReport(kpd_currState, kpd_codeOut);
		} else if (kpd_currState == KEYPAD_RELEASED && kpd_prevState == KEYPAD_PRESSED) {
			kpd_codeOut = keypad_getCode();
     814:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <kpd_codeOut>
			BD76319_KeyToReport(kpd_currState, kpd_codeOut);
     818:	60 91 a0 21 	lds	r22, 0x21A0	; 0x8021a0 <kpd_codeOut>
     81c:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <kpd_currState>
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	6a d2       	rcall	.+1236   	; 0xcfa <BD76319_KeyToReport>
		}
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
     826:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <kpd_currState>
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	41 f4       	brne	.+16     	; 0x83e <keypad_report+0xd8>
     82e:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <kpd_prevState>
     832:	81 11       	cpse	r24, r1
     834:	04 c0       	rjmp	.+8      	; 0x83e <keypad_report+0xd8>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     836:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <kpd_code>
		} else if (kpd_currState == KEYPAD_RELEASED && kpd_prevState == KEYPAD_PRESSED) {
			kpd_codeOut = keypad_getCode();
			BD76319_KeyToReport(kpd_currState, kpd_codeOut);
		}
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
			kpd_codeOut = keypad_getCode();
     83a:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <kpd_codeOut>
		}
	}
	
	// clears LEDs when exiting test mode
	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     83e:	80 91 b2 23 	lds	r24, 0x23B2	; 0x8023b2 <kpd_testMode>
     842:	84 ff       	sbrs	r24, 4
     844:	07 c0       	rjmp	.+14     	; 0x854 <keypad_report+0xee>
     846:	80 91 9f 21 	lds	r24, 0x219F	; 0x80219f <kpd_exitTestMode>
     84a:	81 30       	cpi	r24, 0x01	; 1
		led_allOff();
     84c:	19 f4       	brne	.+6      	; 0x854 <keypad_report+0xee>
     84e:	17 d0       	rcall	.+46     	; 0x87e <led_allOff>
		kpd_exitTestMode = 0;
     850:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <kpd_exitTestMode>
	}
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
     854:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <kpd_currState>
     858:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <kpd_prevState>
}
     85c:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	b6 cf       	rjmp	.-148    	; 0x7ce <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     862:	88 e0       	ldi	r24, 0x08	; 8
     864:	b4 cf       	rjmp	.-152    	; 0x7ce <keypad_report+0x68>

00000866 <keypad>:
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
}

void keypad(void) {
	keypad_poll();
     866:	e3 de       	rcall	.-570    	; 0x62e <keypad_poll>
	keypad_report();
     868:	7e df       	rcall	.-260    	; 0x766 <keypad_report>
     86a:	0e 94 15 11 	call	0x222a	; 0x222a <udd_get_frame_number>
	BD76319_ui_process(udd_get_frame_number());
     86e:	4a c2       	rjmp	.+1172   	; 0xd04 <BD76319_ui_process>
     870:	08 95       	ret

00000872 <led_init>:
     872:	e0 e0       	ldi	r30, 0x00	; 0
    LED_PORT.DIRSET = LED_MASK;	// outputs
    LED_PORT.OUTSET = LED_MASK;
}

void led_allOn(void) {			// turns all LED's on
	LED_PORT.OUTCLR = LED_MASK;
     874:	f6 e0       	ldi	r31, 0x06	; 6
     876:	8f ef       	ldi	r24, 0xFF	; 255
     878:	81 83       	std	Z+1, r24	; 0x01
     87a:	85 83       	std	Z+5, r24	; 0x05
     87c:	08 95       	ret

0000087e <led_allOff>:
}

void led_allOff(void) {			// turns all LED's off
	LED_PORT.OUTSET = LED_MASK;
     87e:	8f ef       	ldi	r24, 0xFF	; 255
     880:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     884:	08 95       	ret

00000886 <led_on>:
}

void led_on(uint8_t mask) {		// LED on
    LED_PORT.OUTCLR = mask;		// drive low (on)
     886:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     88a:	08 95       	ret

0000088c <led_off>:
}

void led_off(uint8_t mask) {	// LED off
    LED_PORT.OUTSET = mask;		// drive high (off)
     88c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     890:	08 95       	ret

00000892 <led_toggle>:
}

void led_toggle(uint8_t mask) {	// toggle LED
    LED_PORT.OUTTGL = mask;
     892:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     896:	08 95       	ret

00000898 <led_setStatus>:
}

void led_setStatus(uint8_t mask) {
    LED_PORT.OUTSET = LED_MASK;
     898:	e0 e0       	ldi	r30, 0x00	; 0
     89a:	f6 e0       	ldi	r31, 0x06	; 6
     89c:	9f ef       	ldi	r25, 0xFF	; 255
     89e:	95 83       	std	Z+5, r25	; 0x05
    LED_PORT.OUTCLR = mask;
     8a0:	86 83       	std	Z+6, r24	; 0x06
     8a2:	08 95       	ret

000008a4 <startupSequence>:
#include "startup.h"
#include "joystick.h"


void startupSequence(int sequence)
{
     8a4:	6f 92       	push	r6
     8a6:	7f 92       	push	r7
     8a8:	8f 92       	push	r8
     8aa:	9f 92       	push	r9
     8ac:	af 92       	push	r10
     8ae:	bf 92       	push	r11
     8b0:	cf 92       	push	r12
     8b2:	df 92       	push	r13
     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	29 97       	sbiw	r28, 0x09	; 9
     8c6:	cd bf       	out	0x3d, r28	; 61
     8c8:	de bf       	out	0x3e, r29	; 62
	const uint8_t seq[8] = {
     8ca:	28 e0       	ldi	r18, 0x08	; 8
     8cc:	e4 e8       	ldi	r30, 0x84	; 132
     8ce:	f1 e2       	ldi	r31, 0x21	; 33
     8d0:	de 01       	movw	r26, r28
     8d2:	11 96       	adiw	r26, 0x01	; 1
     8d4:	01 90       	ld	r0, Z+
     8d6:	0d 92       	st	X+, r0
     8d8:	2a 95       	dec	r18
     8da:	e1 f7       	brne	.-8      	; 0x8d4 <startupSequence+0x30>
		LED5_PIN,
		LED6_PIN,
		LED7_PIN,
		LED8_PIN
	};
	volatile bool user_active = false;
     8dc:	19 86       	std	Y+9, r1	; 0x09

	switch (sequence) {
     8de:	83 30       	cpi	r24, 0x03	; 3
     8e0:	91 05       	cpc	r25, r1
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <startupSequence+0x42>
     8e4:	09 c1       	rjmp	.+530    	; 0xaf8 <startupSequence+0x254>
     8e6:	44 f4       	brge	.+16     	; 0x8f8 <startupSequence+0x54>
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	91 05       	cpc	r25, r1
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <startupSequence+0x4c>
     8ee:	4b c0       	rjmp	.+150    	; 0x986 <startupSequence+0xe2>
     8f0:	02 97       	sbiw	r24, 0x02	; 2
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <startupSequence+0x52>
     8f4:	aa c0       	rjmp	.+340    	; 0xa4a <startupSequence+0x1a6>
     8f6:	ef c1       	rjmp	.+990    	; 0xcd6 <startupSequence+0x432>
     8f8:	84 30       	cpi	r24, 0x04	; 4
     8fa:	91 05       	cpc	r25, r1
     8fc:	09 f4       	brne	.+2      	; 0x900 <startupSequence+0x5c>
     8fe:	54 c1       	rjmp	.+680    	; 0xba8 <startupSequence+0x304>
     900:	05 97       	sbiw	r24, 0x05	; 5
     902:	09 f4       	brne	.+2      	; 0x906 <startupSequence+0x62>
     904:	a5 c1       	rjmp	.+842    	; 0xc50 <startupSequence+0x3ac>
     906:	e7 c1       	rjmp	.+974    	; 0xcd6 <startupSequence+0x432>
		case 1:
			/* ---------------- sequential ----------------- */
			while (!user_active) {
				for (int i = 0; i < 8 && !user_active; i++) {
					led_on(seq[i]);
     908:	f8 01       	movw	r30, r16
     90a:	f1 90       	ld	r15, Z+
     90c:	8f 01       	movw	r16, r30
     90e:	8f 2d       	mov	r24, r15
     910:	ba df       	rcall	.-140    	; 0x886 <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     912:	ff e0       	ldi	r31, 0x0F	; 15
     914:	28 e9       	ldi	r18, 0x98	; 152
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	f1 50       	subi	r31, 0x01	; 1
     91a:	20 40       	sbci	r18, 0x00	; 0
     91c:	80 40       	sbci	r24, 0x00	; 0
     91e:	e1 f7       	brne	.-8      	; 0x918 <startupSequence+0x74>
     920:	00 c0       	rjmp	.+0      	; 0x922 <startupSequence+0x7e>
     922:	00 00       	nop
					_delay_ms(850);
					led_off(seq[i]);
     924:	8f 2d       	mov	r24, r15

					keypad_poll();
     926:	b2 df       	rcall	.-156    	; 0x88c <led_off>
     928:	82 de       	rcall	.-764    	; 0x62e <keypad_poll>
					if (keypad_getState() == KEYPAD_PRESSED)
     92a:	1a df       	rcall	.-460    	; 0x760 <keypad_getState>
     92c:	81 30       	cpi	r24, 0x01	; 1
     92e:	09 f4       	brne	.+2      	; 0x932 <startupSequence+0x8e>
						user_active = true;
     930:	e9 86       	std	Y+9, r14	; 0x09
					if (jstk_readMask() != 0)
     932:	db dd       	rcall	.-1098   	; 0x4ea <jstk_readMask>
     934:	81 11       	cpse	r24, r1
     936:	e9 86       	std	Y+9, r14	; 0x09
						user_active = true;
     938:	a0 16       	cp	r10, r16

	switch (sequence) {
		case 1:
			/* ---------------- sequential ----------------- */
			while (!user_active) {
				for (int i = 0; i < 8 && !user_active; i++) {
     93a:	b1 06       	cpc	r11, r17
     93c:	09 f4       	brne	.+2      	; 0x940 <startupSequence+0x9c>
     93e:	9d c1       	rjmp	.+826    	; 0xc7a <startupSequence+0x3d6>
     940:	89 85       	ldd	r24, Y+9	; 0x09
     942:	88 23       	and	r24, r24
     944:	09 f3       	breq	.-62     	; 0x908 <startupSequence+0x64>
     946:	99 c1       	rjmp	.+818    	; 0xc7a <startupSequence+0x3d6>
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 7; i >= 0 && !user_active; i--) {
					led_on(seq[i]);
     948:	f8 01       	movw	r30, r16
     94a:	f2 90       	ld	r15, -Z
     94c:	8f 01       	movw	r16, r30
     94e:	8f 2d       	mov	r24, r15
     950:	9a df       	rcall	.-204    	; 0x886 <led_on>
     952:	ff e0       	ldi	r31, 0x0F	; 15
     954:	28 e9       	ldi	r18, 0x98	; 152
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	f1 50       	subi	r31, 0x01	; 1
     95a:	20 40       	sbci	r18, 0x00	; 0
     95c:	80 40       	sbci	r24, 0x00	; 0
     95e:	e1 f7       	brne	.-8      	; 0x958 <startupSequence+0xb4>
					_delay_ms(850);
					led_off(seq[i]);
     960:	00 c0       	rjmp	.+0      	; 0x962 <startupSequence+0xbe>
     962:	00 00       	nop

					keypad_poll();
     964:	8f 2d       	mov	r24, r15
     966:	92 df       	rcall	.-220    	; 0x88c <led_off>
					if (keypad_getState() == KEYPAD_PRESSED)
     968:	62 de       	rcall	.-828    	; 0x62e <keypad_poll>
     96a:	fa de       	rcall	.-524    	; 0x760 <keypad_getState>
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	09 f4       	brne	.+2      	; 0x972 <startupSequence+0xce>
						user_active = true;
     970:	e9 86       	std	Y+9, r14	; 0x09
					if (jstk_readMask() != 0)
     972:	bb dd       	rcall	.-1162   	; 0x4ea <jstk_readMask>
     974:	81 11       	cpse	r24, r1
     976:	e9 86       	std	Y+9, r14	; 0x09
						user_active = true;
     978:	0c 15       	cp	r16, r12
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 7; i >= 0 && !user_active; i--) {
     97a:	1d 05       	cpc	r17, r13
     97c:	69 f0       	breq	.+26     	; 0x998 <startupSequence+0xf4>
     97e:	89 85       	ldd	r24, Y+9	; 0x09
     980:	88 23       	and	r24, r24
     982:	11 f3       	breq	.-60     	; 0x948 <startupSequence+0xa4>
     984:	09 c0       	rjmp	.+18     	; 0x998 <startupSequence+0xf4>
     986:	5e 01       	movw	r10, r28
     988:	99 e0       	ldi	r25, 0x09	; 9
     98a:	a9 0e       	add	r10, r25
     98c:	b1 1c       	adc	r11, r1
     98e:	ee 24       	eor	r14, r14

					keypad_poll();
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
     990:	e3 94       	inc	r14
     992:	fe 01       	movw	r30, r28
     994:	31 96       	adiw	r30, 0x01	; 1
     996:	6f 01       	movw	r12, r30
     998:	89 85       	ldd	r24, Y+9	; 0x09
	volatile bool user_active = false;

	switch (sequence) {
		case 1:
			/* ---------------- sequential ----------------- */
			while (!user_active) {
     99a:	81 11       	cpse	r24, r1
     99c:	07 c0       	rjmp	.+14     	; 0x9ac <startupSequence+0x108>
				for (int i = 0; i < 8 && !user_active; i++) {
     99e:	89 85       	ldd	r24, Y+9	; 0x09
     9a0:	81 11       	cpse	r24, r1
     9a2:	6b c1       	rjmp	.+726    	; 0xc7a <startupSequence+0x3d6>
     9a4:	8e 01       	movw	r16, r28
     9a6:	0f 5f       	subi	r16, 0xFF	; 255
     9a8:	1f 4f       	sbci	r17, 0xFF	; 255
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
			}
			led_allOff();
     9aa:	ae cf       	rjmp	.-164    	; 0x908 <startupSequence+0x64>
			break;
     9ac:	68 df       	rcall	.-304    	; 0x87e <led_allOff>
			/* ---------------- out-n-back ----------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
					int left = 3 - i;
					int right = 4 + i;
					led_on(seq[left]);
     9ae:	93 c1       	rjmp	.+806    	; 0xcd6 <startupSequence+0x432>
     9b0:	f8 01       	movw	r30, r16
     9b2:	72 90       	ld	r7, -Z
     9b4:	8f 01       	movw	r16, r30
     9b6:	87 2d       	mov	r24, r7
     9b8:	66 df       	rcall	.-308    	; 0x886 <led_on>
					led_on(seq[right]);
     9ba:	f6 01       	movw	r30, r12
     9bc:	f1 90       	ld	r15, Z+
     9be:	6f 01       	movw	r12, r30
     9c0:	8f 2d       	mov	r24, r15
     9c2:	61 df       	rcall	.-318    	; 0x886 <led_on>
     9c4:	ff e1       	ldi	r31, 0x1F	; 31
     9c6:	2f eb       	ldi	r18, 0xBF	; 191
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	f1 50       	subi	r31, 0x01	; 1
     9cc:	20 40       	sbci	r18, 0x00	; 0
     9ce:	80 40       	sbci	r24, 0x00	; 0
					_delay_ms(900);
					led_off(seq[left]);
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <startupSequence+0x126>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <startupSequence+0x130>
     9d4:	00 00       	nop
					led_off(seq[right]);
     9d6:	87 2d       	mov	r24, r7
     9d8:	59 df       	rcall	.-334    	; 0x88c <led_off>
     9da:	8f 2d       	mov	r24, r15

					keypad_poll();
     9dc:	57 df       	rcall	.-338    	; 0x88c <led_off>
     9de:	27 de       	rcall	.-946    	; 0x62e <keypad_poll>
					if (keypad_getState() == KEYPAD_PRESSED)
     9e0:	bf de       	rcall	.-642    	; 0x760 <keypad_getState>
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <startupSequence+0x144>
						user_active = true;
     9e6:	e9 86       	std	Y+9, r14	; 0x09
					if (jstk_readMask() != 0)
     9e8:	80 dd       	rcall	.-1280   	; 0x4ea <jstk_readMask>
     9ea:	81 11       	cpse	r24, r1
     9ec:	e9 86       	std	Y+9, r14	; 0x09
			led_allOff();
			break;
		case 2:
			/* ---------------- out-n-back ----------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
     9ee:	80 16       	cp	r8, r16
     9f0:	91 06       	cpc	r9, r17
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <startupSequence+0x152>
     9f4:	49 c1       	rjmp	.+658    	; 0xc88 <startupSequence+0x3e4>
     9f6:	89 85       	ldd	r24, Y+9	; 0x09
     9f8:	88 23       	and	r24, r24
     9fa:	d1 f2       	breq	.-76     	; 0x9b0 <startupSequence+0x10c>
     9fc:	45 c1       	rjmp	.+650    	; 0xc88 <startupSequence+0x3e4>
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
					int left = 3 - i;
					int right = 4 + i;
					led_on(seq[left]);
     9fe:	f3 01       	movw	r30, r6
     a00:	d1 90       	ld	r13, Z+
     a02:	3f 01       	movw	r6, r30
     a04:	8d 2d       	mov	r24, r13
					led_on(seq[right]);
     a06:	3f df       	rcall	.-386    	; 0x886 <led_on>
     a08:	f8 01       	movw	r30, r16
     a0a:	f2 90       	ld	r15, -Z
     a0c:	8f 01       	movw	r16, r30
     a0e:	8f 2d       	mov	r24, r15
     a10:	3a df       	rcall	.-396    	; 0x886 <led_on>
     a12:	ff e1       	ldi	r31, 0x1F	; 31
     a14:	2f eb       	ldi	r18, 0xBF	; 191
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	f1 50       	subi	r31, 0x01	; 1
     a1a:	20 40       	sbci	r18, 0x00	; 0
     a1c:	80 40       	sbci	r24, 0x00	; 0
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <startupSequence+0x174>
					_delay_ms(900);
					led_off(seq[left]);
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <startupSequence+0x17e>
     a22:	00 00       	nop
     a24:	8d 2d       	mov	r24, r13
					led_off(seq[right]);
     a26:	32 df       	rcall	.-412    	; 0x88c <led_off>
     a28:	8f 2d       	mov	r24, r15
     a2a:	30 df       	rcall	.-416    	; 0x88c <led_off>

					keypad_poll();
     a2c:	00 de       	rcall	.-1024   	; 0x62e <keypad_poll>
     a2e:	98 de       	rcall	.-720    	; 0x760 <keypad_getState>
					if (keypad_getState() == KEYPAD_PRESSED)
     a30:	81 30       	cpi	r24, 0x01	; 1
     a32:	09 f4       	brne	.+2      	; 0xa36 <startupSequence+0x192>
     a34:	e9 86       	std	Y+9, r14	; 0x09
     a36:	59 dd       	rcall	.-1358   	; 0x4ea <jstk_readMask>
						user_active = true;
     a38:	81 11       	cpse	r24, r1
					if (jstk_readMask() != 0)
     a3a:	e9 86       	std	Y+9, r14	; 0x09
     a3c:	0a 15       	cp	r16, r10
     a3e:	1b 05       	cpc	r17, r11
						user_active = true;
     a40:	69 f0       	breq	.+26     	; 0xa5c <startupSequence+0x1b8>
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     a42:	89 85       	ldd	r24, Y+9	; 0x09
     a44:	88 23       	and	r24, r24
     a46:	d9 f2       	breq	.-74     	; 0x9fe <startupSequence+0x15a>
     a48:	09 c0       	rjmp	.+18     	; 0xa5c <startupSequence+0x1b8>
     a4a:	fe 01       	movw	r30, r28
     a4c:	31 96       	adiw	r30, 0x01	; 1
     a4e:	4f 01       	movw	r8, r30
     a50:	ee 24       	eor	r14, r14

					keypad_poll();
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
     a52:	e3 94       	inc	r14
     a54:	5e 01       	movw	r10, r28
     a56:	f5 e0       	ldi	r31, 0x05	; 5
     a58:	af 0e       	add	r10, r31
     a5a:	b1 1c       	adc	r11, r1
			}
			led_allOff();
			break;
		case 2:
			/* ---------------- out-n-back ----------------- */
			while (!user_active) {
     a5c:	89 85       	ldd	r24, Y+9	; 0x09
     a5e:	81 11       	cpse	r24, r1
     a60:	08 c0       	rjmp	.+16     	; 0xa72 <startupSequence+0x1ce>
				for (int i = 0; i < 4 && !user_active; i++) {
     a62:	89 85       	ldd	r24, Y+9	; 0x09
     a64:	81 11       	cpse	r24, r1
     a66:	10 c1       	rjmp	.+544    	; 0xc88 <startupSequence+0x3e4>
     a68:	8e 01       	movw	r16, r28
     a6a:	0b 5f       	subi	r16, 0xFB	; 251
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
			}
			led_allOff();
     a6c:	1f 4f       	sbci	r17, 0xFF	; 255
     a6e:	68 01       	movw	r12, r16
			break;
     a70:	9f cf       	rjmp	.-194    	; 0x9b0 <startupSequence+0x10c>
			/* --------------- grow-n-shrink ---------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
					int left = 3 - i;
					int right = 4 + i;
					led_on(seq[left]);
     a72:	05 df       	rcall	.-502    	; 0x87e <led_allOff>
     a74:	30 c1       	rjmp	.+608    	; 0xcd6 <startupSequence+0x432>
     a76:	f8 01       	movw	r30, r16
     a78:	82 91       	ld	r24, -Z
     a7a:	8f 01       	movw	r16, r30
					led_on(seq[right]);
     a7c:	04 df       	rcall	.-504    	; 0x886 <led_on>
     a7e:	f7 01       	movw	r30, r14
     a80:	81 91       	ld	r24, Z+
     a82:	7f 01       	movw	r14, r30
     a84:	00 df       	rcall	.-512    	; 0x886 <led_on>
     a86:	ff e2       	ldi	r31, 0x2F	; 47
     a88:	27 e5       	ldi	r18, 0x57	; 87
     a8a:	85 e0       	ldi	r24, 0x05	; 5
     a8c:	f1 50       	subi	r31, 0x01	; 1
     a8e:	20 40       	sbci	r18, 0x00	; 0
     a90:	80 40       	sbci	r24, 0x00	; 0
     a92:	e1 f7       	brne	.-8      	; 0xa8c <startupSequence+0x1e8>
					_delay_ms(1750);

					keypad_poll();
     a94:	00 c0       	rjmp	.+0      	; 0xa96 <startupSequence+0x1f2>
     a96:	00 00       	nop
					if (keypad_getState() == KEYPAD_PRESSED)
     a98:	ca dd       	rcall	.-1132   	; 0x62e <keypad_poll>
     a9a:	62 de       	rcall	.-828    	; 0x760 <keypad_getState>
     a9c:	81 30       	cpi	r24, 0x01	; 1
						user_active = true;
					if (jstk_readMask() != 0)
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <startupSequence+0x1fe>
     aa0:	99 86       	std	Y+9, r9	; 0x09
     aa2:	23 dd       	rcall	.-1466   	; 0x4ea <jstk_readMask>
			led_allOff();
			break;
		case 3:
			/* --------------- grow-n-shrink ---------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
     aa4:	81 11       	cpse	r24, r1
     aa6:	99 86       	std	Y+9, r9	; 0x09
     aa8:	a0 16       	cp	r10, r16
     aaa:	b1 06       	cpc	r11, r17
     aac:	09 f4       	brne	.+2      	; 0xab0 <startupSequence+0x20c>
     aae:	f6 c0       	rjmp	.+492    	; 0xc9c <startupSequence+0x3f8>
     ab0:	89 85       	ldd	r24, Y+9	; 0x09
     ab2:	88 23       	and	r24, r24
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
					int left = 3 - i;
					int right = 4 + i;
					led_off(seq[left]);
     ab4:	01 f3       	breq	.-64     	; 0xa76 <startupSequence+0x1d2>
     ab6:	f2 c0       	rjmp	.+484    	; 0xc9c <startupSequence+0x3f8>
     ab8:	f7 01       	movw	r30, r14
     aba:	81 91       	ld	r24, Z+
     abc:	7f 01       	movw	r14, r30
					led_off(seq[right]);
     abe:	e6 de       	rcall	.-564    	; 0x88c <led_off>
     ac0:	f8 01       	movw	r30, r16
     ac2:	82 91       	ld	r24, -Z
     ac4:	8f 01       	movw	r16, r30
     ac6:	e2 de       	rcall	.-572    	; 0x88c <led_off>
     ac8:	ff e2       	ldi	r31, 0x2F	; 47
     aca:	27 e5       	ldi	r18, 0x57	; 87
     acc:	85 e0       	ldi	r24, 0x05	; 5
     ace:	f1 50       	subi	r31, 0x01	; 1
     ad0:	20 40       	sbci	r18, 0x00	; 0
     ad2:	80 40       	sbci	r24, 0x00	; 0
     ad4:	e1 f7       	brne	.-8      	; 0xace <startupSequence+0x22a>
     ad6:	00 c0       	rjmp	.+0      	; 0xad8 <startupSequence+0x234>
     ad8:	00 00       	nop
					_delay_ms(1750);

					keypad_poll();
     ada:	a9 dd       	rcall	.-1198   	; 0x62e <keypad_poll>
     adc:	41 de       	rcall	.-894    	; 0x760 <keypad_getState>
					if (keypad_getState() == KEYPAD_PRESSED)
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	09 f4       	brne	.+2      	; 0xae4 <startupSequence+0x240>
     ae2:	99 86       	std	Y+9, r9	; 0x09
						user_active = true;
     ae4:	02 dd       	rcall	.-1532   	; 0x4ea <jstk_readMask>
					if (jstk_readMask() != 0)
     ae6:	81 11       	cpse	r24, r1
     ae8:	99 86       	std	Y+9, r9	; 0x09
						user_active = true;
     aea:	0c 15       	cp	r16, r12
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     aec:	1d 05       	cpc	r17, r13
     aee:	69 f0       	breq	.+26     	; 0xb0a <startupSequence+0x266>
     af0:	89 85       	ldd	r24, Y+9	; 0x09
     af2:	88 23       	and	r24, r24
     af4:	09 f3       	breq	.-62     	; 0xab8 <startupSequence+0x214>
     af6:	09 c0       	rjmp	.+18     	; 0xb0a <startupSequence+0x266>
     af8:	fe 01       	movw	r30, r28
     afa:	31 96       	adiw	r30, 0x01	; 1
     afc:	5f 01       	movw	r10, r30

					keypad_poll();
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
     afe:	99 24       	eor	r9, r9
     b00:	93 94       	inc	r9
     b02:	6e 01       	movw	r12, r28
     b04:	f5 e0       	ldi	r31, 0x05	; 5
			}
			led_allOff();
			break;
		case 3:
			/* --------------- grow-n-shrink ---------------- */
			while (!user_active) {
     b06:	cf 0e       	add	r12, r31
     b08:	d1 1c       	adc	r13, r1
				for (int i = 0; i < 4 && !user_active; i++) {
     b0a:	89 85       	ldd	r24, Y+9	; 0x09
     b0c:	81 11       	cpse	r24, r1
     b0e:	09 c0       	rjmp	.+18     	; 0xb22 <startupSequence+0x27e>
     b10:	89 85       	ldd	r24, Y+9	; 0x09
     b12:	81 11       	cpse	r24, r1
     b14:	c3 c0       	rjmp	.+390    	; 0xc9c <startupSequence+0x3f8>
     b16:	7e 01       	movw	r14, r28
     b18:	25 e0       	ldi	r18, 0x05	; 5
     b1a:	e2 0e       	add	r14, r18
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
			}
			led_allOff();
     b1c:	f1 1c       	adc	r15, r1
     b1e:	87 01       	movw	r16, r14
			/* --------------- outward waves --------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
					int left = 3 - i;
					int right = 4 + i;
					led_on(seq[left]);
     b20:	aa cf       	rjmp	.-172    	; 0xa76 <startupSequence+0x1d2>
     b22:	ad de       	rcall	.-678    	; 0x87e <led_allOff>
     b24:	d8 c0       	rjmp	.+432    	; 0xcd6 <startupSequence+0x432>
     b26:	f8 01       	movw	r30, r16
					led_on(seq[right]);
     b28:	82 91       	ld	r24, -Z
     b2a:	8f 01       	movw	r16, r30
     b2c:	ac de       	rcall	.-680    	; 0x886 <led_on>
     b2e:	f7 01       	movw	r30, r14
     b30:	81 91       	ld	r24, Z+
     b32:	7f 01       	movw	r14, r30
     b34:	a8 de       	rcall	.-688    	; 0x886 <led_on>
     b36:	ff e2       	ldi	r31, 0x2F	; 47
     b38:	27 e5       	ldi	r18, 0x57	; 87
     b3a:	85 e0       	ldi	r24, 0x05	; 5
     b3c:	f1 50       	subi	r31, 0x01	; 1
     b3e:	20 40       	sbci	r18, 0x00	; 0
					_delay_ms(1750);

					keypad_poll();
     b40:	80 40       	sbci	r24, 0x00	; 0
     b42:	e1 f7       	brne	.-8      	; 0xb3c <startupSequence+0x298>
					if (keypad_getState() == KEYPAD_PRESSED)
     b44:	00 c0       	rjmp	.+0      	; 0xb46 <startupSequence+0x2a2>
     b46:	00 00       	nop
     b48:	72 dd       	rcall	.-1308   	; 0x62e <keypad_poll>
     b4a:	0a de       	rcall	.-1004   	; 0x760 <keypad_getState>
						user_active = true;
     b4c:	81 30       	cpi	r24, 0x01	; 1
					if (jstk_readMask() != 0)
     b4e:	09 f4       	brne	.+2      	; 0xb52 <startupSequence+0x2ae>
     b50:	b9 86       	std	Y+9, r11	; 0x09
     b52:	cb dc       	rcall	.-1642   	; 0x4ea <jstk_readMask>
						user_active = true;
     b54:	81 11       	cpse	r24, r1
			led_allOff();
			break;
		case 4:
			/* --------------- outward waves --------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
     b56:	b9 86       	std	Y+9, r11	; 0x09
     b58:	c0 16       	cp	r12, r16
     b5a:	d1 06       	cpc	r13, r17
     b5c:	09 f4       	brne	.+2      	; 0xb60 <startupSequence+0x2bc>
     b5e:	a8 c0       	rjmp	.+336    	; 0xcb0 <startupSequence+0x40c>
     b60:	89 85       	ldd	r24, Y+9	; 0x09
     b62:	88 23       	and	r24, r24
     b64:	01 f3       	breq	.-64     	; 0xb26 <startupSequence+0x282>
						user_active = true;
				}
				for (int i = 0; i < 4 && !user_active; i++) {
					int left = 3 - i;
					int right = 4 + i;
					led_off(seq[left]);
     b66:	a4 c0       	rjmp	.+328    	; 0xcb0 <startupSequence+0x40c>
     b68:	f8 01       	movw	r30, r16
     b6a:	82 91       	ld	r24, -Z
     b6c:	8f 01       	movw	r16, r30
     b6e:	8e de       	rcall	.-740    	; 0x88c <led_off>
					led_off(seq[right]);
     b70:	f7 01       	movw	r30, r14
     b72:	81 91       	ld	r24, Z+
     b74:	7f 01       	movw	r14, r30
     b76:	8a de       	rcall	.-748    	; 0x88c <led_off>
     b78:	ff e2       	ldi	r31, 0x2F	; 47
     b7a:	27 e5       	ldi	r18, 0x57	; 87
     b7c:	85 e0       	ldi	r24, 0x05	; 5
     b7e:	f1 50       	subi	r31, 0x01	; 1
     b80:	20 40       	sbci	r18, 0x00	; 0
     b82:	80 40       	sbci	r24, 0x00	; 0
     b84:	e1 f7       	brne	.-8      	; 0xb7e <startupSequence+0x2da>
					_delay_ms(1750);

					keypad_poll();
     b86:	00 c0       	rjmp	.+0      	; 0xb88 <startupSequence+0x2e4>
     b88:	00 00       	nop
					if (keypad_getState() == KEYPAD_PRESSED)
     b8a:	51 dd       	rcall	.-1374   	; 0x62e <keypad_poll>
     b8c:	e9 dd       	rcall	.-1070   	; 0x760 <keypad_getState>
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	09 f4       	brne	.+2      	; 0xb94 <startupSequence+0x2f0>
						user_active = true;
     b92:	b9 86       	std	Y+9, r11	; 0x09
					if (jstk_readMask() != 0)
     b94:	aa dc       	rcall	.-1708   	; 0x4ea <jstk_readMask>
						user_active = true;
     b96:	81 11       	cpse	r24, r1
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 0; i < 4 && !user_active; i++) {
     b98:	b9 86       	std	Y+9, r11	; 0x09
     b9a:	c0 16       	cp	r12, r16
     b9c:	d1 06       	cpc	r13, r17
     b9e:	49 f0       	breq	.+18     	; 0xbb2 <startupSequence+0x30e>
     ba0:	89 85       	ldd	r24, Y+9	; 0x09
     ba2:	88 23       	and	r24, r24
     ba4:	09 f3       	breq	.-62     	; 0xb68 <startupSequence+0x2c4>
     ba6:	05 c0       	rjmp	.+10     	; 0xbb2 <startupSequence+0x30e>
     ba8:	fe 01       	movw	r30, r28

					keypad_poll();
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
     baa:	31 96       	adiw	r30, 0x01	; 1
     bac:	6f 01       	movw	r12, r30
			}
			led_allOff();
			break;
		case 4:
			/* --------------- outward waves --------------- */
			while (!user_active) {
     bae:	bb 24       	eor	r11, r11
     bb0:	b3 94       	inc	r11
     bb2:	89 85       	ldd	r24, Y+9	; 0x09
				for (int i = 0; i < 4 && !user_active; i++) {
     bb4:	81 11       	cpse	r24, r1
     bb6:	09 c0       	rjmp	.+18     	; 0xbca <startupSequence+0x326>
     bb8:	89 85       	ldd	r24, Y+9	; 0x09
     bba:	81 11       	cpse	r24, r1
     bbc:	79 c0       	rjmp	.+242    	; 0xcb0 <startupSequence+0x40c>
     bbe:	7e 01       	movw	r14, r28
     bc0:	f5 e0       	ldi	r31, 0x05	; 5
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
			}
			led_allOff();
     bc2:	ef 0e       	add	r14, r31
     bc4:	f1 1c       	adc	r15, r1
			break;
     bc6:	87 01       	movw	r16, r14
			/* ---------------- inward waves --------------- */
			while (!user_active) {
				for (int i = 3; i >= 0 && !user_active; i--) {
					int left = 3 - i;
					int right = 4 + i;
					led_on(seq[left]);
     bc8:	ae cf       	rjmp	.-164    	; 0xb26 <startupSequence+0x282>
     bca:	59 de       	rcall	.-846    	; 0x87e <led_allOff>
     bcc:	84 c0       	rjmp	.+264    	; 0xcd6 <startupSequence+0x432>
					led_on(seq[right]);
     bce:	f7 01       	movw	r30, r14
     bd0:	81 91       	ld	r24, Z+
     bd2:	7f 01       	movw	r14, r30
     bd4:	58 de       	rcall	.-848    	; 0x886 <led_on>
     bd6:	f8 01       	movw	r30, r16
     bd8:	82 91       	ld	r24, -Z
     bda:	8f 01       	movw	r16, r30
     bdc:	54 de       	rcall	.-856    	; 0x886 <led_on>
     bde:	ff e2       	ldi	r31, 0x2F	; 47
     be0:	27 e5       	ldi	r18, 0x57	; 87
     be2:	85 e0       	ldi	r24, 0x05	; 5
     be4:	f1 50       	subi	r31, 0x01	; 1
     be6:	20 40       	sbci	r18, 0x00	; 0
					_delay_ms(1750);

					keypad_poll();
     be8:	80 40       	sbci	r24, 0x00	; 0
     bea:	e1 f7       	brne	.-8      	; 0xbe4 <startupSequence+0x340>
					if (keypad_getState() == KEYPAD_PRESSED)
     bec:	00 c0       	rjmp	.+0      	; 0xbee <startupSequence+0x34a>
     bee:	00 00       	nop
     bf0:	1e dd       	rcall	.-1476   	; 0x62e <keypad_poll>
     bf2:	b6 dd       	rcall	.-1172   	; 0x760 <keypad_getState>
						user_active = true;
     bf4:	81 30       	cpi	r24, 0x01	; 1
					if (jstk_readMask() != 0)
     bf6:	09 f4       	brne	.+2      	; 0xbfa <startupSequence+0x356>
     bf8:	b9 86       	std	Y+9, r11	; 0x09
     bfa:	77 dc       	rcall	.-1810   	; 0x4ea <jstk_readMask>
						user_active = true;
     bfc:	81 11       	cpse	r24, r1
			led_allOff();
			break;
		case 5:
			/* ---------------- inward waves --------------- */
			while (!user_active) {
				for (int i = 3; i >= 0 && !user_active; i--) {
     bfe:	b9 86       	std	Y+9, r11	; 0x09
     c00:	0c 15       	cp	r16, r12
     c02:	1d 05       	cpc	r17, r13
     c04:	09 f4       	brne	.+2      	; 0xc08 <startupSequence+0x364>
     c06:	5d c0       	rjmp	.+186    	; 0xcc2 <startupSequence+0x41e>
     c08:	89 85       	ldd	r24, Y+9	; 0x09
     c0a:	88 23       	and	r24, r24
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
					int left = 3 - i;
					int right = 4 + i;
					led_off(seq[left]);
     c0c:	01 f3       	breq	.-64     	; 0xbce <startupSequence+0x32a>
     c0e:	59 c0       	rjmp	.+178    	; 0xcc2 <startupSequence+0x41e>
     c10:	f7 01       	movw	r30, r14
     c12:	81 91       	ld	r24, Z+
     c14:	7f 01       	movw	r14, r30
					led_off(seq[right]);
     c16:	3a de       	rcall	.-908    	; 0x88c <led_off>
     c18:	f8 01       	movw	r30, r16
     c1a:	82 91       	ld	r24, -Z
     c1c:	8f 01       	movw	r16, r30
     c1e:	36 de       	rcall	.-916    	; 0x88c <led_off>
     c20:	ff e2       	ldi	r31, 0x2F	; 47
     c22:	27 e5       	ldi	r18, 0x57	; 87
     c24:	85 e0       	ldi	r24, 0x05	; 5
     c26:	f1 50       	subi	r31, 0x01	; 1
     c28:	20 40       	sbci	r18, 0x00	; 0
     c2a:	80 40       	sbci	r24, 0x00	; 0
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <startupSequence+0x382>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <startupSequence+0x38c>
     c30:	00 00       	nop
					_delay_ms(1750);

					keypad_poll();
     c32:	fd dc       	rcall	.-1542   	; 0x62e <keypad_poll>
     c34:	95 dd       	rcall	.-1238   	; 0x760 <keypad_getState>
					if (keypad_getState() == KEYPAD_PRESSED)
     c36:	81 30       	cpi	r24, 0x01	; 1
     c38:	09 f4       	brne	.+2      	; 0xc3c <startupSequence+0x398>
     c3a:	b9 86       	std	Y+9, r11	; 0x09
     c3c:	56 dc       	rcall	.-1876   	; 0x4ea <jstk_readMask>
						user_active = true;
     c3e:	81 11       	cpse	r24, r1
					if (jstk_readMask() != 0)
     c40:	b9 86       	std	Y+9, r11	; 0x09
     c42:	0c 15       	cp	r16, r12
     c44:	1d 05       	cpc	r17, r13
						user_active = true;
     c46:	51 f0       	breq	.+20     	; 0xc5c <startupSequence+0x3b8>
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     c48:	89 85       	ldd	r24, Y+9	; 0x09
     c4a:	88 23       	and	r24, r24
     c4c:	09 f3       	breq	.-62     	; 0xc10 <startupSequence+0x36c>
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <startupSequence+0x3b8>
     c50:	6e 01       	movw	r12, r28
     c52:	95 e0       	ldi	r25, 0x05	; 5
     c54:	c9 0e       	add	r12, r25
     c56:	d1 1c       	adc	r13, r1
     c58:	bb 24       	eor	r11, r11
     c5a:	b3 94       	inc	r11
     c5c:	89 85       	ldd	r24, Y+9	; 0x09

					keypad_poll();
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
     c5e:	81 11       	cpse	r24, r1
     c60:	0a c0       	rjmp	.+20     	; 0xc76 <startupSequence+0x3d2>
			}
			led_allOff();
			break;
		case 5:
			/* ---------------- inward waves --------------- */
			while (!user_active) {
     c62:	89 85       	ldd	r24, Y+9	; 0x09
     c64:	81 11       	cpse	r24, r1
     c66:	2d c0       	rjmp	.+90     	; 0xcc2 <startupSequence+0x41e>
				for (int i = 3; i >= 0 && !user_active; i--) {
     c68:	fe 01       	movw	r30, r28
     c6a:	31 96       	adiw	r30, 0x01	; 1
     c6c:	7f 01       	movw	r14, r30
     c6e:	8e 01       	movw	r16, r28
     c70:	07 5f       	subi	r16, 0xF7	; 247
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
     c74:	ac cf       	rjmp	.-168    	; 0xbce <startupSequence+0x32a>
     c76:	03 de       	rcall	.-1018   	; 0x87e <led_allOff>
     c78:	2e c0       	rjmp	.+92     	; 0xcd6 <startupSequence+0x432>
     c7a:	89 85       	ldd	r24, Y+9	; 0x09
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
			}
			led_allOff();
     c7c:	81 11       	cpse	r24, r1
     c7e:	8c ce       	rjmp	.-744    	; 0x998 <startupSequence+0xf4>
			break;
		default:
			break;
	}
     c80:	8e 01       	movw	r16, r28
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 7; i >= 0 && !user_active; i--) {
     c82:	07 5f       	subi	r16, 0xF7	; 247
     c84:	1f 4f       	sbci	r17, 0xFF	; 255
     c86:	60 ce       	rjmp	.-832    	; 0x948 <startupSequence+0xa4>
     c88:	89 85       	ldd	r24, Y+9	; 0x09
     c8a:	81 11       	cpse	r24, r1
     c8c:	e7 ce       	rjmp	.-562    	; 0xa5c <startupSequence+0x1b8>
     c8e:	ce 01       	movw	r24, r28
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	3c 01       	movw	r6, r24
     c94:	8e 01       	movw	r16, r28
     c96:	07 5f       	subi	r16, 0xF7	; 247
     c98:	1f 4f       	sbci	r17, 0xFF	; 255
     c9a:	b1 ce       	rjmp	.-670    	; 0x9fe <startupSequence+0x15a>
     c9c:	89 85       	ldd	r24, Y+9	; 0x09
     c9e:	81 11       	cpse	r24, r1
     ca0:	34 cf       	rjmp	.-408    	; 0xb0a <startupSequence+0x266>
     ca2:	fe 01       	movw	r30, r28
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     ca4:	31 96       	adiw	r30, 0x01	; 1
     ca6:	7f 01       	movw	r14, r30
     ca8:	8e 01       	movw	r16, r28
     caa:	07 5f       	subi	r16, 0xF7	; 247
     cac:	1f 4f       	sbci	r17, 0xFF	; 255
     cae:	04 cf       	rjmp	.-504    	; 0xab8 <startupSequence+0x214>
     cb0:	89 85       	ldd	r24, Y+9	; 0x09
     cb2:	81 11       	cpse	r24, r1
     cb4:	7e cf       	rjmp	.-260    	; 0xbb2 <startupSequence+0x30e>
     cb6:	7e 01       	movw	r14, r28
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 0; i < 4 && !user_active; i++) {
     cb8:	f5 e0       	ldi	r31, 0x05	; 5
     cba:	ef 0e       	add	r14, r31
     cbc:	f1 1c       	adc	r15, r1
     cbe:	87 01       	movw	r16, r14
     cc0:	53 cf       	rjmp	.-346    	; 0xb68 <startupSequence+0x2c4>
     cc2:	89 85       	ldd	r24, Y+9	; 0x09
     cc4:	81 11       	cpse	r24, r1
     cc6:	ca cf       	rjmp	.-108    	; 0xc5c <startupSequence+0x3b8>
     cc8:	ce 01       	movw	r24, r28
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	7c 01       	movw	r14, r24
     cce:	8e 01       	movw	r16, r28
     cd0:	07 5f       	subi	r16, 0xF7	; 247
     cd2:	1f 4f       	sbci	r17, 0xFF	; 255
     cd4:	9d cf       	rjmp	.-198    	; 0xc10 <startupSequence+0x36c>
     cd6:	29 96       	adiw	r28, 0x09	; 9
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	df 91       	pop	r29
			led_allOff();
			break;
		default:
			break;
	}
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	bf 90       	pop	r11
     cee:	af 90       	pop	r10
     cf0:	9f 90       	pop	r9
     cf2:	8f 90       	pop	r8
     cf4:	7f 90       	pop	r7
     cf6:	6f 90       	pop	r6
     cf8:	08 95       	ret

00000cfa <BD76319_KeyToReport>:
// }

void BD76319_KeyToReport(uint16_t pui_KeyStatus, uint16_t pui_KeyValue)
{

	ui_KeyStatusToReport = pui_KeyStatus;
     cfa:	80 93 c3 21 	sts	0x21C3, r24	; 0x8021c3 <ui_KeyStatusToReport>
	ui_KeyToReport = pui_KeyValue;
     cfe:	60 93 c2 21 	sts	0x21C2, r22	; 0x8021c2 <ui_KeyToReport>
     d02:	08 95       	ret

00000d04 <BD76319_ui_process>:
// }

void BD76319_ui_process(uint16_t pui_framenumber) {
	static bool last_state = false;

	bool curr = ui_KeyStatusToReport;
     d04:	90 91 c3 21 	lds	r25, 0x21C3	; 0x8021c3 <ui_KeyStatusToReport>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	91 11       	cpse	r25, r1
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <BD76319_ui_process+0xc>
     d0e:	80 e0       	ldi	r24, 0x00	; 0
	if (curr != last_state) {
     d10:	20 91 c1 21 	lds	r18, 0x21C1	; 0x8021c1 <last_state.5315>
     d14:	82 17       	cp	r24, r18
     d16:	49 f0       	breq	.+18     	; 0xd2a <BD76319_ui_process+0x26>
		last_state = curr;
     d18:	80 93 c1 21 	sts	0x21C1, r24	; 0x8021c1 <last_state.5315>
		uint8_t v = ui_KeyToReport;
     d1c:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <ui_KeyToReport>
		if (curr)
     d20:	99 23       	and	r25, r25
     d22:	11 f0       	breq	.+4      	; 0xd28 <BD76319_ui_process+0x24>
			udi_hid_kbd_down(v);
     d24:	da c1       	rjmp	.+948    	; 0x10da <udi_hid_kbd_down>
     d26:	08 95       	ret
		else
			udi_hid_kbd_up(v);
     d28:	9c c1       	rjmp	.+824    	; 0x1062 <udi_hid_kbd_up>
     d2a:	08 95       	ret

00000d2c <jstk_ui_process>:
     d2c:	34 cc       	rjmp	.-1944   	; 0x596 <joystick>
// 	// Write Alarm information to Alarm LEDs
// 	PORTA.OUT = ~value;
// }

void jstk_ui_process(void) {
	joystick();
     d2e:	08 95       	ret

00000d30 <kbd_ui_process>:
}

void kbd_ui_process(void) {
	keypad();
     d30:	9a cd       	rjmp	.-1228   	; 0x866 <keypad>
     d32:	08 95       	ret

00000d34 <led_ui_process>:
}

void led_ui_process(uint8_t mask) {
	led_setStatus(mask);
     d34:	b1 cd       	rjmp	.-1182   	; 0x898 <led_setStatus>
     d36:	08 95       	ret

00000d38 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
     d44:	27 97       	sbiw	r28, 0x07	; 7
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
     d4c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     d50:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     d54:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     d58:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     d5c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     d60:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     d64:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     d68:	65 e0       	ldi	r22, 0x05	; 5
     d6a:	81 e4       	ldi	r24, 0x41	; 65
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	7a d6       	rcall	.+3316   	; 0x1a64 <ccp_write_io>
     d70:	6c e1       	ldi	r22, 0x1C	; 28
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	6c d6       	rcall	.+3288   	; 0x1a50 <nvm_read_byte>
     d78:	8a 83       	std	Y+2, r24	; 0x02
     d7a:	6d e1       	ldi	r22, 0x1D	; 29
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	67 d6       	rcall	.+3278   	; 0x1a50 <nvm_read_byte>
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	9a 81       	ldd	r25, Y+2	; 0x02
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	21 f4       	brne	.+8      	; 0xd94 <sysclk_init+0x5c>
     d8c:	80 e4       	ldi	r24, 0x40	; 64
     d8e:	93 e2       	ldi	r25, 0x23	; 35
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	8b 83       	std	Y+3, r24	; 0x03
     d9a:	9c 83       	std	Y+4, r25	; 0x04
     d9c:	e0 e6       	ldi	r30, 0x60	; 96
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	82 83       	std	Z+2, r24	; 0x02
     da2:	8c 81       	ldd	r24, Y+4	; 0x04
     da4:	83 83       	std	Z+3, r24	; 0x03
     da6:	8f b7       	in	r24, 0x3f	; 63
     da8:	8e 83       	std	Y+6, r24	; 0x06
     daa:	f8 94       	cli
     dac:	9e 81       	ldd	r25, Y+6	; 0x06
     dae:	e0 e5       	ldi	r30, 0x50	; 80
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	82 60       	ori	r24, 0x02	; 2
     db6:	80 83       	st	Z, r24
     db8:	9f bf       	out	0x3f, r25	; 63
     dba:	81 81       	ldd	r24, Z+1	; 0x01
     dbc:	81 ff       	sbrs	r24, 1
     dbe:	fd cf       	rjmp	.-6      	; 0xdba <sysclk_init+0x82>
     dc0:	8f b7       	in	r24, 0x3f	; 63
     dc2:	8f 83       	std	Y+7, r24	; 0x07
     dc4:	f8 94       	cli
     dc6:	9f 81       	ldd	r25, Y+7	; 0x07
     dc8:	00 e5       	ldi	r16, 0x50	; 80
     dca:	10 e0       	ldi	r17, 0x00	; 0
     dcc:	d8 01       	movw	r26, r16
     dce:	16 96       	adiw	r26, 0x06	; 6
     dd0:	8c 91       	ld	r24, X
     dd2:	16 97       	sbiw	r26, 0x06	; 6
     dd4:	89 7f       	andi	r24, 0xF9	; 249
     dd6:	16 96       	adiw	r26, 0x06	; 6
     dd8:	8c 93       	st	X, r24
     dda:	16 97       	sbiw	r26, 0x06	; 6
     ddc:	e0 e6       	ldi	r30, 0x60	; 96
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 e8       	ldi	r24, 0x80	; 128
     de2:	85 83       	std	Z+5, r24	; 0x05
     de4:	8b eb       	ldi	r24, 0xBB	; 187
     de6:	86 83       	std	Z+6, r24	; 0x06
     de8:	16 96       	adiw	r26, 0x06	; 6
     dea:	8c 91       	ld	r24, X
     dec:	16 97       	sbiw	r26, 0x06	; 6
     dee:	84 60       	ori	r24, 0x04	; 4
     df0:	16 96       	adiw	r26, 0x06	; 6
     df2:	8c 93       	st	X, r24
     df4:	80 81       	ld	r24, Z
     df6:	81 60       	ori	r24, 0x01	; 1
     df8:	80 83       	st	Z, r24
     dfa:	9f bf       	out	0x3f, r25	; 63
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	80 e4       	ldi	r24, 0x40	; 64
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	30 d6       	rcall	.+3168   	; 0x1a64 <ccp_write_io>
     e04:	8f b7       	in	r24, 0x3f	; 63
     e06:	8d 83       	std	Y+5, r24	; 0x05
     e08:	f8 94       	cli
     e0a:	9d 81       	ldd	r25, Y+5	; 0x05
     e0c:	f8 01       	movw	r30, r16
     e0e:	80 81       	ld	r24, Z
     e10:	8e 7f       	andi	r24, 0xFE	; 254
     e12:	80 83       	st	Z, r24
     e14:	9f bf       	out	0x3f, r25	; 63
     e16:	27 96       	adiw	r28, 0x07	; 7
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	08 95       	ret

00000e26 <sysclk_enable_module>:
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	1f 92       	push	r1
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	9f b7       	in	r25, 0x3f	; 63
     e32:	99 83       	std	Y+1, r25	; 0x01
     e34:	f8 94       	cli
     e36:	99 81       	ldd	r25, Y+1	; 0x01
     e38:	e8 2f       	mov	r30, r24
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	e0 59       	subi	r30, 0x90	; 144
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	60 95       	com	r22
     e42:	80 81       	ld	r24, Z
     e44:	68 23       	and	r22, r24
     e46:	60 83       	st	Z, r22
     e48:	9f bf       	out	0x3f, r25	; 63
     e4a:	0f 90       	pop	r0
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	1f 92       	push	r1
     e58:	1f 92       	push	r1
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     e5e:	86 30       	cpi	r24, 0x06	; 6
     e60:	11 f0       	breq	.+4      	; 0xe66 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     e66:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     e68:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     e6c:	81 fd       	sbrc	r24, 1
     e6e:	2a c0       	rjmp	.+84     	; 0xec4 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e70:	8f b7       	in	r24, 0x3f	; 63
     e72:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e74:	f8 94       	cli
	return flags;
     e76:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     e78:	e0 e5       	ldi	r30, 0x50	; 80
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	82 60       	ori	r24, 0x02	; 2
     e80:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e82:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     e84:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     e86:	81 ff       	sbrs	r24, 1
     e88:	fd cf       	rjmp	.-6      	; 0xe84 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e8a:	8f b7       	in	r24, 0x3f	; 63
     e8c:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     e8e:	f8 94       	cli
	return flags;
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     e92:	a0 e5       	ldi	r26, 0x50	; 80
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	16 96       	adiw	r26, 0x06	; 6
     e98:	8c 91       	ld	r24, X
     e9a:	16 97       	sbiw	r26, 0x06	; 6
     e9c:	89 7f       	andi	r24, 0xF9	; 249
     e9e:	16 96       	adiw	r26, 0x06	; 6
     ea0:	8c 93       	st	X, r24
     ea2:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     ea4:	e0 e6       	ldi	r30, 0x60	; 96
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 e8       	ldi	r24, 0x80	; 128
     eaa:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     eac:	8b eb       	ldi	r24, 0xBB	; 187
     eae:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     eb0:	16 96       	adiw	r26, 0x06	; 6
     eb2:	8c 91       	ld	r24, X
     eb4:	16 97       	sbiw	r26, 0x06	; 6
     eb6:	84 60       	ori	r24, 0x04	; 4
     eb8:	16 96       	adiw	r26, 0x06	; 6
     eba:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     ebc:	80 81       	ld	r24, Z
     ebe:	81 60       	ori	r24, 0x01	; 1
     ec0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ec2:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     ec4:	63 60       	ori	r22, 0x03	; 3
     ec6:	84 e4       	ldi	r24, 0x44	; 68
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	cc d5       	rcall	.+2968   	; 0x1a64 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     ecc:	60 e4       	ldi	r22, 0x40	; 64
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	aa df       	rcall	.-172    	; 0xe26 <sysclk_enable_module>
}
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	08 95       	ret

00000ee0 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     ee0:	30 91 bb 23 	lds	r19, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
     ee4:	20 91 bc 23 	lds	r18, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
     ee8:	82 2f       	mov	r24, r18
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	03 97       	sbiw	r24, 0x03	; 3
     eee:	b1 f4       	brne	.+44     	; 0xf1c <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     ef0:	31 11       	cpse	r19, r1
     ef2:	16 c0       	rjmp	.+44     	; 0xf20 <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
     ef4:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
     ef8:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
     efc:	89 2b       	or	r24, r25
     efe:	91 f4       	brne	.+36     	; 0xf24 <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     f00:	e9 eb       	ldi	r30, 0xB9	; 185
     f02:	f3 e2       	ldi	r31, 0x23	; 35
     f04:	84 ec       	ldi	r24, 0xC4	; 196
     f06:	91 e2       	ldi	r25, 0x21	; 33
     f08:	80 87       	std	Z+8, r24	; 0x08
     f0a:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     f0c:	84 e9       	ldi	r24, 0x94	; 148
     f0e:	97 e0       	ldi	r25, 0x07	; 7
     f10:	84 87       	std	Z+12, r24	; 0x0c
     f12:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
     f14:	12 86       	std	Z+10, r1	; 0x0a
     f16:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	08 95       	ret
	}
	return false;
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	08 95       	ret
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	08 95       	ret
     f24:	80 e0       	ldi	r24, 0x00	; 0
}
     f26:	08 95       	ret

00000f28 <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
     f28:	08 95       	ret

00000f2a <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <udi_hid_generic_b_report_in_free>
     f30:	08 95       	ret

00000f32 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
     f32:	10 92 ca 21 	sts	0x21CA, r1	; 0x8021ca <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
     f36:	10 92 c8 21 	sts	0x21C8, r1	; 0x8021c8 <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
     f40:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <main_generic_enable>
}
     f44:	08 95       	ret

00000f46 <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
     f46:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <main_generic_disable>
     f4a:	08 95       	ret

00000f4c <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
     f4c:	20 e7       	ldi	r18, 0x70	; 112
     f4e:	37 e0       	ldi	r19, 0x07	; 7
     f50:	46 ea       	ldi	r20, 0xA6	; 166
     f52:	50 e2       	ldi	r21, 0x20	; 32
     f54:	68 ec       	ldi	r22, 0xC8	; 200
     f56:	71 e2       	ldi	r23, 0x21	; 33
     f58:	8a ec       	ldi	r24, 0xCA	; 202
     f5a:	91 e2       	ldi	r25, 0x21	; 33
     f5c:	f2 c0       	rjmp	.+484    	; 0x1142 <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
     f5e:	08 95       	ret

00000f60 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	1f 92       	push	r1
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
     f72:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <udi_hid_generic_b_report_in_free>
     f76:	88 23       	and	r24, r24
     f78:	09 f1       	breq	.+66     	; 0xfbc <udi_hid_generic_send_report_in+0x5c>
     f7a:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f7c:	8f b7       	in	r24, 0x3f	; 63
     f7e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f80:	f8 94       	cli
	return flags;
     f82:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
     f84:	10 92 c4 21 	sts	0x21C4, r1	; 0x8021c4 <udi_hid_generic_report_feature>
     f88:	10 92 c5 21 	sts	0x21C5, r1	; 0x8021c5 <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
     f8c:	80 81       	ld	r24, Z
     f8e:	91 81       	ldd	r25, Z+1	; 0x01
     f90:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <udi_hid_generic_report_feature>
     f94:	90 93 c5 21 	sts	0x21C5, r25	; 0x8021c5 <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     f98:	05 e9       	ldi	r16, 0x95	; 149
     f9a:	17 e0       	ldi	r17, 0x07	; 7
     f9c:	22 e0       	ldi	r18, 0x02	; 2
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	44 ec       	ldi	r20, 0xC4	; 196
     fa2:	51 e2       	ldi	r21, 0x21	; 33
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	82 e8       	ldi	r24, 0x82	; 130
     fa8:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	89 27       	eor	r24, r25
     fb0:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fb4:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
     fb6:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <udi_hid_generic_b_report_in_free>
     fba:	89 27       	eor	r24, r25

}
     fbc:	0f 90       	pop	r0
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	08 95       	ret

00000fca <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	08 95       	ret

00000fce <udi_hid_kbd_setreport>:
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	08 95       	ret

00000fd2 <udi_hid_kbd_enable>:
     fd2:	10 92 e0 21 	sts	0x21E0, r1	; 0x8021e0 <udi_hid_kbd_rate>
     fd6:	10 92 de 21 	sts	0x21DE, r1	; 0x8021de <udi_hid_kbd_protocol>
     fda:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <udi_hid_kbd_b_report_trans_ongoing>
     fde:	88 e0       	ldi	r24, 0x08	; 8
     fe0:	e5 ed       	ldi	r30, 0xD5	; 213
     fe2:	f1 e2       	ldi	r31, 0x21	; 33
     fe4:	df 01       	movw	r26, r30
     fe6:	1d 92       	st	X+, r1
     fe8:	8a 95       	dec	r24
     fea:	e9 f7       	brne	.-6      	; 0xfe6 <udi_hid_kbd_enable+0x14>
     fec:	10 92 dd 21 	sts	0x21DD, r1	; 0x8021dd <udi_hid_kbd_b_report_valid>
     ff0:	0c 94 2b 15 	jmp	0x2a56	; 0x2a56 <main_kbd_enable>
     ff4:	08 95       	ret

00000ff6 <udi_hid_kbd_disable>:
     ff6:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <main_kbd_disable>
     ffa:	08 95       	ret

00000ffc <udi_hid_kbd_setup>:
     ffc:	27 ee       	ldi	r18, 0xE7	; 231
     ffe:	37 e0       	ldi	r19, 0x07	; 7
    1000:	4b ec       	ldi	r20, 0xCB	; 203
    1002:	50 e2       	ldi	r21, 0x20	; 32
    1004:	6e ed       	ldi	r22, 0xDE	; 222
    1006:	71 e2       	ldi	r23, 0x21	; 33
    1008:	80 ee       	ldi	r24, 0xE0	; 224
    100a:	91 e2       	ldi	r25, 0x21	; 33
    100c:	9a c0       	rjmp	.+308    	; 0x1142 <udi_hid_setup>
    100e:	08 95       	ret

00001010 <udi_hid_kbd_send_report>:
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <udi_hid_kbd_b_report_trans_ongoing>
    1018:	81 11       	cpse	r24, r1
    101a:	18 c0       	rjmp	.+48     	; 0x104c <udi_hid_kbd_send_report+0x3c>
    101c:	88 e0       	ldi	r24, 0x08	; 8
    101e:	e5 ed       	ldi	r30, 0xD5	; 213
    1020:	f1 e2       	ldi	r31, 0x21	; 33
    1022:	ac ec       	ldi	r26, 0xCC	; 204
    1024:	b1 e2       	ldi	r27, 0x21	; 33
    1026:	01 90       	ld	r0, Z+
    1028:	0d 92       	st	X+, r0
    102a:	8a 95       	dec	r24
    102c:	e1 f7       	brne	.-8      	; 0x1026 <udi_hid_kbd_send_report+0x16>
    102e:	10 92 dd 21 	sts	0x21DD, r1	; 0x8021dd <udi_hid_kbd_b_report_valid>
    1032:	0a e2       	ldi	r16, 0x2A	; 42
    1034:	18 e0       	ldi	r17, 0x08	; 8
    1036:	28 e0       	ldi	r18, 0x08	; 8
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	4c ec       	ldi	r20, 0xCC	; 204
    103c:	51 e2       	ldi	r21, 0x21	; 33
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	81 e8       	ldi	r24, 0x81	; 129
    1042:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <udd_ep_run>
    1046:	80 93 d4 21 	sts	0x21D4, r24	; 0x8021d4 <udi_hid_kbd_b_report_trans_ongoing>
    104a:	01 c0       	rjmp	.+2      	; 0x104e <udi_hid_kbd_send_report+0x3e>
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	08 95       	ret

00001054 <udi_hid_kbd_report_sent>:
    1054:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <udi_hid_kbd_b_report_trans_ongoing>
    1058:	80 91 dd 21 	lds	r24, 0x21DD	; 0x8021dd <udi_hid_kbd_b_report_valid>
    105c:	81 11       	cpse	r24, r1
    105e:	d8 cf       	rjmp	.-80     	; 0x1010 <udi_hid_kbd_send_report>
    1060:	08 95       	ret

00001062 <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	1f 92       	push	r1
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    106e:	9f b7       	in	r25, 0x3f	; 63
    1070:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1072:	f8 94       	cli
	return flags;
    1074:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    1076:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <udi_hid_kbd_report+0x2>
    107a:	99 23       	and	r25, r25
    107c:	41 f0       	breq	.+16     	; 0x108e <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    107e:	89 17       	cp	r24, r25
    1080:	a9 f0       	breq	.+42     	; 0x10ac <udi_hid_kbd_up+0x4a>
    1082:	e8 ed       	ldi	r30, 0xD8	; 216
    1084:	f1 e2       	ldi	r31, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1086:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    1088:	21 91       	ld	r18, Z+
    108a:	21 11       	cpse	r18, r1
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    108e:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    1090:	1e c0       	rjmp	.+60     	; 0x10ce <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
    1092:	28 17       	cp	r18, r24
    1094:	21 f0       	breq	.+8      	; 0x109e <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1096:	9f 5f       	subi	r25, 0xFF	; 255
    1098:	98 30       	cpi	r25, 0x08	; 8
    109a:	b1 f7       	brne	.-20     	; 0x1088 <udi_hid_kbd_up+0x26>
    109c:	05 c0       	rjmp	.+10     	; 0x10a8 <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    109e:	98 30       	cpi	r25, 0x08	; 8
    10a0:	19 f0       	breq	.+6      	; 0x10a8 <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    10a2:	97 30       	cpi	r25, 0x07	; 7
    10a4:	20 f0       	brcs	.+8      	; 0x10ae <udi_hid_kbd_up+0x4c>
    10a6:	0c c0       	rjmp	.+24     	; 0x10c0 <udi_hid_kbd_up+0x5e>
    10a8:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    10aa:	11 c0       	rjmp	.+34     	; 0x10ce <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    10ac:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    10ae:	e9 2f       	mov	r30, r25
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	eb 52       	subi	r30, 0x2B	; 43
    10b4:	fe 4d       	sbci	r31, 0xDE	; 222
    10b6:	81 81       	ldd	r24, Z+1	; 0x01
    10b8:	80 83       	st	Z, r24
		i++;
    10ba:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    10bc:	97 30       	cpi	r25, 0x07	; 7
    10be:	b9 f7       	brne	.-18     	; 0x10ae <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    10c0:	10 92 dc 21 	sts	0x21DC, r1	; 0x8021dc <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	80 93 dd 21 	sts	0x21DD, r24	; 0x8021dd <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    10ca:	a2 df       	rcall	.-188    	; 0x1010 <udi_hid_kbd_send_report>
    10cc:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	0f 90       	pop	r0
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	08 95       	ret

000010da <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	1f 92       	push	r1
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10e6:	9f b7       	in	r25, 0x3f	; 63
    10e8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    10ea:	f8 94       	cli
	return flags;
    10ec:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    10ee:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <udi_hid_kbd_report+0x2>
    10f2:	99 23       	and	r25, r25
    10f4:	b1 f0       	breq	.+44     	; 0x1122 <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    10f6:	89 17       	cp	r24, r25
    10f8:	41 f0       	breq	.+16     	; 0x110a <udi_hid_kbd_down+0x30>
    10fa:	a8 ed       	ldi	r26, 0xD8	; 216
    10fc:	b1 e2       	ldi	r27, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    10fe:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    1100:	9d 91       	ld	r25, X+
    1102:	99 23       	and	r25, r25
    1104:	49 f0       	breq	.+18     	; 0x1118 <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    1106:	98 13       	cpse	r25, r24
    1108:	03 c0       	rjmp	.+6      	; 0x1110 <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    110a:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	14 c0       	rjmp	.+40     	; 0x1138 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1110:	ef 5f       	subi	r30, 0xFF	; 255
    1112:	e8 30       	cpi	r30, 0x08	; 8
    1114:	a9 f7       	brne	.-22     	; 0x1100 <udi_hid_kbd_down+0x26>
    1116:	02 c0       	rjmp	.+4      	; 0x111c <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    1118:	e8 30       	cpi	r30, 0x08	; 8
    111a:	21 f4       	brne	.+8      	; 0x1124 <udi_hid_kbd_down+0x4a>
    111c:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	0b c0       	rjmp	.+22     	; 0x1138 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1122:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	eb 52       	subi	r30, 0x2B	; 43
    1128:	fe 4d       	sbci	r31, 0xDE	; 222
    112a:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	80 93 dd 21 	sts	0x21DD, r24	; 0x8021dd <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    1132:	6e df       	rcall	.-292    	; 0x1010 <udi_hid_kbd_send_report>
    1134:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    1136:	81 e0       	ldi	r24, 0x01	; 1
}
    1138:	0f 90       	pop	r0
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	08 95       	ret

00001142 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	dc 01       	movw	r26, r24
    1148:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    114a:	90 91 b9 23 	lds	r25, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    114e:	99 23       	and	r25, r25
    1150:	0c f0       	brlt	.+2      	; 0x1154 <udi_hid_setup+0x12>
    1152:	68 c0       	rjmp	.+208    	; 0x1224 <udi_hid_setup+0xe2>
    1154:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1156:	09 f0       	breq	.+2      	; 0x115a <udi_hid_setup+0x18>
    1158:	45 c0       	rjmp	.+138    	; 0x11e4 <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    115a:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    115e:	86 30       	cpi	r24, 0x06	; 6
    1160:	09 f0       	breq	.+2      	; 0x1164 <udi_hid_setup+0x22>
    1162:	40 c0       	rjmp	.+128    	; 0x11e4 <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    1164:	76 d1       	rcall	.+748    	; 0x1452 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1166:	dc 01       	movw	r26, r24
    1168:	1a 96       	adiw	r26, 0x0a	; 10
    116a:	2c 91       	ld	r18, X
    116c:	1a 97       	sbiw	r26, 0x0a	; 10
    116e:	21 32       	cpi	r18, 0x21	; 33
    1170:	09 f0       	breq	.+2      	; 0x1174 <udi_hid_setup+0x32>
    1172:	77 c0       	rjmp	.+238    	; 0x1262 <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1174:	20 91 bc 23 	lds	r18, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	21 32       	cpi	r18, 0x21	; 33
    117c:	31 05       	cpc	r19, r1
    117e:	b1 f4       	brne	.+44     	; 0x11ac <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    1180:	9c 01       	movw	r18, r24
    1182:	27 5f       	subi	r18, 0xF7	; 247
    1184:	3f 4f       	sbci	r19, 0xFF	; 255
    1186:	20 93 c1 23 	sts	0x23C1, r18	; 0x8023c1 <udd_g_ctrlreq+0x8>
    118a:	30 93 c2 23 	sts	0x23C2, r19	; 0x8023c2 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    118e:	e9 eb       	ldi	r30, 0xB9	; 185
    1190:	f3 e2       	ldi	r31, 0x23	; 35
    1192:	19 96       	adiw	r26, 0x09	; 9
    1194:	8c 91       	ld	r24, X
    1196:	26 81       	ldd	r18, Z+6	; 0x06
    1198:	37 81       	ldd	r19, Z+7	; 0x07
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	28 17       	cp	r18, r24
    119e:	39 07       	cpc	r19, r25
    11a0:	08 f4       	brcc	.+2      	; 0x11a4 <udi_hid_setup+0x62>
    11a2:	c9 01       	movw	r24, r18
    11a4:	82 87       	std	Z+10, r24	; 0x0a
    11a6:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	68 c0       	rjmp	.+208    	; 0x127c <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    11ac:	fc 01       	movw	r30, r24
    11ae:	47 85       	ldd	r20, Z+15	; 0x0f
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	42 17       	cp	r20, r18
    11b4:	53 07       	cpc	r21, r19
    11b6:	09 f0       	breq	.+2      	; 0x11ba <udi_hid_setup+0x78>
    11b8:	56 c0       	rjmp	.+172    	; 0x1266 <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    11ba:	c0 93 c1 23 	sts	0x23C1, r28	; 0x8023c1 <udd_g_ctrlreq+0x8>
    11be:	d0 93 c2 23 	sts	0x23C2, r29	; 0x8023c2 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    11c2:	e9 eb       	ldi	r30, 0xB9	; 185
    11c4:	f3 e2       	ldi	r31, 0x23	; 35
    11c6:	26 81       	ldd	r18, Z+6	; 0x06
    11c8:	37 81       	ldd	r19, Z+7	; 0x07
    11ca:	dc 01       	movw	r26, r24
    11cc:	50 96       	adiw	r26, 0x10	; 16
    11ce:	8d 91       	ld	r24, X+
    11d0:	9c 91       	ld	r25, X
    11d2:	51 97       	sbiw	r26, 0x11	; 17
    11d4:	28 17       	cp	r18, r24
    11d6:	39 07       	cpc	r19, r25
    11d8:	08 f4       	brcc	.+2      	; 0x11dc <udi_hid_setup+0x9a>
    11da:	c9 01       	movw	r24, r18
    11dc:	82 87       	std	Z+10, r24	; 0x0a
    11de:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	4c c0       	rjmp	.+152    	; 0x127c <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    11e4:	90 32       	cpi	r25, 0x20	; 32
    11e6:	09 f0       	breq	.+2      	; 0x11ea <udi_hid_setup+0xa8>
    11e8:	40 c0       	rjmp	.+128    	; 0x126a <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    11ea:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    11ee:	82 30       	cpi	r24, 0x02	; 2
    11f0:	39 f0       	breq	.+14     	; 0x1200 <udi_hid_setup+0xbe>
    11f2:	83 30       	cpi	r24, 0x03	; 3
    11f4:	71 f0       	breq	.+28     	; 0x1212 <udi_hid_setup+0xd0>
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	d1 f5       	brne	.+116    	; 0x126e <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    11fa:	f9 01       	movw	r30, r18
    11fc:	19 95       	eicall
    11fe:	3e c0       	rjmp	.+124    	; 0x127c <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    1200:	e9 eb       	ldi	r30, 0xB9	; 185
    1202:	f3 e2       	ldi	r31, 0x23	; 35
    1204:	a0 87       	std	Z+8, r26	; 0x08
    1206:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	82 87       	std	Z+10, r24	; 0x0a
    120e:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1210:	35 c0       	rjmp	.+106    	; 0x127c <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    1212:	e9 eb       	ldi	r30, 0xB9	; 185
    1214:	f3 e2       	ldi	r31, 0x23	; 35
    1216:	60 87       	std	Z+8, r22	; 0x08
    1218:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	82 87       	std	Z+10, r24	; 0x0a
    1220:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1222:	2c c0       	rjmp	.+88     	; 0x127c <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1224:	90 76       	andi	r25, 0x60	; 96
    1226:	90 32       	cpi	r25, 0x20	; 32
    1228:	21 f5       	brne	.+72     	; 0x1272 <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    122a:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    122e:	8a 30       	cpi	r24, 0x0A	; 10
    1230:	39 f0       	breq	.+14     	; 0x1240 <udi_hid_setup+0xfe>
    1232:	8b 30       	cpi	r24, 0x0B	; 11
    1234:	51 f0       	breq	.+20     	; 0x124a <udi_hid_setup+0x108>
    1236:	89 30       	cpi	r24, 0x09	; 9
    1238:	f1 f4       	brne	.+60     	; 0x1276 <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    123a:	f9 01       	movw	r30, r18
    123c:	19 95       	eicall
    123e:	1e c0       	rjmp	.+60     	; 0x127c <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    1240:	80 91 bc 23 	lds	r24, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    1244:	8c 93       	st	X, r24
				return true;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	19 c0       	rjmp	.+50     	; 0x127c <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    124a:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    124e:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1252:	89 2b       	or	r24, r25
    1254:	91 f4       	brne	.+36     	; 0x127a <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    1256:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    125a:	db 01       	movw	r26, r22
    125c:	8c 93       	st	X, r24
				return true;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	0d c0       	rjmp	.+26     	; 0x127c <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	0b c0       	rjmp	.+22     	; 0x127c <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	09 c0       	rjmp	.+18     	; 0x127c <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	07 c0       	rjmp	.+14     	; 0x127c <udi_hid_setup+0x13a>
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	05 c0       	rjmp	.+10     	; 0x127c <udi_hid_setup+0x13a>
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	03 c0       	rjmp	.+6      	; 0x127c <udi_hid_setup+0x13a>
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	01 c0       	rjmp	.+2      	; 0x127c <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    127a:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1282:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    1286:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    128a:	01 90       	ld	r0, Z+
    128c:	f0 81       	ld	r31, Z
    128e:	e0 2d       	mov	r30, r0
    1290:	22 81       	ldd	r18, Z+2	; 0x02
    1292:	33 81       	ldd	r19, Z+3	; 0x03
    1294:	2e 0f       	add	r18, r30
    1296:	3f 1f       	adc	r19, r31
    1298:	fc 01       	movw	r30, r24
    129a:	40 81       	ld	r20, Z
    129c:	e4 0f       	add	r30, r20
    129e:	f1 1d       	adc	r31, r1
    12a0:	e2 17       	cp	r30, r18
    12a2:	f3 07       	cpc	r31, r19
    12a4:	a0 f4       	brcc	.+40     	; 0x12ce <udc_next_desc_in_iface+0x4c>
    12a6:	81 81       	ldd	r24, Z+1	; 0x01
    12a8:	84 30       	cpi	r24, 0x04	; 4
    12aa:	a1 f0       	breq	.+40     	; 0x12d4 <udc_next_desc_in_iface+0x52>
    12ac:	86 13       	cpse	r24, r22
    12ae:	06 c0       	rjmp	.+12     	; 0x12bc <udc_next_desc_in_iface+0x3a>
    12b0:	14 c0       	rjmp	.+40     	; 0x12da <udc_next_desc_in_iface+0x58>
    12b2:	81 81       	ldd	r24, Z+1	; 0x01
    12b4:	84 30       	cpi	r24, 0x04	; 4
    12b6:	a1 f0       	breq	.+40     	; 0x12e0 <udc_next_desc_in_iface+0x5e>
    12b8:	86 17       	cp	r24, r22
    12ba:	a9 f0       	breq	.+42     	; 0x12e6 <udc_next_desc_in_iface+0x64>
    12bc:	80 81       	ld	r24, Z
    12be:	e8 0f       	add	r30, r24
    12c0:	f1 1d       	adc	r31, r1
    12c2:	e2 17       	cp	r30, r18
    12c4:	f3 07       	cpc	r31, r19
    12c6:	a8 f3       	brcs	.-22     	; 0x12b2 <udc_next_desc_in_iface+0x30>
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	08 95       	ret
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	08 95       	ret
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	08 95       	ret
    12da:	8e 2f       	mov	r24, r30
    12dc:	9f 2f       	mov	r25, r31
    12de:	08 95       	ret
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	08 95       	ret
    12e6:	8e 2f       	mov	r24, r30
    12e8:	9f 2f       	mov	r25, r31
    12ea:	08 95       	ret

000012ec <udc_valid_address>:
    12ec:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    12f0:	8f 77       	andi	r24, 0x7F	; 127
    12f2:	95 c7       	rjmp	.+3882   	; 0x221e <udd_set_address>
    12f4:	08 95       	ret

000012f6 <udc_update_iface_desc>:
    12f6:	90 91 e8 21 	lds	r25, 0x21E8	; 0x8021e8 <udc_num_configuration>
    12fa:	99 23       	and	r25, r25
    12fc:	81 f1       	breq	.+96     	; 0x135e <udc_update_iface_desc+0x68>
    12fe:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    1302:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1306:	01 90       	ld	r0, Z+
    1308:	f0 81       	ld	r31, Z
    130a:	e0 2d       	mov	r30, r0
    130c:	94 81       	ldd	r25, Z+4	; 0x04
    130e:	89 17       	cp	r24, r25
    1310:	40 f5       	brcc	.+80     	; 0x1362 <udc_update_iface_desc+0x6c>
    1312:	e0 93 e4 21 	sts	0x21E4, r30	; 0x8021e4 <udc_ptr_iface>
    1316:	f0 93 e5 21 	sts	0x21E5, r31	; 0x8021e5 <udc_ptr_iface+0x1>
    131a:	22 81       	ldd	r18, Z+2	; 0x02
    131c:	33 81       	ldd	r19, Z+3	; 0x03
    131e:	2e 0f       	add	r18, r30
    1320:	3f 1f       	adc	r19, r31
    1322:	e2 17       	cp	r30, r18
    1324:	f3 07       	cpc	r31, r19
    1326:	f8 f4       	brcc	.+62     	; 0x1366 <udc_update_iface_desc+0x70>
    1328:	91 81       	ldd	r25, Z+1	; 0x01
    132a:	94 30       	cpi	r25, 0x04	; 4
    132c:	61 f4       	brne	.+24     	; 0x1346 <udc_update_iface_desc+0x50>
    132e:	92 81       	ldd	r25, Z+2	; 0x02
    1330:	89 13       	cpse	r24, r25
    1332:	09 c0       	rjmp	.+18     	; 0x1346 <udc_update_iface_desc+0x50>
    1334:	93 81       	ldd	r25, Z+3	; 0x03
    1336:	96 13       	cpse	r25, r22
    1338:	06 c0       	rjmp	.+12     	; 0x1346 <udc_update_iface_desc+0x50>
    133a:	e0 93 e4 21 	sts	0x21E4, r30	; 0x8021e4 <udc_ptr_iface>
    133e:	f0 93 e5 21 	sts	0x21E5, r31	; 0x8021e5 <udc_ptr_iface+0x1>
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	08 95       	ret
    1346:	90 81       	ld	r25, Z
    1348:	e9 0f       	add	r30, r25
    134a:	f1 1d       	adc	r31, r1
    134c:	e2 17       	cp	r30, r18
    134e:	f3 07       	cpc	r31, r19
    1350:	58 f3       	brcs	.-42     	; 0x1328 <udc_update_iface_desc+0x32>
    1352:	e0 93 e4 21 	sts	0x21E4, r30	; 0x8021e4 <udc_ptr_iface>
    1356:	f0 93 e5 21 	sts	0x21E5, r31	; 0x8021e5 <udc_ptr_iface+0x1>
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	08 95       	ret
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	08 95       	ret
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	08 95       	ret
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	08 95       	ret

0000136a <udc_iface_disable>:
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	c8 2f       	mov	r28, r24
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	be df       	rcall	.-132    	; 0x12f6 <udc_update_iface_desc>
    137a:	18 2f       	mov	r17, r24
    137c:	88 23       	and	r24, r24
    137e:	81 f1       	breq	.+96     	; 0x13e0 <udc_iface_disable+0x76>
    1380:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    1384:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1388:	ec 2f       	mov	r30, r28
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	ee 0f       	add	r30, r30
    138e:	ff 1f       	adc	r31, r31
    1390:	12 96       	adiw	r26, 0x02	; 2
    1392:	8d 91       	ld	r24, X+
    1394:	9c 91       	ld	r25, X
    1396:	13 97       	sbiw	r26, 0x03	; 3
    1398:	e8 0f       	add	r30, r24
    139a:	f9 1f       	adc	r31, r25
    139c:	e0 80       	ld	r14, Z
    139e:	f1 80       	ldd	r15, Z+1	; 0x01
    13a0:	d7 01       	movw	r26, r14
    13a2:	16 96       	adiw	r26, 0x06	; 6
    13a4:	ed 91       	ld	r30, X+
    13a6:	fc 91       	ld	r31, X
    13a8:	17 97       	sbiw	r26, 0x07	; 7
    13aa:	19 95       	eicall
    13ac:	68 2f       	mov	r22, r24
    13ae:	8c 2f       	mov	r24, r28
    13b0:	a2 df       	rcall	.-188    	; 0x12f6 <udc_update_iface_desc>
    13b2:	18 2f       	mov	r17, r24
    13b4:	88 23       	and	r24, r24
    13b6:	a1 f0       	breq	.+40     	; 0x13e0 <udc_iface_disable+0x76>
    13b8:	c0 91 e4 21 	lds	r28, 0x21E4	; 0x8021e4 <udc_ptr_iface>
    13bc:	d0 91 e5 21 	lds	r29, 0x21E5	; 0x8021e5 <udc_ptr_iface+0x1>
    13c0:	65 e0       	ldi	r22, 0x05	; 5
    13c2:	ce 01       	movw	r24, r28
    13c4:	5e df       	rcall	.-324    	; 0x1282 <udc_next_desc_in_iface>
    13c6:	ec 01       	movw	r28, r24
    13c8:	89 2b       	or	r24, r25
    13ca:	21 f0       	breq	.+8      	; 0x13d4 <udc_iface_disable+0x6a>
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	0e 94 14 13 	call	0x2628	; 0x2628 <udd_ep_free>
    13d2:	f6 cf       	rjmp	.-20     	; 0x13c0 <udc_iface_disable+0x56>
    13d4:	d7 01       	movw	r26, r14
    13d6:	12 96       	adiw	r26, 0x02	; 2
    13d8:	ed 91       	ld	r30, X+
    13da:	fc 91       	ld	r31, X
    13dc:	13 97       	sbiw	r26, 0x03	; 3
    13de:	19 95       	eicall
    13e0:	81 2f       	mov	r24, r17
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	ff 90       	pop	r15
    13ea:	ef 90       	pop	r14
    13ec:	08 95       	ret

000013ee <udc_iface_enable>:
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	18 2f       	mov	r17, r24
    13f6:	7f df       	rcall	.-258    	; 0x12f6 <udc_update_iface_desc>
    13f8:	88 23       	and	r24, r24
    13fa:	39 f1       	breq	.+78     	; 0x144a <udc_iface_enable+0x5c>
    13fc:	c0 91 e4 21 	lds	r28, 0x21E4	; 0x8021e4 <udc_ptr_iface>
    1400:	d0 91 e5 21 	lds	r29, 0x21E5	; 0x8021e5 <udc_ptr_iface+0x1>
    1404:	65 e0       	ldi	r22, 0x05	; 5
    1406:	ce 01       	movw	r24, r28
    1408:	3c df       	rcall	.-392    	; 0x1282 <udc_next_desc_in_iface>
    140a:	ec 01       	movw	r28, r24
    140c:	89 2b       	or	r24, r25
    140e:	41 f0       	breq	.+16     	; 0x1420 <udc_iface_enable+0x32>
    1410:	4c 81       	ldd	r20, Y+4	; 0x04
    1412:	5d 81       	ldd	r21, Y+5	; 0x05
    1414:	6b 81       	ldd	r22, Y+3	; 0x03
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	14 d7       	rcall	.+3624   	; 0x2242 <udd_ep_alloc>
    141a:	81 11       	cpse	r24, r1
    141c:	f3 cf       	rjmp	.-26     	; 0x1404 <udc_iface_enable+0x16>
    141e:	15 c0       	rjmp	.+42     	; 0x144a <udc_iface_enable+0x5c>
    1420:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    1424:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1428:	e1 2f       	mov	r30, r17
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	ee 0f       	add	r30, r30
    142e:	ff 1f       	adc	r31, r31
    1430:	12 96       	adiw	r26, 0x02	; 2
    1432:	8d 91       	ld	r24, X+
    1434:	9c 91       	ld	r25, X
    1436:	13 97       	sbiw	r26, 0x03	; 3
    1438:	e8 0f       	add	r30, r24
    143a:	f9 1f       	adc	r31, r25
    143c:	01 90       	ld	r0, Z+
    143e:	f0 81       	ld	r31, Z
    1440:	e0 2d       	mov	r30, r0
    1442:	01 90       	ld	r0, Z+
    1444:	f0 81       	ld	r31, Z
    1446:	e0 2d       	mov	r30, r0
    1448:	19 95       	eicall
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	08 95       	ret

00001452 <udc_get_interface_desc>:
    1452:	80 91 e4 21 	lds	r24, 0x21E4	; 0x8021e4 <udc_ptr_iface>
    1456:	90 91 e5 21 	lds	r25, 0x21E5	; 0x8021e5 <udc_ptr_iface+0x1>
    145a:	08 95       	ret

0000145c <udc_start>:
    145c:	55 c6       	rjmp	.+3242   	; 0x2108 <udd_enable>
    145e:	08 95       	ret

00001460 <udc_reset>:
    1460:	cf 93       	push	r28
    1462:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    1466:	88 23       	and	r24, r24
    1468:	c1 f0       	breq	.+48     	; 0x149a <udc_reset+0x3a>
    146a:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    146e:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1472:	01 90       	ld	r0, Z+
    1474:	f0 81       	ld	r31, Z
    1476:	e0 2d       	mov	r30, r0
    1478:	84 81       	ldd	r24, Z+4	; 0x04
    147a:	88 23       	and	r24, r24
    147c:	71 f0       	breq	.+28     	; 0x149a <udc_reset+0x3a>
    147e:	c0 e0       	ldi	r28, 0x00	; 0
    1480:	8c 2f       	mov	r24, r28
    1482:	73 df       	rcall	.-282    	; 0x136a <udc_iface_disable>
    1484:	cf 5f       	subi	r28, 0xFF	; 255
    1486:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    148a:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    148e:	01 90       	ld	r0, Z+
    1490:	f0 81       	ld	r31, Z
    1492:	e0 2d       	mov	r30, r0
    1494:	84 81       	ldd	r24, Z+4	; 0x04
    1496:	c8 17       	cp	r28, r24
    1498:	98 f3       	brcs	.-26     	; 0x1480 <udc_reset+0x20>
    149a:	10 92 e8 21 	sts	0x21E8, r1	; 0x8021e8 <udc_num_configuration>
    149e:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <udc_device_status>
    14a2:	81 fd       	sbrc	r24, 1
    14a4:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <main_remotewakeup_disable>
    14a8:	10 92 ec 21 	sts	0x21EC, r1	; 0x8021ec <udc_device_status>
    14ac:	10 92 ed 21 	sts	0x21ED, r1	; 0x8021ed <udc_device_status+0x1>
    14b0:	cf 91       	pop	r28
    14b2:	08 95       	ret

000014b4 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    14b4:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    14b6:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    14ba:	88 23       	and	r24, r24
    14bc:	49 f1       	breq	.+82     	; 0x1510 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14be:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    14c2:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    14c6:	ed 91       	ld	r30, X+
    14c8:	fc 91       	ld	r31, X
    14ca:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    14cc:	84 81       	ldd	r24, Z+4	; 0x04
    14ce:	88 23       	and	r24, r24
    14d0:	f9 f0       	breq	.+62     	; 0x1510 <udc_sof_notify+0x5c>
    14d2:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    14d4:	ec 2f       	mov	r30, r28
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	ee 0f       	add	r30, r30
    14da:	ff 1f       	adc	r31, r31
    14dc:	12 96       	adiw	r26, 0x02	; 2
    14de:	8d 91       	ld	r24, X+
    14e0:	9c 91       	ld	r25, X
    14e2:	13 97       	sbiw	r26, 0x03	; 3
    14e4:	e8 0f       	add	r30, r24
    14e6:	f9 1f       	adc	r31, r25
    14e8:	01 90       	ld	r0, Z+
    14ea:	f0 81       	ld	r31, Z
    14ec:	e0 2d       	mov	r30, r0
    14ee:	00 84       	ldd	r0, Z+8	; 0x08
    14f0:	f1 85       	ldd	r31, Z+9	; 0x09
    14f2:	e0 2d       	mov	r30, r0
    14f4:	30 97       	sbiw	r30, 0x00	; 0
    14f6:	09 f0       	breq	.+2      	; 0x14fa <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    14f8:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    14fa:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14fc:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    1500:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1504:	ed 91       	ld	r30, X+
    1506:	fc 91       	ld	r31, X
    1508:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    150a:	84 81       	ldd	r24, Z+4	; 0x04
    150c:	c8 17       	cp	r28, r24
    150e:	10 f3       	brcs	.-60     	; 0x14d4 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1510:	cf 91       	pop	r28
    1512:	08 95       	ret

00001514 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    151c:	e9 eb       	ldi	r30, 0xB9	; 185
    151e:	f3 e2       	ldi	r31, 0x23	; 35
    1520:	12 86       	std	Z+10, r1	; 0x0a
    1522:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1524:	14 86       	std	Z+12, r1	; 0x0c
    1526:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1528:	16 86       	std	Z+14, r1	; 0x0e
    152a:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    152c:	80 81       	ld	r24, Z
    152e:	88 23       	and	r24, r24
    1530:	0c f0       	brlt	.+2      	; 0x1534 <udc_process_setup+0x20>
    1532:	7e c2       	rjmp	.+1276   	; 0x1a30 <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1534:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1538:	30 91 c0 23 	lds	r19, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    153c:	21 15       	cp	r18, r1
    153e:	31 05       	cpc	r19, r1
    1540:	09 f0       	breq	.+2      	; 0x1544 <udc_process_setup+0x30>
    1542:	7b c2       	rjmp	.+1270   	; 0x1a3a <udc_process_setup+0x526>
    1544:	6d c2       	rjmp	.+1242   	; 0x1a20 <udc_process_setup+0x50c>
    1546:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1548:	09 f0       	breq	.+2      	; 0x154c <udc_process_setup+0x38>
    154a:	a0 c0       	rjmp	.+320    	; 0x168c <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    154c:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1550:	96 30       	cpi	r25, 0x06	; 6
    1552:	79 f0       	breq	.+30     	; 0x1572 <udc_process_setup+0x5e>
    1554:	98 30       	cpi	r25, 0x08	; 8
    1556:	09 f4       	brne	.+2      	; 0x155a <udc_process_setup+0x46>
    1558:	8f c0       	rjmp	.+286    	; 0x1678 <udc_process_setup+0x164>
    155a:	91 11       	cpse	r25, r1
    155c:	97 c0       	rjmp	.+302    	; 0x168c <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	31 05       	cpc	r19, r1
    1562:	09 f0       	breq	.+2      	; 0x1566 <udc_process_setup+0x52>
    1564:	19 c2       	rjmp	.+1074   	; 0x1998 <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1566:	62 e0       	ldi	r22, 0x02	; 2
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	8c ee       	ldi	r24, 0xEC	; 236
    156c:	91 e2       	ldi	r25, 0x21	; 33
    156e:	62 d6       	rcall	.+3268   	; 0x2234 <udd_set_setup_payload>
    1570:	69 c2       	rjmp	.+1234   	; 0x1a44 <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1572:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1576:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    157a:	29 2f       	mov	r18, r25
    157c:	33 27       	eor	r19, r19
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	a9 f0       	breq	.+42     	; 0x15ae <udc_process_setup+0x9a>
    1584:	20 f4       	brcc	.+8      	; 0x158e <udc_process_setup+0x7a>
    1586:	21 30       	cpi	r18, 0x01	; 1
    1588:	31 05       	cpc	r19, r1
    158a:	41 f0       	breq	.+16     	; 0x159c <udc_process_setup+0x88>
    158c:	c7 c1       	rjmp	.+910    	; 0x191c <udc_process_setup+0x408>
    158e:	23 30       	cpi	r18, 0x03	; 3
    1590:	31 05       	cpc	r19, r1
    1592:	d9 f1       	breq	.+118    	; 0x160a <udc_process_setup+0xf6>
    1594:	2f 30       	cpi	r18, 0x0F	; 15
    1596:	31 05       	cpc	r19, r1
    1598:	51 f1       	breq	.+84     	; 0x15ee <udc_process_setup+0xda>
    159a:	c0 c1       	rjmp	.+896    	; 0x191c <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    159c:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <udc_config>
    15a0:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    15a4:	dc 01       	movw	r26, r24
    15a6:	6c 91       	ld	r22, X
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	44 d6       	rcall	.+3208   	; 0x2234 <udd_set_setup_payload>
    15ac:	56 c0       	rjmp	.+172    	; 0x165a <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    15ae:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    15b2:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
    15b6:	21 89       	ldd	r18, Z+17	; 0x11
    15b8:	82 17       	cp	r24, r18
    15ba:	08 f0       	brcs	.+2      	; 0x15be <udc_process_setup+0xaa>
    15bc:	ed c1       	rjmp	.+986    	; 0x1998 <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    15be:	99 27       	eor	r25, r25
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    15cc:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    15d0:	e8 0f       	add	r30, r24
    15d2:	f9 1f       	adc	r31, r25
    15d4:	80 81       	ld	r24, Z
    15d6:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    15d8:	fc 01       	movw	r30, r24
    15da:	62 81       	ldd	r22, Z+2	; 0x02
    15dc:	73 81       	ldd	r23, Z+3	; 0x03
    15de:	2a d6       	rcall	.+3156   	; 0x2234 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    15e0:	e0 91 c1 23 	lds	r30, 0x23C1	; 0x8023c1 <udd_g_ctrlreq+0x8>
    15e4:	f0 91 c2 23 	lds	r31, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x9>
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	81 83       	std	Z+1, r24	; 0x01
    15ec:	36 c0       	rjmp	.+108    	; 0x165a <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    15ee:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <udc_config+0x4>
    15f2:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <udc_config+0x5>
    15f6:	00 97       	sbiw	r24, 0x00	; 0
    15f8:	09 f4       	brne	.+2      	; 0x15fc <udc_process_setup+0xe8>
    15fa:	ce c1       	rjmp	.+924    	; 0x1998 <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    15fc:	dc 01       	movw	r26, r24
    15fe:	12 96       	adiw	r26, 0x02	; 2
    1600:	6d 91       	ld	r22, X+
    1602:	7c 91       	ld	r23, X
    1604:	13 97       	sbiw	r26, 0x03	; 3
    1606:	16 d6       	rcall	.+3116   	; 0x2234 <udd_set_setup_payload>
    1608:	28 c0       	rjmp	.+80     	; 0x165a <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    160a:	99 27       	eor	r25, r25
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	91 05       	cpc	r25, r1
    1610:	71 f0       	breq	.+28     	; 0x162e <udc_process_setup+0x11a>
    1612:	38 f0       	brcs	.+14     	; 0x1622 <udc_process_setup+0x10e>
    1614:	02 97       	sbiw	r24, 0x02	; 2
    1616:	09 f0       	breq	.+2      	; 0x161a <udc_process_setup+0x106>
    1618:	8a c1       	rjmp	.+788    	; 0x192e <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    161a:	e4 e5       	ldi	r30, 0x54	; 84
    161c:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    161e:	31 e2       	ldi	r19, 0x21	; 33
    1620:	09 c0       	rjmp	.+18     	; 0x1634 <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1622:	64 e0       	ldi	r22, 0x04	; 4
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	80 e8       	ldi	r24, 0x80	; 128
    1628:	91 e2       	ldi	r25, 0x21	; 33
    162a:	04 d6       	rcall	.+3080   	; 0x2234 <udd_set_setup_payload>
    162c:	16 c0       	rjmp	.+44     	; 0x165a <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    162e:	e6 e7       	ldi	r30, 0x76	; 118
    1630:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1632:	39 e0       	ldi	r19, 0x09	; 9
    1634:	a2 e1       	ldi	r26, 0x12	; 18
    1636:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1638:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    163a:	81 91       	ld	r24, Z+
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	8d 93       	st	X+, r24
    1640:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1642:	2f 5f       	subi	r18, 0xFF	; 255
    1644:	23 17       	cp	r18, r19
    1646:	c8 f3       	brcs	.-14     	; 0x163a <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1648:	63 2f       	mov	r22, r19
    164a:	66 0f       	add	r22, r22
    164c:	6e 5f       	subi	r22, 0xFE	; 254
    164e:	60 93 10 21 	sts	0x2110, r22	; 0x802110 <udc_string_desc>
		udd_set_setup_payload(
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	80 e1       	ldi	r24, 0x10	; 16
    1656:	91 e2       	ldi	r25, 0x21	; 33
    1658:	ed d5       	rcall	.+3034   	; 0x2234 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    165a:	e9 eb       	ldi	r30, 0xB9	; 185
    165c:	f3 e2       	ldi	r31, 0x23	; 35
    165e:	86 81       	ldd	r24, Z+6	; 0x06
    1660:	97 81       	ldd	r25, Z+7	; 0x07
    1662:	22 85       	ldd	r18, Z+10	; 0x0a
    1664:	33 85       	ldd	r19, Z+11	; 0x0b
    1666:	82 17       	cp	r24, r18
    1668:	93 07       	cpc	r25, r19
    166a:	08 f0       	brcs	.+2      	; 0x166e <udc_process_setup+0x15a>
    166c:	eb c1       	rjmp	.+982    	; 0x1a44 <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    166e:	80 93 c3 23 	sts	0x23C3, r24	; 0x8023c3 <udd_g_ctrlreq+0xa>
    1672:	90 93 c4 23 	sts	0x23C4, r25	; 0x8023c4 <udd_g_ctrlreq+0xb>
    1676:	e6 c1       	rjmp	.+972    	; 0x1a44 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1678:	21 30       	cpi	r18, 0x01	; 1
    167a:	31 05       	cpc	r19, r1
    167c:	09 f0       	breq	.+2      	; 0x1680 <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    167e:	8c c1       	rjmp	.+792    	; 0x1998 <udc_process_setup+0x484>
    1680:	61 e0       	ldi	r22, 0x01	; 1
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	88 ee       	ldi	r24, 0xE8	; 232
    1686:	91 e2       	ldi	r25, 0x21	; 33
    1688:	d5 d5       	rcall	.+2986   	; 0x2234 <udd_set_setup_payload>
    168a:	dc c1       	rjmp	.+952    	; 0x1a44 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	e1 f5       	brne	.+120    	; 0x1708 <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1690:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1694:	9a 30       	cpi	r25, 0x0A	; 10
    1696:	c1 f5       	brne	.+112    	; 0x1708 <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1698:	21 30       	cpi	r18, 0x01	; 1
    169a:	31 05       	cpc	r19, r1
    169c:	09 f0       	breq	.+2      	; 0x16a0 <udc_process_setup+0x18c>
    169e:	4c c1       	rjmp	.+664    	; 0x1938 <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    16a0:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    16a4:	88 23       	and	r24, r24
    16a6:	09 f4       	brne	.+2      	; 0x16aa <udc_process_setup+0x196>
    16a8:	47 c1       	rjmp	.+654    	; 0x1938 <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    16aa:	c0 91 bd 23 	lds	r28, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    16ae:	d0 91 be 23 	lds	r29, 0x23BE	; 0x8023be <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    16b2:	00 91 e6 21 	lds	r16, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    16b6:	10 91 e7 21 	lds	r17, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    16ba:	d8 01       	movw	r26, r16
    16bc:	ed 91       	ld	r30, X+
    16be:	fc 91       	ld	r31, X
    16c0:	84 81       	ldd	r24, Z+4	; 0x04
    16c2:	c8 17       	cp	r28, r24
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    16c6:	38 c1       	rjmp	.+624    	; 0x1938 <udc_process_setup+0x424>
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	8c 2f       	mov	r24, r28
    16cc:	14 de       	rcall	.-984    	; 0x12f6 <udc_update_iface_desc>
    16ce:	88 23       	and	r24, r24
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <udc_process_setup+0x1c0>
    16d2:	2d c1       	rjmp	.+602    	; 0x192e <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    16d4:	ce 01       	movw	r24, r28
    16d6:	99 27       	eor	r25, r25
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	d8 01       	movw	r26, r16
    16de:	12 96       	adiw	r26, 0x02	; 2
    16e0:	ed 91       	ld	r30, X+
    16e2:	fc 91       	ld	r31, X
    16e4:	13 97       	sbiw	r26, 0x03	; 3
    16e6:	e8 0f       	add	r30, r24
    16e8:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    16ea:	01 90       	ld	r0, Z+
    16ec:	f0 81       	ld	r31, Z
    16ee:	e0 2d       	mov	r30, r0
    16f0:	86 81       	ldd	r24, Z+6	; 0x06
    16f2:	97 81       	ldd	r25, Z+7	; 0x07
    16f4:	fc 01       	movw	r30, r24
    16f6:	19 95       	eicall
    16f8:	80 93 ea 21 	sts	0x21EA, r24	; 0x8021ea <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    16fc:	61 e0       	ldi	r22, 0x01	; 1
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	8a ee       	ldi	r24, 0xEA	; 234
    1702:	91 e2       	ldi	r25, 0x21	; 33
    1704:	97 d5       	rcall	.+2862   	; 0x2234 <udd_set_setup_payload>
    1706:	9e c1       	rjmp	.+828    	; 0x1a44 <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	09 f0       	breq	.+2      	; 0x170e <udc_process_setup+0x1fa>
    170c:	10 c1       	rjmp	.+544    	; 0x192e <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    170e:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1712:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1714:	05 c1       	rjmp	.+522    	; 0x1920 <udc_process_setup+0x40c>
    1716:	22 30       	cpi	r18, 0x02	; 2
    1718:	31 05       	cpc	r19, r1
    171a:	09 f0       	breq	.+2      	; 0x171e <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    171c:	3d c1       	rjmp	.+634    	; 0x1998 <udc_process_setup+0x484>
    171e:	80 91 bd 23 	lds	r24, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    1722:	17 d6       	rcall	.+3118   	; 0x2352 <udd_ep_is_halted>
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	80 93 e2 21 	sts	0x21E2, r24	; 0x8021e2 <udc_ep_status.4574>
    172a:	90 93 e3 21 	sts	0x21E3, r25	; 0x8021e3 <udc_ep_status.4574+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    172e:	62 e0       	ldi	r22, 0x02	; 2
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	82 ee       	ldi	r24, 0xE2	; 226
    1734:	91 e2       	ldi	r25, 0x21	; 33
    1736:	7e d5       	rcall	.+2812   	; 0x2234 <udd_set_setup_payload>
    1738:	85 c1       	rjmp	.+778    	; 0x1a44 <udc_process_setup+0x530>
    173a:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    173c:	09 f0       	breq	.+2      	; 0x1740 <udc_process_setup+0x22c>
    173e:	9f c0       	rjmp	.+318    	; 0x187e <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1740:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1744:	93 30       	cpi	r25, 0x03	; 3
    1746:	91 f1       	breq	.+100    	; 0x17ac <udc_process_setup+0x298>
    1748:	18 f4       	brcc	.+6      	; 0x1750 <udc_process_setup+0x23c>
    174a:	91 30       	cpi	r25, 0x01	; 1
    174c:	a9 f0       	breq	.+42     	; 0x1778 <udc_process_setup+0x264>
    174e:	97 c0       	rjmp	.+302    	; 0x187e <udc_process_setup+0x36a>
    1750:	95 30       	cpi	r25, 0x05	; 5
    1752:	21 f0       	breq	.+8      	; 0x175c <udc_process_setup+0x248>
    1754:	99 30       	cpi	r25, 0x09	; 9
    1756:	09 f4       	brne	.+2      	; 0x175a <udc_process_setup+0x246>
    1758:	43 c0       	rjmp	.+134    	; 0x17e0 <udc_process_setup+0x2cc>
    175a:	91 c0       	rjmp	.+290    	; 0x187e <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    175c:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1760:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1764:	89 2b       	or	r24, r25
    1766:	09 f0       	breq	.+2      	; 0x176a <udc_process_setup+0x256>
    1768:	17 c1       	rjmp	.+558    	; 0x1998 <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    176a:	86 e7       	ldi	r24, 0x76	; 118
    176c:	99 e0       	ldi	r25, 0x09	; 9
    176e:	80 93 c5 23 	sts	0x23C5, r24	; 0x8023c5 <udd_g_ctrlreq+0xc>
    1772:	90 93 c6 23 	sts	0x23C6, r25	; 0x8023c6 <udd_g_ctrlreq+0xd>
    1776:	66 c1       	rjmp	.+716    	; 0x1a44 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1778:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    177c:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1780:	89 2b       	or	r24, r25
    1782:	09 f0       	breq	.+2      	; 0x1786 <udc_process_setup+0x272>
    1784:	09 c1       	rjmp	.+530    	; 0x1998 <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1786:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    178a:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	09 f0       	breq	.+2      	; 0x1794 <udc_process_setup+0x280>
    1792:	02 c1       	rjmp	.+516    	; 0x1998 <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1794:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <udc_device_status>
    1798:	90 91 ed 21 	lds	r25, 0x21ED	; 0x8021ed <udc_device_status+0x1>
    179c:	8d 7f       	andi	r24, 0xFD	; 253
    179e:	80 93 ec 21 	sts	0x21EC, r24	; 0x8021ec <udc_device_status>
    17a2:	90 93 ed 21 	sts	0x21ED, r25	; 0x8021ed <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    17a6:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <main_remotewakeup_disable>
    17aa:	4c c1       	rjmp	.+664    	; 0x1a44 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    17ac:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    17b0:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    17b4:	89 2b       	or	r24, r25
    17b6:	09 f0       	breq	.+2      	; 0x17ba <udc_process_setup+0x2a6>
    17b8:	ef c0       	rjmp	.+478    	; 0x1998 <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    17ba:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    17be:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <udc_process_setup+0x2b4>
    17c6:	ae c0       	rjmp	.+348    	; 0x1924 <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    17c8:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <udc_device_status>
    17cc:	90 91 ed 21 	lds	r25, 0x21ED	; 0x8021ed <udc_device_status+0x1>
    17d0:	82 60       	ori	r24, 0x02	; 2
    17d2:	80 93 ec 21 	sts	0x21EC, r24	; 0x8021ec <udc_device_status>
    17d6:	90 93 ed 21 	sts	0x21ED, r25	; 0x8021ed <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    17da:	0e 94 29 15 	call	0x2a52	; 0x2a52 <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    17de:	32 c1       	rjmp	.+612    	; 0x1a44 <udc_process_setup+0x530>
    17e0:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    17e4:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    17e8:	89 2b       	or	r24, r25
    17ea:	09 f0       	breq	.+2      	; 0x17ee <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    17ec:	d5 c0       	rjmp	.+426    	; 0x1998 <udc_process_setup+0x484>
    17ee:	1a d5       	rcall	.+2612   	; 0x2224 <udd_getaddress>
    17f0:	88 23       	and	r24, r24
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <udc_process_setup+0x2e2>
    17f4:	9c c0       	rjmp	.+312    	; 0x192e <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    17f6:	20 91 bb 23 	lds	r18, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    17fa:	30 91 bc 23 	lds	r19, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    17fe:	33 27       	eor	r19, r19
    1800:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    1804:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1808:	81 89       	ldd	r24, Z+17	; 0x11
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	82 17       	cp	r24, r18
    180e:	93 07       	cpc	r25, r19
    1810:	08 f4       	brcc	.+2      	; 0x1814 <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1812:	8d c0       	rjmp	.+282    	; 0x192e <udc_process_setup+0x41a>
    1814:	25 de       	rcall	.-950    	; 0x1460 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1816:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    181a:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    181e:	80 93 e8 21 	sts	0x21E8, r24	; 0x8021e8 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1822:	88 23       	and	r24, r24
    1824:	09 f4       	brne	.+2      	; 0x1828 <udc_process_setup+0x314>
    1826:	0e c1       	rjmp	.+540    	; 0x1a44 <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1828:	99 27       	eor	r25, r25
    182a:	81 50       	subi	r24, 0x01	; 1
    182c:	90 4c       	sbci	r25, 0xC0	; 192
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    183a:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    183e:	e8 0f       	add	r30, r24
    1840:	f9 1f       	adc	r31, r25
    1842:	e0 93 e6 21 	sts	0x21E6, r30	; 0x8021e6 <udc_ptr_conf>
    1846:	f0 93 e7 21 	sts	0x21E7, r31	; 0x8021e7 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    184a:	01 90       	ld	r0, Z+
    184c:	f0 81       	ld	r31, Z
    184e:	e0 2d       	mov	r30, r0
    1850:	84 81       	ldd	r24, Z+4	; 0x04
    1852:	88 23       	and	r24, r24
    1854:	09 f4       	brne	.+2      	; 0x1858 <udc_process_setup+0x344>
    1856:	f6 c0       	rjmp	.+492    	; 0x1a44 <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1858:	c0 e0       	ldi	r28, 0x00	; 0
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	8c 2f       	mov	r24, r28
    185e:	c7 dd       	rcall	.-1138   	; 0x13ee <udc_iface_enable>
    1860:	88 23       	and	r24, r24
    1862:	09 f4       	brne	.+2      	; 0x1866 <udc_process_setup+0x352>
    1864:	64 c0       	rjmp	.+200    	; 0x192e <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1866:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1868:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    186c:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1870:	01 90       	ld	r0, Z+
    1872:	f0 81       	ld	r31, Z
    1874:	e0 2d       	mov	r30, r0
    1876:	84 81       	ldd	r24, Z+4	; 0x04
    1878:	c8 17       	cp	r28, r24
    187a:	78 f3       	brcs	.-34     	; 0x185a <udc_process_setup+0x346>
    187c:	e3 c0       	rjmp	.+454    	; 0x1a44 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	e9 f4       	brne	.+58     	; 0x18bc <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1882:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1886:	9b 30       	cpi	r25, 0x0B	; 11
    1888:	c9 f4       	brne	.+50     	; 0x18bc <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    188a:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    188e:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1892:	89 2b       	or	r24, r25
    1894:	09 f0       	breq	.+2      	; 0x1898 <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1896:	50 c0       	rjmp	.+160    	; 0x1938 <udc_process_setup+0x424>
    1898:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    189c:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    189e:	09 f4       	brne	.+2      	; 0x18a2 <udc_process_setup+0x38e>
    18a0:	4b c0       	rjmp	.+150    	; 0x1938 <udc_process_setup+0x424>
    18a2:	e9 eb       	ldi	r30, 0xB9	; 185
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    18a4:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    18a6:	c4 81       	ldd	r28, Z+4	; 0x04
    18a8:	d2 81       	ldd	r29, Z+2	; 0x02
    18aa:	8c 2f       	mov	r24, r28
    18ac:	5e dd       	rcall	.-1348   	; 0x136a <udc_iface_disable>
    18ae:	88 23       	and	r24, r24
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    18b2:	3d c0       	rjmp	.+122    	; 0x192e <udc_process_setup+0x41a>
    18b4:	6d 2f       	mov	r22, r29
    18b6:	8c 2f       	mov	r24, r28
    18b8:	9a dd       	rcall	.-1228   	; 0x13ee <udc_iface_enable>
    18ba:	37 c0       	rjmp	.+110    	; 0x192a <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    18bc:	82 30       	cpi	r24, 0x02	; 2
    18be:	b9 f5       	brne	.+110    	; 0x192e <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    18c0:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	19 f0       	breq	.+6      	; 0x18ce <udc_process_setup+0x3ba>
    18c8:	83 30       	cpi	r24, 0x03	; 3
    18ca:	99 f0       	breq	.+38     	; 0x18f2 <udc_process_setup+0x3de>
    18cc:	2d c0       	rjmp	.+90     	; 0x1928 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    18ce:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    18d2:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    18d6:	89 2b       	or	r24, r25
    18d8:	09 f0       	breq	.+2      	; 0x18dc <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    18da:	5e c0       	rjmp	.+188    	; 0x1998 <udc_process_setup+0x484>
    18dc:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    18e0:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    18e4:	89 2b       	or	r24, r25
    18e6:	09 f0       	breq	.+2      	; 0x18ea <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    18e8:	57 c0       	rjmp	.+174    	; 0x1998 <udc_process_setup+0x484>
    18ea:	80 91 bd 23 	lds	r24, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    18ee:	4c d5       	rcall	.+2712   	; 0x2388 <udd_ep_clear_halt>
    18f0:	1c c0       	rjmp	.+56     	; 0x192a <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    18f2:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    18f6:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    18fa:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    18fc:	09 f0       	breq	.+2      	; 0x1900 <udc_process_setup+0x3ec>
    18fe:	4c c0       	rjmp	.+152    	; 0x1998 <udc_process_setup+0x484>
    1900:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1904:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    1908:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    190a:	09 f0       	breq	.+2      	; 0x190e <udc_process_setup+0x3fa>
    190c:	45 c0       	rjmp	.+138    	; 0x1998 <udc_process_setup+0x484>
    190e:	c9 eb       	ldi	r28, 0xB9	; 185
    1910:	d3 e2       	ldi	r29, 0x23	; 35
    1912:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1914:	3a d6       	rcall	.+3188   	; 0x258a <udd_ep_abort>
    1916:	8c 81       	ldd	r24, Y+4	; 0x04
    1918:	a3 d6       	rcall	.+3398   	; 0x2660 <udd_ep_set_halt>
    191a:	07 c0       	rjmp	.+14     	; 0x192a <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	05 c0       	rjmp	.+10     	; 0x192a <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	03 c0       	rjmp	.+6      	; 0x192a <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	01 c0       	rjmp	.+2      	; 0x192a <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1928:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    192a:	81 11       	cpse	r24, r1
    192c:	8c c0       	rjmp	.+280    	; 0x1a46 <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    192e:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    1932:	8f 71       	andi	r24, 0x1F	; 31
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	81 f5       	brne	.+96     	; 0x1998 <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1938:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    193c:	88 23       	and	r24, r24
    193e:	09 f4       	brne	.+2      	; 0x1942 <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1940:	71 c0       	rjmp	.+226    	; 0x1a24 <udc_process_setup+0x510>
    1942:	00 91 bd 23 	lds	r16, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    1946:	10 91 be 23 	lds	r17, 0x23BE	; 0x8023be <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    194a:	c0 91 e6 21 	lds	r28, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    194e:	d0 91 e7 21 	lds	r29, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1952:	e8 81       	ld	r30, Y
    1954:	f9 81       	ldd	r31, Y+1	; 0x01
    1956:	84 81       	ldd	r24, Z+4	; 0x04
    1958:	08 17       	cp	r16, r24
    195a:	08 f0       	brcs	.+2      	; 0x195e <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    195c:	65 c0       	rjmp	.+202    	; 0x1a28 <udc_process_setup+0x514>
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	80 2f       	mov	r24, r16
    1962:	c9 dc       	rcall	.-1646   	; 0x12f6 <udc_update_iface_desc>
    1964:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1966:	c1 f0       	breq	.+48     	; 0x1998 <udc_process_setup+0x484>
    1968:	f8 01       	movw	r30, r16
    196a:	ff 27       	eor	r31, r31
    196c:	cf 01       	movw	r24, r30
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	ea 81       	ldd	r30, Y+2	; 0x02
    1974:	fb 81       	ldd	r31, Y+3	; 0x03
    1976:	e8 0f       	add	r30, r24
    1978:	f9 1f       	adc	r31, r25
    197a:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    197c:	d1 81       	ldd	r29, Z+1	; 0x01
    197e:	ee 81       	ldd	r30, Y+6	; 0x06
    1980:	ff 81       	ldd	r31, Y+7	; 0x07
    1982:	19 95       	eicall
    1984:	68 2f       	mov	r22, r24
    1986:	80 2f       	mov	r24, r16
    1988:	b6 dc       	rcall	.-1684   	; 0x12f6 <udc_update_iface_desc>
    198a:	88 23       	and	r24, r24
    198c:	29 f0       	breq	.+10     	; 0x1998 <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    198e:	ec 81       	ldd	r30, Y+4	; 0x04
    1990:	fd 81       	ldd	r31, Y+5	; 0x05
    1992:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1994:	81 11       	cpse	r24, r1
    1996:	57 c0       	rjmp	.+174    	; 0x1a46 <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1998:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    199c:	8f 71       	andi	r24, 0x1F	; 31
    199e:	82 30       	cpi	r24, 0x02	; 2
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <udc_process_setup+0x490>
    19a2:	44 c0       	rjmp	.+136    	; 0x1a2c <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    19a4:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    19a8:	88 23       	and	r24, r24
    19aa:	b1 f1       	breq	.+108    	; 0x1a18 <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19ac:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    19b0:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    19b4:	ed 91       	ld	r30, X+
    19b6:	fc 91       	ld	r31, X
    19b8:	11 97       	sbiw	r26, 0x01	; 1
    19ba:	84 81       	ldd	r24, Z+4	; 0x04
    19bc:	88 23       	and	r24, r24
    19be:	71 f1       	breq	.+92     	; 0x1a1c <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    19c0:	c0 e0       	ldi	r28, 0x00	; 0
    19c2:	ec 2f       	mov	r30, r28
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	ee 0f       	add	r30, r30
    19c8:	ff 1f       	adc	r31, r31
    19ca:	12 96       	adiw	r26, 0x02	; 2
    19cc:	8d 91       	ld	r24, X+
    19ce:	9c 91       	ld	r25, X
    19d0:	13 97       	sbiw	r26, 0x03	; 3
    19d2:	e8 0f       	add	r30, r24
    19d4:	f9 1f       	adc	r31, r25
    19d6:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    19d8:	11 81       	ldd	r17, Z+1	; 0x01
    19da:	d8 01       	movw	r26, r16
    19dc:	16 96       	adiw	r26, 0x06	; 6
    19de:	ed 91       	ld	r30, X+
    19e0:	fc 91       	ld	r31, X
    19e2:	17 97       	sbiw	r26, 0x07	; 7
    19e4:	19 95       	eicall
    19e6:	68 2f       	mov	r22, r24
    19e8:	8c 2f       	mov	r24, r28
    19ea:	85 dc       	rcall	.-1782   	; 0x12f6 <udc_update_iface_desc>
    19ec:	88 23       	and	r24, r24
    19ee:	59 f1       	breq	.+86     	; 0x1a46 <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    19f0:	d8 01       	movw	r26, r16
    19f2:	14 96       	adiw	r26, 0x04	; 4
    19f4:	ed 91       	ld	r30, X+
    19f6:	fc 91       	ld	r31, X
    19f8:	15 97       	sbiw	r26, 0x05	; 5
    19fa:	19 95       	eicall
    19fc:	81 11       	cpse	r24, r1
    19fe:	23 c0       	rjmp	.+70     	; 0x1a46 <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1a00:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a02:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    1a06:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1a0a:	ed 91       	ld	r30, X+
    1a0c:	fc 91       	ld	r31, X
    1a0e:	11 97       	sbiw	r26, 0x01	; 1
    1a10:	94 81       	ldd	r25, Z+4	; 0x04
    1a12:	c9 17       	cp	r28, r25
    1a14:	b0 f2       	brcs	.-84     	; 0x19c2 <udc_process_setup+0x4ae>
    1a16:	17 c0       	rjmp	.+46     	; 0x1a46 <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	15 c0       	rjmp	.+42     	; 0x1a46 <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	13 c0       	rjmp	.+38     	; 0x1a46 <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	11 c0       	rjmp	.+34     	; 0x1a46 <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	0f c0       	rjmp	.+30     	; 0x1a46 <udc_process_setup+0x532>
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	0d c0       	rjmp	.+26     	; 0x1a46 <udc_process_setup+0x532>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	0b c0       	rjmp	.+22     	; 0x1a46 <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1a30:	98 2f       	mov	r25, r24
    1a32:	90 76       	andi	r25, 0x60	; 96
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <udc_process_setup+0x524>
    1a36:	7b cf       	rjmp	.-266    	; 0x192e <udc_process_setup+0x41a>
    1a38:	80 ce       	rjmp	.-768    	; 0x173a <udc_process_setup+0x226>
    1a3a:	98 2f       	mov	r25, r24
    1a3c:	90 76       	andi	r25, 0x60	; 96
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <udc_process_setup+0x52e>
    1a40:	76 cf       	rjmp	.-276    	; 0x192e <udc_process_setup+0x41a>
    1a42:	81 cd       	rjmp	.-1278   	; 0x1546 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	1f 91       	pop	r17
    1a4c:	0f 91       	pop	r16
    1a4e:	08 95       	ret

00001a50 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1a50:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1a54:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1a56:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1a58:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1a5c:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1a5e:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1a62:	08 95       	ret

00001a64 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1a64:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1a66:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1a68:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1a6a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1a6c:	60 83       	st	Z, r22
	ret                             // Return to caller
    1a6e:	08 95       	ret

00001a70 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	1f 92       	push	r1
    1a76:	1f 92       	push	r1
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	81 11       	cpse	r24, r1
    1a7e:	26 c0       	rjmp	.+76     	; 0x1acc <udd_sleep_mode+0x5c>
    1a80:	90 91 ac 23 	lds	r25, 0x23AC	; 0x8023ac <udd_b_idle>
    1a84:	99 23       	and	r25, r25
    1a86:	f9 f0       	breq	.+62     	; 0x1ac6 <udd_sleep_mode+0x56>
    1a88:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <sleepmgr_locks+0x1>
    1a8c:	91 11       	cpse	r25, r1
    1a8e:	01 c0       	rjmp	.+2      	; 0x1a92 <udd_sleep_mode+0x22>
    1a90:	ff cf       	rjmp	.-2      	; 0x1a90 <udd_sleep_mode+0x20>
    1a92:	9f b7       	in	r25, 0x3f	; 63
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	f8 94       	cli
    1a98:	2a 81       	ldd	r18, Y+2	; 0x02
    1a9a:	e3 eb       	ldi	r30, 0xB3	; 179
    1a9c:	f3 e2       	ldi	r31, 0x23	; 35
    1a9e:	91 81       	ldd	r25, Z+1	; 0x01
    1aa0:	91 50       	subi	r25, 0x01	; 1
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	2f bf       	out	0x3f, r18	; 63
    1aa6:	0f c0       	rjmp	.+30     	; 0x1ac6 <udd_sleep_mode+0x56>
    1aa8:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <sleepmgr_locks+0x1>
    1aac:	9f 3f       	cpi	r25, 0xFF	; 255
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <udd_sleep_mode+0x42>
    1ab0:	ff cf       	rjmp	.-2      	; 0x1ab0 <udd_sleep_mode+0x40>
    1ab2:	9f b7       	in	r25, 0x3f	; 63
    1ab4:	99 83       	std	Y+1, r25	; 0x01
    1ab6:	f8 94       	cli
    1ab8:	29 81       	ldd	r18, Y+1	; 0x01
    1aba:	e3 eb       	ldi	r30, 0xB3	; 179
    1abc:	f3 e2       	ldi	r31, 0x23	; 35
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	9f 5f       	subi	r25, 0xFF	; 255
    1ac2:	91 83       	std	Z+1, r25	; 0x01
    1ac4:	2f bf       	out	0x3f, r18	; 63
    1ac6:	80 93 ac 23 	sts	0x23AC, r24	; 0x8023ac <udd_b_idle>
    1aca:	05 c0       	rjmp	.+10     	; 0x1ad6 <udd_sleep_mode+0x66>
    1acc:	90 91 ac 23 	lds	r25, 0x23AC	; 0x8023ac <udd_b_idle>
    1ad0:	99 23       	and	r25, r25
    1ad2:	51 f3       	breq	.-44     	; 0x1aa8 <udd_sleep_mode+0x38>
    1ad4:	f8 cf       	rjmp	.-16     	; 0x1ac6 <udd_sleep_mode+0x56>
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	08 95       	ret

00001ae0 <udd_ctrl_init>:
    1ae0:	0f 93       	push	r16
    1ae2:	e8 ec       	ldi	r30, 0xC8	; 200
    1ae4:	f4 e0       	ldi	r31, 0x04	; 4
    1ae6:	80 81       	ld	r24, Z
    1ae8:	8f 7d       	andi	r24, 0xDF	; 223
    1aea:	80 83       	st	Z, r24
    1aec:	80 81       	ld	r24, Z
    1aee:	8f 7d       	andi	r24, 0xDF	; 223
    1af0:	80 83       	st	Z, r24
    1af2:	e0 e6       	ldi	r30, 0x60	; 96
    1af4:	f3 e2       	ldi	r31, 0x23	; 35
    1af6:	02 e0       	ldi	r16, 0x02	; 2
    1af8:	05 93       	las	Z, r16
    1afa:	10 92 62 23 	sts	0x2362, r1	; 0x802362 <udd_sram+0x1e>
    1afe:	10 92 63 23 	sts	0x2363, r1	; 0x802363 <udd_sram+0x1f>
    1b02:	00 e2       	ldi	r16, 0x20	; 32
    1b04:	06 93       	lac	Z, r16
    1b06:	00 e4       	ldi	r16, 0x40	; 64
    1b08:	06 93       	lac	Z, r16
    1b0a:	e8 e5       	ldi	r30, 0x58	; 88
    1b0c:	f3 e2       	ldi	r31, 0x23	; 35
    1b0e:	00 e4       	ldi	r16, 0x40	; 64
    1b10:	06 93       	lac	Z, r16
    1b12:	e9 eb       	ldi	r30, 0xB9	; 185
    1b14:	f3 e2       	ldi	r31, 0x23	; 35
    1b16:	14 86       	std	Z+12, r1	; 0x0c
    1b18:	15 86       	std	Z+13, r1	; 0x0d
    1b1a:	16 86       	std	Z+14, r1	; 0x0e
    1b1c:	17 86       	std	Z+15, r1	; 0x0f
    1b1e:	12 86       	std	Z+10, r1	; 0x0a
    1b20:	13 86       	std	Z+11, r1	; 0x0b
    1b22:	10 92 43 23 	sts	0x2343, r1	; 0x802343 <udd_ep_control_state>
    1b26:	0f 91       	pop	r16
    1b28:	08 95       	ret

00001b2a <udd_ctrl_stall_data>:
    1b2a:	0f 93       	push	r16
    1b2c:	85 e0       	ldi	r24, 0x05	; 5
    1b2e:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
    1b32:	e1 e6       	ldi	r30, 0x61	; 97
    1b34:	f3 e2       	ldi	r31, 0x23	; 35
    1b36:	04 e0       	ldi	r16, 0x04	; 4
    1b38:	05 93       	las	Z, r16
    1b3a:	e9 e5       	ldi	r30, 0x59	; 89
    1b3c:	f3 e2       	ldi	r31, 0x23	; 35
    1b3e:	04 e0       	ldi	r16, 0x04	; 4
    1b40:	05 93       	las	Z, r16
    1b42:	0f 91       	pop	r16
    1b44:	08 95       	ret

00001b46 <udd_ctrl_send_zlp_in>:
    1b46:	0f 93       	push	r16
    1b48:	83 e0       	ldi	r24, 0x03	; 3
    1b4a:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
    1b4e:	10 92 62 23 	sts	0x2362, r1	; 0x802362 <udd_sram+0x1e>
    1b52:	10 92 63 23 	sts	0x2363, r1	; 0x802363 <udd_sram+0x1f>
    1b56:	e0 e6       	ldi	r30, 0x60	; 96
    1b58:	f3 e2       	ldi	r31, 0x23	; 35
    1b5a:	02 e0       	ldi	r16, 0x02	; 2
    1b5c:	06 93       	lac	Z, r16
    1b5e:	0f 91       	pop	r16
    1b60:	08 95       	ret

00001b62 <udd_ctrl_endofrequest>:
    1b62:	e0 91 c5 23 	lds	r30, 0x23C5	; 0x8023c5 <udd_g_ctrlreq+0xc>
    1b66:	f0 91 c6 23 	lds	r31, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0xd>
    1b6a:	30 97       	sbiw	r30, 0x00	; 0
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <udd_ctrl_endofrequest+0xe>
    1b6e:	19 95       	eicall
    1b70:	08 95       	ret

00001b72 <udd_ctrl_in_sent>:
    1b72:	0f 93       	push	r16
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_ep_control_state>
    1b7c:	83 30       	cpi	r24, 0x03	; 3
    1b7e:	19 f4       	brne	.+6      	; 0x1b86 <udd_ctrl_in_sent+0x14>
    1b80:	f0 df       	rcall	.-32     	; 0x1b62 <udd_ctrl_endofrequest>
    1b82:	ae df       	rcall	.-164    	; 0x1ae0 <udd_ctrl_init>
    1b84:	5e c0       	rjmp	.+188    	; 0x1c42 <udd_ctrl_in_sent+0xd0>
    1b86:	80 91 3f 23 	lds	r24, 0x233F	; 0x80233f <udd_ctrl_payload_nb_trans>
    1b8a:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1b8e:	c0 91 c3 23 	lds	r28, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    1b92:	d0 91 c4 23 	lds	r29, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    1b96:	c8 1b       	sub	r28, r24
    1b98:	d9 0b       	sbc	r29, r25
    1b9a:	71 f5       	brne	.+92     	; 0x1bf8 <udd_ctrl_in_sent+0x86>
    1b9c:	20 91 41 23 	lds	r18, 0x2341	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    1ba0:	30 91 42 23 	lds	r19, 0x2342	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    1ba4:	82 0f       	add	r24, r18
    1ba6:	93 1f       	adc	r25, r19
    1ba8:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    1bac:	90 93 42 23 	sts	0x2342, r25	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    1bb0:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1bb4:	30 91 c0 23 	lds	r19, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1bb8:	82 17       	cp	r24, r18
    1bba:	93 07       	cpc	r25, r19
    1bbc:	21 f0       	breq	.+8      	; 0x1bc6 <udd_ctrl_in_sent+0x54>
    1bbe:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <b_shortpacket.5290>
    1bc2:	88 23       	and	r24, r24
    1bc4:	41 f0       	breq	.+16     	; 0x1bd6 <udd_ctrl_in_sent+0x64>
    1bc6:	84 e0       	ldi	r24, 0x04	; 4
    1bc8:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
    1bcc:	e8 e5       	ldi	r30, 0x58	; 88
    1bce:	f3 e2       	ldi	r31, 0x23	; 35
    1bd0:	02 e0       	ldi	r16, 0x02	; 2
    1bd2:	06 93       	lac	Z, r16
    1bd4:	36 c0       	rjmp	.+108    	; 0x1c42 <udd_ctrl_in_sent+0xd0>
    1bd6:	e0 91 c7 23 	lds	r30, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0xe>
    1bda:	f0 91 c8 23 	lds	r31, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0xf>
    1bde:	30 97       	sbiw	r30, 0x00	; 0
    1be0:	99 f0       	breq	.+38     	; 0x1c08 <udd_ctrl_in_sent+0x96>
    1be2:	19 95       	eicall
    1be4:	88 23       	and	r24, r24
    1be6:	81 f0       	breq	.+32     	; 0x1c08 <udd_ctrl_in_sent+0x96>
    1be8:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udd_ctrl_payload_nb_trans>
    1bec:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1bf0:	c0 91 c3 23 	lds	r28, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    1bf4:	d0 91 c4 23 	lds	r29, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    1bf8:	c8 30       	cpi	r28, 0x08	; 8
    1bfa:	d1 05       	cpc	r29, r1
    1bfc:	28 f0       	brcs	.+10     	; 0x1c08 <udd_ctrl_in_sent+0x96>
    1bfe:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <b_shortpacket.5290>
    1c02:	c8 e0       	ldi	r28, 0x08	; 8
    1c04:	d0 e0       	ldi	r29, 0x00	; 0
    1c06:	03 c0       	rjmp	.+6      	; 0x1c0e <udd_ctrl_in_sent+0x9c>
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <b_shortpacket.5290>
    1c0e:	e4 e4       	ldi	r30, 0x44	; 68
    1c10:	f3 e2       	ldi	r31, 0x23	; 35
    1c12:	c6 8f       	std	Z+30, r28	; 0x1e
    1c14:	d7 8f       	std	Z+31, r29	; 0x1f
    1c16:	80 91 3f 23 	lds	r24, 0x233F	; 0x80233f <udd_ctrl_payload_nb_trans>
    1c1a:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1c1e:	20 91 c1 23 	lds	r18, 0x23C1	; 0x8023c1 <udd_g_ctrlreq+0x8>
    1c22:	30 91 c2 23 	lds	r19, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x9>
    1c26:	28 0f       	add	r18, r24
    1c28:	39 1f       	adc	r19, r25
    1c2a:	20 a3       	std	Z+32, r18	; 0x20
    1c2c:	31 a3       	std	Z+33, r19	; 0x21
    1c2e:	c8 0f       	add	r28, r24
    1c30:	d9 1f       	adc	r29, r25
    1c32:	c0 93 3f 23 	sts	0x233F, r28	; 0x80233f <udd_ctrl_payload_nb_trans>
    1c36:	d0 93 40 23 	sts	0x2340, r29	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1c3a:	e0 e6       	ldi	r30, 0x60	; 96
    1c3c:	f3 e2       	ldi	r31, 0x23	; 35
    1c3e:	02 e0       	ldi	r16, 0x02	; 2
    1c40:	06 93       	lac	Z, r16
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	0f 91       	pop	r16
    1c48:	08 95       	ret

00001c4a <udd_ep_get_size>:
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	81 81       	ldd	r24, Z+1	; 0x01
    1c4e:	e8 2f       	mov	r30, r24
    1c50:	e7 70       	andi	r30, 0x07	; 7
    1c52:	8e 2f       	mov	r24, r30
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	fc 01       	movw	r30, r24
    1c58:	31 97       	sbiw	r30, 0x01	; 1
    1c5a:	e7 30       	cpi	r30, 0x07	; 7
    1c5c:	f1 05       	cpc	r31, r1
    1c5e:	d0 f4       	brcc	.+52     	; 0x1c94 <udd_ep_get_size+0x4a>
    1c60:	88 27       	eor	r24, r24
    1c62:	e9 5f       	subi	r30, 0xF9	; 249
    1c64:	fe 4f       	sbci	r31, 0xFE	; 254
    1c66:	8f 4f       	sbci	r24, 0xFF	; 255
    1c68:	24 c7       	rjmp	.+3656   	; 0x2ab2 <__tablejump2__>
    1c6a:	80 e1       	ldi	r24, 0x10	; 16
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	08 95       	ret
    1c70:	80 e2       	ldi	r24, 0x20	; 32
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	08 95       	ret
    1c76:	80 e4       	ldi	r24, 0x40	; 64
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	08 95       	ret
    1c7c:	80 e8       	ldi	r24, 0x80	; 128
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	08 95       	ret
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	91 e0       	ldi	r25, 0x01	; 1
    1c86:	08 95       	ret
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	92 e0       	ldi	r25, 0x02	; 2
    1c8c:	08 95       	ret
    1c8e:	8f ef       	ldi	r24, 0xFF	; 255
    1c90:	93 e0       	ldi	r25, 0x03	; 3
    1c92:	08 95       	ret
    1c94:	88 e0       	ldi	r24, 0x08	; 8
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	08 95       	ret

00001c9a <udd_ep_get_job>:
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	2f 70       	andi	r18, 0x0F	; 15
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	22 0f       	add	r18, r18
    1ca2:	33 1f       	adc	r19, r19
    1ca4:	08 2e       	mov	r0, r24
    1ca6:	00 0c       	add	r0, r0
    1ca8:	99 0b       	sbc	r25, r25
    1caa:	88 27       	eor	r24, r24
    1cac:	99 0f       	add	r25, r25
    1cae:	88 1f       	adc	r24, r24
    1cb0:	99 27       	eor	r25, r25
    1cb2:	82 0f       	add	r24, r18
    1cb4:	93 1f       	adc	r25, r19
    1cb6:	02 97       	sbiw	r24, 0x02	; 2
    1cb8:	9c 01       	movw	r18, r24
    1cba:	22 0f       	add	r18, r18
    1cbc:	33 1f       	adc	r19, r19
    1cbe:	22 0f       	add	r18, r18
    1cc0:	33 1f       	adc	r19, r19
    1cc2:	22 0f       	add	r18, r18
    1cc4:	33 1f       	adc	r19, r19
    1cc6:	82 0f       	add	r24, r18
    1cc8:	93 1f       	adc	r25, r19
    1cca:	81 51       	subi	r24, 0x11	; 17
    1ccc:	9d 4d       	sbci	r25, 0xDD	; 221
    1cce:	08 95       	ret

00001cd0 <udd_ctrl_interrupt_tc_setup>:
    1cd0:	0f 93       	push	r16
    1cd2:	cf 93       	push	r28
    1cd4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1cd8:	80 ff       	sbrs	r24, 0
    1cda:	64 c0       	rjmp	.+200    	; 0x1da4 <udd_ctrl_interrupt_tc_setup+0xd4>
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1ce2:	e8 e5       	ldi	r30, 0x58	; 88
    1ce4:	f3 e2       	ldi	r31, 0x23	; 35
    1ce6:	00 e8       	ldi	r16, 0x80	; 128
    1ce8:	06 93       	lac	Z, r16
    1cea:	e0 e6       	ldi	r30, 0x60	; 96
    1cec:	f3 e2       	ldi	r31, 0x23	; 35
    1cee:	00 e8       	ldi	r16, 0x80	; 128
    1cf0:	06 93       	lac	Z, r16
    1cf2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    1cf6:	e8 e5       	ldi	r30, 0x58	; 88
    1cf8:	f3 e2       	ldi	r31, 0x23	; 35
    1cfa:	00 e1       	ldi	r16, 0x10	; 16
    1cfc:	06 93       	lac	Z, r16
    1cfe:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_ep_control_state>
    1d02:	88 23       	and	r24, r24
    1d04:	29 f0       	breq	.+10     	; 0x1d10 <udd_ctrl_interrupt_tc_setup+0x40>
    1d06:	83 50       	subi	r24, 0x03	; 3
    1d08:	82 30       	cpi	r24, 0x02	; 2
    1d0a:	08 f4       	brcc	.+2      	; 0x1d0e <udd_ctrl_interrupt_tc_setup+0x3e>
    1d0c:	2a df       	rcall	.-428    	; 0x1b62 <udd_ctrl_endofrequest>
    1d0e:	e8 de       	rcall	.-560    	; 0x1ae0 <udd_ctrl_init>
    1d10:	80 91 5a 23 	lds	r24, 0x235A	; 0x80235a <udd_sram+0x16>
    1d14:	90 91 5b 23 	lds	r25, 0x235B	; 0x80235b <udd_sram+0x17>
    1d18:	08 97       	sbiw	r24, 0x08	; 8
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <udd_ctrl_interrupt_tc_setup+0x4e>
    1d1c:	45 c0       	rjmp	.+138    	; 0x1da8 <udd_ctrl_interrupt_tc_setup+0xd8>
    1d1e:	88 e0       	ldi	r24, 0x08	; 8
    1d20:	e7 e3       	ldi	r30, 0x37	; 55
    1d22:	f3 e2       	ldi	r31, 0x23	; 35
    1d24:	a9 eb       	ldi	r26, 0xB9	; 185
    1d26:	b3 e2       	ldi	r27, 0x23	; 35
    1d28:	01 90       	ld	r0, Z+
    1d2a:	0d 92       	st	X+, r0
    1d2c:	8a 95       	dec	r24
    1d2e:	e1 f7       	brne	.-8      	; 0x1d28 <udd_ctrl_interrupt_tc_setup+0x58>
    1d30:	e8 ec       	ldi	r30, 0xC8	; 200
    1d32:	f4 e0       	ldi	r31, 0x04	; 4
    1d34:	80 81       	ld	r24, Z
    1d36:	80 62       	ori	r24, 0x20	; 32
    1d38:	80 83       	st	Z, r24
    1d3a:	80 81       	ld	r24, Z
    1d3c:	80 62       	ori	r24, 0x20	; 32
    1d3e:	80 83       	st	Z, r24
    1d40:	e9 db       	rcall	.-2094   	; 0x1514 <udc_process_setup>
    1d42:	c8 2f       	mov	r28, r24
    1d44:	81 11       	cpse	r24, r1
    1d46:	03 c0       	rjmp	.+6      	; 0x1d4e <udd_ctrl_interrupt_tc_setup+0x7e>
    1d48:	f0 de       	rcall	.-544    	; 0x1b2a <udd_ctrl_stall_data>
    1d4a:	c1 e0       	ldi	r28, 0x01	; 1
    1d4c:	2e c0       	rjmp	.+92     	; 0x1daa <udd_ctrl_interrupt_tc_setup+0xda>
    1d4e:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    1d52:	88 23       	and	r24, r24
    1d54:	6c f4       	brge	.+26     	; 0x1d70 <udd_ctrl_interrupt_tc_setup+0xa0>
    1d56:	10 92 41 23 	sts	0x2341, r1	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    1d5a:	10 92 42 23 	sts	0x2342, r1	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    1d5e:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udd_ctrl_payload_nb_trans>
    1d62:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
    1d6c:	02 df       	rcall	.-508    	; 0x1b72 <udd_ctrl_in_sent>
    1d6e:	1d c0       	rjmp	.+58     	; 0x1daa <udd_ctrl_interrupt_tc_setup+0xda>
    1d70:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1d74:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1d78:	89 2b       	or	r24, r25
    1d7a:	11 f4       	brne	.+4      	; 0x1d80 <udd_ctrl_interrupt_tc_setup+0xb0>
    1d7c:	e4 de       	rcall	.-568    	; 0x1b46 <udd_ctrl_send_zlp_in>
    1d7e:	15 c0       	rjmp	.+42     	; 0x1daa <udd_ctrl_interrupt_tc_setup+0xda>
    1d80:	10 92 41 23 	sts	0x2341, r1	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    1d84:	10 92 42 23 	sts	0x2342, r1	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    1d88:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udd_ctrl_payload_nb_trans>
    1d8c:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
    1d96:	e8 e5       	ldi	r30, 0x58	; 88
    1d98:	f3 e2       	ldi	r31, 0x23	; 35
    1d9a:	02 e0       	ldi	r16, 0x02	; 2
    1d9c:	06 93       	lac	Z, r16
    1d9e:	00 e2       	ldi	r16, 0x20	; 32
    1da0:	06 93       	lac	Z, r16
    1da2:	03 c0       	rjmp	.+6      	; 0x1daa <udd_ctrl_interrupt_tc_setup+0xda>
    1da4:	c0 e0       	ldi	r28, 0x00	; 0
    1da6:	01 c0       	rjmp	.+2      	; 0x1daa <udd_ctrl_interrupt_tc_setup+0xda>
    1da8:	c1 e0       	ldi	r28, 0x01	; 1
    1daa:	8c 2f       	mov	r24, r28
    1dac:	cf 91       	pop	r28
    1dae:	0f 91       	pop	r16
    1db0:	08 95       	ret

00001db2 <udd_ep_trans_complet>:
    1db2:	8f 92       	push	r8
    1db4:	9f 92       	push	r9
    1db6:	af 92       	push	r10
    1db8:	bf 92       	push	r11
    1dba:	df 92       	push	r13
    1dbc:	ef 92       	push	r14
    1dbe:	ff 92       	push	r15
    1dc0:	0f 93       	push	r16
    1dc2:	1f 93       	push	r17
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	d8 2e       	mov	r13, r24
    1dca:	67 df       	rcall	.-306    	; 0x1c9a <udd_ep_get_job>
    1dcc:	8c 01       	movw	r16, r24
    1dce:	cd 2d       	mov	r28, r13
    1dd0:	cf 70       	andi	r28, 0x0F	; 15
    1dd2:	d0 e0       	ldi	r29, 0x00	; 0
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	88 0f       	add	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	cd 2d       	mov	r28, r13
    1ddc:	0d 2c       	mov	r0, r13
    1dde:	00 0c       	add	r0, r0
    1de0:	dd 0b       	sbc	r29, r29
    1de2:	cc 27       	eor	r28, r28
    1de4:	dd 0f       	add	r29, r29
    1de6:	cc 1f       	adc	r28, r28
    1de8:	dd 27       	eor	r29, r29
    1dea:	c8 0f       	add	r28, r24
    1dec:	d9 1f       	adc	r29, r25
    1dee:	ce 01       	movw	r24, r28
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	9c 01       	movw	r18, r24
    1dfe:	28 5a       	subi	r18, 0xA8	; 168
    1e00:	3c 4d       	sbci	r19, 0xDC	; 220
    1e02:	79 01       	movw	r14, r18
    1e04:	c9 01       	movw	r24, r18
    1e06:	21 df       	rcall	.-446    	; 0x1c4a <udd_ep_get_size>
    1e08:	4c 01       	movw	r8, r24
    1e0a:	dd 20       	and	r13, r13
    1e0c:	0c f0       	brlt	.+2      	; 0x1e10 <udd_ep_trans_complet+0x5e>
    1e0e:	79 c0       	rjmp	.+242    	; 0x1f02 <udd_ep_trans_complet+0x150>
    1e10:	fe 01       	movw	r30, r28
    1e12:	ee 0f       	add	r30, r30
    1e14:	ff 1f       	adc	r31, r31
    1e16:	ee 0f       	add	r30, r30
    1e18:	ff 1f       	adc	r31, r31
    1e1a:	ee 0f       	add	r30, r30
    1e1c:	ff 1f       	adc	r31, r31
    1e1e:	ec 5b       	subi	r30, 0xBC	; 188
    1e20:	fc 4d       	sbci	r31, 0xDC	; 220
    1e22:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e24:	33 8d       	ldd	r19, Z+27	; 0x1b
    1e26:	d8 01       	movw	r26, r16
    1e28:	15 96       	adiw	r26, 0x05	; 5
    1e2a:	8d 91       	ld	r24, X+
    1e2c:	9c 91       	ld	r25, X
    1e2e:	16 97       	sbiw	r26, 0x06	; 6
    1e30:	82 0f       	add	r24, r18
    1e32:	93 1f       	adc	r25, r19
    1e34:	15 96       	adiw	r26, 0x05	; 5
    1e36:	8d 93       	st	X+, r24
    1e38:	9c 93       	st	X, r25
    1e3a:	16 97       	sbiw	r26, 0x06	; 6
    1e3c:	13 96       	adiw	r26, 0x03	; 3
    1e3e:	2d 91       	ld	r18, X+
    1e40:	3c 91       	ld	r19, X
    1e42:	14 97       	sbiw	r26, 0x04	; 4
    1e44:	82 17       	cp	r24, r18
    1e46:	93 07       	cpc	r25, r19
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <udd_ep_trans_complet+0x9a>
    1e4a:	45 c0       	rjmp	.+138    	; 0x1ed6 <udd_ep_trans_complet+0x124>
    1e4c:	28 1b       	sub	r18, r24
    1e4e:	39 0b       	sbc	r19, r25
    1e50:	21 15       	cp	r18, r1
    1e52:	b4 e0       	ldi	r27, 0x04	; 4
    1e54:	3b 07       	cpc	r19, r27
    1e56:	38 f0       	brcs	.+14     	; 0x1e66 <udd_ep_trans_complet+0xb4>
    1e58:	2f ef       	ldi	r18, 0xFF	; 255
    1e5a:	33 e0       	ldi	r19, 0x03	; 3
    1e5c:	c9 01       	movw	r24, r18
    1e5e:	b4 01       	movw	r22, r8
    1e60:	14 d6       	rcall	.+3112   	; 0x2a8a <__udivmodhi4>
    1e62:	28 1b       	sub	r18, r24
    1e64:	39 0b       	sbc	r19, r25
    1e66:	f8 01       	movw	r30, r16
    1e68:	80 81       	ld	r24, Z
    1e6a:	81 ff       	sbrs	r24, 1
    1e6c:	09 c0       	rjmp	.+18     	; 0x1e80 <udd_ep_trans_complet+0xce>
    1e6e:	c9 01       	movw	r24, r18
    1e70:	b4 01       	movw	r22, r8
    1e72:	0b d6       	rcall	.+3094   	; 0x2a8a <__udivmodhi4>
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	89 2b       	or	r24, r25
    1e78:	09 f0       	breq	.+2      	; 0x1e7c <udd_ep_trans_complet+0xca>
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	84 2f       	mov	r24, r20
    1e7e:	01 c0       	rjmp	.+2      	; 0x1e82 <udd_ep_trans_complet+0xd0>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	d8 01       	movw	r26, r16
    1e84:	9c 91       	ld	r25, X
    1e86:	80 fb       	bst	r24, 0
    1e88:	91 f9       	bld	r25, 1
    1e8a:	9c 93       	st	X, r25
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	ee 0f       	add	r30, r30
    1e90:	ff 1f       	adc	r31, r31
    1e92:	ee 0f       	add	r30, r30
    1e94:	ff 1f       	adc	r31, r31
    1e96:	ee 0f       	add	r30, r30
    1e98:	ff 1f       	adc	r31, r31
    1e9a:	ec 5b       	subi	r30, 0xBC	; 188
    1e9c:	fc 4d       	sbci	r31, 0xDC	; 220
    1e9e:	12 8e       	std	Z+26, r1	; 0x1a
    1ea0:	13 8e       	std	Z+27, r1	; 0x1b
    1ea2:	26 8b       	std	Z+22, r18	; 0x16
    1ea4:	37 8b       	std	Z+23, r19	; 0x17
    1ea6:	11 96       	adiw	r26, 0x01	; 1
    1ea8:	2d 91       	ld	r18, X+
    1eaa:	3c 91       	ld	r19, X
    1eac:	12 97       	sbiw	r26, 0x02	; 2
    1eae:	15 96       	adiw	r26, 0x05	; 5
    1eb0:	8d 91       	ld	r24, X+
    1eb2:	9c 91       	ld	r25, X
    1eb4:	16 97       	sbiw	r26, 0x06	; 6
    1eb6:	82 0f       	add	r24, r18
    1eb8:	93 1f       	adc	r25, r19
    1eba:	cc 0f       	add	r28, r28
    1ebc:	dd 1f       	adc	r29, r29
    1ebe:	cc 0f       	add	r28, r28
    1ec0:	dd 1f       	adc	r29, r29
    1ec2:	cc 0f       	add	r28, r28
    1ec4:	dd 1f       	adc	r29, r29
    1ec6:	c4 5a       	subi	r28, 0xA4	; 164
    1ec8:	dc 4d       	sbci	r29, 0xDC	; 220
    1eca:	88 83       	st	Y, r24
    1ecc:	99 83       	std	Y+1, r25	; 0x01
    1ece:	f7 01       	movw	r30, r14
    1ed0:	02 e0       	ldi	r16, 0x02	; 2
    1ed2:	06 93       	lac	Z, r16
    1ed4:	e0 c0       	rjmp	.+448    	; 0x2096 <udd_ep_trans_complet+0x2e4>
    1ed6:	d8 01       	movw	r26, r16
    1ed8:	8c 91       	ld	r24, X
    1eda:	81 ff       	sbrs	r24, 1
    1edc:	c9 c0       	rjmp	.+402    	; 0x2070 <udd_ep_trans_complet+0x2be>
    1ede:	8d 7f       	andi	r24, 0xFD	; 253
    1ee0:	8c 93       	st	X, r24
    1ee2:	cc 0f       	add	r28, r28
    1ee4:	dd 1f       	adc	r29, r29
    1ee6:	cc 0f       	add	r28, r28
    1ee8:	dd 1f       	adc	r29, r29
    1eea:	cc 0f       	add	r28, r28
    1eec:	dd 1f       	adc	r29, r29
    1eee:	cc 5b       	subi	r28, 0xBC	; 188
    1ef0:	dc 4d       	sbci	r29, 0xDC	; 220
    1ef2:	1a 8e       	std	Y+26, r1	; 0x1a
    1ef4:	1b 8e       	std	Y+27, r1	; 0x1b
    1ef6:	1e 8a       	std	Y+22, r1	; 0x16
    1ef8:	1f 8a       	std	Y+23, r1	; 0x17
    1efa:	f7 01       	movw	r30, r14
    1efc:	02 e0       	ldi	r16, 0x02	; 2
    1efe:	06 93       	lac	Z, r16
    1f00:	ca c0       	rjmp	.+404    	; 0x2096 <udd_ep_trans_complet+0x2e4>
    1f02:	fe 01       	movw	r30, r28
    1f04:	ee 0f       	add	r30, r30
    1f06:	ff 1f       	adc	r31, r31
    1f08:	ee 0f       	add	r30, r30
    1f0a:	ff 1f       	adc	r31, r31
    1f0c:	ee 0f       	add	r30, r30
    1f0e:	ff 1f       	adc	r31, r31
    1f10:	ec 5b       	subi	r30, 0xBC	; 188
    1f12:	fc 4d       	sbci	r31, 0xDC	; 220
    1f14:	a6 88       	ldd	r10, Z+22	; 0x16
    1f16:	b7 88       	ldd	r11, Z+23	; 0x17
    1f18:	d8 01       	movw	r26, r16
    1f1a:	8c 91       	ld	r24, X
    1f1c:	82 ff       	sbrs	r24, 2
    1f1e:	19 c0       	rjmp	.+50     	; 0x1f52 <udd_ep_trans_complet+0x1a0>
    1f20:	11 96       	adiw	r26, 0x01	; 1
    1f22:	ed 91       	ld	r30, X+
    1f24:	fc 91       	ld	r31, X
    1f26:	12 97       	sbiw	r26, 0x02	; 2
    1f28:	15 96       	adiw	r26, 0x05	; 5
    1f2a:	2d 91       	ld	r18, X+
    1f2c:	3c 91       	ld	r19, X
    1f2e:	16 97       	sbiw	r26, 0x06	; 6
    1f30:	13 96       	adiw	r26, 0x03	; 3
    1f32:	8d 91       	ld	r24, X+
    1f34:	9c 91       	ld	r25, X
    1f36:	14 97       	sbiw	r26, 0x04	; 4
    1f38:	b4 01       	movw	r22, r8
    1f3a:	a7 d5       	rcall	.+2894   	; 0x2a8a <__udivmodhi4>
    1f3c:	b0 e4       	ldi	r27, 0x40	; 64
    1f3e:	db 9e       	mul	r13, r27
    1f40:	b0 01       	movw	r22, r0
    1f42:	11 24       	eor	r1, r1
    1f44:	61 55       	subi	r22, 0x51	; 81
    1f46:	7e 4d       	sbci	r23, 0xDE	; 222
    1f48:	ac 01       	movw	r20, r24
    1f4a:	cf 01       	movw	r24, r30
    1f4c:	82 0f       	add	r24, r18
    1f4e:	93 1f       	adc	r25, r19
    1f50:	b8 d5       	rcall	.+2928   	; 0x2ac2 <memcpy>
    1f52:	f8 01       	movw	r30, r16
    1f54:	25 81       	ldd	r18, Z+5	; 0x05
    1f56:	36 81       	ldd	r19, Z+6	; 0x06
    1f58:	2a 0d       	add	r18, r10
    1f5a:	3b 1d       	adc	r19, r11
    1f5c:	25 83       	std	Z+5, r18	; 0x05
    1f5e:	36 83       	std	Z+6, r19	; 0x06
    1f60:	83 81       	ldd	r24, Z+3	; 0x03
    1f62:	94 81       	ldd	r25, Z+4	; 0x04
    1f64:	82 17       	cp	r24, r18
    1f66:	93 07       	cpc	r25, r19
    1f68:	68 f4       	brcc	.+26     	; 0x1f84 <udd_ep_trans_complet+0x1d2>
    1f6a:	85 83       	std	Z+5, r24	; 0x05
    1f6c:	96 83       	std	Z+6, r25	; 0x06
    1f6e:	cc 0f       	add	r28, r28
    1f70:	dd 1f       	adc	r29, r29
    1f72:	cc 0f       	add	r28, r28
    1f74:	dd 1f       	adc	r29, r29
    1f76:	cc 0f       	add	r28, r28
    1f78:	dd 1f       	adc	r29, r29
    1f7a:	cc 5b       	subi	r28, 0xBC	; 188
    1f7c:	dc 4d       	sbci	r29, 0xDC	; 220
    1f7e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f80:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f82:	76 c0       	rjmp	.+236    	; 0x2070 <udd_ep_trans_complet+0x2be>
    1f84:	fe 01       	movw	r30, r28
    1f86:	ee 0f       	add	r30, r30
    1f88:	ff 1f       	adc	r31, r31
    1f8a:	ee 0f       	add	r30, r30
    1f8c:	ff 1f       	adc	r31, r31
    1f8e:	ee 0f       	add	r30, r30
    1f90:	ff 1f       	adc	r31, r31
    1f92:	ec 5b       	subi	r30, 0xBC	; 188
    1f94:	fc 4d       	sbci	r31, 0xDC	; 220
    1f96:	42 8d       	ldd	r20, Z+26	; 0x1a
    1f98:	53 8d       	ldd	r21, Z+27	; 0x1b
    1f9a:	a4 16       	cp	r10, r20
    1f9c:	b5 06       	cpc	r11, r21
    1f9e:	09 f0       	breq	.+2      	; 0x1fa2 <udd_ep_trans_complet+0x1f0>
    1fa0:	67 c0       	rjmp	.+206    	; 0x2070 <udd_ep_trans_complet+0x2be>
    1fa2:	28 17       	cp	r18, r24
    1fa4:	39 07       	cpc	r19, r25
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <udd_ep_trans_complet+0x1f8>
    1fa8:	63 c0       	rjmp	.+198    	; 0x2070 <udd_ep_trans_complet+0x2be>
    1faa:	ac 01       	movw	r20, r24
    1fac:	42 1b       	sub	r20, r18
    1fae:	53 0b       	sbc	r21, r19
    1fb0:	9a 01       	movw	r18, r20
    1fb2:	21 15       	cp	r18, r1
    1fb4:	54 e0       	ldi	r21, 0x04	; 4
    1fb6:	35 07       	cpc	r19, r21
    1fb8:	40 f0       	brcs	.+16     	; 0x1fca <udd_ep_trans_complet+0x218>
    1fba:	2f ef       	ldi	r18, 0xFF	; 255
    1fbc:	33 e0       	ldi	r19, 0x03	; 3
    1fbe:	c9 01       	movw	r24, r18
    1fc0:	b4 01       	movw	r22, r8
    1fc2:	63 d5       	rcall	.+2758   	; 0x2a8a <__udivmodhi4>
    1fc4:	28 1b       	sub	r18, r24
    1fc6:	39 0b       	sbc	r19, r25
    1fc8:	05 c0       	rjmp	.+10     	; 0x1fd4 <udd_ep_trans_complet+0x222>
    1fca:	c9 01       	movw	r24, r18
    1fcc:	b4 01       	movw	r22, r8
    1fce:	5d d5       	rcall	.+2746   	; 0x2a8a <__udivmodhi4>
    1fd0:	28 1b       	sub	r18, r24
    1fd2:	39 0b       	sbc	r19, r25
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	ee 0f       	add	r30, r30
    1fd8:	ff 1f       	adc	r31, r31
    1fda:	ee 0f       	add	r30, r30
    1fdc:	ff 1f       	adc	r31, r31
    1fde:	ee 0f       	add	r30, r30
    1fe0:	ff 1f       	adc	r31, r31
    1fe2:	ec 5b       	subi	r30, 0xBC	; 188
    1fe4:	fc 4d       	sbci	r31, 0xDC	; 220
    1fe6:	16 8a       	std	Z+22, r1	; 0x16
    1fe8:	17 8a       	std	Z+23, r1	; 0x17
    1fea:	28 15       	cp	r18, r8
    1fec:	39 05       	cpc	r19, r9
    1fee:	00 f5       	brcc	.+64     	; 0x2030 <udd_ep_trans_complet+0x27e>
    1ff0:	d8 01       	movw	r26, r16
    1ff2:	8c 91       	ld	r24, X
    1ff4:	84 60       	ori	r24, 0x04	; 4
    1ff6:	8c 93       	st	X, r24
    1ff8:	b0 e4       	ldi	r27, 0x40	; 64
    1ffa:	db 9e       	mul	r13, r27
    1ffc:	c0 01       	movw	r24, r0
    1ffe:	11 24       	eor	r1, r1
    2000:	81 55       	subi	r24, 0x51	; 81
    2002:	9e 4d       	sbci	r25, 0xDE	; 222
    2004:	fe 01       	movw	r30, r28
    2006:	ee 0f       	add	r30, r30
    2008:	ff 1f       	adc	r31, r31
    200a:	ee 0f       	add	r30, r30
    200c:	ff 1f       	adc	r31, r31
    200e:	ee 0f       	add	r30, r30
    2010:	ff 1f       	adc	r31, r31
    2012:	e4 5a       	subi	r30, 0xA4	; 164
    2014:	fc 4d       	sbci	r31, 0xDC	; 220
    2016:	80 83       	st	Z, r24
    2018:	91 83       	std	Z+1, r25	; 0x01
    201a:	cc 0f       	add	r28, r28
    201c:	dd 1f       	adc	r29, r29
    201e:	cc 0f       	add	r28, r28
    2020:	dd 1f       	adc	r29, r29
    2022:	cc 0f       	add	r28, r28
    2024:	dd 1f       	adc	r29, r29
    2026:	cc 5b       	subi	r28, 0xBC	; 188
    2028:	dc 4d       	sbci	r29, 0xDC	; 220
    202a:	8a 8e       	std	Y+26, r8	; 0x1a
    202c:	9b 8e       	std	Y+27, r9	; 0x1b
    202e:	1c c0       	rjmp	.+56     	; 0x2068 <udd_ep_trans_complet+0x2b6>
    2030:	f8 01       	movw	r30, r16
    2032:	41 81       	ldd	r20, Z+1	; 0x01
    2034:	52 81       	ldd	r21, Z+2	; 0x02
    2036:	85 81       	ldd	r24, Z+5	; 0x05
    2038:	96 81       	ldd	r25, Z+6	; 0x06
    203a:	84 0f       	add	r24, r20
    203c:	95 1f       	adc	r25, r21
    203e:	fe 01       	movw	r30, r28
    2040:	ee 0f       	add	r30, r30
    2042:	ff 1f       	adc	r31, r31
    2044:	ee 0f       	add	r30, r30
    2046:	ff 1f       	adc	r31, r31
    2048:	ee 0f       	add	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	e4 5a       	subi	r30, 0xA4	; 164
    204e:	fc 4d       	sbci	r31, 0xDC	; 220
    2050:	80 83       	st	Z, r24
    2052:	91 83       	std	Z+1, r25	; 0x01
    2054:	cc 0f       	add	r28, r28
    2056:	dd 1f       	adc	r29, r29
    2058:	cc 0f       	add	r28, r28
    205a:	dd 1f       	adc	r29, r29
    205c:	cc 0f       	add	r28, r28
    205e:	dd 1f       	adc	r29, r29
    2060:	cc 5b       	subi	r28, 0xBC	; 188
    2062:	dc 4d       	sbci	r29, 0xDC	; 220
    2064:	2a 8f       	std	Y+26, r18	; 0x1a
    2066:	3b 8f       	std	Y+27, r19	; 0x1b
    2068:	f7 01       	movw	r30, r14
    206a:	02 e0       	ldi	r16, 0x02	; 2
    206c:	06 93       	lac	Z, r16
    206e:	13 c0       	rjmp	.+38     	; 0x2096 <udd_ep_trans_complet+0x2e4>
    2070:	d8 01       	movw	r26, r16
    2072:	8c 91       	ld	r24, X
    2074:	80 ff       	sbrs	r24, 0
    2076:	0f c0       	rjmp	.+30     	; 0x2096 <udd_ep_trans_complet+0x2e4>
    2078:	8e 7f       	andi	r24, 0xFE	; 254
    207a:	8c 93       	st	X, r24
    207c:	17 96       	adiw	r26, 0x07	; 7
    207e:	ed 91       	ld	r30, X+
    2080:	fc 91       	ld	r31, X
    2082:	18 97       	sbiw	r26, 0x08	; 8
    2084:	30 97       	sbiw	r30, 0x00	; 0
    2086:	39 f0       	breq	.+14     	; 0x2096 <udd_ep_trans_complet+0x2e4>
    2088:	15 96       	adiw	r26, 0x05	; 5
    208a:	6d 91       	ld	r22, X+
    208c:	7c 91       	ld	r23, X
    208e:	16 97       	sbiw	r26, 0x06	; 6
    2090:	4d 2d       	mov	r20, r13
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	19 95       	eicall
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	df 90       	pop	r13
    20a4:	bf 90       	pop	r11
    20a6:	af 90       	pop	r10
    20a8:	9f 90       	pop	r9
    20aa:	8f 90       	pop	r8
    20ac:	08 95       	ret

000020ae <udd_attach>:
    20ae:	1f 93       	push	r17
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
    20b4:	1f 92       	push	r1
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	8f b7       	in	r24, 0x3f	; 63
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	f8 94       	cli
    20c0:	19 81       	ldd	r17, Y+1	; 0x01
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	d5 dc       	rcall	.-1622   	; 0x1a70 <udd_sleep_mode>
    20c6:	ea ec       	ldi	r30, 0xCA	; 202
    20c8:	f4 e0       	ldi	r31, 0x04	; 4
    20ca:	80 e4       	ldi	r24, 0x40	; 64
    20cc:	80 83       	st	Z, r24
    20ce:	80 e2       	ldi	r24, 0x20	; 32
    20d0:	80 83       	st	Z, r24
    20d2:	e1 ec       	ldi	r30, 0xC1	; 193
    20d4:	f4 e0       	ldi	r31, 0x04	; 4
    20d6:	80 81       	ld	r24, Z
    20d8:	81 60       	ori	r24, 0x01	; 1
    20da:	80 83       	st	Z, r24
    20dc:	a9 ec       	ldi	r26, 0xC9	; 201
    20de:	b4 e0       	ldi	r27, 0x04	; 4
    20e0:	8c 91       	ld	r24, X
    20e2:	82 60       	ori	r24, 0x02	; 2
    20e4:	8c 93       	st	X, r24
    20e6:	e8 ec       	ldi	r30, 0xC8	; 200
    20e8:	f4 e0       	ldi	r31, 0x04	; 4
    20ea:	80 81       	ld	r24, Z
    20ec:	80 64       	ori	r24, 0x40	; 64
    20ee:	80 83       	st	Z, r24
    20f0:	8c 91       	ld	r24, X
    20f2:	81 60       	ori	r24, 0x01	; 1
    20f4:	8c 93       	st	X, r24
    20f6:	80 81       	ld	r24, Z
    20f8:	80 68       	ori	r24, 0x80	; 128
    20fa:	80 83       	st	Z, r24
    20fc:	1f bf       	out	0x3f, r17	; 63
    20fe:	0f 90       	pop	r0
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	1f 91       	pop	r17
    2106:	08 95       	ret

00002108 <udd_enable>:
    2108:	0f 93       	push	r16
    210a:	1f 93       	push	r17
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	1f 92       	push	r1
    2112:	1f 92       	push	r1
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	00 e6       	ldi	r16, 0x60	; 96
    211a:	10 e0       	ldi	r17, 0x00	; 0
    211c:	f8 01       	movw	r30, r16
    211e:	10 82       	st	Z, r1
    2120:	80 e3       	ldi	r24, 0x30	; 48
    2122:	0e 94 29 07 	call	0xe52	; 0xe52 <sysclk_enable_usb>
    2126:	e0 ec       	ldi	r30, 0xC0	; 192
    2128:	f4 e0       	ldi	r31, 0x04	; 4
    212a:	80 81       	ld	r24, Z
    212c:	80 64       	ori	r24, 0x40	; 64
    212e:	80 83       	st	Z, r24
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	f8 01       	movw	r30, r16
    2134:	80 83       	st	Z, r24
    2136:	8f b7       	in	r24, 0x3f	; 63
    2138:	8a 83       	std	Y+2, r24	; 0x02
    213a:	f8 94       	cli
    213c:	1a 81       	ldd	r17, Y+2	; 0x02
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	fc 01       	movw	r30, r24
    2144:	ee 0f       	add	r30, r30
    2146:	ff 1f       	adc	r31, r31
    2148:	ee 0f       	add	r30, r30
    214a:	ff 1f       	adc	r31, r31
    214c:	ee 0f       	add	r30, r30
    214e:	ff 1f       	adc	r31, r31
    2150:	ec 5b       	subi	r30, 0xBC	; 188
    2152:	fc 4d       	sbci	r31, 0xDC	; 220
    2154:	15 8a       	std	Z+21, r1	; 0x15
    2156:	01 96       	adiw	r24, 0x01	; 1
    2158:	8a 30       	cpi	r24, 0x0A	; 10
    215a:	91 05       	cpc	r25, r1
    215c:	91 f7       	brne	.-28     	; 0x2142 <udd_enable+0x3a>
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	fc 01       	movw	r30, r24
    2164:	ee 0f       	add	r30, r30
    2166:	ff 1f       	adc	r31, r31
    2168:	ee 0f       	add	r30, r30
    216a:	ff 1f       	adc	r31, r31
    216c:	ee 0f       	add	r30, r30
    216e:	ff 1f       	adc	r31, r31
    2170:	e8 0f       	add	r30, r24
    2172:	f9 1f       	adc	r31, r25
    2174:	e1 51       	subi	r30, 0x11	; 17
    2176:	fd 4d       	sbci	r31, 0xDD	; 221
    2178:	20 81       	ld	r18, Z
    217a:	2e 7f       	andi	r18, 0xFE	; 254
    217c:	20 83       	st	Z, r18
    217e:	01 96       	adiw	r24, 0x01	; 1
    2180:	88 30       	cpi	r24, 0x08	; 8
    2182:	91 05       	cpc	r25, r1
    2184:	71 f7       	brne	.-36     	; 0x2162 <udd_enable+0x5a>
    2186:	6a e1       	ldi	r22, 0x1A	; 26
    2188:	70 e0       	ldi	r23, 0x00	; 0
    218a:	82 e0       	ldi	r24, 0x02	; 2
    218c:	61 dc       	rcall	.-1854   	; 0x1a50 <nvm_read_byte>
    218e:	8f 3f       	cpi	r24, 0xFF	; 255
    2190:	19 f0       	breq	.+6      	; 0x2198 <udd_enable+0x90>
    2192:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    2196:	03 c0       	rjmp	.+6      	; 0x219e <udd_enable+0x96>
    2198:	8f e1       	ldi	r24, 0x1F	; 31
    219a:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    219e:	6b e1       	ldi	r22, 0x1B	; 27
    21a0:	70 e0       	ldi	r23, 0x00	; 0
    21a2:	82 e0       	ldi	r24, 0x02	; 2
    21a4:	55 dc       	rcall	.-1878   	; 0x1a50 <nvm_read_byte>
    21a6:	8f 3f       	cpi	r24, 0xFF	; 255
    21a8:	19 f0       	breq	.+6      	; 0x21b0 <udd_enable+0xa8>
    21aa:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    21ae:	03 c0       	rjmp	.+6      	; 0x21b6 <udd_enable+0xae>
    21b0:	8f e1       	ldi	r24, 0x1F	; 31
    21b2:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    21b6:	e0 ec       	ldi	r30, 0xC0	; 192
    21b8:	f4 e0       	ldi	r31, 0x04	; 4
    21ba:	80 81       	ld	r24, Z
    21bc:	84 60       	ori	r24, 0x04	; 4
    21be:	80 83       	st	Z, r24
    21c0:	80 81       	ld	r24, Z
    21c2:	80 68       	ori	r24, 0x80	; 128
    21c4:	80 83       	st	Z, r24
    21c6:	80 81       	ld	r24, Z
    21c8:	80 61       	ori	r24, 0x10	; 16
    21ca:	80 83       	st	Z, r24
    21cc:	88 e5       	ldi	r24, 0x58	; 88
    21ce:	93 e2       	ldi	r25, 0x23	; 35
    21d0:	86 83       	std	Z+6, r24	; 0x06
    21d2:	97 83       	std	Z+7, r25	; 0x07
    21d4:	80 81       	ld	r24, Z
    21d6:	80 62       	ori	r24, 0x20	; 32
    21d8:	80 83       	st	Z, r24
    21da:	8f ef       	ldi	r24, 0xFF	; 255
    21dc:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    21e0:	e8 ec       	ldi	r30, 0xC8	; 200
    21e2:	f4 e0       	ldi	r31, 0x04	; 4
    21e4:	80 81       	ld	r24, Z
    21e6:	81 60       	ori	r24, 0x01	; 1
    21e8:	80 83       	st	Z, r24
    21ea:	10 92 ac 23 	sts	0x23AC, r1	; 0x8023ac <udd_b_idle>
    21ee:	80 91 b8 23 	lds	r24, 0x23B8	; 0x8023b8 <sleepmgr_locks+0x5>
    21f2:	8f 3f       	cpi	r24, 0xFF	; 255
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <udd_enable+0xf0>
    21f6:	ff cf       	rjmp	.-2      	; 0x21f6 <udd_enable+0xee>
    21f8:	8f b7       	in	r24, 0x3f	; 63
    21fa:	89 83       	std	Y+1, r24	; 0x01
    21fc:	f8 94       	cli
    21fe:	99 81       	ldd	r25, Y+1	; 0x01
    2200:	e3 eb       	ldi	r30, 0xB3	; 179
    2202:	f3 e2       	ldi	r31, 0x23	; 35
    2204:	85 81       	ldd	r24, Z+5	; 0x05
    2206:	8f 5f       	subi	r24, 0xFF	; 255
    2208:	85 83       	std	Z+5, r24	; 0x05
    220a:	9f bf       	out	0x3f, r25	; 63
    220c:	50 df       	rcall	.-352    	; 0x20ae <udd_attach>
    220e:	1f bf       	out	0x3f, r17	; 63
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	df 91       	pop	r29
    2216:	cf 91       	pop	r28
    2218:	1f 91       	pop	r17
    221a:	0f 91       	pop	r16
    221c:	08 95       	ret

0000221e <udd_set_address>:
    221e:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2222:	08 95       	ret

00002224 <udd_getaddress>:
    2224:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2228:	08 95       	ret

0000222a <udd_get_frame_number>:
    222a:	80 91 a8 23 	lds	r24, 0x23A8	; 0x8023a8 <udd_sram+0x64>
    222e:	90 91 a9 23 	lds	r25, 0x23A9	; 0x8023a9 <udd_sram+0x65>
    2232:	08 95       	ret

00002234 <udd_set_setup_payload>:
    2234:	e9 eb       	ldi	r30, 0xB9	; 185
    2236:	f3 e2       	ldi	r31, 0x23	; 35
    2238:	80 87       	std	Z+8, r24	; 0x08
    223a:	91 87       	std	Z+9, r25	; 0x09
    223c:	62 87       	std	Z+10, r22	; 0x0a
    223e:	73 87       	std	Z+11, r23	; 0x0b
    2240:	08 95       	ret

00002242 <udd_ep_alloc>:
    2242:	28 2f       	mov	r18, r24
    2244:	2f 70       	andi	r18, 0x0F	; 15
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	22 0f       	add	r18, r18
    224a:	33 1f       	adc	r19, r19
    224c:	08 2e       	mov	r0, r24
    224e:	00 0c       	add	r0, r0
    2250:	99 0b       	sbc	r25, r25
    2252:	88 27       	eor	r24, r24
    2254:	99 0f       	add	r25, r25
    2256:	88 1f       	adc	r24, r24
    2258:	99 27       	eor	r25, r25
    225a:	82 0f       	add	r24, r18
    225c:	93 1f       	adc	r25, r19
    225e:	fc 01       	movw	r30, r24
    2260:	ee 0f       	add	r30, r30
    2262:	ff 1f       	adc	r31, r31
    2264:	ee 0f       	add	r30, r30
    2266:	ff 1f       	adc	r31, r31
    2268:	ee 0f       	add	r30, r30
    226a:	ff 1f       	adc	r31, r31
    226c:	ec 5b       	subi	r30, 0xBC	; 188
    226e:	fc 4d       	sbci	r31, 0xDC	; 220
    2270:	25 89       	ldd	r18, Z+21	; 0x15
    2272:	20 7c       	andi	r18, 0xC0	; 192
    2274:	09 f0       	breq	.+2      	; 0x2278 <udd_ep_alloc+0x36>
    2276:	69 c0       	rjmp	.+210    	; 0x234a <udd_ep_alloc+0x108>
    2278:	63 70       	andi	r22, 0x03	; 3
    227a:	61 30       	cpi	r22, 0x01	; 1
    227c:	11 f0       	breq	.+4      	; 0x2282 <udd_ep_alloc+0x40>
    227e:	18 f4       	brcc	.+6      	; 0x2286 <udd_ep_alloc+0x44>
    2280:	04 c0       	rjmp	.+8      	; 0x228a <udd_ep_alloc+0x48>
    2282:	60 ec       	ldi	r22, 0xC0	; 192
    2284:	03 c0       	rjmp	.+6      	; 0x228c <udd_ep_alloc+0x4a>
    2286:	60 e8       	ldi	r22, 0x80	; 128
    2288:	01 c0       	rjmp	.+2      	; 0x228c <udd_ep_alloc+0x4a>
    228a:	60 e4       	ldi	r22, 0x40	; 64
    228c:	40 38       	cpi	r20, 0x80	; 128
    228e:	51 05       	cpc	r21, r1
    2290:	e9 f0       	breq	.+58     	; 0x22cc <udd_ep_alloc+0x8a>
    2292:	50 f4       	brcc	.+20     	; 0x22a8 <udd_ep_alloc+0x66>
    2294:	40 32       	cpi	r20, 0x20	; 32
    2296:	51 05       	cpc	r21, r1
    2298:	a9 f0       	breq	.+42     	; 0x22c4 <udd_ep_alloc+0x82>
    229a:	40 34       	cpi	r20, 0x40	; 64
    229c:	51 05       	cpc	r21, r1
    229e:	a1 f0       	breq	.+40     	; 0x22c8 <udd_ep_alloc+0x86>
    22a0:	40 31       	cpi	r20, 0x10	; 16
    22a2:	51 05       	cpc	r21, r1
    22a4:	d9 f4       	brne	.+54     	; 0x22dc <udd_ep_alloc+0x9a>
    22a6:	0c c0       	rjmp	.+24     	; 0x22c0 <udd_ep_alloc+0x7e>
    22a8:	41 15       	cp	r20, r1
    22aa:	22 e0       	ldi	r18, 0x02	; 2
    22ac:	52 07       	cpc	r21, r18
    22ae:	91 f0       	breq	.+36     	; 0x22d4 <udd_ep_alloc+0x92>
    22b0:	4f 3f       	cpi	r20, 0xFF	; 255
    22b2:	23 e0       	ldi	r18, 0x03	; 3
    22b4:	52 07       	cpc	r21, r18
    22b6:	81 f0       	breq	.+32     	; 0x22d8 <udd_ep_alloc+0x96>
    22b8:	41 15       	cp	r20, r1
    22ba:	51 40       	sbci	r21, 0x01	; 1
    22bc:	79 f4       	brne	.+30     	; 0x22dc <udd_ep_alloc+0x9a>
    22be:	08 c0       	rjmp	.+16     	; 0x22d0 <udd_ep_alloc+0x8e>
    22c0:	21 e0       	ldi	r18, 0x01	; 1
    22c2:	0d c0       	rjmp	.+26     	; 0x22de <udd_ep_alloc+0x9c>
    22c4:	22 e0       	ldi	r18, 0x02	; 2
    22c6:	0b c0       	rjmp	.+22     	; 0x22de <udd_ep_alloc+0x9c>
    22c8:	23 e0       	ldi	r18, 0x03	; 3
    22ca:	09 c0       	rjmp	.+18     	; 0x22de <udd_ep_alloc+0x9c>
    22cc:	24 e0       	ldi	r18, 0x04	; 4
    22ce:	07 c0       	rjmp	.+14     	; 0x22de <udd_ep_alloc+0x9c>
    22d0:	25 e0       	ldi	r18, 0x05	; 5
    22d2:	05 c0       	rjmp	.+10     	; 0x22de <udd_ep_alloc+0x9c>
    22d4:	26 e0       	ldi	r18, 0x06	; 6
    22d6:	03 c0       	rjmp	.+6      	; 0x22de <udd_ep_alloc+0x9c>
    22d8:	27 e0       	ldi	r18, 0x07	; 7
    22da:	01 c0       	rjmp	.+2      	; 0x22de <udd_ep_alloc+0x9c>
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	fc 01       	movw	r30, r24
    22e0:	ee 0f       	add	r30, r30
    22e2:	ff 1f       	adc	r31, r31
    22e4:	ee 0f       	add	r30, r30
    22e6:	ff 1f       	adc	r31, r31
    22e8:	ee 0f       	add	r30, r30
    22ea:	ff 1f       	adc	r31, r31
    22ec:	ec 5b       	subi	r30, 0xBC	; 188
    22ee:	fc 4d       	sbci	r31, 0xDC	; 220
    22f0:	15 8a       	std	Z+21, r1	; 0x15
    22f2:	36 e0       	ldi	r19, 0x06	; 6
    22f4:	34 8b       	std	Z+20, r19	; 0x14
    22f6:	26 2b       	or	r18, r22
    22f8:	25 8b       	std	Z+21, r18	; 0x15
    22fa:	fc 01       	movw	r30, r24
    22fc:	ee 0f       	add	r30, r30
    22fe:	ff 1f       	adc	r31, r31
    2300:	ee 0f       	add	r30, r30
    2302:	ff 1f       	adc	r31, r31
    2304:	ee 0f       	add	r30, r30
    2306:	ff 1f       	adc	r31, r31
    2308:	ec 5b       	subi	r30, 0xBC	; 188
    230a:	fc 4d       	sbci	r31, 0xDC	; 220
    230c:	25 89       	ldd	r18, Z+21	; 0x15
    230e:	20 7c       	andi	r18, 0xC0	; 192
    2310:	20 3c       	cpi	r18, 0xC0	; 192
    2312:	69 f4       	brne	.+26     	; 0x232e <udd_ep_alloc+0xec>
    2314:	fc 01       	movw	r30, r24
    2316:	ee 0f       	add	r30, r30
    2318:	ff 1f       	adc	r31, r31
    231a:	ee 0f       	add	r30, r30
    231c:	ff 1f       	adc	r31, r31
    231e:	ee 0f       	add	r30, r30
    2320:	ff 1f       	adc	r31, r31
    2322:	ec 5b       	subi	r30, 0xBC	; 188
    2324:	fc 4d       	sbci	r31, 0xDC	; 220
    2326:	25 89       	ldd	r18, Z+21	; 0x15
    2328:	27 70       	andi	r18, 0x07	; 7
    232a:	27 30       	cpi	r18, 0x07	; 7
    232c:	81 f0       	breq	.+32     	; 0x234e <udd_ep_alloc+0x10c>
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	88 0f       	add	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	fc 01       	movw	r30, r24
    233c:	ec 5b       	subi	r30, 0xBC	; 188
    233e:	fc 4d       	sbci	r31, 0xDC	; 220
    2340:	85 89       	ldd	r24, Z+21	; 0x15
    2342:	80 62       	ori	r24, 0x20	; 32
    2344:	85 8b       	std	Z+21, r24	; 0x15
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	08 95       	ret
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	08 95       	ret
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	08 95       	ret

00002352 <udd_ep_is_halted>:
    2352:	e8 2f       	mov	r30, r24
    2354:	ef 70       	andi	r30, 0x0F	; 15
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
    235c:	08 2e       	mov	r0, r24
    235e:	00 0c       	add	r0, r0
    2360:	99 0b       	sbc	r25, r25
    2362:	88 27       	eor	r24, r24
    2364:	99 0f       	add	r25, r25
    2366:	88 1f       	adc	r24, r24
    2368:	99 27       	eor	r25, r25
    236a:	e8 0f       	add	r30, r24
    236c:	f9 1f       	adc	r31, r25
    236e:	ee 0f       	add	r30, r30
    2370:	ff 1f       	adc	r31, r31
    2372:	ee 0f       	add	r30, r30
    2374:	ff 1f       	adc	r31, r31
    2376:	ee 0f       	add	r30, r30
    2378:	ff 1f       	adc	r31, r31
    237a:	ec 5b       	subi	r30, 0xBC	; 188
    237c:	fc 4d       	sbci	r31, 0xDC	; 220
    237e:	85 89       	ldd	r24, Z+21	; 0x15
    2380:	82 fb       	bst	r24, 2
    2382:	88 27       	eor	r24, r24
    2384:	80 f9       	bld	r24, 0
    2386:	08 95       	ret

00002388 <udd_ep_clear_halt>:
    2388:	0f 93       	push	r16
    238a:	28 2f       	mov	r18, r24
    238c:	2f 70       	andi	r18, 0x0F	; 15
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	a9 01       	movw	r20, r18
    2392:	44 0f       	add	r20, r20
    2394:	55 1f       	adc	r21, r21
    2396:	28 2f       	mov	r18, r24
    2398:	08 2e       	mov	r0, r24
    239a:	00 0c       	add	r0, r0
    239c:	33 0b       	sbc	r19, r19
    239e:	22 27       	eor	r18, r18
    23a0:	33 0f       	add	r19, r19
    23a2:	22 1f       	adc	r18, r18
    23a4:	33 27       	eor	r19, r19
    23a6:	24 0f       	add	r18, r20
    23a8:	35 1f       	adc	r19, r21
    23aa:	a9 01       	movw	r20, r18
    23ac:	44 0f       	add	r20, r20
    23ae:	55 1f       	adc	r21, r21
    23b0:	44 0f       	add	r20, r20
    23b2:	55 1f       	adc	r21, r21
    23b4:	44 0f       	add	r20, r20
    23b6:	55 1f       	adc	r21, r21
    23b8:	fa 01       	movw	r30, r20
    23ba:	e8 5a       	subi	r30, 0xA8	; 168
    23bc:	fc 4d       	sbci	r31, 0xDC	; 220
    23be:	01 e0       	ldi	r16, 0x01	; 1
    23c0:	06 93       	lac	Z, r16
    23c2:	fa 01       	movw	r30, r20
    23c4:	ec 5b       	subi	r30, 0xBC	; 188
    23c6:	fc 4d       	sbci	r31, 0xDC	; 220
    23c8:	95 89       	ldd	r25, Z+21	; 0x15
    23ca:	92 ff       	sbrs	r25, 2
    23cc:	11 c0       	rjmp	.+34     	; 0x23f0 <udd_ep_clear_halt+0x68>
    23ce:	fa 01       	movw	r30, r20
    23d0:	ec 5b       	subi	r30, 0xBC	; 188
    23d2:	fc 4d       	sbci	r31, 0xDC	; 220
    23d4:	95 89       	ldd	r25, Z+21	; 0x15
    23d6:	9b 7f       	andi	r25, 0xFB	; 251
    23d8:	95 8b       	std	Z+21, r25	; 0x15
    23da:	5f dc       	rcall	.-1858   	; 0x1c9a <udd_ep_get_job>
    23dc:	fc 01       	movw	r30, r24
    23de:	80 81       	ld	r24, Z
    23e0:	80 ff       	sbrs	r24, 0
    23e2:	06 c0       	rjmp	.+12     	; 0x23f0 <udd_ep_clear_halt+0x68>
    23e4:	8e 7f       	andi	r24, 0xFE	; 254
    23e6:	80 83       	st	Z, r24
    23e8:	07 80       	ldd	r0, Z+7	; 0x07
    23ea:	f0 85       	ldd	r31, Z+8	; 0x08
    23ec:	e0 2d       	mov	r30, r0
    23ee:	19 95       	eicall
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	0f 91       	pop	r16
    23f4:	08 95       	ret

000023f6 <udd_ep_run>:
    23f6:	6f 92       	push	r6
    23f8:	7f 92       	push	r7
    23fa:	8f 92       	push	r8
    23fc:	9f 92       	push	r9
    23fe:	af 92       	push	r10
    2400:	bf 92       	push	r11
    2402:	cf 92       	push	r12
    2404:	df 92       	push	r13
    2406:	ef 92       	push	r14
    2408:	ff 92       	push	r15
    240a:	0f 93       	push	r16
    240c:	1f 93       	push	r17
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	1f 92       	push	r1
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	78 2e       	mov	r7, r24
    241a:	66 2e       	mov	r6, r22
    241c:	4a 01       	movw	r8, r20
    241e:	59 01       	movw	r10, r18
    2420:	3c dc       	rcall	.-1928   	; 0x1c9a <udd_ep_get_job>
    2422:	6c 01       	movw	r12, r24
    2424:	27 2d       	mov	r18, r7
    2426:	87 2d       	mov	r24, r7
    2428:	8f 70       	andi	r24, 0x0F	; 15
    242a:	e8 2e       	mov	r14, r24
    242c:	f1 2c       	mov	r15, r1
    242e:	c7 01       	movw	r24, r14
    2430:	88 0f       	add	r24, r24
    2432:	99 1f       	adc	r25, r25
    2434:	e7 2c       	mov	r14, r7
    2436:	07 2c       	mov	r0, r7
    2438:	00 0c       	add	r0, r0
    243a:	ff 08       	sbc	r15, r15
    243c:	ee 24       	eor	r14, r14
    243e:	ff 0c       	add	r15, r15
    2440:	ee 1c       	adc	r14, r14
    2442:	ff 24       	eor	r15, r15
    2444:	e8 0e       	add	r14, r24
    2446:	f9 1e       	adc	r15, r25
    2448:	f7 01       	movw	r30, r14
    244a:	ee 0f       	add	r30, r30
    244c:	ff 1f       	adc	r31, r31
    244e:	ee 0f       	add	r30, r30
    2450:	ff 1f       	adc	r31, r31
    2452:	ee 0f       	add	r30, r30
    2454:	ff 1f       	adc	r31, r31
    2456:	ec 5b       	subi	r30, 0xBC	; 188
    2458:	fc 4d       	sbci	r31, 0xDC	; 220
    245a:	85 89       	ldd	r24, Z+21	; 0x15
    245c:	80 7c       	andi	r24, 0xC0	; 192
    245e:	09 f4       	brne	.+2      	; 0x2462 <udd_ep_run+0x6c>
    2460:	81 c0       	rjmp	.+258    	; 0x2564 <udd_ep_run+0x16e>
    2462:	f7 01       	movw	r30, r14
    2464:	ee 0f       	add	r30, r30
    2466:	ff 1f       	adc	r31, r31
    2468:	ee 0f       	add	r30, r30
    246a:	ff 1f       	adc	r31, r31
    246c:	ee 0f       	add	r30, r30
    246e:	ff 1f       	adc	r31, r31
    2470:	ec 5b       	subi	r30, 0xBC	; 188
    2472:	fc 4d       	sbci	r31, 0xDC	; 220
    2474:	85 89       	ldd	r24, Z+21	; 0x15
    2476:	80 7c       	andi	r24, 0xC0	; 192
    2478:	80 3c       	cpi	r24, 0xC0	; 192
    247a:	61 f0       	breq	.+24     	; 0x2494 <udd_ep_run+0x9e>
    247c:	f7 01       	movw	r30, r14
    247e:	ee 0f       	add	r30, r30
    2480:	ff 1f       	adc	r31, r31
    2482:	ee 0f       	add	r30, r30
    2484:	ff 1f       	adc	r31, r31
    2486:	ee 0f       	add	r30, r30
    2488:	ff 1f       	adc	r31, r31
    248a:	ec 5b       	subi	r30, 0xBC	; 188
    248c:	fc 4d       	sbci	r31, 0xDC	; 220
    248e:	85 89       	ldd	r24, Z+21	; 0x15
    2490:	82 fd       	sbrc	r24, 2
    2492:	6a c0       	rjmp	.+212    	; 0x2568 <udd_ep_run+0x172>
    2494:	8f b7       	in	r24, 0x3f	; 63
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	f8 94       	cli
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	f6 01       	movw	r30, r12
    249e:	90 81       	ld	r25, Z
    24a0:	90 ff       	sbrs	r25, 0
    24a2:	03 c0       	rjmp	.+6      	; 0x24aa <udd_ep_run+0xb4>
    24a4:	8f bf       	out	0x3f, r24	; 63
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	60 c0       	rjmp	.+192    	; 0x256a <udd_ep_run+0x174>
    24aa:	f6 01       	movw	r30, r12
    24ac:	90 81       	ld	r25, Z
    24ae:	91 60       	ori	r25, 0x01	; 1
    24b0:	90 83       	st	Z, r25
    24b2:	8f bf       	out	0x3f, r24	; 63
    24b4:	81 82       	std	Z+1, r8	; 0x01
    24b6:	92 82       	std	Z+2, r9	; 0x02
    24b8:	a3 82       	std	Z+3, r10	; 0x03
    24ba:	b4 82       	std	Z+4, r11	; 0x04
    24bc:	15 82       	std	Z+5, r1	; 0x05
    24be:	16 82       	std	Z+6, r1	; 0x06
    24c0:	07 83       	std	Z+7, r16	; 0x07
    24c2:	10 87       	std	Z+8, r17	; 0x08
    24c4:	61 10       	cpse	r6, r1
    24c6:	06 c0       	rjmp	.+12     	; 0x24d4 <udd_ep_run+0xde>
    24c8:	91 e0       	ldi	r25, 0x01	; 1
    24ca:	a1 14       	cp	r10, r1
    24cc:	b1 04       	cpc	r11, r1
    24ce:	19 f0       	breq	.+6      	; 0x24d6 <udd_ep_run+0xe0>
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	01 c0       	rjmp	.+2      	; 0x24d6 <udd_ep_run+0xe0>
    24d4:	91 e0       	ldi	r25, 0x01	; 1
    24d6:	f6 01       	movw	r30, r12
    24d8:	80 81       	ld	r24, Z
    24da:	90 fb       	bst	r25, 0
    24dc:	81 f9       	bld	r24, 1
    24de:	8b 7f       	andi	r24, 0xFB	; 251
    24e0:	80 83       	st	Z, r24
    24e2:	22 23       	and	r18, r18
    24e4:	64 f4       	brge	.+24     	; 0x24fe <udd_ep_run+0x108>
    24e6:	f7 01       	movw	r30, r14
    24e8:	ee 0f       	add	r30, r30
    24ea:	ff 1f       	adc	r31, r31
    24ec:	ee 0f       	add	r30, r30
    24ee:	ff 1f       	adc	r31, r31
    24f0:	ee 0f       	add	r30, r30
    24f2:	ff 1f       	adc	r31, r31
    24f4:	ec 5b       	subi	r30, 0xBC	; 188
    24f6:	fc 4d       	sbci	r31, 0xDC	; 220
    24f8:	12 8e       	std	Z+26, r1	; 0x1a
    24fa:	13 8e       	std	Z+27, r1	; 0x1b
    24fc:	2f c0       	rjmp	.+94     	; 0x255c <udd_ep_run+0x166>
    24fe:	f7 01       	movw	r30, r14
    2500:	ee 0f       	add	r30, r30
    2502:	ff 1f       	adc	r31, r31
    2504:	ee 0f       	add	r30, r30
    2506:	ff 1f       	adc	r31, r31
    2508:	ee 0f       	add	r30, r30
    250a:	ff 1f       	adc	r31, r31
    250c:	ec 5b       	subi	r30, 0xBC	; 188
    250e:	fc 4d       	sbci	r31, 0xDC	; 220
    2510:	85 89       	ldd	r24, Z+21	; 0x15
    2512:	80 7c       	andi	r24, 0xC0	; 192
    2514:	80 3c       	cpi	r24, 0xC0	; 192
    2516:	a9 f4       	brne	.+42     	; 0x2542 <udd_ep_run+0x14c>
    2518:	c7 01       	movw	r24, r14
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	88 0f       	add	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	88 5a       	subi	r24, 0xA8	; 168
    2528:	9c 4d       	sbci	r25, 0xDC	; 220
    252a:	8f db       	rcall	.-2274   	; 0x1c4a <udd_ep_get_size>
    252c:	bc 01       	movw	r22, r24
    252e:	c5 01       	movw	r24, r10
    2530:	ac d2       	rcall	.+1368   	; 0x2a8a <__udivmodhi4>
    2532:	89 2b       	or	r24, r25
    2534:	31 f0       	breq	.+12     	; 0x2542 <udd_ep_run+0x14c>
    2536:	f6 01       	movw	r30, r12
    2538:	80 81       	ld	r24, Z
    253a:	8e 7f       	andi	r24, 0xFE	; 254
    253c:	80 83       	st	Z, r24
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	14 c0       	rjmp	.+40     	; 0x256a <udd_ep_run+0x174>
    2542:	f7 01       	movw	r30, r14
    2544:	ee 0f       	add	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	ee 0f       	add	r30, r30
    254a:	ff 1f       	adc	r31, r31
    254c:	ee 0f       	add	r30, r30
    254e:	ff 1f       	adc	r31, r31
    2550:	ec 5b       	subi	r30, 0xBC	; 188
    2552:	fc 4d       	sbci	r31, 0xDC	; 220
    2554:	16 8a       	std	Z+22, r1	; 0x16
    2556:	17 8a       	std	Z+23, r1	; 0x17
    2558:	12 8e       	std	Z+26, r1	; 0x1a
    255a:	13 8e       	std	Z+27, r1	; 0x1b
    255c:	87 2d       	mov	r24, r7
    255e:	29 dc       	rcall	.-1966   	; 0x1db2 <udd_ep_trans_complet>
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	03 c0       	rjmp	.+6      	; 0x256a <udd_ep_run+0x174>
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	01 c0       	rjmp	.+2      	; 0x256a <udd_ep_run+0x174>
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	0f 90       	pop	r0
    256c:	df 91       	pop	r29
    256e:	cf 91       	pop	r28
    2570:	1f 91       	pop	r17
    2572:	0f 91       	pop	r16
    2574:	ff 90       	pop	r15
    2576:	ef 90       	pop	r14
    2578:	df 90       	pop	r13
    257a:	cf 90       	pop	r12
    257c:	bf 90       	pop	r11
    257e:	af 90       	pop	r10
    2580:	9f 90       	pop	r9
    2582:	8f 90       	pop	r8
    2584:	7f 90       	pop	r7
    2586:	6f 90       	pop	r6
    2588:	08 95       	ret

0000258a <udd_ep_abort>:
    258a:	ff 92       	push	r15
    258c:	0f 93       	push	r16
    258e:	1f 93       	push	r17
    2590:	cf 93       	push	r28
    2592:	df 93       	push	r29
    2594:	18 2f       	mov	r17, r24
    2596:	c8 2f       	mov	r28, r24
    2598:	cf 70       	andi	r28, 0x0F	; 15
    259a:	d0 e0       	ldi	r29, 0x00	; 0
    259c:	ce 01       	movw	r24, r28
    259e:	88 0f       	add	r24, r24
    25a0:	99 1f       	adc	r25, r25
    25a2:	c1 2f       	mov	r28, r17
    25a4:	01 2e       	mov	r0, r17
    25a6:	00 0c       	add	r0, r0
    25a8:	dd 0b       	sbc	r29, r29
    25aa:	cc 27       	eor	r28, r28
    25ac:	dd 0f       	add	r29, r29
    25ae:	cc 1f       	adc	r28, r28
    25b0:	dd 27       	eor	r29, r29
    25b2:	c8 0f       	add	r28, r24
    25b4:	d9 1f       	adc	r29, r25
    25b6:	81 2f       	mov	r24, r17
    25b8:	70 db       	rcall	.-2336   	; 0x1c9a <udd_ep_get_job>
    25ba:	dc 01       	movw	r26, r24
    25bc:	fe 01       	movw	r30, r28
    25be:	ee 0f       	add	r30, r30
    25c0:	ff 1f       	adc	r31, r31
    25c2:	ee 0f       	add	r30, r30
    25c4:	ff 1f       	adc	r31, r31
    25c6:	ee 0f       	add	r30, r30
    25c8:	ff 1f       	adc	r31, r31
    25ca:	e8 5a       	subi	r30, 0xA8	; 168
    25cc:	fc 4d       	sbci	r31, 0xDC	; 220
    25ce:	02 e0       	ldi	r16, 0x02	; 2
    25d0:	05 93       	las	Z, r16
    25d2:	8c 91       	ld	r24, X
    25d4:	80 ff       	sbrs	r24, 0
    25d6:	22 c0       	rjmp	.+68     	; 0x261c <udd_ep_abort+0x92>
    25d8:	8e 7f       	andi	r24, 0xFE	; 254
    25da:	8c 93       	st	X, r24
    25dc:	17 96       	adiw	r26, 0x07	; 7
    25de:	ed 91       	ld	r30, X+
    25e0:	fc 91       	ld	r31, X
    25e2:	18 97       	sbiw	r26, 0x08	; 8
    25e4:	30 97       	sbiw	r30, 0x00	; 0
    25e6:	d1 f0       	breq	.+52     	; 0x261c <udd_ep_abort+0x92>
    25e8:	11 23       	and	r17, r17
    25ea:	5c f4       	brge	.+22     	; 0x2602 <udd_ep_abort+0x78>
    25ec:	cc 0f       	add	r28, r28
    25ee:	dd 1f       	adc	r29, r29
    25f0:	cc 0f       	add	r28, r28
    25f2:	dd 1f       	adc	r29, r29
    25f4:	cc 0f       	add	r28, r28
    25f6:	dd 1f       	adc	r29, r29
    25f8:	cc 5b       	subi	r28, 0xBC	; 188
    25fa:	dc 4d       	sbci	r29, 0xDC	; 220
    25fc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    25fe:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2600:	0a c0       	rjmp	.+20     	; 0x2616 <udd_ep_abort+0x8c>
    2602:	cc 0f       	add	r28, r28
    2604:	dd 1f       	adc	r29, r29
    2606:	cc 0f       	add	r28, r28
    2608:	dd 1f       	adc	r29, r29
    260a:	cc 0f       	add	r28, r28
    260c:	dd 1f       	adc	r29, r29
    260e:	cc 5b       	subi	r28, 0xBC	; 188
    2610:	dc 4d       	sbci	r29, 0xDC	; 220
    2612:	6e 89       	ldd	r22, Y+22	; 0x16
    2614:	7f 89       	ldd	r23, Y+23	; 0x17
    2616:	41 2f       	mov	r20, r17
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	19 95       	eicall
    261c:	df 91       	pop	r29
    261e:	cf 91       	pop	r28
    2620:	1f 91       	pop	r17
    2622:	0f 91       	pop	r16
    2624:	ff 90       	pop	r15
    2626:	08 95       	ret

00002628 <udd_ep_free>:
    2628:	cf 93       	push	r28
    262a:	c8 2f       	mov	r28, r24
    262c:	ae df       	rcall	.-164    	; 0x258a <udd_ep_abort>
    262e:	ec 2f       	mov	r30, r28
    2630:	ef 70       	andi	r30, 0x0F	; 15
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	ee 0f       	add	r30, r30
    2636:	ff 1f       	adc	r31, r31
    2638:	8c 2f       	mov	r24, r28
    263a:	cc 0f       	add	r28, r28
    263c:	99 0b       	sbc	r25, r25
    263e:	88 27       	eor	r24, r24
    2640:	99 0f       	add	r25, r25
    2642:	88 1f       	adc	r24, r24
    2644:	99 27       	eor	r25, r25
    2646:	e8 0f       	add	r30, r24
    2648:	f9 1f       	adc	r31, r25
    264a:	ee 0f       	add	r30, r30
    264c:	ff 1f       	adc	r31, r31
    264e:	ee 0f       	add	r30, r30
    2650:	ff 1f       	adc	r31, r31
    2652:	ee 0f       	add	r30, r30
    2654:	ff 1f       	adc	r31, r31
    2656:	ec 5b       	subi	r30, 0xBC	; 188
    2658:	fc 4d       	sbci	r31, 0xDC	; 220
    265a:	15 8a       	std	Z+21, r1	; 0x15
    265c:	cf 91       	pop	r28
    265e:	08 95       	ret

00002660 <udd_ep_set_halt>:
    2660:	e8 2f       	mov	r30, r24
    2662:	ef 70       	andi	r30, 0x0F	; 15
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	ee 0f       	add	r30, r30
    2668:	ff 1f       	adc	r31, r31
    266a:	28 2f       	mov	r18, r24
    266c:	08 2e       	mov	r0, r24
    266e:	00 0c       	add	r0, r0
    2670:	33 0b       	sbc	r19, r19
    2672:	22 27       	eor	r18, r18
    2674:	33 0f       	add	r19, r19
    2676:	22 1f       	adc	r18, r18
    2678:	33 27       	eor	r19, r19
    267a:	e2 0f       	add	r30, r18
    267c:	f3 1f       	adc	r31, r19
    267e:	ee 0f       	add	r30, r30
    2680:	ff 1f       	adc	r31, r31
    2682:	ee 0f       	add	r30, r30
    2684:	ff 1f       	adc	r31, r31
    2686:	ee 0f       	add	r30, r30
    2688:	ff 1f       	adc	r31, r31
    268a:	ec 5b       	subi	r30, 0xBC	; 188
    268c:	fc 4d       	sbci	r31, 0xDC	; 220
    268e:	95 89       	ldd	r25, Z+21	; 0x15
    2690:	94 60       	ori	r25, 0x04	; 4
    2692:	95 8b       	std	Z+21, r25	; 0x15
    2694:	7a df       	rcall	.-268    	; 0x258a <udd_ep_abort>
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	08 95       	ret

0000269a <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    269a:	1f 92       	push	r1
    269c:	0f 92       	push	r0
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	0f 92       	push	r0
    26a2:	11 24       	eor	r1, r1
    26a4:	0b b6       	in	r0, 0x3b	; 59
    26a6:	0f 92       	push	r0
    26a8:	0f 93       	push	r16
    26aa:	2f 93       	push	r18
    26ac:	3f 93       	push	r19
    26ae:	4f 93       	push	r20
    26b0:	5f 93       	push	r21
    26b2:	6f 93       	push	r22
    26b4:	7f 93       	push	r23
    26b6:	8f 93       	push	r24
    26b8:	9f 93       	push	r25
    26ba:	af 93       	push	r26
    26bc:	bf 93       	push	r27
    26be:	cf 93       	push	r28
    26c0:	ef 93       	push	r30
    26c2:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    26c4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    26c8:	88 23       	and	r24, r24
    26ca:	3c f4       	brge	.+14     	; 0x26da <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    26cc:	80 e8       	ldi	r24, 0x80	; 128
    26ce:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    26d2:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    26d6:	b1 d1       	rcall	.+866    	; 0x2a3a <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    26d8:	89 c0       	rjmp	.+274    	; 0x27ec <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    26da:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    26de:	82 ff       	sbrs	r24, 2
    26e0:	20 c0       	rjmp	.+64     	; 0x2722 <__vector_125+0x88>
		udd_ack_underflow_event();
    26e2:	84 e0       	ldi	r24, 0x04	; 4
    26e4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    26e8:	80 91 60 23 	lds	r24, 0x2360	; 0x802360 <udd_sram+0x1c>
    26ec:	86 ff       	sbrs	r24, 6
    26ee:	7e c0       	rjmp	.+252    	; 0x27ec <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    26f0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    26f4:	81 fd       	sbrc	r24, 1
    26f6:	7a c0       	rjmp	.+244    	; 0x27ec <__vector_125+0x152>
    26f8:	eb da       	rcall	.-2602   	; 0x1cd0 <udd_ctrl_interrupt_tc_setup>
    26fa:	81 11       	cpse	r24, r1
    26fc:	77 c0       	rjmp	.+238    	; 0x27ec <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    26fe:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_ep_control_state>
    2702:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2704:	11 f4       	brne	.+4      	; 0x270a <__vector_125+0x70>
    2706:	1f da       	rcall	.-3010   	; 0x1b46 <udd_ctrl_send_zlp_in>
    2708:	71 c0       	rjmp	.+226    	; 0x27ec <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    270a:	84 30       	cpi	r24, 0x04	; 4
    270c:	09 f0       	breq	.+2      	; 0x2710 <__vector_125+0x76>
    270e:	6e c0       	rjmp	.+220    	; 0x27ec <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2710:	e1 e6       	ldi	r30, 0x61	; 97
    2712:	f3 e2       	ldi	r31, 0x23	; 35
    2714:	04 e0       	ldi	r16, 0x04	; 4
    2716:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2718:	e9 e5       	ldi	r30, 0x59	; 89
    271a:	f3 e2       	ldi	r31, 0x23	; 35
    271c:	04 e0       	ldi	r16, 0x04	; 4
    271e:	05 93       	las	Z, r16
    2720:	65 c0       	rjmp	.+202    	; 0x27ec <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2722:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2726:	81 ff       	sbrs	r24, 1
    2728:	5c c0       	rjmp	.+184    	; 0x27e2 <__vector_125+0x148>
		udd_ack_overflow_event();
    272a:	82 e0       	ldi	r24, 0x02	; 2
    272c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    2730:	80 91 58 23 	lds	r24, 0x2358	; 0x802358 <udd_sram+0x14>
    2734:	86 ff       	sbrs	r24, 6
    2736:	5a c0       	rjmp	.+180    	; 0x27ec <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2738:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    273c:	81 fd       	sbrc	r24, 1
    273e:	56 c0       	rjmp	.+172    	; 0x27ec <__vector_125+0x152>
    2740:	c7 da       	rcall	.-2674   	; 0x1cd0 <udd_ctrl_interrupt_tc_setup>
    2742:	81 11       	cpse	r24, r1
    2744:	53 c0       	rjmp	.+166    	; 0x27ec <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2746:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_ep_control_state>
    274a:	82 30       	cpi	r24, 0x02	; 2
    274c:	41 f4       	brne	.+16     	; 0x275e <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    274e:	84 e0       	ldi	r24, 0x04	; 4
    2750:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2754:	e8 e5       	ldi	r30, 0x58	; 88
    2756:	f3 e2       	ldi	r31, 0x23	; 35
    2758:	02 e0       	ldi	r16, 0x02	; 2
    275a:	06 93       	lac	Z, r16
    275c:	47 c0       	rjmp	.+142    	; 0x27ec <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    275e:	83 30       	cpi	r24, 0x03	; 3
    2760:	09 f0       	breq	.+2      	; 0x2764 <__vector_125+0xca>
    2762:	44 c0       	rjmp	.+136    	; 0x27ec <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2764:	e1 e6       	ldi	r30, 0x61	; 97
    2766:	f3 e2       	ldi	r31, 0x23	; 35
    2768:	04 e0       	ldi	r16, 0x04	; 4
    276a:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    276c:	e9 e5       	ldi	r30, 0x59	; 89
    276e:	f3 e2       	ldi	r31, 0x23	; 35
    2770:	04 e0       	ldi	r16, 0x04	; 4
    2772:	05 93       	las	Z, r16
    2774:	3b c0       	rjmp	.+118    	; 0x27ec <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2776:	80 e1       	ldi	r24, 0x10	; 16
    2778:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    277c:	c1 e0       	ldi	r28, 0x01	; 1
    277e:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    2780:	04 df       	rcall	.-504    	; 0x258a <udd_ep_abort>
    2782:	8c 2f       	mov	r24, r28
    2784:	80 68       	ori	r24, 0x80	; 128
    2786:	01 df       	rcall	.-510    	; 0x258a <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    2788:	cf 5f       	subi	r28, 0xFF	; 255
    278a:	c5 30       	cpi	r28, 0x05	; 5
    278c:	c1 f7       	brne	.-16     	; 0x277e <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    278e:	0e 94 30 0a 	call	0x1460	; 0x1460 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2792:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2796:	e4 e4       	ldi	r30, 0x44	; 68
    2798:	f3 e2       	ldi	r31, 0x23	; 35
    279a:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    279c:	96 e0       	ldi	r25, 0x06	; 6
    279e:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    27a0:	80 e4       	ldi	r24, 0x40	; 64
    27a2:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    27a4:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    27a6:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    27a8:	85 8f       	std	Z+29, r24	; 0x1d
    27aa:	87 e3       	ldi	r24, 0x37	; 55
    27ac:	93 e2       	ldi	r25, 0x23	; 35
    27ae:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    27b0:	91 8f       	std	Z+25, r25	; 0x19
    27b2:	96 d9       	rcall	.-3284   	; 0x1ae0 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    27b4:	1b c0       	rjmp	.+54     	; 0x27ec <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    27b6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    27ba:	86 ff       	sbrs	r24, 6
    27bc:	07 c0       	rjmp	.+14     	; 0x27cc <__vector_125+0x132>
    27be:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    27c0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    27c4:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    27c6:	54 d9       	rcall	.-3416   	; 0x1a70 <udd_sleep_mode>
    27c8:	36 d1       	rcall	.+620    	; 0x2a36 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    27ca:	10 c0       	rjmp	.+32     	; 0x27ec <__vector_125+0x152>
    27cc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    27d0:	85 ff       	sbrs	r24, 5
    27d2:	0c c0       	rjmp	.+24     	; 0x27ec <__vector_125+0x152>
    27d4:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    27d6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    27da:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    27dc:	49 d9       	rcall	.-3438   	; 0x1a70 <udd_sleep_mode>
    27de:	2c d1       	rcall	.+600    	; 0x2a38 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    27e0:	05 c0       	rjmp	.+10     	; 0x27ec <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    27e2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    27e6:	84 fd       	sbrc	r24, 4
    27e8:	c6 cf       	rjmp	.-116    	; 0x2776 <__vector_125+0xdc>
    27ea:	e5 cf       	rjmp	.-54     	; 0x27b6 <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    27ec:	ff 91       	pop	r31
    27ee:	ef 91       	pop	r30
    27f0:	cf 91       	pop	r28
    27f2:	bf 91       	pop	r27
    27f4:	af 91       	pop	r26
    27f6:	9f 91       	pop	r25
    27f8:	8f 91       	pop	r24
    27fa:	7f 91       	pop	r23
    27fc:	6f 91       	pop	r22
    27fe:	5f 91       	pop	r21
    2800:	4f 91       	pop	r20
    2802:	3f 91       	pop	r19
    2804:	2f 91       	pop	r18
    2806:	0f 91       	pop	r16
    2808:	0f 90       	pop	r0
    280a:	0b be       	out	0x3b, r0	; 59
    280c:	0f 90       	pop	r0
    280e:	0f be       	out	0x3f, r0	; 63
    2810:	0f 90       	pop	r0
    2812:	1f 90       	pop	r1
    2814:	18 95       	reti

00002816 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2816:	1f 92       	push	r1
    2818:	0f 92       	push	r0
    281a:	0f b6       	in	r0, 0x3f	; 63
    281c:	0f 92       	push	r0
    281e:	11 24       	eor	r1, r1
    2820:	0b b6       	in	r0, 0x3b	; 59
    2822:	0f 92       	push	r0
    2824:	0f 93       	push	r16
    2826:	1f 93       	push	r17
    2828:	2f 93       	push	r18
    282a:	3f 93       	push	r19
    282c:	4f 93       	push	r20
    282e:	5f 93       	push	r21
    2830:	6f 93       	push	r22
    2832:	7f 93       	push	r23
    2834:	8f 93       	push	r24
    2836:	9f 93       	push	r25
    2838:	af 93       	push	r26
    283a:	bf 93       	push	r27
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	ef 93       	push	r30
    2842:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2844:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2848:	81 fd       	sbrc	r24, 1
    284a:	03 c0       	rjmp	.+6      	; 0x2852 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    284c:	41 da       	rcall	.-2942   	; 0x1cd0 <udd_ctrl_interrupt_tc_setup>
    284e:	81 11       	cpse	r24, r1
    2850:	c3 c0       	rjmp	.+390    	; 0x29d8 <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2852:	82 e0       	ldi	r24, 0x02	; 2
    2854:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2858:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    285c:	81 95       	neg	r24
    285e:	88 0f       	add	r24, r24
    2860:	e8 e5       	ldi	r30, 0x58	; 88
    2862:	f3 e2       	ldi	r31, 0x23	; 35
    2864:	e8 1b       	sub	r30, r24
    2866:	f1 09       	sbc	r31, r1
    2868:	20 81       	ld	r18, Z
    286a:	31 81       	ldd	r19, Z+1	; 0x01
    286c:	28 55       	subi	r18, 0x58	; 88
    286e:	33 42       	sbci	r19, 0x23	; 35
    2870:	36 95       	lsr	r19
    2872:	27 95       	ror	r18
    2874:	36 95       	lsr	r19
    2876:	27 95       	ror	r18
    2878:	36 95       	lsr	r19
    287a:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    287c:	82 2f       	mov	r24, r18
    287e:	86 95       	lsr	r24
    2880:	20 fd       	sbrc	r18, 0
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <__vector_126+0x72>
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	01 c0       	rjmp	.+2      	; 0x288a <__vector_126+0x74>
    2888:	90 e8       	ldi	r25, 0x80	; 128
    288a:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    288c:	e8 2f       	mov	r30, r24
    288e:	ef 70       	andi	r30, 0x0F	; 15
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	ee 0f       	add	r30, r30
    2894:	ff 1f       	adc	r31, r31
    2896:	28 2f       	mov	r18, r24
    2898:	08 2e       	mov	r0, r24
    289a:	00 0c       	add	r0, r0
    289c:	33 0b       	sbc	r19, r19
    289e:	22 27       	eor	r18, r18
    28a0:	33 0f       	add	r19, r19
    28a2:	22 1f       	adc	r18, r18
    28a4:	33 27       	eor	r19, r19
    28a6:	e2 0f       	add	r30, r18
    28a8:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    28aa:	df 01       	movw	r26, r30
    28ac:	aa 0f       	add	r26, r26
    28ae:	bb 1f       	adc	r27, r27
    28b0:	aa 0f       	add	r26, r26
    28b2:	bb 1f       	adc	r27, r27
    28b4:	aa 0f       	add	r26, r26
    28b6:	bb 1f       	adc	r27, r27
    28b8:	ac 5b       	subi	r26, 0xBC	; 188
    28ba:	bc 4d       	sbci	r27, 0xDC	; 220
    28bc:	54 96       	adiw	r26, 0x14	; 20
    28be:	9c 91       	ld	r25, X
    28c0:	95 ff       	sbrs	r25, 5
    28c2:	8a c0       	rjmp	.+276    	; 0x29d8 <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    28c4:	ee 0f       	add	r30, r30
    28c6:	ff 1f       	adc	r31, r31
    28c8:	ee 0f       	add	r30, r30
    28ca:	ff 1f       	adc	r31, r31
    28cc:	ee 0f       	add	r30, r30
    28ce:	ff 1f       	adc	r31, r31
    28d0:	e8 5a       	subi	r30, 0xA8	; 168
    28d2:	fc 4d       	sbci	r31, 0xDC	; 220
    28d4:	00 e2       	ldi	r16, 0x20	; 32
    28d6:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    28d8:	81 11       	cpse	r24, r1
    28da:	79 c0       	rjmp	.+242    	; 0x29ce <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    28dc:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_ep_control_state>
    28e0:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    28e2:	19 f4       	brne	.+6      	; 0x28ea <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    28e4:	3e d9       	rcall	.-3460   	; 0x1b62 <udd_ctrl_endofrequest>
    28e6:	fc d8       	rcall	.-3592   	; 0x1ae0 <udd_ctrl_init>
    28e8:	77 c0       	rjmp	.+238    	; 0x29d8 <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    28ea:	00 91 5a 23 	lds	r16, 0x235A	; 0x80235a <udd_sram+0x16>
    28ee:	10 91 5b 23 	lds	r17, 0x235B	; 0x80235b <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    28f2:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    28f6:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    28fa:	c0 91 3f 23 	lds	r28, 0x233F	; 0x80233f <udd_ctrl_payload_nb_trans>
    28fe:	d0 91 40 23 	lds	r29, 0x2340	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    2902:	98 01       	movw	r18, r16
    2904:	2c 0f       	add	r18, r28
    2906:	3d 1f       	adc	r19, r29
    2908:	82 17       	cp	r24, r18
    290a:	93 07       	cpc	r25, r19
    290c:	18 f4       	brcc	.+6      	; 0x2914 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    290e:	8c 01       	movw	r16, r24
    2910:	0c 1b       	sub	r16, r28
    2912:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2914:	80 91 c1 23 	lds	r24, 0x23C1	; 0x8023c1 <udd_g_ctrlreq+0x8>
    2918:	90 91 c2 23 	lds	r25, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x9>
    291c:	a8 01       	movw	r20, r16
    291e:	67 e3       	ldi	r22, 0x37	; 55
    2920:	73 e2       	ldi	r23, 0x23	; 35
    2922:	8c 0f       	add	r24, r28
    2924:	9d 1f       	adc	r25, r29
    2926:	cd d0       	rcall	.+410    	; 0x2ac2 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2928:	c0 0f       	add	r28, r16
    292a:	d1 1f       	adc	r29, r17
    292c:	c0 93 3f 23 	sts	0x233F, r28	; 0x80233f <udd_ctrl_payload_nb_trans>
    2930:	d0 93 40 23 	sts	0x2340, r29	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2934:	08 30       	cpi	r16, 0x08	; 8
    2936:	11 05       	cpc	r17, r1
    2938:	69 f4       	brne	.+26     	; 0x2954 <__vector_126+0x13e>
    293a:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    293e:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    2942:	8c 0f       	add	r24, r28
    2944:	9d 1f       	adc	r25, r29
    2946:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    294a:	30 91 c0 23 	lds	r19, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    294e:	82 17       	cp	r24, r18
    2950:	93 07       	cpc	r25, r19
    2952:	80 f0       	brcs	.+32     	; 0x2974 <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2954:	e9 eb       	ldi	r30, 0xB9	; 185
    2956:	f3 e2       	ldi	r31, 0x23	; 35
    2958:	c2 87       	std	Z+10, r28	; 0x0a
    295a:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    295c:	06 84       	ldd	r0, Z+14	; 0x0e
    295e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2960:	e0 2d       	mov	r30, r0
    2962:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    2964:	29 f0       	breq	.+10     	; 0x2970 <__vector_126+0x15a>
    2966:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    2968:	81 11       	cpse	r24, r1
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <__vector_126+0x15a>
    296c:	de d8       	rcall	.-3652   	; 0x1b2a <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    296e:	34 c0       	rjmp	.+104    	; 0x29d8 <__vector_126+0x1c2>
    2970:	ea d8       	rcall	.-3628   	; 0x1b46 <udd_ctrl_send_zlp_in>
    2972:	32 c0       	rjmp	.+100    	; 0x29d8 <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2974:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    2978:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    297c:	c8 17       	cp	r28, r24
    297e:	d9 07       	cpc	r29, r25
    2980:	f9 f4       	brne	.+62     	; 0x29c0 <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2982:	e0 91 c7 23 	lds	r30, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0xe>
    2986:	f0 91 c8 23 	lds	r31, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0xf>
    298a:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    298c:	11 f4       	brne	.+4      	; 0x2992 <__vector_126+0x17c>
    298e:	cd d8       	rcall	.-3686   	; 0x1b2a <udd_ctrl_stall_data>
    2990:	23 c0       	rjmp	.+70     	; 0x29d8 <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2992:	19 95       	eicall
    2994:	81 11       	cpse	r24, r1
    2996:	02 c0       	rjmp	.+4      	; 0x299c <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2998:	c8 d8       	rcall	.-3696   	; 0x1b2a <udd_ctrl_stall_data>
    299a:	1e c0       	rjmp	.+60     	; 0x29d8 <__vector_126+0x1c2>
    299c:	20 91 41 23 	lds	r18, 0x2341	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    29a0:	30 91 42 23 	lds	r19, 0x2342	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    29a4:	80 91 3f 23 	lds	r24, 0x233F	; 0x80233f <udd_ctrl_payload_nb_trans>
    29a8:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    29ac:	82 0f       	add	r24, r18
    29ae:	93 1f       	adc	r25, r19
    29b0:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    29b4:	90 93 42 23 	sts	0x2342, r25	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    29b8:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    29bc:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    29c0:	e8 e5       	ldi	r30, 0x58	; 88
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    29c2:	f3 e2       	ldi	r31, 0x23	; 35
    29c4:	02 e0       	ldi	r16, 0x02	; 2
    29c6:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    29c8:	00 e2       	ldi	r16, 0x20	; 32
    29ca:	06 93       	lac	Z, r16
    29cc:	05 c0       	rjmp	.+10     	; 0x29d8 <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    29ce:	80 38       	cpi	r24, 0x80	; 128
		udd_ctrl_in_sent();
    29d0:	11 f4       	brne	.+4      	; 0x29d6 <__vector_126+0x1c0>
    29d2:	cf d8       	rcall	.-3682   	; 0x1b72 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    29d4:	01 c0       	rjmp	.+2      	; 0x29d8 <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    29d6:	ed d9       	rcall	.-3110   	; 0x1db2 <udd_ep_trans_complet>
    29d8:	ff 91       	pop	r31
	}
#endif

udd_interrupt_tc_end:
	return;
}
    29da:	ef 91       	pop	r30
    29dc:	df 91       	pop	r29
    29de:	cf 91       	pop	r28
    29e0:	bf 91       	pop	r27
    29e2:	af 91       	pop	r26
    29e4:	9f 91       	pop	r25
    29e6:	8f 91       	pop	r24
    29e8:	7f 91       	pop	r23
    29ea:	6f 91       	pop	r22
    29ec:	5f 91       	pop	r21
    29ee:	4f 91       	pop	r20
    29f0:	3f 91       	pop	r19
    29f2:	2f 91       	pop	r18
    29f4:	1f 91       	pop	r17
    29f6:	0f 91       	pop	r16
    29f8:	0f 90       	pop	r0
    29fa:	0b be       	out	0x3b, r0	; 59
    29fc:	0f 90       	pop	r0
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	0f 90       	pop	r0
    2a02:	1f 90       	pop	r1
    2a04:	18 95       	reti

00002a06 <main>:

/* --------------------------------------------------------------------- */

int main (void)
{
	irq_initialize_vectors();  // initializes vector table
    2a06:	87 e0       	ldi	r24, 0x07	; 7
    2a08:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();          // enables CPU interrupts
    2a0c:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2a0e:	e3 eb       	ldi	r30, 0xB3	; 179
    2a10:	f3 e2       	ldi	r31, 0x23	; 35
    2a12:	10 82       	st	Z, r1
    2a14:	11 82       	std	Z+1, r1	; 0x01
    2a16:	12 82       	std	Z+2, r1	; 0x02
    2a18:	13 82       	std	Z+3, r1	; 0x03
    2a1a:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();           // initialize sleep manager
	sysclk_init();             // initialize clock
    2a20:	0e 94 9c 06 	call	0xd38	; 0xd38 <sysclk_init>

	io_init();                 // initializes board i/o pins
    2a24:	0e 94 8c 01 	call	0x318	; 0x318 <io_init>
	// keypad_init();             // initializes keypad matrix

	udc_start();               // starts USB device controller
    2a28:	0e 94 2e 0a 	call	0x145c	; 0x145c <udc_start>

	startupSequence(1);
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	0e 94 52 04 	call	0x8a4	; 0x8a4 <startupSequence>
    2a34:	ff cf       	rjmp	.-2      	; 0x2a34 <main+0x2e>

00002a36 <main_suspend_action>:
	while (true) { }
}

/* --------------------------------------------------------------------- */

void main_suspend_action(void) { }
    2a36:	08 95       	ret

00002a38 <main_resume_action>:
void main_resume_action(void) { }
    2a38:	08 95       	ret

00002a3a <main_sof_action>:

void main_sof_action(void) {	// called each Start of Frame event (1 ms)
	if (!main_b_kbd_enable)
    2a3a:	80 91 af 23 	lds	r24, 0x23AF	; 0x8023af <main_b_kbd_enable>
    2a3e:	88 23       	and	r24, r24
    2a40:	39 f0       	breq	.+14     	; 0x2a50 <main_sof_action+0x16>
	return;
	kbd_ui_process();
    2a42:	0e 94 98 06 	call	0xd30	; 0xd30 <kbd_ui_process>

	if (!main_b_generic_enable)
    2a46:	80 91 ae 23 	lds	r24, 0x23AE	; 0x8023ae <main_b_generic_enable>
    2a4a:	81 11       	cpse	r24, r1
		return;
	jstk_ui_process();
    2a4c:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <jstk_ui_process>
    2a50:	08 95       	ret

00002a52 <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    2a52:	08 95       	ret

00002a54 <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    2a54:	08 95       	ret

00002a56 <main_kbd_enable>:

bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	80 93 af 23 	sts	0x23AF, r24	; 0x8023af <main_b_kbd_enable>
	return true;
}
    2a5c:	08 95       	ret

00002a5e <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    2a5e:	10 92 af 23 	sts	0x23AF, r1	; 0x8023af <main_b_kbd_enable>
    2a62:	08 95       	ret

00002a64 <main_generic_enable>:
}

/* --------------------------------------------------------------------- */

bool main_generic_enable(void) {
	main_b_generic_enable = true;
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	80 93 ae 23 	sts	0x23AE, r24	; 0x8023ae <main_b_generic_enable>
	return true;
}
    2a6a:	08 95       	ret

00002a6c <main_generic_disable>:

void main_generic_disable(void) {
	main_b_generic_enable = false;
    2a6c:	10 92 ae 23 	sts	0x23AE, r1	; 0x8023ae <main_b_generic_enable>
    2a70:	08 95       	ret

00002a72 <main_led_enable>:
}

/* --------------------------------------------------------------------- */

bool main_led_enable(void) {
	main_b_led_enable = true;
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	80 93 ad 23 	sts	0x23AD, r24	; 0x8023ad <main_b_led_enable>
	return true;
}
    2a78:	08 95       	ret

00002a7a <main_led_disable>:

void main_led_disable(void) {
	main_b_led_enable = false;
    2a7a:	10 92 ad 23 	sts	0x23AD, r1	; 0x8023ad <main_b_led_enable>
    2a7e:	08 95       	ret

00002a80 <main_led_report_out>:
}

void main_led_report_out(uint8_t const *report) {
	led_ui_process(report[0]);
    2a80:	fc 01       	movw	r30, r24
    2a82:	80 81       	ld	r24, Z
    2a84:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <led_ui_process>
    2a88:	08 95       	ret

00002a8a <__udivmodhi4>:
    2a8a:	aa 1b       	sub	r26, r26
    2a8c:	bb 1b       	sub	r27, r27
    2a8e:	51 e1       	ldi	r21, 0x11	; 17
    2a90:	07 c0       	rjmp	.+14     	; 0x2aa0 <__udivmodhi4_ep>

00002a92 <__udivmodhi4_loop>:
    2a92:	aa 1f       	adc	r26, r26
    2a94:	bb 1f       	adc	r27, r27
    2a96:	a6 17       	cp	r26, r22
    2a98:	b7 07       	cpc	r27, r23
    2a9a:	10 f0       	brcs	.+4      	; 0x2aa0 <__udivmodhi4_ep>
    2a9c:	a6 1b       	sub	r26, r22
    2a9e:	b7 0b       	sbc	r27, r23

00002aa0 <__udivmodhi4_ep>:
    2aa0:	88 1f       	adc	r24, r24
    2aa2:	99 1f       	adc	r25, r25
    2aa4:	5a 95       	dec	r21
    2aa6:	a9 f7       	brne	.-22     	; 0x2a92 <__udivmodhi4_loop>
    2aa8:	80 95       	com	r24
    2aaa:	90 95       	com	r25
    2aac:	bc 01       	movw	r22, r24
    2aae:	cd 01       	movw	r24, r26
    2ab0:	08 95       	ret

00002ab2 <__tablejump2__>:
    2ab2:	ee 0f       	add	r30, r30
    2ab4:	ff 1f       	adc	r31, r31
    2ab6:	88 1f       	adc	r24, r24
    2ab8:	8b bf       	out	0x3b, r24	; 59
    2aba:	07 90       	elpm	r0, Z+
    2abc:	f6 91       	elpm	r31, Z
    2abe:	e0 2d       	mov	r30, r0
    2ac0:	19 94       	eijmp

00002ac2 <memcpy>:
    2ac2:	fb 01       	movw	r30, r22
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	02 c0       	rjmp	.+4      	; 0x2acc <memcpy+0xa>
    2ac8:	01 90       	ld	r0, Z+
    2aca:	0d 92       	st	X+, r0
    2acc:	41 50       	subi	r20, 0x01	; 1
    2ace:	50 40       	sbci	r21, 0x00	; 0
    2ad0:	d8 f7       	brcc	.-10     	; 0x2ac8 <memcpy+0x6>
    2ad2:	08 95       	ret

00002ad4 <_exit>:
    2ad4:	f8 94       	cli

00002ad6 <__stop_program>:
    2ad6:	ff cf       	rjmp	.-2      	; 0x2ad6 <__stop_program>
