
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000198  00802000  00002d30  00002dc4  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000245  00802198  00802198  00002f5c  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005b0  00000000  00000000  00002fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b3b3  00000000  00000000  00003580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000052c4  00000000  00000000  0000e933  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009bfd  00000000  00000000  00013bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cec  00000000  00000000  0001d7f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036d30  00000000  00000000  0001e4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000036e0  00000000  00000000  00055210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000758  00000000  00000000  000588f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cd69  00000000  00000000  00059048  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	2c c1       	rjmp	.+600    	; 0x25e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c1       	rjmp	.+596    	; 0x25e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c1       	rjmp	.+592    	; 0x25e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c1       	rjmp	.+588    	; 0x25e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c1       	rjmp	.+584    	; 0x25e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c1       	rjmp	.+580    	; 0x25e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c1       	rjmp	.+576    	; 0x25e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c1       	rjmp	.+572    	; 0x25e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c1       	rjmp	.+568    	; 0x25e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c1       	rjmp	.+564    	; 0x25e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	18 c1       	rjmp	.+560    	; 0x25e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c1       	rjmp	.+556    	; 0x25e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c1       	rjmp	.+552    	; 0x25e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c1       	rjmp	.+548    	; 0x25e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c1       	rjmp	.+544    	; 0x25e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c1       	rjmp	.+540    	; 0x25e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c1       	rjmp	.+536    	; 0x25e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c1       	rjmp	.+532    	; 0x25e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c1       	rjmp	.+528    	; 0x25e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c1       	rjmp	.+524    	; 0x25e <__bad_interrupt>
      52:	00 00       	nop
      54:	04 c1       	rjmp	.+520    	; 0x25e <__bad_interrupt>
      56:	00 00       	nop
      58:	02 c1       	rjmp	.+516    	; 0x25e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	00 c1       	rjmp	.+512    	; 0x25e <__bad_interrupt>
      5e:	00 00       	nop
      60:	fe c0       	rjmp	.+508    	; 0x25e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c0       	rjmp	.+504    	; 0x25e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c0       	rjmp	.+500    	; 0x25e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c0       	rjmp	.+496    	; 0x25e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c0       	rjmp	.+492    	; 0x25e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c0       	rjmp	.+488    	; 0x25e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c0       	rjmp	.+484    	; 0x25e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c0       	rjmp	.+480    	; 0x25e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c0       	rjmp	.+476    	; 0x25e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c0       	rjmp	.+472    	; 0x25e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c0       	rjmp	.+468    	; 0x25e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c0       	rjmp	.+464    	; 0x25e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c0       	rjmp	.+460    	; 0x25e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c0       	rjmp	.+456    	; 0x25e <__bad_interrupt>
      96:	00 00       	nop
      98:	e2 c0       	rjmp	.+452    	; 0x25e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e0 c0       	rjmp	.+448    	; 0x25e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	de c0       	rjmp	.+444    	; 0x25e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dc c0       	rjmp	.+440    	; 0x25e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	da c0       	rjmp	.+436    	; 0x25e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d8 c0       	rjmp	.+432    	; 0x25e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d6 c0       	rjmp	.+428    	; 0x25e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d4 c0       	rjmp	.+424    	; 0x25e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d2 c0       	rjmp	.+420    	; 0x25e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d0 c0       	rjmp	.+416    	; 0x25e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ce c0       	rjmp	.+412    	; 0x25e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cc c0       	rjmp	.+408    	; 0x25e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ca c0       	rjmp	.+404    	; 0x25e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c8 c0       	rjmp	.+400    	; 0x25e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c6 c0       	rjmp	.+396    	; 0x25e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c4 c0       	rjmp	.+392    	; 0x25e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c2 c0       	rjmp	.+388    	; 0x25e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <__bad_interrupt>
      de:	00 00       	nop
      e0:	be c0       	rjmp	.+380    	; 0x25e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bc c0       	rjmp	.+376    	; 0x25e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ba c0       	rjmp	.+372    	; 0x25e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b8 c0       	rjmp	.+368    	; 0x25e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b6 c0       	rjmp	.+364    	; 0x25e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b4 c0       	rjmp	.+360    	; 0x25e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b2 c0       	rjmp	.+356    	; 0x25e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b0 c0       	rjmp	.+352    	; 0x25e <__bad_interrupt>
      fe:	00 00       	nop
     100:	ae c0       	rjmp	.+348    	; 0x25e <__bad_interrupt>
     102:	00 00       	nop
     104:	ac c0       	rjmp	.+344    	; 0x25e <__bad_interrupt>
     106:	00 00       	nop
     108:	aa c0       	rjmp	.+340    	; 0x25e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a8 c0       	rjmp	.+336    	; 0x25e <__bad_interrupt>
     10e:	00 00       	nop
     110:	a6 c0       	rjmp	.+332    	; 0x25e <__bad_interrupt>
     112:	00 00       	nop
     114:	a4 c0       	rjmp	.+328    	; 0x25e <__bad_interrupt>
     116:	00 00       	nop
     118:	a2 c0       	rjmp	.+324    	; 0x25e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c0       	rjmp	.+320    	; 0x25e <__bad_interrupt>
     11e:	00 00       	nop
     120:	9e c0       	rjmp	.+316    	; 0x25e <__bad_interrupt>
     122:	00 00       	nop
     124:	9c c0       	rjmp	.+312    	; 0x25e <__bad_interrupt>
     126:	00 00       	nop
     128:	9a c0       	rjmp	.+308    	; 0x25e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	98 c0       	rjmp	.+304    	; 0x25e <__bad_interrupt>
     12e:	00 00       	nop
     130:	96 c0       	rjmp	.+300    	; 0x25e <__bad_interrupt>
     132:	00 00       	nop
     134:	94 c0       	rjmp	.+296    	; 0x25e <__bad_interrupt>
     136:	00 00       	nop
     138:	92 c0       	rjmp	.+292    	; 0x25e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	90 c0       	rjmp	.+288    	; 0x25e <__bad_interrupt>
     13e:	00 00       	nop
     140:	8e c0       	rjmp	.+284    	; 0x25e <__bad_interrupt>
     142:	00 00       	nop
     144:	8c c0       	rjmp	.+280    	; 0x25e <__bad_interrupt>
     146:	00 00       	nop
     148:	8a c0       	rjmp	.+276    	; 0x25e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	88 c0       	rjmp	.+272    	; 0x25e <__bad_interrupt>
     14e:	00 00       	nop
     150:	86 c0       	rjmp	.+268    	; 0x25e <__bad_interrupt>
     152:	00 00       	nop
     154:	84 c0       	rjmp	.+264    	; 0x25e <__bad_interrupt>
     156:	00 00       	nop
     158:	82 c0       	rjmp	.+260    	; 0x25e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	80 c0       	rjmp	.+256    	; 0x25e <__bad_interrupt>
     15e:	00 00       	nop
     160:	7e c0       	rjmp	.+252    	; 0x25e <__bad_interrupt>
     162:	00 00       	nop
     164:	7c c0       	rjmp	.+248    	; 0x25e <__bad_interrupt>
     166:	00 00       	nop
     168:	7a c0       	rjmp	.+244    	; 0x25e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	78 c0       	rjmp	.+240    	; 0x25e <__bad_interrupt>
     16e:	00 00       	nop
     170:	76 c0       	rjmp	.+236    	; 0x25e <__bad_interrupt>
     172:	00 00       	nop
     174:	74 c0       	rjmp	.+232    	; 0x25e <__bad_interrupt>
     176:	00 00       	nop
     178:	72 c0       	rjmp	.+228    	; 0x25e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	70 c0       	rjmp	.+224    	; 0x25e <__bad_interrupt>
     17e:	00 00       	nop
     180:	6e c0       	rjmp	.+220    	; 0x25e <__bad_interrupt>
     182:	00 00       	nop
     184:	6c c0       	rjmp	.+216    	; 0x25e <__bad_interrupt>
     186:	00 00       	nop
     188:	6a c0       	rjmp	.+212    	; 0x25e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	68 c0       	rjmp	.+208    	; 0x25e <__bad_interrupt>
     18e:	00 00       	nop
     190:	66 c0       	rjmp	.+204    	; 0x25e <__bad_interrupt>
     192:	00 00       	nop
     194:	64 c0       	rjmp	.+200    	; 0x25e <__bad_interrupt>
     196:	00 00       	nop
     198:	62 c0       	rjmp	.+196    	; 0x25e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	60 c0       	rjmp	.+192    	; 0x25e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5c c0       	rjmp	.+184    	; 0x25e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5a c0       	rjmp	.+180    	; 0x25e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	58 c0       	rjmp	.+176    	; 0x25e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	56 c0       	rjmp	.+172    	; 0x25e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	54 c0       	rjmp	.+168    	; 0x25e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	52 c0       	rjmp	.+164    	; 0x25e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	50 c0       	rjmp	.+160    	; 0x25e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4e c0       	rjmp	.+156    	; 0x25e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4c c0       	rjmp	.+152    	; 0x25e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4a c0       	rjmp	.+148    	; 0x25e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	48 c0       	rjmp	.+144    	; 0x25e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	46 c0       	rjmp	.+140    	; 0x25e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	44 c0       	rjmp	.+136    	; 0x25e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	40 c0       	rjmp	.+128    	; 0x25e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3e c0       	rjmp	.+124    	; 0x25e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3c c0       	rjmp	.+120    	; 0x25e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3a c0       	rjmp	.+116    	; 0x25e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	38 c0       	rjmp	.+112    	; 0x25e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	36 c0       	rjmp	.+108    	; 0x25e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 71 14 	jmp	0x28e2	; 0x28e2 <__vector_125>
     1f8:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__vector_126>
     1fc:	06 04       	cpc	r0, r6
     1fe:	4c 04       	cpc	r4, r12
     200:	fc 03       	fmulsu	r23, r20
     202:	4e 04       	cpc	r4, r14
     204:	fe 03       	fmulsu	r23, r22
     206:	00 04       	cpc	r0, r0
     208:	02 04       	cpc	r0, r2
     20a:	04 04       	cpc	r0, r4
     20c:	06 04       	cpc	r0, r6
     20e:	5e 0f       	add	r21, r30
     210:	61 0f       	add	r22, r17
     212:	64 0f       	add	r22, r20
     214:	67 0f       	add	r22, r23
     216:	6a 0f       	add	r22, r26
     218:	6d 0f       	add	r22, r29
     21a:	70 0f       	add	r23, r16

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df e5       	ldi	r29, 0x5F	; 95
     226:	de bf       	out	0x3e, r29	; 62
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	11 e2       	ldi	r17, 0x21	; 33
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	e0 e3       	ldi	r30, 0x30	; 48
     234:	fd e2       	ldi	r31, 0x2D	; 45
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a8 39       	cpi	r26, 0x98	; 152
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	23 e2       	ldi	r18, 0x23	; 35
     248:	a8 e9       	ldi	r26, 0x98	; 152
     24a:	b1 e2       	ldi	r27, 0x21	; 33
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	ad 3d       	cpi	r26, 0xDD	; 221
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <main>
     25a:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <_exit>

0000025e <__bad_interrupt>:
     25e:	d0 ce       	rjmp	.-608    	; 0x0 <__vectors>

00000260 <udi_hid_led_getsetting>:
		                 udi_hid_led_setreport);
}

uint8_t udi_hid_led_getsetting(void) {
	return 0;
}
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret

00000264 <udi_hid_led_setreport>:

static bool udi_hid_led_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8)) &&
     264:	30 91 cf 23 	lds	r19, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x2>
     268:	20 91 d0 23 	lds	r18, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x3>
     26c:	82 2f       	mov	r24, r18
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 97       	sbiw	r24, 0x02	; 2
     272:	c1 f4       	brne	.+48     	; 0x2a4 <udi_hid_led_setreport+0x40>
     274:	31 11       	cpse	r19, r1
     276:	18 c0       	rjmp	.+48     	; 0x2a8 <udi_hid_led_setreport+0x44>
	   (0 == (0xFF & udd_g_ctrlreq.req.wValue))                         &&
     278:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0x6>
     27c:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0x7>
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	a1 f4       	brne	.+40     	; 0x2ac <udi_hid_led_setreport+0x48>
	   (UDI_HID_LED_REPORT_OUT_SIZE == udd_g_ctrlreq.req.wLength))
	{
		udd_g_ctrlreq.payload      = udi_hid_led_report_out;
     284:	ed ec       	ldi	r30, 0xCD	; 205
     286:	f3 e2       	ldi	r31, 0x23	; 35
     288:	88 e9       	ldi	r24, 0x98	; 152
     28a:	91 e2       	ldi	r25, 0x21	; 33
     28c:	80 87       	std	Z+8, r24	; 0x08
     28e:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.payload_size = UDI_HID_LED_REPORT_OUT_SIZE;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	82 87       	std	Z+10, r24	; 0x0a
     296:	93 87       	std	Z+11, r25	; 0x0b
		udd_g_ctrlreq.callback     = udi_hid_led_report_out_received;
     298:	8b e7       	ldi	r24, 0x7B	; 123
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	84 87       	std	Z+12, r24	; 0x0c
     29e:	95 87       	std	Z+13, r25	; 0x0d
		return true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	08 95       	ret
	}
	return false;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 95       	ret
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
     2ac:	80 e0       	ldi	r24, 0x00	; 0
}
     2ae:	08 95       	ret

000002b0 <udi_hid_led_report_in_sent>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep) {
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_led_b_report_in_free = true;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <udi_hid_led_b_report_in_free>
     2b6:	08 95       	ret

000002b8 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     2bc:	0b e7       	ldi	r16, 0x7B	; 123
     2be:	11 e0       	ldi	r17, 0x01	; 1
     2c0:	21 e0       	ldi	r18, 0x01	; 1
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	48 e9       	ldi	r20, 0x98	; 152
     2c6:	51 e2       	ldi	r21, 0x21	; 33
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	0e 94 1f 13 	call	0x263e	; 0x263e <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
}
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	08 95       	ret

000002d6 <udi_hid_led_enable>:
	                                   iram_size_t     nb_sent,
	                                   udd_ep_id_t     ep);

/* --------------------------------------------------------------------- */

bool udi_hid_led_enable(void) {
     2d6:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     2d8:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     2dc:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <udi_hid_led_protocol>
	udi_hid_led_b_report_in_free = true;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <udi_hid_led_b_report_in_free>

	if(!udi_hid_led_report_out_enable())
     2e6:	e8 df       	rcall	.-48     	; 0x2b8 <udi_hid_led_report_out_enable>
     2e8:	c8 2f       	mov	r28, r24
     2ea:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     2ec:	0e 94 65 16 	call	0x2cca	; 0x2cca <main_led_enable>
	return true;
}
     2f0:	8c 2f       	mov	r24, r28
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     2f6:	81 11       	cpse	r24, r1
     2f8:	07 c0       	rjmp	.+14     	; 0x308 <udi_hid_led_report_out_received+0x12>
     2fa:	61 30       	cpi	r22, 0x01	; 1
     2fc:	71 05       	cpc	r23, r1
     2fe:	21 f4       	brne	.+8      	; 0x308 <udi_hid_led_report_out_received+0x12>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     300:	88 e9       	ldi	r24, 0x98	; 152
     302:	91 e2       	ldi	r25, 0x21	; 33
     304:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <main_led_report_out>
	}
	udi_hid_led_report_out_enable();
     308:	d7 cf       	rjmp	.-82     	; 0x2b8 <udi_hid_led_report_out_enable>
     30a:	08 95       	ret

0000030c <udi_hid_led_disable>:
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     30c:	0c 94 69 16 	jmp	0x2cd2	; 0x2cd2 <main_led_disable>
     310:	08 95       	ret

00000312 <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     312:	22 e3       	ldi	r18, 0x32	; 50
     314:	31 e0       	ldi	r19, 0x01	; 1
     316:	40 e0       	ldi	r20, 0x00	; 0
     318:	50 e2       	ldi	r21, 0x20	; 32
     31a:	6c e9       	ldi	r22, 0x9C	; 156
     31c:	71 e2       	ldi	r23, 0x21	; 33
     31e:	8e e9       	ldi	r24, 0x9E	; 158
     320:	91 e2       	ldi	r25, 0x21	; 33
     322:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     326:	08 95       	ret

00000328 <udi_hid_led_send_report_in>:
		              udi_hid_led_report_out_received);
}


bool udi_hid_led_send_report_in(uint8_t *data)
{
     328:	ff 92       	push	r15
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	1f 92       	push	r1
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	9c 01       	movw	r18, r24
	if (!udi_hid_led_b_report_in_free)
     33a:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <udi_hid_led_b_report_in_free>
     33e:	88 23       	and	r24, r24
     340:	09 f1       	breq	.+66     	; 0x384 <udi_hid_led_send_report_in+0x5c>
     342:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     344:	8f b7       	in	r24, 0x3f	; 63
     346:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     348:	f8 94       	cli
	return flags;
     34a:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();

	memset(&udi_hid_led_report_in, 
     34c:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <__data_end>
     350:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <__data_end+0x1>
		   0,
		   sizeof(udi_hid_led_report_in));
	memcpy(&udi_hid_led_report_in,
     354:	80 81       	ld	r24, Z
     356:	91 81       	ldd	r25, Z+1	; 0x01
     358:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <__data_end>
     35c:	90 93 99 21 	sts	0x2199, r25	; 0x802199 <__data_end+0x1>
		   data,
		   sizeof(udi_hid_led_report_in));
	udi_hid_led_b_report_in_free = !udd_ep_run(UDI_HID_LED_EP_IN,
     360:	08 e5       	ldi	r16, 0x58	; 88
     362:	11 e0       	ldi	r17, 0x01	; 1
     364:	22 e0       	ldi	r18, 0x02	; 2
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	48 e9       	ldi	r20, 0x98	; 152
     36a:	51 e2       	ldi	r21, 0x21	; 33
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	84 e8       	ldi	r24, 0x84	; 132
     370:	0e 94 1f 13 	call	0x263e	; 0x263e <udd_ep_run>
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	89 27       	eor	r24, r25
     378:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <udi_hid_led_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     37c:	ff be       	out	0x3f, r15	; 63
		                                       false,
		                                       (uint8_t *) & udi_hid_led_report_in,
		                                       sizeof(udi_hid_led_report_in),
		                                       udi_hid_led_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_led_b_report_in_free;
     37e:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <udi_hid_led_b_report_in_free>
     382:	89 27       	eor	r24, r25
}
     384:	0f 90       	pop	r0
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	08 95       	ret

00000392 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     392:	e0 e0       	ldi	r30, 0x00	; 0
     394:	f6 e0       	ldi	r31, 0x06	; 6
     396:	9f ef       	ldi	r25, 0xFF	; 255
     398:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     39a:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     39c:	e0 e2       	ldi	r30, 0x20	; 32
     39e:	f6 e0       	ldi	r31, 0x06	; 6
     3a0:	3f e3       	ldi	r19, 0x3F	; 63
     3a2:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3a4:	88 e1       	ldi	r24, 0x18	; 24
     3a6:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3a8:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3aa:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3ac:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3ae:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     3b0:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     3b2:	20 ec       	ldi	r18, 0xC0	; 192
     3b4:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     3b6:	40 e4       	ldi	r20, 0x40	; 64
     3b8:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     3ba:	40 e8       	ldi	r20, 0x80	; 128
     3bc:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     3be:	e0 e4       	ldi	r30, 0x40	; 64
     3c0:	f6 e0       	ldi	r31, 0x06	; 6
     3c2:	4c ef       	ldi	r20, 0xFC	; 252
     3c4:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3c6:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3c8:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ca:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3cc:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3ce:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3d0:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     3d2:	43 e0       	ldi	r20, 0x03	; 3
     3d4:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     3d6:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     3d8:	e0 e6       	ldi	r30, 0x60	; 96
     3da:	f6 e0       	ldi	r31, 0x06	; 6
     3dc:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3de:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e0:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e2:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e4:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e6:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3e8:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     3ea:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     3ec:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     3ee:	e0 e8       	ldi	r30, 0x80	; 128
     3f0:	f6 e0       	ldi	r31, 0x06	; 6
     3f2:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f4:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f6:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3f8:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3fa:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3fc:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     3fe:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     400:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     402:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     404:	e0 ea       	ldi	r30, 0xA0	; 160
     406:	f6 e0       	ldi	r31, 0x06	; 6
     408:	90 ef       	ldi	r25, 0xF0	; 240
     40a:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     40c:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     40e:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     410:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     412:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     414:	8f e0       	ldi	r24, 0x0F	; 15
     416:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     418:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     41a:	9c d2       	rcall	.+1336   	; 0x954 <led_init>
	keypad_init();
     41c:	0d c1       	rjmp	.+538    	; 0x638 <keypad_init>
     41e:	08 95       	ret

00000420 <jstk_readVertIndex>:
     420:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     424:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	92 2b       	or	r25, r18
     42c:	96 95       	lsr	r25
     42e:	87 95       	ror	r24
     430:	96 95       	lsr	r25
     432:	87 95       	ror	r24
     434:	bc 01       	movw	r22, r24
     436:	7f 70       	andi	r23, 0x0F	; 15
     438:	80 ff       	sbrs	r24, 0
     43a:	17 c0       	rjmp	.+46     	; 0x46a <jstk_readVertIndex+0x4a>
     43c:	21 e0       	ldi	r18, 0x01	; 1
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	e1 e0       	ldi	r30, 0x01	; 1
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	82 2f       	mov	r24, r18
     446:	af 01       	movw	r20, r30
     448:	02 2e       	mov	r0, r18
     44a:	02 c0       	rjmp	.+4      	; 0x450 <jstk_readVertIndex+0x30>
     44c:	44 0f       	add	r20, r20
     44e:	55 1f       	adc	r21, r21
     450:	0a 94       	dec	r0
     452:	e2 f7       	brpl	.-8      	; 0x44c <jstk_readVertIndex+0x2c>
     454:	46 23       	and	r20, r22
     456:	57 23       	and	r21, r23
     458:	45 2b       	or	r20, r21
     45a:	41 f0       	breq	.+16     	; 0x46c <jstk_readVertIndex+0x4c>
     45c:	2f 5f       	subi	r18, 0xFF	; 255
     45e:	3f 4f       	sbci	r19, 0xFF	; 255
     460:	2c 30       	cpi	r18, 0x0C	; 12
     462:	31 05       	cpc	r19, r1
     464:	79 f7       	brne	.-34     	; 0x444 <jstk_readVertIndex+0x24>
     466:	8f ef       	ldi	r24, 0xFF	; 255
     468:	08 95       	ret
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	08 95       	ret

0000046e <jstk_readHoriIndex>:
     46e:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     472:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	92 2b       	or	r25, r18
     47a:	bc 01       	movw	r22, r24
     47c:	7f 70       	andi	r23, 0x0F	; 15
     47e:	80 ff       	sbrs	r24, 0
     480:	17 c0       	rjmp	.+46     	; 0x4b0 <jstk_readHoriIndex+0x42>
     482:	21 e0       	ldi	r18, 0x01	; 1
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	e1 e0       	ldi	r30, 0x01	; 1
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	82 2f       	mov	r24, r18
     48c:	af 01       	movw	r20, r30
     48e:	02 2e       	mov	r0, r18
     490:	02 c0       	rjmp	.+4      	; 0x496 <jstk_readHoriIndex+0x28>
     492:	44 0f       	add	r20, r20
     494:	55 1f       	adc	r21, r21
     496:	0a 94       	dec	r0
     498:	e2 f7       	brpl	.-8      	; 0x492 <jstk_readHoriIndex+0x24>
     49a:	46 23       	and	r20, r22
     49c:	57 23       	and	r21, r23
     49e:	45 2b       	or	r20, r21
     4a0:	41 f0       	breq	.+16     	; 0x4b2 <jstk_readHoriIndex+0x44>
     4a2:	2f 5f       	subi	r18, 0xFF	; 255
     4a4:	3f 4f       	sbci	r19, 0xFF	; 255
     4a6:	2c 30       	cpi	r18, 0x0C	; 12
     4a8:	31 05       	cpc	r19, r1
     4aa:	79 f7       	brne	.-34     	; 0x48a <jstk_readHoriIndex+0x1c>
     4ac:	8f ef       	ldi	r24, 0xFF	; 255
     4ae:	08 95       	ret
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	08 95       	ret

000004b4 <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     4b4:	88 23       	and	r24, r24
     4b6:	f4 f1       	brlt	.+124    	; 0x534 <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     4b8:	9b ef       	ldi	r25, 0xFB	; 251
     4ba:	98 0f       	add	r25, r24
     4bc:	92 30       	cpi	r25, 0x02	; 2
     4be:	e0 f1       	brcs	.+120    	; 0x538 <jstk_ledMask+0x84>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     4c0:	85 30       	cpi	r24, 0x05	; 5
     4c2:	34 f4       	brge	.+12     	; 0x4d0 <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4c4:	95 e0       	ldi	r25, 0x05	; 5
     4c6:	98 1b       	sub	r25, r24
     4c8:	92 30       	cpi	r25, 0x02	; 2
     4ca:	08 f0       	brcs	.+2      	; 0x4ce <jstk_ledMask+0x1a>
     4cc:	42 c0       	rjmp	.+132    	; 0x552 <jstk_ledMask+0x9e>
     4ce:	36 c0       	rjmp	.+108    	; 0x53c <jstk_ledMask+0x88>
     4d0:	9a ef       	ldi	r25, 0xFA	; 250
     4d2:	98 0f       	add	r25, r24
     4d4:	92 30       	cpi	r25, 0x02	; 2
     4d6:	b0 f5       	brcc	.+108    	; 0x544 <jstk_ledMask+0x90>
     4d8:	31 c0       	rjmp	.+98     	; 0x53c <jstk_ledMask+0x88>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     4da:	62 e0       	ldi	r22, 0x02	; 2
     4dc:	23 e0       	ldi	r18, 0x03	; 3
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     4e4:	e1 e0       	ldi	r30, 0x01	; 1
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	af 01       	movw	r20, r30
     4ea:	02 2e       	mov	r0, r18
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <jstk_ledMask+0x3e>
     4ee:	44 0f       	add	r20, r20
     4f0:	55 1f       	adc	r21, r21
     4f2:	0a 94       	dec	r0
     4f4:	e2 f7       	brpl	.-8      	; 0x4ee <jstk_ledMask+0x3a>
     4f6:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     4f8:	9f 5f       	subi	r25, 0xFF	; 255
     4fa:	21 50       	subi	r18, 0x01	; 1
     4fc:	31 09       	sbc	r19, r1
     4fe:	96 17       	cp	r25, r22
     500:	98 f3       	brcs	.-26     	; 0x4e8 <jstk_ledMask+0x34>
     502:	08 95       	ret
     504:	81 50       	subi	r24, 0x01	; 1
     506:	48 2f       	mov	r20, r24
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	4b 5f       	subi	r20, 0xFB	; 251
     50c:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     50e:	24 e0       	ldi	r18, 0x04	; 4
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     514:	e1 e0       	ldi	r30, 0x01	; 1
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	bf 01       	movw	r22, r30
     51a:	02 2e       	mov	r0, r18
     51c:	02 c0       	rjmp	.+4      	; 0x522 <jstk_ledMask+0x6e>
     51e:	66 0f       	add	r22, r22
     520:	77 1f       	adc	r23, r23
     522:	0a 94       	dec	r0
     524:	e2 f7       	brpl	.-8      	; 0x51e <jstk_ledMask+0x6a>
     526:	86 2b       	or	r24, r22
     528:	2f 5f       	subi	r18, 0xFF	; 255
     52a:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     52c:	24 17       	cp	r18, r20
     52e:	35 07       	cpc	r19, r21
     530:	99 f7       	brne	.-26     	; 0x518 <jstk_ledMask+0x64>
     532:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     538:	88 e1       	ldi	r24, 0x18	; 24
     53a:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     53c:	85 30       	cpi	r24, 0x05	; 5
     53e:	6c f2       	brlt	.-102    	; 0x4da <jstk_ledMask+0x26>
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	e0 cf       	rjmp	.-64     	; 0x504 <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     544:	85 50       	subi	r24, 0x05	; 5
     546:	85 30       	cpi	r24, 0x05	; 5
     548:	08 f0       	brcs	.+2      	; 0x54c <jstk_ledMask+0x98>
     54a:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     54c:	81 11       	cpse	r24, r1
     54e:	da cf       	rjmp	.-76     	; 0x504 <jstk_ledMask+0x50>
     550:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     552:	66 e0       	ldi	r22, 0x06	; 6
     554:	68 1b       	sub	r22, r24
     556:	65 30       	cpi	r22, 0x05	; 5
     558:	08 f0       	brcs	.+2      	; 0x55c <jstk_ledMask+0xa8>
     55a:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     55c:	61 11       	cpse	r22, r1
     55e:	be cf       	rjmp	.-132    	; 0x4dc <jstk_ledMask+0x28>
     560:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     562:	08 95       	ret

00000564 <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     564:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     566:	5c df       	rcall	.-328    	; 0x420 <jstk_readVertIndex>
     568:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     56a:	81 df       	rcall	.-254    	; 0x46e <jstk_readHoriIndex>
     56c:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     56e:	24 f4       	brge	.+8      	; 0x578 <jstk_readMask+0x14>
     570:	88 23       	and	r24, r24
     572:	c4 f0       	brlt	.+48     	; 0x5a4 <jstk_readMask+0x40>
     574:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     576:	09 c0       	rjmp	.+18     	; 0x58a <jstk_readMask+0x26>
     578:	c6 30       	cpi	r28, 0x06	; 6
     57a:	1c f0       	brlt	.+6      	; 0x582 <jstk_readMask+0x1e>
     57c:	9b ef       	ldi	r25, 0xFB	; 251
     57e:	9c 0f       	add	r25, r28
     580:	02 c0       	rjmp	.+4      	; 0x586 <jstk_readMask+0x22>
     582:	95 e0       	ldi	r25, 0x05	; 5
     584:	9c 1b       	sub	r25, r28
     586:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     588:	54 f0       	brlt	.+20     	; 0x59e <jstk_readMask+0x3a>
     58a:	86 30       	cpi	r24, 0x06	; 6
     58c:	1c f0       	brlt	.+6      	; 0x594 <jstk_readMask+0x30>
     58e:	2b ef       	ldi	r18, 0xFB	; 251
     590:	28 0f       	add	r18, r24
     592:	02 c0       	rjmp	.+4      	; 0x598 <jstk_readMask+0x34>
     594:	25 e0       	ldi	r18, 0x05	; 5
     596:	28 1b       	sub	r18, r24
     598:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     59a:	08 f4       	brcc	.+2      	; 0x59e <jstk_readMask+0x3a>
     59c:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     59e:	8c 2f       	mov	r24, r28
     5a0:	89 df       	rcall	.-238    	; 0x4b4 <jstk_ledMask>
     5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <jstk_readMask+0x42>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     5a6:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     5a8:	08 95       	ret

000005aa <jstk_usbTask>:
     5aa:	61 df       	rcall	.-318    	; 0x46e <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     5ac:	88 23       	and	r24, r24
     5ae:	3c f0       	brlt	.+14     	; 0x5be <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5b0:	e8 2f       	mov	r30, r24
     5b2:	88 0f       	add	r24, r24
     5b4:	ff 0b       	sbc	r31, r31
     5b6:	e4 57       	subi	r30, 0x74	; 116
     5b8:	fe 4d       	sbci	r31, 0xDE	; 222
     5ba:	80 81       	ld	r24, Z
     5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5be:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     5c0:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <jstk_usbReport>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5c4:	2d df       	rcall	.-422    	; 0x420 <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     5c6:	88 23       	and	r24, r24
     5c8:	3c f0       	brlt	.+14     	; 0x5d8 <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     5ca:	e8 2f       	mov	r30, r24
     5cc:	88 0f       	add	r24, r24
     5ce:	ff 0b       	sbc	r31, r31
     5d0:	e4 57       	subi	r30, 0x74	; 116
     5d2:	fe 4d       	sbci	r31, 0xDE	; 222
     5d4:	80 81       	ld	r24, Z
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     5d8:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     5da:	e0 ea       	ldi	r30, 0xA0	; 160
     5dc:	f1 e2       	ldi	r31, 0x21	; 33
     5de:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     5e0:	20 81       	ld	r18, Z
     5e2:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     5e6:	29 13       	cpse	r18, r25
     5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <jstk_usbTask+0x48>
     5ea:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     5ee:	98 17       	cp	r25, r24
     5f0:	71 f0       	breq	.+28     	; 0x60e <jstk_usbTask+0x64>
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     5f2:	80 ea       	ldi	r24, 0xA0	; 160
     5f4:	91 e2       	ldi	r25, 0x21	; 33
     5f6:	dd d5       	rcall	.+3002   	; 0x11b2 <udi_hid_generic_send_report_in>
     5f8:	88 23       	and	r24, r24
     5fa:	49 f0       	breq	.+18     	; 0x60e <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     5fc:	e6 e2       	ldi	r30, 0x26	; 38
     5fe:	f0 e2       	ldi	r31, 0x20	; 32
     600:	a0 ea       	ldi	r26, 0xA0	; 160
     602:	b1 e2       	ldi	r27, 0x21	; 33
     604:	8c 91       	ld	r24, X
     606:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     608:	11 96       	adiw	r26, 0x01	; 1
     60a:	8c 91       	ld	r24, X
     60c:	81 83       	std	Z+1, r24	; 0x01
     60e:	08 95       	ret

00000610 <joystick>:
    }
}

void joystick(void) 
{
    jstk_mask = jstk_readMask();            // pick LED's
     610:	a9 df       	rcall	.-174    	; 0x564 <jstk_readMask>
     612:	80 93 c4 23 	sts	0x23C4, r24	; 0x8023c4 <jstk_mask>
    jstk_testMode = PORTB.IN;               // checks switch for testing mode
     616:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     61a:	90 93 c5 23 	sts	0x23C5, r25	; 0x8023c5 <jstk_testMode>

    if ((jstk_testMode & PIN4_bm) == 0) {   // test mode
     61e:	90 91 c5 23 	lds	r25, 0x23C5	; 0x8023c5 <jstk_testMode>
     622:	94 fd       	sbrc	r25, 4
     624:	07 c0       	rjmp	.+14     	; 0x634 <joystick+0x24>
        if (jstk_mask) {
     626:	88 23       	and	r24, r24
            led_allOff();
     628:	31 f0       	breq	.+12     	; 0x636 <joystick+0x26>
     62a:	9f d1       	rcall	.+830    	; 0x96a <led_allOff>
            led_on(jstk_mask);
     62c:	80 91 c4 23 	lds	r24, 0x23C4	; 0x8023c4 <jstk_mask>
     630:	a2 c1       	rjmp	.+836    	; 0x976 <led_on>
        }
    } else {                                // normal mode
        // led_allOff();                       // for testing
        jstk_usbTask();                     // send to USB
     632:	08 95       	ret
     634:	ba cf       	rjmp	.-140    	; 0x5aa <jstk_usbTask>
     636:	08 95       	ret

00000638 <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     638:	10 92 ad 21 	sts	0x21AD, r1	; 0x8021ad <kpd_keyPressed>
     63c:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <kpd_currState>
     640:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <kpd_prevState>
     644:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <kpd_exitTestMode>
     648:	10 92 ae 21 	sts	0x21AE, r1	; 0x8021ae <kpd_rowVal>
     64c:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <kpd_code>
     650:	e4 eb       	ldi	r30, 0xB4	; 180
     652:	f1 e2       	ldi	r31, 0x21	; 33
     654:	81 e6       	ldi	r24, 0x61	; 97
     656:	80 83       	st	Z, r24
     658:	80 e6       	ldi	r24, 0x60	; 96
     65a:	81 83       	std	Z+1, r24	; 0x01
     65c:	12 82       	std	Z+2, r1	; 0x02
     65e:	13 82       	std	Z+3, r1	; 0x03
     660:	8f e5       	ldi	r24, 0x5F	; 95
     662:	84 83       	std	Z+4, r24	; 0x04
     664:	8e e5       	ldi	r24, 0x5E	; 94
     666:	85 83       	std	Z+5, r24	; 0x05
     668:	16 82       	std	Z+6, r1	; 0x06
     66a:	17 82       	std	Z+7, r1	; 0x07
     66c:	8d e5       	ldi	r24, 0x5D	; 93
     66e:	80 87       	std	Z+8, r24	; 0x08
     670:	11 86       	std	Z+9, r1	; 0x09
     672:	12 86       	std	Z+10, r1	; 0x0a
     674:	13 86       	std	Z+11, r1	; 0x0b
     676:	14 86       	std	Z+12, r1	; 0x0c
     678:	15 86       	std	Z+13, r1	; 0x0d
     67a:	89 e5       	ldi	r24, 0x59	; 89
     67c:	86 87       	std	Z+14, r24	; 0x0e
     67e:	8b e5       	ldi	r24, 0x5B	; 91
     680:	87 87       	std	Z+15, r24	; 0x0f
     682:	10 8a       	std	Z+16, r1	; 0x10
     684:	11 8a       	std	Z+17, r1	; 0x11
     686:	8a e5       	ldi	r24, 0x5A	; 90
     688:	82 8b       	std	Z+18, r24	; 0x12
     68a:	8c e5       	ldi	r24, 0x5C	; 92
     68c:	83 8b       	std	Z+19, r24	; 0x13
     68e:	ef ea       	ldi	r30, 0xAF	; 175
     690:	f1 e2       	ldi	r31, 0x21	; 33
     692:	8e e0       	ldi	r24, 0x0E	; 14
     694:	80 83       	st	Z, r24
     696:	8d e0       	ldi	r24, 0x0D	; 13
     698:	81 83       	std	Z+1, r24	; 0x01
     69a:	8b e0       	ldi	r24, 0x0B	; 11
     69c:	82 83       	std	Z+2, r24	; 0x02
     69e:	87 e0       	ldi	r24, 0x07	; 7
     6a0:	83 83       	std	Z+3, r24	; 0x03
     6a2:	8f ef       	ldi	r24, 0xFF	; 255
     6a4:	84 83       	std	Z+4, r24	; 0x04
     6a6:	08 95       	ret

000006a8 <keypad_poll>:
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	90 91 a5 21 	lds	r25, 0x21A5	; 0x8021a5 <prevRowMask.5331>
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	15 e0       	ldi	r17, 0x05	; 5
     6ba:	74 e0       	ldi	r23, 0x04	; 4
     6bc:	e0 ea       	ldi	r30, 0xA0	; 160
     6be:	f6 e0       	ldi	r31, 0x06	; 6
     6c0:	a0 e2       	ldi	r26, 0x20	; 32
     6c2:	b6 e0       	ldi	r27, 0x06	; 6
     6c4:	00 e8       	ldi	r16, 0x80	; 128
     6c6:	62 2f       	mov	r22, r18
     6c8:	e9 01       	movw	r28, r18
     6ca:	c1 55       	subi	r28, 0x51	; 81
     6cc:	de 4d       	sbci	r29, 0xDE	; 222
     6ce:	88 81       	ld	r24, Y
     6d0:	84 83       	std	Z+4, r24	; 0x04
     6d2:	24 30       	cpi	r18, 0x04	; 4
     6d4:	21 f4       	brne	.+8      	; 0x6de <keypad_poll+0x36>
     6d6:	16 96       	adiw	r26, 0x06	; 6
     6d8:	0c 93       	st	X, r16
     6da:	16 97       	sbiw	r26, 0x06	; 6
     6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <keypad_poll+0x3c>
     6de:	15 96       	adiw	r26, 0x05	; 5
     6e0:	0c 93       	st	X, r16
     6e2:	15 97       	sbiw	r26, 0x05	; 5
     6e4:	80 85       	ldd	r24, Z+8	; 0x08
     6e6:	80 95       	com	r24
     6e8:	80 7f       	andi	r24, 0xF0	; 240
     6ea:	48 2f       	mov	r20, r24
     6ec:	50 e0       	ldi	r21, 0x00	; 0
     6ee:	ea 01       	movw	r28, r20
     6f0:	21 97       	sbiw	r28, 0x01	; 1
     6f2:	4c 23       	and	r20, r28
     6f4:	5d 23       	and	r21, r29
     6f6:	45 2b       	or	r20, r21
     6f8:	41 f0       	breq	.+16     	; 0x70a <keypad_poll+0x62>
     6fa:	90 95       	com	r25
     6fc:	98 23       	and	r25, r24
     6fe:	09 f4       	brne	.+2      	; 0x702 <keypad_poll+0x5a>
     700:	98 2f       	mov	r25, r24
     702:	49 2f       	mov	r20, r25
     704:	41 95       	neg	r20
     706:	94 23       	and	r25, r20
     708:	01 c0       	rjmp	.+2      	; 0x70c <keypad_poll+0x64>
     70a:	98 2f       	mov	r25, r24
     70c:	90 32       	cpi	r25, 0x20	; 32
     70e:	51 f0       	breq	.+20     	; 0x724 <keypad_poll+0x7c>
     710:	18 f4       	brcc	.+6      	; 0x718 <keypad_poll+0x70>
     712:	90 31       	cpi	r25, 0x10	; 16
     714:	d9 f1       	breq	.+118    	; 0x78c <keypad_poll+0xe4>
     716:	0a c0       	rjmp	.+20     	; 0x72c <keypad_poll+0x84>
     718:	90 34       	cpi	r25, 0x40	; 64
     71a:	d1 f1       	breq	.+116    	; 0x790 <keypad_poll+0xe8>
     71c:	90 38       	cpi	r25, 0x80	; 128
     71e:	31 f4       	brne	.+12     	; 0x72c <keypad_poll+0x84>
     720:	73 e0       	ldi	r23, 0x03	; 3
     722:	37 c0       	rjmp	.+110    	; 0x792 <keypad_poll+0xea>
     724:	99 23       	and	r25, r25
     726:	11 f0       	breq	.+4      	; 0x72c <keypad_poll+0x84>
     728:	16 2f       	mov	r17, r22
     72a:	71 e0       	ldi	r23, 0x01	; 1
     72c:	2f 5f       	subi	r18, 0xFF	; 255
     72e:	3f 4f       	sbci	r19, 0xFF	; 255
     730:	98 2f       	mov	r25, r24
     732:	25 30       	cpi	r18, 0x05	; 5
     734:	31 05       	cpc	r19, r1
     736:	39 f6       	brne	.-114    	; 0x6c6 <keypad_poll+0x1e>
     738:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <prevRowMask.5331>
     73c:	80 e8       	ldi	r24, 0x80	; 128
     73e:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     742:	74 30       	cpi	r23, 0x04	; 4
     744:	e0 f4       	brcc	.+56     	; 0x77e <keypad_poll+0xd6>
     746:	e1 2f       	mov	r30, r17
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	ee 0f       	add	r30, r30
     74c:	ff 1f       	adc	r31, r31
     74e:	ee 0f       	add	r30, r30
     750:	ff 1f       	adc	r31, r31
     752:	ec 54       	subi	r30, 0x4C	; 76
     754:	fe 4d       	sbci	r31, 0xDE	; 222
     756:	e7 0f       	add	r30, r23
     758:	f1 1d       	adc	r31, r1
     75a:	80 81       	ld	r24, Z
     75c:	90 91 ad 21 	lds	r25, 0x21AD	; 0x8021ad <kpd_keyPressed>
     760:	91 11       	cpse	r25, r1
     762:	06 c0       	rjmp	.+12     	; 0x770 <keypad_poll+0xc8>
     764:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <kpd_code>
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	80 93 ad 21 	sts	0x21AD, r24	; 0x8021ad <kpd_keyPressed>
     76e:	13 c0       	rjmp	.+38     	; 0x796 <keypad_poll+0xee>
     770:	90 91 ac 21 	lds	r25, 0x21AC	; 0x8021ac <kpd_code>
     774:	89 17       	cp	r24, r25
     776:	79 f0       	breq	.+30     	; 0x796 <keypad_poll+0xee>
     778:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <kpd_code>
     77c:	0c c0       	rjmp	.+24     	; 0x796 <keypad_poll+0xee>
     77e:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <kpd_keyPressed>
     782:	81 30       	cpi	r24, 0x01	; 1
     784:	41 f4       	brne	.+16     	; 0x796 <keypad_poll+0xee>
     786:	10 92 ad 21 	sts	0x21AD, r1	; 0x8021ad <kpd_keyPressed>
     78a:	05 c0       	rjmp	.+10     	; 0x796 <keypad_poll+0xee>
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	01 c0       	rjmp	.+2      	; 0x792 <keypad_poll+0xea>
     790:	72 e0       	ldi	r23, 0x02	; 2
     792:	16 2f       	mov	r17, r22
     794:	cb cf       	rjmp	.-106    	; 0x72c <keypad_poll+0x84>
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	08 95       	ret

000007a0 <keypad_getState>:
     7a0:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <kpd_keyPressed>
     7a4:	08 95       	ret

000007a6 <keypad_report>:

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     7a6:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     7aa:	80 93 c6 23 	sts	0x23C6, r24	; 0x8023c6 <kpd_testMode>
	}
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     7ae:	80 91 ad 21 	lds	r24, 0x21AD	; 0x8021ad <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     7b2:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     7b6:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_codeOut = keypad_getCode();    // current code to be outputed
     7ba:	80 93 a9 21 	sts	0x21A9, r24	; 0x8021a9 <kpd_codeOut>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     7be:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <kpd_testMode>
     7c2:	84 fd       	sbrc	r24, 4
     7c4:	29 c0       	rjmp	.+82     	; 0x818 <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     7c6:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <kpd_currState>
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	09 f0       	breq	.+2      	; 0x7d0 <keypad_report+0x2a>
     7ce:	54 c0       	rjmp	.+168    	; 0x878 <keypad_report+0xd2>
     7d0:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <kpd_prevState>
     7d4:	81 11       	cpse	r24, r1
     7d6:	50 c0       	rjmp	.+160    	; 0x878 <keypad_report+0xd2>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
     7d8:	e0 91 a9 21 	lds	r30, 0x21A9	; 0x8021a9 <kpd_codeOut>
     7dc:	8e 2f       	mov	r24, r30
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	fc 01       	movw	r30, r24
     7e2:	e9 55       	subi	r30, 0x59	; 89
     7e4:	f1 09       	sbc	r31, r1
     7e6:	e9 30       	cpi	r30, 0x09	; 9
     7e8:	f1 05       	cpc	r31, r1
     7ea:	90 f4       	brcc	.+36     	; 0x810 <keypad_report+0x6a>
     7ec:	88 27       	eor	r24, r24
     7ee:	e2 50       	subi	r30, 0x02	; 2
     7f0:	ff 4f       	sbci	r31, 0xFF	; 255
     7f2:	8f 4f       	sbci	r24, 0xFF	; 255
     7f4:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     7f8:	84 e0       	ldi	r24, 0x04	; 4
     7fa:	09 c0       	rjmp	.+18     	; 0x80e <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     7fc:	80 e1       	ldi	r24, 0x10	; 16
     7fe:	07 c0       	rjmp	.+14     	; 0x80e <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     800:	80 e2       	ldi	r24, 0x20	; 32
     802:	05 c0       	rjmp	.+10     	; 0x80e <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     804:	80 e4       	ldi	r24, 0x40	; 64
     806:	03 c0       	rjmp	.+6      	; 0x80e <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     808:	80 e8       	ldi	r24, 0x80	; 128
     80a:	01 c0       	rjmp	.+2      	; 0x80e <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     80c:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     80e:	bd d0       	rcall	.+378    	; 0x98a <led_toggle>
			kpd_exitTestMode = 1;	// flag for exiting test mode
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	80 93 a8 21 	sts	0x21A8, r24	; 0x8021a8 <kpd_exitTestMode>
     816:	30 c0       	rjmp	.+96     	; 0x878 <keypad_report+0xd2>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     818:	90 91 ac 21 	lds	r25, 0x21AC	; 0x8021ac <kpd_code>
	else // normal mode
	{
		static uint8_t kpd_prevCode = 0;
		uint8_t currCode = keypad_getCode();

		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
     81c:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <kpd_currState>
     820:	81 30       	cpi	r24, 0x01	; 1
     822:	61 f4       	brne	.+24     	; 0x83c <keypad_report+0x96>
     824:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <kpd_prevState>
     828:	81 11       	cpse	r24, r1
     82a:	08 c0       	rjmp	.+16     	; 0x83c <keypad_report+0x96>
			kpd_prevCode = currCode;
     82c:	90 93 a4 21 	sts	0x21A4, r25	; 0x8021a4 <kpd_prevCode.5372>

			keyStatus2Report = KEYPAD_PRESSED;
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <keyStatus2Report>
			key2Report = currCode;
     836:	90 93 a6 21 	sts	0x21A6, r25	; 0x8021a6 <key2Report>
     83a:	1e c0       	rjmp	.+60     	; 0x878 <keypad_report+0xd2>
		} else if (kpd_currState == KEYPAD_PRESSED &&
     83c:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <kpd_currState>
     840:	81 30       	cpi	r24, 0x01	; 1
     842:	61 f4       	brne	.+24     	; 0x85c <keypad_report+0xb6>
     844:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_prevCode.5372>
     848:	98 17       	cp	r25, r24
     84a:	41 f0       	breq	.+16     	; 0x85c <keypad_report+0xb6>
			       currCode != kpd_prevCode) {
			kpd_prevCode = currCode;
     84c:	90 93 a4 21 	sts	0x21A4, r25	; 0x8021a4 <kpd_prevCode.5372>
			
			keyStatus2Report = KEYPAD_PRESSED;
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <keyStatus2Report>
			key2Report = currCode;
     856:	90 93 a6 21 	sts	0x21A6, r25	; 0x8021a6 <key2Report>
     85a:	0e c0       	rjmp	.+28     	; 0x878 <keypad_report+0xd2>
		} else if (kpd_currState == KEYPAD_RELEASED &&
     85c:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <kpd_currState>
     860:	81 11       	cpse	r24, r1
     862:	0a c0       	rjmp	.+20     	; 0x878 <keypad_report+0xd2>
			       kpd_prevState == KEYPAD_PRESSED) {
     864:	80 91 ab 21 	lds	r24, 0x21AB	; 0x8021ab <kpd_prevState>
			       currCode != kpd_prevCode) {
			kpd_prevCode = currCode;
			
			keyStatus2Report = KEYPAD_PRESSED;
			key2Report = currCode;
		} else if (kpd_currState == KEYPAD_RELEASED &&
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	31 f4       	brne	.+12     	; 0x878 <keypad_report+0xd2>
			       kpd_prevState == KEYPAD_PRESSED) {
			keyStatus2Report = KEYPAD_RELEASED;
     86c:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <keyStatus2Report>
			key2Report = kpd_prevCode;
     870:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_prevCode.5372>
     874:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <key2Report>
		}
	}
	
	// clears LEDs when exiting test mode
	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     878:	80 91 c6 23 	lds	r24, 0x23C6	; 0x8023c6 <kpd_testMode>
     87c:	84 ff       	sbrs	r24, 4
     87e:	07 c0       	rjmp	.+14     	; 0x88e <keypad_report+0xe8>
     880:	80 91 a8 21 	lds	r24, 0x21A8	; 0x8021a8 <kpd_exitTestMode>
     884:	81 30       	cpi	r24, 0x01	; 1
		led_allOff();
     886:	19 f4       	brne	.+6      	; 0x88e <keypad_report+0xe8>
     888:	70 d0       	rcall	.+224    	; 0x96a <led_allOff>
		kpd_exitTestMode = 0;
     88a:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <kpd_exitTestMode>
	}
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
     88e:	80 91 aa 21 	lds	r24, 0x21AA	; 0x8021aa <kpd_currState>
     892:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <kpd_prevState>
}
     896:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     898:	82 e0       	ldi	r24, 0x02	; 2
     89a:	b9 cf       	rjmp	.-142    	; 0x80e <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     89c:	88 e0       	ldi	r24, 0x08	; 8
     89e:	b7 cf       	rjmp	.-146    	; 0x80e <keypad_report+0x68>

000008a0 <keypad>:
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
}


void keypad(void) {
     8a0:	cf 93       	push	r28
	keypad_poll();
     8a2:	02 df       	rcall	.-508    	; 0x6a8 <keypad_poll>
	keypad_report();
     8a4:	80 df       	rcall	.-256    	; 0x7a6 <keypad_report>
     8a6:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <keyStatus2Report>

	static bool key_was_down = false;
	static uint8_t active_key = 0;

	bool key_down = keyStatus2Report;
     8aa:	c1 e0       	ldi	r28, 0x01	; 1
     8ac:	81 11       	cpse	r24, r1
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <keypad+0x12>
     8b0:	c0 e0       	ldi	r28, 0x00	; 0
     8b2:	88 23       	and	r24, r24
	uint8_t key_val = key2Report;

	if (key_down) {
     8b4:	81 f0       	breq	.+32     	; 0x8d6 <keypad+0x36>
     8b6:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <key2Report>

	static bool key_was_down = false;
	static uint8_t active_key = 0;

	bool key_down = keyStatus2Report;
	uint8_t key_val = key2Report;
     8ba:	90 91 a3 21 	lds	r25, 0x21A3	; 0x8021a3 <key_was_down.5377>

	if (key_down) {
		if (!key_was_down)
     8be:	91 11       	cpse	r25, r1
     8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <keypad+0x28>
     8c2:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <active_key.5378>
			active_key = key_val;
     8c6:	15 c0       	rjmp	.+42     	; 0x8f2 <keypad+0x52>
     8c8:	90 91 a2 21 	lds	r25, 0x21A2	; 0x8021a2 <active_key.5378>
		else if (key_val != active_key)
     8cc:	89 17       	cp	r24, r25
     8ce:	89 f0       	breq	.+34     	; 0x8f2 <keypad+0x52>
     8d0:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <active_key.5378>
			active_key = key_val;
     8d4:	0e c0       	rjmp	.+28     	; 0x8f2 <keypad+0x52>
     8d6:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <key_was_down.5377>
	} else if (key_was_down) {
     8da:	88 23       	and	r24, r24
     8dc:	51 f0       	breq	.+20     	; 0x8f2 <keypad+0x52>
     8de:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <active_key.5378>
		if (active_key) {
     8e2:	88 23       	and	r24, r24
     8e4:	21 f0       	breq	.+8      	; 0x8ee <keypad+0x4e>
			udi_hid_kbd_down(active_key);
     8e6:	22 d5       	rcall	.+2628   	; 0x132c <udi_hid_kbd_down>
			udi_hid_kbd_up(active_key);
     8e8:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <active_key.5378>
     8ec:	e3 d4       	rcall	.+2502   	; 0x12b4 <udi_hid_kbd_up>
     8ee:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <active_key.5378>
		}
		active_key = 0;
     8f2:	c0 93 a3 21 	sts	0x21A3, r28	; 0x8021a3 <key_was_down.5377>
	}
	key_was_down = key_down;
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <led_updateState>:
     8fa:	ea ec       	ldi	r30, 0xCA	; 202
void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     8fc:	f1 e2       	ldi	r31, 0x21	; 33
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	ac 01       	movw	r20, r24
     906:	02 2e       	mov	r0, r18
     908:	02 c0       	rjmp	.+4      	; 0x90e <led_updateState+0x14>
     90a:	55 95       	asr	r21
     90c:	47 95       	ror	r20
     90e:	0a 94       	dec	r0
     910:	e2 f7       	brpl	.-8      	; 0x90a <led_updateState+0x10>
     912:	40 fd       	sbrc	r20, 0
     914:	60 83       	st	Z, r22
     916:	2f 5f       	subi	r18, 0xFF	; 255
     918:	3f 4f       	sbci	r19, 0xFF	; 255
     91a:	31 96       	adiw	r30, 0x01	; 1
     91c:	28 30       	cpi	r18, 0x08	; 8
     91e:	31 05       	cpc	r19, r1
     920:	89 f7       	brne	.-30     	; 0x904 <led_updateState+0xa>
     922:	08 95       	ret

00000924 <userActivity>:
     924:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     928:	80 93 d2 21 	sts	0x21D2, r24	; 0x8021d2 <testMode>
     92c:	bd de       	rcall	.-646    	; 0x6a8 <keypad_poll>
     92e:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <testMode>
     932:	84 ff       	sbrs	r24, 4
     934:	0a c0       	rjmp	.+20     	; 0x94a <userActivity+0x26>
     936:	34 df       	rcall	.-408    	; 0x7a0 <keypad_getState>
     938:	81 30       	cpi	r24, 0x01	; 1
     93a:	49 f0       	breq	.+18     	; 0x94e <userActivity+0x2a>
     93c:	13 de       	rcall	.-986    	; 0x564 <jstk_readMask>
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	81 11       	cpse	r24, r1
     942:	01 c0       	rjmp	.+2      	; 0x946 <userActivity+0x22>
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	89 2f       	mov	r24, r25
     948:	03 c0       	rjmp	.+6      	; 0x950 <userActivity+0x2c>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	01 c0       	rjmp	.+2      	; 0x950 <userActivity+0x2c>
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	81 70       	andi	r24, 0x01	; 1
     952:	08 95       	ret

00000954 <led_init>:
     954:	e0 e0       	ldi	r30, 0x00	; 0
     956:	f6 e0       	ldi	r31, 0x06	; 6
     958:	8f ef       	ldi	r24, 0xFF	; 255
     95a:	81 83       	std	Z+1, r24	; 0x01
     95c:	85 83       	std	Z+5, r24	; 0x05
     95e:	e0 e2       	ldi	r30, 0x20	; 32
     960:	f6 e0       	ldi	r31, 0x06	; 6
     962:	80 e4       	ldi	r24, 0x40	; 64
     964:	81 83       	std	Z+1, r24	; 0x01
     966:	86 83       	std	Z+6, r24	; 0x06
     968:	08 95       	ret

0000096a <led_allOff>:
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	c3 cf       	rjmp	.-122    	; 0x8fa <led_updateState>
     974:	08 95       	ret

00000976 <led_on>:
     976:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	be cf       	rjmp	.-132    	; 0x8fa <led_updateState>
     97e:	08 95       	ret

00000980 <led_off>:
     980:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     984:	60 e0       	ldi	r22, 0x00	; 0
     986:	b9 cf       	rjmp	.-142    	; 0x8fa <led_updateState>
     988:	08 95       	ret

0000098a <led_toggle>:
     98a:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     98e:	ea ec       	ldi	r30, 0xCA	; 202
     990:	f1 e2       	ldi	r31, 0x21	; 33
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	68 2f       	mov	r22, r24
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	ab 01       	movw	r20, r22
     99e:	02 2e       	mov	r0, r18
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <led_toggle+0x1c>
     9a2:	55 95       	asr	r21
     9a4:	47 95       	ror	r20
     9a6:	0a 94       	dec	r0
     9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <led_toggle+0x18>
     9aa:	40 ff       	sbrs	r20, 0
     9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <led_toggle+0x2a>
     9ae:	90 81       	ld	r25, Z
     9b0:	98 27       	eor	r25, r24
     9b2:	90 83       	st	Z, r25
     9b4:	2f 5f       	subi	r18, 0xFF	; 255
     9b6:	3f 4f       	sbci	r19, 0xFF	; 255
     9b8:	31 96       	adiw	r30, 0x01	; 1
     9ba:	28 30       	cpi	r18, 0x08	; 8
     9bc:	31 05       	cpc	r19, r1
     9be:	71 f7       	brne	.-36     	; 0x99c <led_toggle+0x12>
     9c0:	08 95       	ret

000009c2 <led_setState>:
     9c2:	e0 e0       	ldi	r30, 0x00	; 0
     9c4:	f6 e0       	ldi	r31, 0x06	; 6
     9c6:	9f ef       	ldi	r25, 0xFF	; 255
     9c8:	95 83       	std	Z+5, r25	; 0x05
     9ca:	86 83       	std	Z+6, r24	; 0x06
     9cc:	ea ec       	ldi	r30, 0xCA	; 202
     9ce:	f1 e2       	ldi	r31, 0x21	; 33
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	ac 01       	movw	r20, r24
     9d8:	02 2e       	mov	r0, r18
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <led_setState+0x1e>
     9dc:	55 95       	asr	r21
     9de:	47 95       	ror	r20
     9e0:	0a 94       	dec	r0
     9e2:	e2 f7       	brpl	.-8      	; 0x9dc <led_setState+0x1a>
     9e4:	41 70       	andi	r20, 0x01	; 1
     9e6:	41 93       	st	Z+, r20
     9e8:	2f 5f       	subi	r18, 0xFF	; 255
     9ea:	3f 4f       	sbci	r19, 0xFF	; 255
     9ec:	28 30       	cpi	r18, 0x08	; 8
     9ee:	31 05       	cpc	r19, r1
     9f0:	91 f7       	brne	.-28     	; 0x9d6 <led_setState+0x14>
     9f2:	08 95       	ret

000009f4 <led_getMap>:
     9f4:	ea ec       	ldi	r30, 0xCA	; 202
     9f6:	f1 e2       	ldi	r31, 0x21	; 33
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	61 e0       	ldi	r22, 0x01	; 1
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	91 91       	ld	r25, Z+
     a04:	99 23       	and	r25, r25
     a06:	41 f0       	breq	.+16     	; 0xa18 <led_getMap+0x24>
     a08:	ab 01       	movw	r20, r22
     a0a:	02 2e       	mov	r0, r18
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <led_getMap+0x1e>
     a0e:	44 0f       	add	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	0a 94       	dec	r0
     a14:	e2 f7       	brpl	.-8      	; 0xa0e <led_getMap+0x1a>
     a16:	84 2b       	or	r24, r20
     a18:	2f 5f       	subi	r18, 0xFF	; 255
     a1a:	3f 4f       	sbci	r19, 0xFF	; 255
     a1c:	28 30       	cpi	r18, 0x08	; 8
     a1e:	31 05       	cpc	r19, r1
     a20:	81 f7       	brne	.-32     	; 0xa02 <led_getMap+0xe>
     a22:	08 95       	ret

00000a24 <led_usbTask>:
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	1f 92       	push	r1
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	e2 df       	rcall	.-60     	; 0x9f4 <led_getMap>
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	90 91 c9 21 	lds	r25, 0x21C9	; 0x8021c9 <led_prevMap>
     a36:	89 17       	cp	r24, r25
     a38:	41 f0       	breq	.+16     	; 0xa4a <led_usbTask+0x26>
     a3a:	ce 01       	movw	r24, r28
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	74 dc       	rcall	.-1816   	; 0x328 <udi_hid_led_send_report_in>
     a40:	88 23       	and	r24, r24
     a42:	19 f0       	breq	.+6      	; 0xa4a <led_usbTask+0x26>
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	80 93 c9 21 	sts	0x21C9, r24	; 0x8021c9 <led_prevMap>
     a4a:	0f 90       	pop	r0
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <testIndicator>:
}

void testIndicator(void) { // blink status LED when in test mode
    sof_ms++;
     a52:	80 91 d3 21 	lds	r24, 0x21D3	; 0x8021d3 <sof_ms>
     a56:	90 91 d4 21 	lds	r25, 0x21D4	; 0x8021d4 <sof_ms+0x1>
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	80 93 d3 21 	sts	0x21D3, r24	; 0x8021d3 <sof_ms>
     a60:	90 93 d4 21 	sts	0x21D4, r25	; 0x8021d4 <sof_ms+0x1>

    if ((PORTB.IN & PIN4_bm) == 0) {
     a64:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     a68:	84 fd       	sbrc	r24, 4
     a6a:	0f c0       	rjmp	.+30     	; 0xa8a <testIndicator+0x38>
        if (sof_ms >= 500) {
     a6c:	80 91 d3 21 	lds	r24, 0x21D3	; 0x8021d3 <sof_ms>
     a70:	90 91 d4 21 	lds	r25, 0x21D4	; 0x8021d4 <sof_ms+0x1>
     a74:	84 3f       	cpi	r24, 0xF4	; 244
     a76:	91 40       	sbci	r25, 0x01	; 1
     a78:	78 f0       	brcs	.+30     	; 0xa98 <testIndicator+0x46>
void led_statusOff(void) { // status LED off
    STATUS_LED_PORT.OUTSET = LEDS_PIN;
}

void led_statusToggle(void) { // toggle status LED
    STATUS_LED_PORT.OUTTGL = LEDS_PIN;
     a7a:	80 e4       	ldi	r24, 0x40	; 64
     a7c:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x7be627>
    sof_ms++;

    if ((PORTB.IN & PIN4_bm) == 0) {
        if (sof_ms >= 500) {
            led_statusToggle();
            sof_ms = 0;
     a80:	10 92 d3 21 	sts	0x21D3, r1	; 0x8021d3 <sof_ms>
     a84:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <sof_ms+0x1>
     a88:	08 95       	ret
    }
}

/* ----------------------------- Status LED ----------------------------- */
void led_statusOn(void) { // status LED on
    STATUS_LED_PORT.OUTCLR = LEDS_PIN;
     a8a:	80 e4       	ldi	r24, 0x40	; 64
     a8c:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7be626>
            led_statusToggle();
            sof_ms = 0;
        }
    } else {
        led_statusOn();
        sof_ms = 0;
     a90:	10 92 d3 21 	sts	0x21D3, r1	; 0x8021d3 <sof_ms>
     a94:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <sof_ms+0x1>
     a98:	08 95       	ret

00000a9a <startupSequence>:
            (keypad_getState()   == KEYPAD_PRESSED) ||
            (jstk_readMask()     != 0);
}

void startupSequence(uint8_t sequence) // startup LED animation
{
     a9a:	6f 92       	push	r6
     a9c:	7f 92       	push	r7
     a9e:	8f 92       	push	r8
     aa0:	9f 92       	push	r9
     aa2:	af 92       	push	r10
     aa4:	bf 92       	push	r11
     aa6:	cf 92       	push	r12
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	28 97       	sbiw	r28, 0x08	; 8
     abc:	cd bf       	out	0x3d, r28	; 61
     abe:	de bf       	out	0x3e, r29	; 62
    const uint8_t seq[8] = {
     ac0:	98 e0       	ldi	r25, 0x08	; 8
     ac2:	e4 e8       	ldi	r30, 0x84	; 132
     ac4:	f1 e2       	ldi	r31, 0x21	; 33
     ac6:	de 01       	movw	r26, r28
     ac8:	11 96       	adiw	r26, 0x01	; 1
     aca:	01 90       	ld	r0, Z+
     acc:	0d 92       	st	X+, r0
     ace:	9a 95       	dec	r25
     ad0:	e1 f7       	brne	.-8      	; 0xaca <startupSequence+0x30>
        LED7_PIN,
        LED8_PIN
    };
    static volatile bool user_active = false;

    switch (sequence) {
     ad2:	83 30       	cpi	r24, 0x03	; 3
     ad4:	09 f4       	brne	.+2      	; 0xad8 <startupSequence+0x3e>
     ad6:	0c c1       	rjmp	.+536    	; 0xcf0 <startupSequence+0x256>
     ad8:	38 f4       	brcc	.+14     	; 0xae8 <startupSequence+0x4e>
     ada:	81 30       	cpi	r24, 0x01	; 1
     adc:	09 f4       	brne	.+2      	; 0xae0 <startupSequence+0x46>
     ade:	42 c0       	rjmp	.+132    	; 0xb64 <startupSequence+0xca>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	09 f4       	brne	.+2      	; 0xae6 <startupSequence+0x4c>
     ae4:	a5 c0       	rjmp	.+330    	; 0xc30 <startupSequence+0x196>
     ae6:	31 c2       	rjmp	.+1122   	; 0xf4a <startupSequence+0x4b0>
     ae8:	84 30       	cpi	r24, 0x04	; 4
     aea:	09 f4       	brne	.+2      	; 0xaee <startupSequence+0x54>
     aec:	61 c1       	rjmp	.+706    	; 0xdb0 <startupSequence+0x316>
     aee:	85 30       	cpi	r24, 0x05	; 5
     af0:	09 f4       	brne	.+2      	; 0xaf4 <startupSequence+0x5a>
     af2:	ba c1       	rjmp	.+884    	; 0xe68 <startupSequence+0x3ce>
     af4:	2a c2       	rjmp	.+1108   	; 0xf4a <startupSequence+0x4b0>
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
     af6:	f8 01       	movw	r30, r16
     af8:	f1 90       	ld	r15, Z+
     afa:	8f 01       	movw	r16, r30
     afc:	8f 2d       	mov	r24, r15
     afe:	3b df       	rcall	.-394    	; 0x976 <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b00:	ff e0       	ldi	r31, 0x0F	; 15
     b02:	28 e9       	ldi	r18, 0x98	; 152
     b04:	82 e0       	ldi	r24, 0x02	; 2
     b06:	f1 50       	subi	r31, 0x01	; 1
     b08:	20 40       	sbci	r18, 0x00	; 0
     b0a:	80 40       	sbci	r24, 0x00	; 0
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <startupSequence+0x6c>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <startupSequence+0x76>
     b10:	00 00       	nop
                    _delay_ms(850);
                    led_off(seq[i]);
     b12:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     b14:	35 df       	rcall	.-406    	; 0x980 <led_off>
     b16:	06 df       	rcall	.-500    	; 0x924 <userActivity>
     b18:	80 93 c8 21 	sts	0x21C8, r24	; 0x8021c8 <user_active.5529>

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
     b1c:	a0 16       	cp	r10, r16
     b1e:	b1 06       	cpc	r11, r17
     b20:	09 f4       	brne	.+2      	; 0xb24 <startupSequence+0x8a>
     b22:	b9 c1       	rjmp	.+882    	; 0xe96 <startupSequence+0x3fc>
     b24:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
     b28:	88 23       	and	r24, r24
     b2a:	29 f3       	breq	.-54     	; 0xaf6 <startupSequence+0x5c>
     b2c:	b4 c1       	rjmp	.+872    	; 0xe96 <startupSequence+0x3fc>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
     b2e:	f8 01       	movw	r30, r16
     b30:	f2 90       	ld	r15, -Z
     b32:	8f 01       	movw	r16, r30
     b34:	8f 2d       	mov	r24, r15
     b36:	1f df       	rcall	.-450    	; 0x976 <led_on>
     b38:	ff e0       	ldi	r31, 0x0F	; 15
     b3a:	28 e9       	ldi	r18, 0x98	; 152
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	f1 50       	subi	r31, 0x01	; 1
     b40:	20 40       	sbci	r18, 0x00	; 0
     b42:	80 40       	sbci	r24, 0x00	; 0
     b44:	e1 f7       	brne	.-8      	; 0xb3e <startupSequence+0xa4>
                    _delay_ms(850);
                    led_off(seq[i]);
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <startupSequence+0xae>
     b48:	00 00       	nop
     b4a:	8f 2d       	mov	r24, r15

                    user_active = userActivity();
     b4c:	19 df       	rcall	.-462    	; 0x980 <led_off>
     b4e:	ea de       	rcall	.-556    	; 0x924 <userActivity>
     b50:	80 93 c8 21 	sts	0x21C8, r24	; 0x8021c8 <user_active.5529>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
     b54:	0c 15       	cp	r16, r12
     b56:	1d 05       	cpc	r17, r13
     b58:	61 f0       	breq	.+24     	; 0xb72 <startupSequence+0xd8>
     b5a:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
     b5e:	88 23       	and	r24, r24
     b60:	31 f3       	breq	.-52     	; 0xb2e <startupSequence+0x94>
     b62:	07 c0       	rjmp	.+14     	; 0xb72 <startupSequence+0xd8>
     b64:	5e 01       	movw	r10, r28
     b66:	99 e0       	ldi	r25, 0x09	; 9
     b68:	a9 0e       	add	r10, r25
     b6a:	b1 1c       	adc	r11, r1
     b6c:	fe 01       	movw	r30, r28
     b6e:	31 96       	adiw	r30, 0x01	; 1
     b70:	6f 01       	movw	r12, r30
    static volatile bool user_active = false;

    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
     b72:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
     b76:	81 11       	cpse	r24, r1
     b78:	06 c0       	rjmp	.+12     	; 0xb86 <startupSequence+0xec>
                for (int i = 0; i < 8 && !user_active; i++) {
     b7a:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
     b7e:	88 23       	and	r24, r24
     b80:	09 f4       	brne	.+2      	; 0xb84 <startupSequence+0xea>
     b82:	ce c1       	rjmp	.+924    	; 0xf20 <startupSequence+0x486>
                    led_off(seq[i]);

                    user_active = userActivity();
                }
            }
            led_allOff();
     b84:	88 c1       	rjmp	.+784    	; 0xe96 <startupSequence+0x3fc>
            break;
     b86:	f1 de       	rcall	.-542    	; 0x96a <led_allOff>
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     b88:	e0 c1       	rjmp	.+960    	; 0xf4a <startupSequence+0x4b0>
     b8a:	f8 01       	movw	r30, r16
     b8c:	72 90       	ld	r7, -Z
     b8e:	8f 01       	movw	r16, r30
     b90:	87 2d       	mov	r24, r7
                    led_on(seq[right]);
     b92:	f1 de       	rcall	.-542    	; 0x976 <led_on>
     b94:	f6 01       	movw	r30, r12
     b96:	f1 90       	ld	r15, Z+
     b98:	6f 01       	movw	r12, r30
     b9a:	8f 2d       	mov	r24, r15
     b9c:	ec de       	rcall	.-552    	; 0x976 <led_on>
     b9e:	ff e1       	ldi	r31, 0x1F	; 31
     ba0:	2f eb       	ldi	r18, 0xBF	; 191
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	f1 50       	subi	r31, 0x01	; 1
     ba6:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     ba8:	80 40       	sbci	r24, 0x00	; 0
     baa:	e1 f7       	brne	.-8      	; 0xba4 <startupSequence+0x10a>
                    led_off(seq[right]);
     bac:	00 c0       	rjmp	.+0      	; 0xbae <startupSequence+0x114>
     bae:	00 00       	nop
     bb0:	87 2d       	mov	r24, r7

                    keypad_poll();
     bb2:	e6 de       	rcall	.-564    	; 0x980 <led_off>
     bb4:	8f 2d       	mov	r24, r15
                    if (keypad_getState() == KEYPAD_PRESSED)
     bb6:	e4 de       	rcall	.-568    	; 0x980 <led_off>
     bb8:	77 dd       	rcall	.-1298   	; 0x6a8 <keypad_poll>
     bba:	f2 dd       	rcall	.-1052   	; 0x7a0 <keypad_getState>
     bbc:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     bbe:	11 f4       	brne	.+4      	; 0xbc4 <startupSequence+0x12a>
     bc0:	e0 92 c8 21 	sts	0x21C8, r14	; 0x8021c8 <user_active.5529>
                    if (jstk_readMask() != 0)
     bc4:	cf dc       	rcall	.-1634   	; 0x564 <jstk_readMask>
     bc6:	81 11       	cpse	r24, r1
                        user_active = true;
     bc8:	e0 92 c8 21 	sts	0x21C8, r14	; 0x8021c8 <user_active.5529>
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     bcc:	08 15       	cp	r16, r8
     bce:	19 05       	cpc	r17, r9
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <startupSequence+0x13a>
     bd2:	66 c1       	rjmp	.+716    	; 0xea0 <startupSequence+0x406>
     bd4:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
     bd8:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     bda:	b9 f2       	breq	.-82     	; 0xb8a <startupSequence+0xf0>
     bdc:	61 c1       	rjmp	.+706    	; 0xea0 <startupSequence+0x406>
     bde:	f3 01       	movw	r30, r6
     be0:	d1 90       	ld	r13, Z+
     be2:	3f 01       	movw	r6, r30
     be4:	8d 2d       	mov	r24, r13
                    led_on(seq[right]);
     be6:	c7 de       	rcall	.-626    	; 0x976 <led_on>
     be8:	f8 01       	movw	r30, r16
     bea:	f2 90       	ld	r15, -Z
     bec:	8f 01       	movw	r16, r30
     bee:	8f 2d       	mov	r24, r15
     bf0:	c2 de       	rcall	.-636    	; 0x976 <led_on>
     bf2:	ff e1       	ldi	r31, 0x1F	; 31
     bf4:	2f eb       	ldi	r18, 0xBF	; 191
     bf6:	82 e0       	ldi	r24, 0x02	; 2
     bf8:	f1 50       	subi	r31, 0x01	; 1
     bfa:	20 40       	sbci	r18, 0x00	; 0
                    _delay_ms(900);
                    led_off(seq[left]);
     bfc:	80 40       	sbci	r24, 0x00	; 0
     bfe:	e1 f7       	brne	.-8      	; 0xbf8 <startupSequence+0x15e>
     c00:	00 c0       	rjmp	.+0      	; 0xc02 <startupSequence+0x168>
                    led_off(seq[right]);
     c02:	00 00       	nop
     c04:	8d 2d       	mov	r24, r13
     c06:	bc de       	rcall	.-648    	; 0x980 <led_off>

                    keypad_poll();
     c08:	8f 2d       	mov	r24, r15
     c0a:	ba de       	rcall	.-652    	; 0x980 <led_off>
                    if (keypad_getState() == KEYPAD_PRESSED)
     c0c:	4d dd       	rcall	.-1382   	; 0x6a8 <keypad_poll>
     c0e:	c8 dd       	rcall	.-1136   	; 0x7a0 <keypad_getState>
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	11 f4       	brne	.+4      	; 0xc18 <startupSequence+0x17e>
                        user_active = true;
     c14:	e0 92 c8 21 	sts	0x21C8, r14	; 0x8021c8 <user_active.5529>
                    if (jstk_readMask() != 0)
     c18:	a5 dc       	rcall	.-1718   	; 0x564 <jstk_readMask>
     c1a:	81 11       	cpse	r24, r1
     c1c:	e0 92 c8 21 	sts	0x21C8, r14	; 0x8021c8 <user_active.5529>
                        user_active = true;
     c20:	0a 15       	cp	r16, r10
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     c22:	1b 05       	cpc	r17, r11
     c24:	71 f0       	breq	.+28     	; 0xc42 <startupSequence+0x1a8>
     c26:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
     c2a:	88 23       	and	r24, r24
     c2c:	c1 f2       	breq	.-80     	; 0xbde <startupSequence+0x144>
     c2e:	09 c0       	rjmp	.+18     	; 0xc42 <startupSequence+0x1a8>
     c30:	fe 01       	movw	r30, r28
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	4f 01       	movw	r8, r30

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     c36:	ee 24       	eor	r14, r14
     c38:	e3 94       	inc	r14
     c3a:	5e 01       	movw	r10, r28
     c3c:	f5 e0       	ldi	r31, 0x05	; 5
     c3e:	af 0e       	add	r10, r31
            }
            led_allOff();
            break;
        case 2:
            /* ---------------- out-n-back ----------------- */
            while (!user_active) {
     c40:	b1 1c       	adc	r11, r1
     c42:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
                for (int i = 0; i < 4 && !user_active; i++) {
     c46:	81 11       	cpse	r24, r1
     c48:	0a c0       	rjmp	.+20     	; 0xc5e <startupSequence+0x1c4>
     c4a:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
     c4e:	81 11       	cpse	r24, r1
     c50:	27 c1       	rjmp	.+590    	; 0xea0 <startupSequence+0x406>
     c52:	6e 01       	movw	r12, r28
     c54:	25 e0       	ldi	r18, 0x05	; 5
     c56:	c2 0e       	add	r12, r18
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     c58:	d1 1c       	adc	r13, r1
     c5a:	86 01       	movw	r16, r12
            break;
     c5c:	96 cf       	rjmp	.-212    	; 0xb8a <startupSequence+0xf0>
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     c5e:	85 de       	rcall	.-758    	; 0x96a <led_allOff>
     c60:	74 c1       	rjmp	.+744    	; 0xf4a <startupSequence+0x4b0>
     c62:	f8 01       	movw	r30, r16
     c64:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     c66:	8f 01       	movw	r16, r30
     c68:	86 de       	rcall	.-756    	; 0x976 <led_on>
     c6a:	f7 01       	movw	r30, r14
     c6c:	81 91       	ld	r24, Z+
     c6e:	7f 01       	movw	r14, r30
     c70:	82 de       	rcall	.-764    	; 0x976 <led_on>
     c72:	ff e2       	ldi	r31, 0x2F	; 47
     c74:	27 e5       	ldi	r18, 0x57	; 87
     c76:	85 e0       	ldi	r24, 0x05	; 5
     c78:	f1 50       	subi	r31, 0x01	; 1
     c7a:	20 40       	sbci	r18, 0x00	; 0
     c7c:	80 40       	sbci	r24, 0x00	; 0
     c7e:	e1 f7       	brne	.-8      	; 0xc78 <startupSequence+0x1de>
                    _delay_ms(1750);

                    keypad_poll();
     c80:	00 c0       	rjmp	.+0      	; 0xc82 <startupSequence+0x1e8>
     c82:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     c84:	11 dd       	rcall	.-1502   	; 0x6a8 <keypad_poll>
     c86:	8c dd       	rcall	.-1256   	; 0x7a0 <keypad_getState>
     c88:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     c8a:	11 f4       	brne	.+4      	; 0xc90 <startupSequence+0x1f6>
     c8c:	90 92 c8 21 	sts	0x21C8, r9	; 0x8021c8 <user_active.5529>
                    if (jstk_readMask() != 0)
     c90:	69 dc       	rcall	.-1838   	; 0x564 <jstk_readMask>
     c92:	81 11       	cpse	r24, r1
                        user_active = true;
     c94:	90 92 c8 21 	sts	0x21C8, r9	; 0x8021c8 <user_active.5529>
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     c98:	a0 16       	cp	r10, r16
     c9a:	b1 06       	cpc	r11, r17
     c9c:	09 f4       	brne	.+2      	; 0xca0 <startupSequence+0x206>
     c9e:	0b c1       	rjmp	.+534    	; 0xeb6 <startupSequence+0x41c>
     ca0:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     ca4:	88 23       	and	r24, r24
     ca6:	e9 f2       	breq	.-70     	; 0xc62 <startupSequence+0x1c8>
     ca8:	06 c1       	rjmp	.+524    	; 0xeb6 <startupSequence+0x41c>
     caa:	f7 01       	movw	r30, r14
     cac:	81 91       	ld	r24, Z+
                    led_off(seq[right]);
     cae:	7f 01       	movw	r14, r30
     cb0:	67 de       	rcall	.-818    	; 0x980 <led_off>
     cb2:	f8 01       	movw	r30, r16
     cb4:	82 91       	ld	r24, -Z
     cb6:	8f 01       	movw	r16, r30
     cb8:	63 de       	rcall	.-826    	; 0x980 <led_off>
     cba:	ff e2       	ldi	r31, 0x2F	; 47
     cbc:	27 e5       	ldi	r18, 0x57	; 87
     cbe:	85 e0       	ldi	r24, 0x05	; 5
     cc0:	f1 50       	subi	r31, 0x01	; 1
     cc2:	20 40       	sbci	r18, 0x00	; 0
     cc4:	80 40       	sbci	r24, 0x00	; 0
     cc6:	e1 f7       	brne	.-8      	; 0xcc0 <startupSequence+0x226>
     cc8:	00 c0       	rjmp	.+0      	; 0xcca <startupSequence+0x230>
                    _delay_ms(1750);

                    keypad_poll();
     cca:	00 00       	nop
     ccc:	ed dc       	rcall	.-1574   	; 0x6a8 <keypad_poll>
                    if (keypad_getState() == KEYPAD_PRESSED)
     cce:	68 dd       	rcall	.-1328   	; 0x7a0 <keypad_getState>
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	11 f4       	brne	.+4      	; 0xcd8 <startupSequence+0x23e>
     cd4:	90 92 c8 21 	sts	0x21C8, r9	; 0x8021c8 <user_active.5529>
                        user_active = true;
     cd8:	45 dc       	rcall	.-1910   	; 0x564 <jstk_readMask>
                    if (jstk_readMask() != 0)
     cda:	81 11       	cpse	r24, r1
     cdc:	90 92 c8 21 	sts	0x21C8, r9	; 0x8021c8 <user_active.5529>
                        user_active = true;
     ce0:	c0 16       	cp	r12, r16
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     ce2:	d1 06       	cpc	r13, r17
     ce4:	71 f0       	breq	.+28     	; 0xd02 <startupSequence+0x268>
     ce6:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
     cea:	88 23       	and	r24, r24
     cec:	f1 f2       	breq	.-68     	; 0xcaa <startupSequence+0x210>
     cee:	09 c0       	rjmp	.+18     	; 0xd02 <startupSequence+0x268>
     cf0:	fe 01       	movw	r30, r28
     cf2:	31 96       	adiw	r30, 0x01	; 1

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     cf4:	5f 01       	movw	r10, r30
     cf6:	99 24       	eor	r9, r9
     cf8:	93 94       	inc	r9
     cfa:	6e 01       	movw	r12, r28
     cfc:	f5 e0       	ldi	r31, 0x05	; 5
     cfe:	cf 0e       	add	r12, r31
            }
            led_allOff();
            break;
        case 3:
            /* --------------- grow-n-shrink ---------------- */
            while (!user_active) {
     d00:	d1 1c       	adc	r13, r1
     d02:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
                for (int i = 0; i < 4 && !user_active; i++) {
     d06:	81 11       	cpse	r24, r1
     d08:	0a c0       	rjmp	.+20     	; 0xd1e <startupSequence+0x284>
     d0a:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
     d0e:	81 11       	cpse	r24, r1
     d10:	d2 c0       	rjmp	.+420    	; 0xeb6 <startupSequence+0x41c>
     d12:	7e 01       	movw	r14, r28
     d14:	25 e0       	ldi	r18, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     d16:	e2 0e       	add	r14, r18
     d18:	f1 1c       	adc	r15, r1
            break;
     d1a:	87 01       	movw	r16, r14
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     d1c:	a2 cf       	rjmp	.-188    	; 0xc62 <startupSequence+0x1c8>
     d1e:	25 de       	rcall	.-950    	; 0x96a <led_allOff>
     d20:	14 c1       	rjmp	.+552    	; 0xf4a <startupSequence+0x4b0>
     d22:	f8 01       	movw	r30, r16
     d24:	82 91       	ld	r24, -Z
                    led_on(seq[right]);
     d26:	8f 01       	movw	r16, r30
     d28:	26 de       	rcall	.-948    	; 0x976 <led_on>
     d2a:	f7 01       	movw	r30, r14
     d2c:	81 91       	ld	r24, Z+
     d2e:	7f 01       	movw	r14, r30
     d30:	22 de       	rcall	.-956    	; 0x976 <led_on>
     d32:	ff e2       	ldi	r31, 0x2F	; 47
     d34:	27 e5       	ldi	r18, 0x57	; 87
     d36:	85 e0       	ldi	r24, 0x05	; 5
     d38:	f1 50       	subi	r31, 0x01	; 1
     d3a:	20 40       	sbci	r18, 0x00	; 0
     d3c:	80 40       	sbci	r24, 0x00	; 0
                    _delay_ms(1750);

                    keypad_poll();
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <startupSequence+0x29e>
                    if (keypad_getState() == KEYPAD_PRESSED)
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <startupSequence+0x2a8>
     d42:	00 00       	nop
     d44:	b1 dc       	rcall	.-1694   	; 0x6a8 <keypad_poll>
                        user_active = true;
     d46:	2c dd       	rcall	.-1448   	; 0x7a0 <keypad_getState>
                    if (jstk_readMask() != 0)
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	11 f4       	brne	.+4      	; 0xd50 <startupSequence+0x2b6>
     d4c:	b0 92 c8 21 	sts	0x21C8, r11	; 0x8021c8 <user_active.5529>
                        user_active = true;
     d50:	09 dc       	rcall	.-2030   	; 0x564 <jstk_readMask>
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
                for (int i = 0; i < 4 && !user_active; i++) {
     d52:	81 11       	cpse	r24, r1
     d54:	b0 92 c8 21 	sts	0x21C8, r11	; 0x8021c8 <user_active.5529>
     d58:	0c 15       	cp	r16, r12
     d5a:	1d 05       	cpc	r17, r13
     d5c:	09 f4       	brne	.+2      	; 0xd60 <startupSequence+0x2c6>
     d5e:	b6 c0       	rjmp	.+364    	; 0xecc <startupSequence+0x432>
     d60:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     d64:	88 23       	and	r24, r24
     d66:	e9 f2       	breq	.-70     	; 0xd22 <startupSequence+0x288>
     d68:	b1 c0       	rjmp	.+354    	; 0xecc <startupSequence+0x432>
     d6a:	f8 01       	movw	r30, r16
     d6c:	82 91       	ld	r24, -Z
                    led_off(seq[right]);
     d6e:	8f 01       	movw	r16, r30
     d70:	07 de       	rcall	.-1010   	; 0x980 <led_off>
     d72:	f7 01       	movw	r30, r14
     d74:	81 91       	ld	r24, Z+
     d76:	7f 01       	movw	r14, r30
     d78:	03 de       	rcall	.-1018   	; 0x980 <led_off>
     d7a:	ff e2       	ldi	r31, 0x2F	; 47
     d7c:	27 e5       	ldi	r18, 0x57	; 87
     d7e:	85 e0       	ldi	r24, 0x05	; 5
     d80:	f1 50       	subi	r31, 0x01	; 1
     d82:	20 40       	sbci	r18, 0x00	; 0
     d84:	80 40       	sbci	r24, 0x00	; 0
     d86:	e1 f7       	brne	.-8      	; 0xd80 <startupSequence+0x2e6>
                    _delay_ms(1750);

                    keypad_poll();
     d88:	00 c0       	rjmp	.+0      	; 0xd8a <startupSequence+0x2f0>
     d8a:	00 00       	nop
                    if (keypad_getState() == KEYPAD_PRESSED)
     d8c:	8d dc       	rcall	.-1766   	; 0x6a8 <keypad_poll>
     d8e:	08 dd       	rcall	.-1520   	; 0x7a0 <keypad_getState>
     d90:	81 30       	cpi	r24, 0x01	; 1
                        user_active = true;
     d92:	11 f4       	brne	.+4      	; 0xd98 <startupSequence+0x2fe>
                    if (jstk_readMask() != 0)
     d94:	b0 92 c8 21 	sts	0x21C8, r11	; 0x8021c8 <user_active.5529>
     d98:	e5 db       	rcall	.-2102   	; 0x564 <jstk_readMask>
                        user_active = true;
     d9a:	81 11       	cpse	r24, r1
     d9c:	b0 92 c8 21 	sts	0x21C8, r11	; 0x8021c8 <user_active.5529>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
     da0:	c0 16       	cp	r12, r16
     da2:	d1 06       	cpc	r13, r17
     da4:	51 f0       	breq	.+20     	; 0xdba <startupSequence+0x320>
     da6:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
     daa:	88 23       	and	r24, r24
     dac:	f1 f2       	breq	.-68     	; 0xd6a <startupSequence+0x2d0>
     dae:	05 c0       	rjmp	.+10     	; 0xdba <startupSequence+0x320>

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     db0:	fe 01       	movw	r30, r28
     db2:	31 96       	adiw	r30, 0x01	; 1
            }
            led_allOff();
            break;
        case 4:
            /* --------------- outward waves --------------- */
            while (!user_active) {
     db4:	6f 01       	movw	r12, r30
     db6:	bb 24       	eor	r11, r11
     db8:	b3 94       	inc	r11
     dba:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
                for (int i = 0; i < 4 && !user_active; i++) {
     dbe:	81 11       	cpse	r24, r1
     dc0:	0a c0       	rjmp	.+20     	; 0xdd6 <startupSequence+0x33c>
     dc2:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
     dc6:	81 11       	cpse	r24, r1
     dc8:	81 c0       	rjmp	.+258    	; 0xecc <startupSequence+0x432>
     dca:	7e 01       	movw	r14, r28
     dcc:	f5 e0       	ldi	r31, 0x05	; 5
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     dce:	ef 0e       	add	r14, r31
     dd0:	f1 1c       	adc	r15, r1
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_on(seq[left]);
     dd2:	87 01       	movw	r16, r14
     dd4:	a6 cf       	rjmp	.-180    	; 0xd22 <startupSequence+0x288>
     dd6:	c9 dd       	rcall	.-1134   	; 0x96a <led_allOff>
     dd8:	b8 c0       	rjmp	.+368    	; 0xf4a <startupSequence+0x4b0>
     dda:	f7 01       	movw	r30, r14
                    led_on(seq[right]);
     ddc:	81 91       	ld	r24, Z+
     dde:	7f 01       	movw	r14, r30
     de0:	ca dd       	rcall	.-1132   	; 0x976 <led_on>
     de2:	f8 01       	movw	r30, r16
     de4:	82 91       	ld	r24, -Z
     de6:	8f 01       	movw	r16, r30
     de8:	c6 dd       	rcall	.-1140   	; 0x976 <led_on>
     dea:	ff e2       	ldi	r31, 0x2F	; 47
     dec:	27 e5       	ldi	r18, 0x57	; 87
     dee:	85 e0       	ldi	r24, 0x05	; 5
     df0:	f1 50       	subi	r31, 0x01	; 1
                    _delay_ms(1750);

                    keypad_poll();
     df2:	20 40       	sbci	r18, 0x00	; 0
     df4:	80 40       	sbci	r24, 0x00	; 0
                    if (keypad_getState() == KEYPAD_PRESSED)
     df6:	e1 f7       	brne	.-8      	; 0xdf0 <startupSequence+0x356>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <startupSequence+0x360>
     dfa:	00 00       	nop
     dfc:	55 dc       	rcall	.-1878   	; 0x6a8 <keypad_poll>
                        user_active = true;
     dfe:	d0 dc       	rcall	.-1632   	; 0x7a0 <keypad_getState>
     e00:	81 30       	cpi	r24, 0x01	; 1
                    if (jstk_readMask() != 0)
     e02:	11 f4       	brne	.+4      	; 0xe08 <startupSequence+0x36e>
     e04:	b0 92 c8 21 	sts	0x21C8, r11	; 0x8021c8 <user_active.5529>
                        user_active = true;
     e08:	ad db       	rcall	.-2214   	; 0x564 <jstk_readMask>
     e0a:	81 11       	cpse	r24, r1
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
                for (int i = 3; i >= 0 && !user_active; i--) {
     e0c:	b0 92 c8 21 	sts	0x21C8, r11	; 0x8021c8 <user_active.5529>
     e10:	0c 15       	cp	r16, r12
     e12:	1d 05       	cpc	r17, r13
     e14:	09 f4       	brne	.+2      	; 0xe18 <startupSequence+0x37e>
     e16:	64 c0       	rjmp	.+200    	; 0xee0 <startupSequence+0x446>
     e18:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
     e1c:	88 23       	and	r24, r24
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
                    int left = 3 - i;
                    int right = 4 + i;
                    led_off(seq[left]);
     e1e:	e9 f2       	breq	.-70     	; 0xdda <startupSequence+0x340>
     e20:	5f c0       	rjmp	.+190    	; 0xee0 <startupSequence+0x446>
     e22:	f7 01       	movw	r30, r14
     e24:	81 91       	ld	r24, Z+
     e26:	7f 01       	movw	r14, r30
                    led_off(seq[right]);
     e28:	ab dd       	rcall	.-1194   	; 0x980 <led_off>
     e2a:	f8 01       	movw	r30, r16
     e2c:	82 91       	ld	r24, -Z
     e2e:	8f 01       	movw	r16, r30
     e30:	a7 dd       	rcall	.-1202   	; 0x980 <led_off>
     e32:	ff e2       	ldi	r31, 0x2F	; 47
     e34:	27 e5       	ldi	r18, 0x57	; 87
     e36:	85 e0       	ldi	r24, 0x05	; 5
     e38:	f1 50       	subi	r31, 0x01	; 1
     e3a:	20 40       	sbci	r18, 0x00	; 0
     e3c:	80 40       	sbci	r24, 0x00	; 0
     e3e:	e1 f7       	brne	.-8      	; 0xe38 <startupSequence+0x39e>
     e40:	00 c0       	rjmp	.+0      	; 0xe42 <startupSequence+0x3a8>
                    _delay_ms(1750);

                    keypad_poll();
     e42:	00 00       	nop
     e44:	31 dc       	rcall	.-1950   	; 0x6a8 <keypad_poll>
                    if (keypad_getState() == KEYPAD_PRESSED)
     e46:	ac dc       	rcall	.-1704   	; 0x7a0 <keypad_getState>
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	11 f4       	brne	.+4      	; 0xe50 <startupSequence+0x3b6>
     e4c:	b0 92 c8 21 	sts	0x21C8, r11	; 0x8021c8 <user_active.5529>
                        user_active = true;
     e50:	89 db       	rcall	.-2286   	; 0x564 <jstk_readMask>
                    if (jstk_readMask() != 0)
     e52:	81 11       	cpse	r24, r1
     e54:	b0 92 c8 21 	sts	0x21C8, r11	; 0x8021c8 <user_active.5529>
                        user_active = true;
     e58:	0c 15       	cp	r16, r12
     e5a:	1d 05       	cpc	r17, r13
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     e5c:	59 f0       	breq	.+22     	; 0xe74 <startupSequence+0x3da>
     e5e:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
     e62:	88 23       	and	r24, r24
     e64:	f1 f2       	breq	.-68     	; 0xe22 <startupSequence+0x388>
     e66:	06 c0       	rjmp	.+12     	; 0xe74 <startupSequence+0x3da>
     e68:	6e 01       	movw	r12, r28
     e6a:	95 e0       	ldi	r25, 0x05	; 5
     e6c:	c9 0e       	add	r12, r25
     e6e:	d1 1c       	adc	r13, r1
     e70:	bb 24       	eor	r11, r11
     e72:	b3 94       	inc	r11

                    keypad_poll();
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
     e74:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
            }
            led_allOff();
            break;
        case 5:
            /* ---------------- inward waves --------------- */
            while (!user_active) {
     e78:	81 11       	cpse	r24, r1
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <startupSequence+0x3f8>
     e7c:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
                for (int i = 3; i >= 0 && !user_active; i--) {
     e80:	81 11       	cpse	r24, r1
     e82:	2e c0       	rjmp	.+92     	; 0xee0 <startupSequence+0x446>
     e84:	fe 01       	movw	r30, r28
     e86:	31 96       	adiw	r30, 0x01	; 1
     e88:	7f 01       	movw	r14, r30
     e8a:	8e 01       	movw	r16, r28
     e8c:	07 5f       	subi	r16, 0xF7	; 247
     e8e:	1f 4f       	sbci	r17, 0xFF	; 255
     e90:	a4 cf       	rjmp	.-184    	; 0xdda <startupSequence+0x340>
     e92:	6b dd       	rcall	.-1322   	; 0x96a <led_allOff>
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
            }
            led_allOff();
     e94:	5a c0       	rjmp	.+180    	; 0xf4a <startupSequence+0x4b0>
     e96:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
                    _delay_ms(850);
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
     e9a:	88 23       	and	r24, r24
     e9c:	61 f1       	breq	.+88     	; 0xef6 <startupSequence+0x45c>
     e9e:	69 ce       	rjmp	.-814    	; 0xb72 <startupSequence+0xd8>
     ea0:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     ea4:	81 11       	cpse	r24, r1
     ea6:	cd ce       	rjmp	.-614    	; 0xc42 <startupSequence+0x1a8>
     ea8:	ce 01       	movw	r24, r28
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	3c 01       	movw	r6, r24
     eae:	8e 01       	movw	r16, r28
     eb0:	07 5f       	subi	r16, 0xF7	; 247
     eb2:	1f 4f       	sbci	r17, 0xFF	; 255
     eb4:	94 ce       	rjmp	.-728    	; 0xbde <startupSequence+0x144>
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     eb6:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
     eba:	81 11       	cpse	r24, r1
     ebc:	22 cf       	rjmp	.-444    	; 0xd02 <startupSequence+0x268>
     ebe:	fe 01       	movw	r30, r28
     ec0:	31 96       	adiw	r30, 0x01	; 1
     ec2:	7f 01       	movw	r14, r30
     ec4:	8e 01       	movw	r16, r28
     ec6:	07 5f       	subi	r16, 0xF7	; 247
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 0; i < 4 && !user_active; i++) {
     eca:	ef ce       	rjmp	.-546    	; 0xcaa <startupSequence+0x210>
     ecc:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
     ed0:	81 11       	cpse	r24, r1
     ed2:	73 cf       	rjmp	.-282    	; 0xdba <startupSequence+0x320>
     ed4:	7e 01       	movw	r14, r28
     ed6:	f5 e0       	ldi	r31, 0x05	; 5
     ed8:	ef 0e       	add	r14, r31
                    if (keypad_getState() == KEYPAD_PRESSED)
                        user_active = true;
                    if (jstk_readMask() != 0)
                        user_active = true;
                }
                for (int i = 3; i >= 0 && !user_active; i--) {
     eda:	f1 1c       	adc	r15, r1
     edc:	87 01       	movw	r16, r14
     ede:	45 cf       	rjmp	.-374    	; 0xd6a <startupSequence+0x2d0>
     ee0:	80 91 c8 21 	lds	r24, 0x21C8	; 0x8021c8 <user_active.5529>
     ee4:	81 11       	cpse	r24, r1
     ee6:	c6 cf       	rjmp	.-116    	; 0xe74 <startupSequence+0x3da>
     ee8:	ce 01       	movw	r24, r28
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	7c 01       	movw	r14, r24
     eee:	8e 01       	movw	r16, r28
                    led_off(seq[i]);

                    user_active = userActivity();
                }
                for (int i = 7; i >= 0 && !user_active; i--) {
                    led_on(seq[i]);
     ef0:	07 5f       	subi	r16, 0xF7	; 247
     ef2:	1f 4f       	sbci	r17, 0xFF	; 255
     ef4:	96 cf       	rjmp	.-212    	; 0xe22 <startupSequence+0x388>
     ef6:	18 85       	ldd	r17, Y+8	; 0x08
     ef8:	81 2f       	mov	r24, r17
     efa:	3d dd       	rcall	.-1414   	; 0x976 <led_on>
     efc:	9f e0       	ldi	r25, 0x0F	; 15
     efe:	e8 e9       	ldi	r30, 0x98	; 152
     f00:	f2 e0       	ldi	r31, 0x02	; 2
     f02:	91 50       	subi	r25, 0x01	; 1
     f04:	e0 40       	sbci	r30, 0x00	; 0
     f06:	f0 40       	sbci	r31, 0x00	; 0
     f08:	e1 f7       	brne	.-8      	; 0xf02 <startupSequence+0x468>
                    _delay_ms(850);
                    led_off(seq[i]);
     f0a:	00 c0       	rjmp	.+0      	; 0xf0c <startupSequence+0x472>
     f0c:	00 00       	nop
     f0e:	81 2f       	mov	r24, r17

                    user_active = userActivity();
     f10:	37 dd       	rcall	.-1426   	; 0x980 <led_off>
     f12:	08 dd       	rcall	.-1520   	; 0x924 <userActivity>
     f14:	80 93 c8 21 	sts	0x21C8, r24	; 0x8021c8 <user_active.5529>
     f18:	8e 01       	movw	r16, r28
     f1a:	08 5f       	subi	r16, 0xF8	; 248
     f1c:	1f 4f       	sbci	r17, 0xFF	; 255
     f1e:	1d ce       	rjmp	.-966    	; 0xb5a <startupSequence+0xc0>
    switch (sequence) {
        case 1:
            /* ---------------- sequential ----------------- */
            while (!user_active) {
                for (int i = 0; i < 8 && !user_active; i++) {
                    led_on(seq[i]);
     f20:	19 81       	ldd	r17, Y+1	; 0x01
     f22:	81 2f       	mov	r24, r17
     f24:	28 dd       	rcall	.-1456   	; 0x976 <led_on>
     f26:	2f e0       	ldi	r18, 0x0F	; 15
     f28:	88 e9       	ldi	r24, 0x98	; 152
     f2a:	92 e0       	ldi	r25, 0x02	; 2
     f2c:	21 50       	subi	r18, 0x01	; 1
     f2e:	80 40       	sbci	r24, 0x00	; 0
     f30:	90 40       	sbci	r25, 0x00	; 0
     f32:	e1 f7       	brne	.-8      	; 0xf2c <startupSequence+0x492>
     f34:	00 c0       	rjmp	.+0      	; 0xf36 <startupSequence+0x49c>
     f36:	00 00       	nop
     f38:	81 2f       	mov	r24, r17
                    _delay_ms(850);
                    led_off(seq[i]);
     f3a:	22 dd       	rcall	.-1468   	; 0x980 <led_off>
     f3c:	f3 dc       	rcall	.-1562   	; 0x924 <userActivity>
     f3e:	80 93 c8 21 	sts	0x21C8, r24	; 0x8021c8 <user_active.5529>

                    user_active = userActivity();
     f42:	8e 01       	movw	r16, r28
     f44:	0e 5f       	subi	r16, 0xFE	; 254
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
     f48:	ed cd       	rjmp	.-1062   	; 0xb24 <startupSequence+0x8a>
     f4a:	28 96       	adiw	r28, 0x08	; 8
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	de bf       	out	0x3e, r29	; 62
            led_allOff();
            break;
        default:
            break;
    }
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	ff 90       	pop	r15
     f5a:	ef 90       	pop	r14
     f5c:	df 90       	pop	r13
     f5e:	cf 90       	pop	r12
     f60:	bf 90       	pop	r11
     f62:	af 90       	pop	r10
     f64:	9f 90       	pop	r9
     f66:	8f 90       	pop	r8
     f68:	7f 90       	pop	r7
     f6a:	6f 90       	pop	r6
     f6c:	08 95       	ret

00000f6e <io_ui_process>:
#include "keypad.h"
#include "joystick.h"


void io_ui_process(void) {
	io_init();
     f6e:	11 ca       	rjmp	.-3038   	; 0x392 <io_init>
     f70:	08 95       	ret

00000f72 <startup_ui_process>:
}

void startup_ui_process(uint8_t sequence) {
	startupSequence(sequence);
     f72:	93 cd       	rjmp	.-1242   	; 0xa9a <startupSequence>
     f74:	08 95       	ret

00000f76 <jstk_ui_process>:
}

void jstk_ui_process(void) {
	joystick();
     f76:	4c cb       	rjmp	.-2408   	; 0x610 <joystick>
     f78:	08 95       	ret

00000f7a <kbd_ui_process>:
}

void kbd_ui_process(void) {
	keypad();
     f7a:	92 cc       	rjmp	.-1756   	; 0x8a0 <keypad>
     f7c:	08 95       	ret

00000f7e <led_ui_process>:
}

void led_ui_process(void) {
	led_usbTask();
     f7e:	52 cd       	rjmp	.-1372   	; 0xa24 <led_usbTask>
     f80:	08 95       	ret

00000f82 <led_set>:
}

void led_set(uint8_t mask) {
	led_setState(mask);
     f82:	1f cd       	rjmp	.-1474   	; 0x9c2 <led_setState>
     f84:	08 95       	ret

00000f86 <status_ui_process>:
}

void status_ui_process(void) {
	testIndicator();
     f86:	65 cd       	rjmp	.-1334   	; 0xa52 <testIndicator>
     f88:	08 95       	ret

00000f8a <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	27 97       	sbiw	r28, 0x07	; 7
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     fa2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     fa6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     faa:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     fae:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     fb2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     fb6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     fba:	65 e0       	ldi	r22, 0x05	; 5
     fbc:	81 e4       	ldi	r24, 0x41	; 65
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	7a d6       	rcall	.+3316   	; 0x1cb6 <ccp_write_io>
     fc2:	6c e1       	ldi	r22, 0x1C	; 28
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	82 e0       	ldi	r24, 0x02	; 2
     fc8:	6c d6       	rcall	.+3288   	; 0x1ca2 <nvm_read_byte>
     fca:	8a 83       	std	Y+2, r24	; 0x02
     fcc:	6d e1       	ldi	r22, 0x1D	; 29
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	67 d6       	rcall	.+3278   	; 0x1ca2 <nvm_read_byte>
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	9a 81       	ldd	r25, Y+2	; 0x02
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	21 f4       	brne	.+8      	; 0xfe6 <sysclk_init+0x5c>
     fde:	80 e4       	ldi	r24, 0x40	; 64
     fe0:	93 e2       	ldi	r25, 0x23	; 35
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	9a 83       	std	Y+2, r25	; 0x02
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	9a 81       	ldd	r25, Y+2	; 0x02
     fea:	8b 83       	std	Y+3, r24	; 0x03
     fec:	9c 83       	std	Y+4, r25	; 0x04
     fee:	e0 e6       	ldi	r30, 0x60	; 96
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	82 83       	std	Z+2, r24	; 0x02
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	83 83       	std	Z+3, r24	; 0x03
     ff8:	8f b7       	in	r24, 0x3f	; 63
     ffa:	8e 83       	std	Y+6, r24	; 0x06
     ffc:	f8 94       	cli
     ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    1000:	e0 e5       	ldi	r30, 0x50	; 80
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	82 60       	ori	r24, 0x02	; 2
    1008:	80 83       	st	Z, r24
    100a:	9f bf       	out	0x3f, r25	; 63
    100c:	81 81       	ldd	r24, Z+1	; 0x01
    100e:	81 ff       	sbrs	r24, 1
    1010:	fd cf       	rjmp	.-6      	; 0x100c <__EEPROM_REGION_LENGTH__+0xc>
    1012:	8f b7       	in	r24, 0x3f	; 63
    1014:	8f 83       	std	Y+7, r24	; 0x07
    1016:	f8 94       	cli
    1018:	9f 81       	ldd	r25, Y+7	; 0x07
    101a:	00 e5       	ldi	r16, 0x50	; 80
    101c:	10 e0       	ldi	r17, 0x00	; 0
    101e:	d8 01       	movw	r26, r16
    1020:	16 96       	adiw	r26, 0x06	; 6
    1022:	8c 91       	ld	r24, X
    1024:	16 97       	sbiw	r26, 0x06	; 6
    1026:	89 7f       	andi	r24, 0xF9	; 249
    1028:	16 96       	adiw	r26, 0x06	; 6
    102a:	8c 93       	st	X, r24
    102c:	16 97       	sbiw	r26, 0x06	; 6
    102e:	e0 e6       	ldi	r30, 0x60	; 96
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 e8       	ldi	r24, 0x80	; 128
    1034:	85 83       	std	Z+5, r24	; 0x05
    1036:	8b eb       	ldi	r24, 0xBB	; 187
    1038:	86 83       	std	Z+6, r24	; 0x06
    103a:	16 96       	adiw	r26, 0x06	; 6
    103c:	8c 91       	ld	r24, X
    103e:	16 97       	sbiw	r26, 0x06	; 6
    1040:	84 60       	ori	r24, 0x04	; 4
    1042:	16 96       	adiw	r26, 0x06	; 6
    1044:	8c 93       	st	X, r24
    1046:	80 81       	ld	r24, Z
    1048:	81 60       	ori	r24, 0x01	; 1
    104a:	80 83       	st	Z, r24
    104c:	9f bf       	out	0x3f, r25	; 63
    104e:	61 e0       	ldi	r22, 0x01	; 1
    1050:	80 e4       	ldi	r24, 0x40	; 64
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	30 d6       	rcall	.+3168   	; 0x1cb6 <ccp_write_io>
    1056:	8f b7       	in	r24, 0x3f	; 63
    1058:	8d 83       	std	Y+5, r24	; 0x05
    105a:	f8 94       	cli
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	f8 01       	movw	r30, r16
    1060:	80 81       	ld	r24, Z
    1062:	8e 7f       	andi	r24, 0xFE	; 254
    1064:	80 83       	st	Z, r24
    1066:	9f bf       	out	0x3f, r25	; 63
    1068:	27 96       	adiw	r28, 0x07	; 7
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	08 95       	ret

00001078 <sysclk_enable_module>:
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	1f 92       	push	r1
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	9f b7       	in	r25, 0x3f	; 63
    1084:	99 83       	std	Y+1, r25	; 0x01
    1086:	f8 94       	cli
    1088:	99 81       	ldd	r25, Y+1	; 0x01
    108a:	e8 2f       	mov	r30, r24
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	e0 59       	subi	r30, 0x90	; 144
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	60 95       	com	r22
    1094:	80 81       	ld	r24, Z
    1096:	68 23       	and	r22, r24
    1098:	60 83       	st	Z, r22
    109a:	9f bf       	out	0x3f, r25	; 63
    109c:	0f 90       	pop	r0
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	08 95       	ret

000010a4 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	1f 92       	push	r1
    10aa:	1f 92       	push	r1
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    10b0:	86 30       	cpi	r24, 0x06	; 6
    10b2:	11 f0       	breq	.+4      	; 0x10b8 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    10b8:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    10ba:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    10be:	81 fd       	sbrc	r24, 1
    10c0:	2a c0       	rjmp	.+84     	; 0x1116 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10c2:	8f b7       	in	r24, 0x3f	; 63
    10c4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    10c6:	f8 94       	cli
	return flags;
    10c8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    10ca:	e0 e5       	ldi	r30, 0x50	; 80
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	82 60       	ori	r24, 0x02	; 2
    10d2:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10d4:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    10d6:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    10d8:	81 ff       	sbrs	r24, 1
    10da:	fd cf       	rjmp	.-6      	; 0x10d6 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    10dc:	8f b7       	in	r24, 0x3f	; 63
    10de:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    10e0:	f8 94       	cli
	return flags;
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    10e4:	a0 e5       	ldi	r26, 0x50	; 80
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	16 96       	adiw	r26, 0x06	; 6
    10ea:	8c 91       	ld	r24, X
    10ec:	16 97       	sbiw	r26, 0x06	; 6
    10ee:	89 7f       	andi	r24, 0xF9	; 249
    10f0:	16 96       	adiw	r26, 0x06	; 6
    10f2:	8c 93       	st	X, r24
    10f4:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    10f6:	e0 e6       	ldi	r30, 0x60	; 96
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 e8       	ldi	r24, 0x80	; 128
    10fc:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    10fe:	8b eb       	ldi	r24, 0xBB	; 187
    1100:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1102:	16 96       	adiw	r26, 0x06	; 6
    1104:	8c 91       	ld	r24, X
    1106:	16 97       	sbiw	r26, 0x06	; 6
    1108:	84 60       	ori	r24, 0x04	; 4
    110a:	16 96       	adiw	r26, 0x06	; 6
    110c:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    110e:	80 81       	ld	r24, Z
    1110:	81 60       	ori	r24, 0x01	; 1
    1112:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1114:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1116:	63 60       	ori	r22, 0x03	; 3
    1118:	84 e4       	ldi	r24, 0x44	; 68
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	cc d5       	rcall	.+2968   	; 0x1cb6 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    111e:	60 e4       	ldi	r22, 0x40	; 64
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	aa df       	rcall	.-172    	; 0x1078 <sysclk_enable_module>
}
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	08 95       	ret

0000112e <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	08 95       	ret

00001132 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
    1132:	30 91 cf 23 	lds	r19, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x2>
    1136:	20 91 d0 23 	lds	r18, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x3>
    113a:	82 2f       	mov	r24, r18
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	03 97       	sbiw	r24, 0x03	; 3
    1140:	b1 f4       	brne	.+44     	; 0x116e <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
    1142:	31 11       	cpse	r19, r1
    1144:	16 c0       	rjmp	.+44     	; 0x1172 <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
    1146:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0x6>
    114a:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0x7>
    114e:	89 2b       	or	r24, r25
    1150:	91 f4       	brne	.+36     	; 0x1176 <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
    1152:	ed ec       	ldi	r30, 0xCD	; 205
    1154:	f3 e2       	ldi	r31, 0x23	; 35
    1156:	86 ed       	ldi	r24, 0xD6	; 214
    1158:	91 e2       	ldi	r25, 0x21	; 33
    115a:	80 87       	std	Z+8, r24	; 0x08
    115c:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
    115e:	8d eb       	ldi	r24, 0xBD	; 189
    1160:	98 e0       	ldi	r25, 0x08	; 8
    1162:	84 87       	std	Z+12, r24	; 0x0c
    1164:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
    1166:	12 86       	std	Z+10, r1	; 0x0a
    1168:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	08 95       	ret
	}
	return false;
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	08 95       	ret
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	08 95       	ret
    1176:	80 e0       	ldi	r24, 0x00	; 0
}
    1178:	08 95       	ret

0000117a <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
    117a:	08 95       	ret

0000117c <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	80 93 d8 21 	sts	0x21D8, r24	; 0x8021d8 <udi_hid_generic_b_report_in_free>
    1182:	08 95       	ret

00001184 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
    1184:	10 92 dc 21 	sts	0x21DC, r1	; 0x8021dc <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
    1188:	10 92 da 21 	sts	0x21DA, r1	; 0x8021da <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	80 93 d8 21 	sts	0x21D8, r24	; 0x8021d8 <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
    1192:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <main_generic_enable>
}
    1196:	08 95       	ret

00001198 <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
    1198:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <main_generic_disable>
    119c:	08 95       	ret

0000119e <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
    119e:	29 e9       	ldi	r18, 0x99	; 153
    11a0:	38 e0       	ldi	r19, 0x08	; 8
    11a2:	46 ea       	ldi	r20, 0xA6	; 166
    11a4:	50 e2       	ldi	r21, 0x20	; 32
    11a6:	6a ed       	ldi	r22, 0xDA	; 218
    11a8:	71 e2       	ldi	r23, 0x21	; 33
    11aa:	8c ed       	ldi	r24, 0xDC	; 220
    11ac:	91 e2       	ldi	r25, 0x21	; 33
    11ae:	f2 c0       	rjmp	.+484    	; 0x1394 <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
    11b0:	08 95       	ret

000011b2 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
    11b2:	ff 92       	push	r15
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	1f 92       	push	r1
    11be:	cd b7       	in	r28, 0x3d	; 61
    11c0:	de b7       	in	r29, 0x3e	; 62
    11c2:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
    11c4:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <udi_hid_generic_b_report_in_free>
    11c8:	88 23       	and	r24, r24
    11ca:	09 f1       	breq	.+66     	; 0x120e <udi_hid_generic_send_report_in+0x5c>
    11cc:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    11ce:	8f b7       	in	r24, 0x3f	; 63
    11d0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    11d2:	f8 94       	cli
	return flags;
    11d4:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
    11d6:	10 92 d6 21 	sts	0x21D6, r1	; 0x8021d6 <udi_hid_generic_report_feature>
    11da:	10 92 d7 21 	sts	0x21D7, r1	; 0x8021d7 <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
    11de:	80 81       	ld	r24, Z
    11e0:	91 81       	ldd	r25, Z+1	; 0x01
    11e2:	80 93 d6 21 	sts	0x21D6, r24	; 0x8021d6 <udi_hid_generic_report_feature>
    11e6:	90 93 d7 21 	sts	0x21D7, r25	; 0x8021d7 <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
    11ea:	0e eb       	ldi	r16, 0xBE	; 190
    11ec:	18 e0       	ldi	r17, 0x08	; 8
    11ee:	22 e0       	ldi	r18, 0x02	; 2
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	46 ed       	ldi	r20, 0xD6	; 214
    11f4:	51 e2       	ldi	r21, 0x21	; 33
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	82 e8       	ldi	r24, 0x82	; 130
    11fa:	0e 94 1f 13 	call	0x263e	; 0x263e <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
    11fe:	91 e0       	ldi	r25, 0x01	; 1
    1200:	89 27       	eor	r24, r25
    1202:	80 93 d8 21 	sts	0x21D8, r24	; 0x8021d8 <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1206:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
    1208:	80 91 d8 21 	lds	r24, 0x21D8	; 0x8021d8 <udi_hid_generic_b_report_in_free>
    120c:	89 27       	eor	r24, r25

}
    120e:	0f 90       	pop	r0
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	ff 90       	pop	r15
    121a:	08 95       	ret

0000121c <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	08 95       	ret

00001220 <udi_hid_kbd_setreport>:
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	08 95       	ret

00001224 <udi_hid_kbd_enable>:
    1224:	10 92 f2 21 	sts	0x21F2, r1	; 0x8021f2 <udi_hid_kbd_rate>
    1228:	10 92 f0 21 	sts	0x21F0, r1	; 0x8021f0 <udi_hid_kbd_protocol>
    122c:	10 92 e6 21 	sts	0x21E6, r1	; 0x8021e6 <udi_hid_kbd_b_report_trans_ongoing>
    1230:	88 e0       	ldi	r24, 0x08	; 8
    1232:	e7 ee       	ldi	r30, 0xE7	; 231
    1234:	f1 e2       	ldi	r31, 0x21	; 33
    1236:	df 01       	movw	r26, r30
    1238:	1d 92       	st	X+, r1
    123a:	8a 95       	dec	r24
    123c:	e9 f7       	brne	.-6      	; 0x1238 <udi_hid_kbd_enable+0x14>
    123e:	10 92 ef 21 	sts	0x21EF, r1	; 0x8021ef <udi_hid_kbd_b_report_valid>
    1242:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <main_kbd_enable>
    1246:	08 95       	ret

00001248 <udi_hid_kbd_disable>:
    1248:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <main_kbd_disable>
    124c:	08 95       	ret

0000124e <udi_hid_kbd_setup>:
    124e:	20 e1       	ldi	r18, 0x10	; 16
    1250:	39 e0       	ldi	r19, 0x09	; 9
    1252:	4b ec       	ldi	r20, 0xCB	; 203
    1254:	50 e2       	ldi	r21, 0x20	; 32
    1256:	60 ef       	ldi	r22, 0xF0	; 240
    1258:	71 e2       	ldi	r23, 0x21	; 33
    125a:	82 ef       	ldi	r24, 0xF2	; 242
    125c:	91 e2       	ldi	r25, 0x21	; 33
    125e:	9a c0       	rjmp	.+308    	; 0x1394 <udi_hid_setup>
    1260:	08 95       	ret

00001262 <udi_hid_kbd_send_report>:
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <udi_hid_kbd_b_report_trans_ongoing>
    126a:	81 11       	cpse	r24, r1
    126c:	18 c0       	rjmp	.+48     	; 0x129e <udi_hid_kbd_send_report+0x3c>
    126e:	88 e0       	ldi	r24, 0x08	; 8
    1270:	e7 ee       	ldi	r30, 0xE7	; 231
    1272:	f1 e2       	ldi	r31, 0x21	; 33
    1274:	ae ed       	ldi	r26, 0xDE	; 222
    1276:	b1 e2       	ldi	r27, 0x21	; 33
    1278:	01 90       	ld	r0, Z+
    127a:	0d 92       	st	X+, r0
    127c:	8a 95       	dec	r24
    127e:	e1 f7       	brne	.-8      	; 0x1278 <udi_hid_kbd_send_report+0x16>
    1280:	10 92 ef 21 	sts	0x21EF, r1	; 0x8021ef <udi_hid_kbd_b_report_valid>
    1284:	03 e5       	ldi	r16, 0x53	; 83
    1286:	19 e0       	ldi	r17, 0x09	; 9
    1288:	28 e0       	ldi	r18, 0x08	; 8
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	4e ed       	ldi	r20, 0xDE	; 222
    128e:	51 e2       	ldi	r21, 0x21	; 33
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	81 e8       	ldi	r24, 0x81	; 129
    1294:	0e 94 1f 13 	call	0x263e	; 0x263e <udd_ep_run>
    1298:	80 93 e6 21 	sts	0x21E6, r24	; 0x8021e6 <udi_hid_kbd_b_report_trans_ongoing>
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <udi_hid_kbd_send_report+0x3e>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	08 95       	ret

000012a6 <udi_hid_kbd_report_sent>:
    12a6:	10 92 e6 21 	sts	0x21E6, r1	; 0x8021e6 <udi_hid_kbd_b_report_trans_ongoing>
    12aa:	80 91 ef 21 	lds	r24, 0x21EF	; 0x8021ef <udi_hid_kbd_b_report_valid>
    12ae:	81 11       	cpse	r24, r1
    12b0:	d8 cf       	rjmp	.-80     	; 0x1262 <udi_hid_kbd_send_report>
    12b2:	08 95       	ret

000012b4 <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	1f 92       	push	r1
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    12c0:	9f b7       	in	r25, 0x3f	; 63
    12c2:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    12c4:	f8 94       	cli
	return flags;
    12c6:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    12c8:	90 91 e9 21 	lds	r25, 0x21E9	; 0x8021e9 <udi_hid_kbd_report+0x2>
    12cc:	99 23       	and	r25, r25
    12ce:	41 f0       	breq	.+16     	; 0x12e0 <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    12d0:	89 17       	cp	r24, r25
    12d2:	a9 f0       	breq	.+42     	; 0x12fe <udi_hid_kbd_up+0x4a>
    12d4:	ea ee       	ldi	r30, 0xEA	; 234
    12d6:	f1 e2       	ldi	r31, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    12d8:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    12da:	21 91       	ld	r18, Z+
    12dc:	21 11       	cpse	r18, r1
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    12e0:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    12e2:	1e c0       	rjmp	.+60     	; 0x1320 <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
    12e4:	28 17       	cp	r18, r24
    12e6:	21 f0       	breq	.+8      	; 0x12f0 <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    12e8:	9f 5f       	subi	r25, 0xFF	; 255
    12ea:	98 30       	cpi	r25, 0x08	; 8
    12ec:	b1 f7       	brne	.-20     	; 0x12da <udi_hid_kbd_up+0x26>
    12ee:	05 c0       	rjmp	.+10     	; 0x12fa <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    12f0:	98 30       	cpi	r25, 0x08	; 8
    12f2:	19 f0       	breq	.+6      	; 0x12fa <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    12f4:	97 30       	cpi	r25, 0x07	; 7
    12f6:	20 f0       	brcs	.+8      	; 0x1300 <udi_hid_kbd_up+0x4c>
    12f8:	0c c0       	rjmp	.+24     	; 0x1312 <udi_hid_kbd_up+0x5e>
    12fa:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    12fc:	11 c0       	rjmp	.+34     	; 0x1320 <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    12fe:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    1300:	e9 2f       	mov	r30, r25
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	e9 51       	subi	r30, 0x19	; 25
    1306:	fe 4d       	sbci	r31, 0xDE	; 222
    1308:	81 81       	ldd	r24, Z+1	; 0x01
    130a:	80 83       	st	Z, r24
		i++;
    130c:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    130e:	97 30       	cpi	r25, 0x07	; 7
    1310:	b9 f7       	brne	.-18     	; 0x1300 <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    1312:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	80 93 ef 21 	sts	0x21EF, r24	; 0x8021ef <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    131c:	a2 df       	rcall	.-188    	; 0x1262 <udi_hid_kbd_send_report>
    131e:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	0f 90       	pop	r0
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	1f 91       	pop	r17
    132a:	08 95       	ret

0000132c <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	1f 92       	push	r1
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1338:	9f b7       	in	r25, 0x3f	; 63
    133a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    133c:	f8 94       	cli
	return flags;
    133e:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    1340:	90 91 e9 21 	lds	r25, 0x21E9	; 0x8021e9 <udi_hid_kbd_report+0x2>
    1344:	99 23       	and	r25, r25
    1346:	b1 f0       	breq	.+44     	; 0x1374 <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    1348:	89 17       	cp	r24, r25
    134a:	41 f0       	breq	.+16     	; 0x135c <udi_hid_kbd_down+0x30>
    134c:	aa ee       	ldi	r26, 0xEA	; 234
    134e:	b1 e2       	ldi	r27, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1350:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    1352:	9d 91       	ld	r25, X+
    1354:	99 23       	and	r25, r25
    1356:	49 f0       	breq	.+18     	; 0x136a <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    1358:	98 13       	cpse	r25, r24
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    135c:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	14 c0       	rjmp	.+40     	; 0x138a <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1362:	ef 5f       	subi	r30, 0xFF	; 255
    1364:	e8 30       	cpi	r30, 0x08	; 8
    1366:	a9 f7       	brne	.-22     	; 0x1352 <udi_hid_kbd_down+0x26>
    1368:	02 c0       	rjmp	.+4      	; 0x136e <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    136a:	e8 30       	cpi	r30, 0x08	; 8
    136c:	21 f4       	brne	.+8      	; 0x1376 <udi_hid_kbd_down+0x4a>
    136e:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	0b c0       	rjmp	.+22     	; 0x138a <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1374:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	e9 51       	subi	r30, 0x19	; 25
    137a:	fe 4d       	sbci	r31, 0xDE	; 222
    137c:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	80 93 ef 21 	sts	0x21EF, r24	; 0x8021ef <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    1384:	6e df       	rcall	.-292    	; 0x1262 <udi_hid_kbd_send_report>
    1386:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    1388:	81 e0       	ldi	r24, 0x01	; 1
}
    138a:	0f 90       	pop	r0
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	08 95       	ret

00001394 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	dc 01       	movw	r26, r24
    139a:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    139c:	90 91 cd 23 	lds	r25, 0x23CD	; 0x8023cd <udd_g_ctrlreq>
    13a0:	99 23       	and	r25, r25
    13a2:	0c f0       	brlt	.+2      	; 0x13a6 <udi_hid_setup+0x12>
    13a4:	68 c0       	rjmp	.+208    	; 0x1476 <udi_hid_setup+0xe2>
    13a6:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    13a8:	09 f0       	breq	.+2      	; 0x13ac <udi_hid_setup+0x18>
    13aa:	45 c0       	rjmp	.+138    	; 0x1436 <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    13ac:	80 91 ce 23 	lds	r24, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x1>
    13b0:	86 30       	cpi	r24, 0x06	; 6
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <udi_hid_setup+0x22>
    13b4:	40 c0       	rjmp	.+128    	; 0x1436 <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    13b6:	76 d1       	rcall	.+748    	; 0x16a4 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    13b8:	dc 01       	movw	r26, r24
    13ba:	1a 96       	adiw	r26, 0x0a	; 10
    13bc:	2c 91       	ld	r18, X
    13be:	1a 97       	sbiw	r26, 0x0a	; 10
    13c0:	21 32       	cpi	r18, 0x21	; 33
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <udi_hid_setup+0x32>
    13c4:	77 c0       	rjmp	.+238    	; 0x14b4 <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    13c6:	20 91 d0 23 	lds	r18, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x3>
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	21 32       	cpi	r18, 0x21	; 33
    13ce:	31 05       	cpc	r19, r1
    13d0:	b1 f4       	brne	.+44     	; 0x13fe <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    13d2:	9c 01       	movw	r18, r24
    13d4:	27 5f       	subi	r18, 0xF7	; 247
    13d6:	3f 4f       	sbci	r19, 0xFF	; 255
    13d8:	20 93 d5 23 	sts	0x23D5, r18	; 0x8023d5 <udd_g_ctrlreq+0x8>
    13dc:	30 93 d6 23 	sts	0x23D6, r19	; 0x8023d6 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    13e0:	ed ec       	ldi	r30, 0xCD	; 205
    13e2:	f3 e2       	ldi	r31, 0x23	; 35
    13e4:	19 96       	adiw	r26, 0x09	; 9
    13e6:	8c 91       	ld	r24, X
    13e8:	26 81       	ldd	r18, Z+6	; 0x06
    13ea:	37 81       	ldd	r19, Z+7	; 0x07
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	28 17       	cp	r18, r24
    13f0:	39 07       	cpc	r19, r25
    13f2:	08 f4       	brcc	.+2      	; 0x13f6 <udi_hid_setup+0x62>
    13f4:	c9 01       	movw	r24, r18
    13f6:	82 87       	std	Z+10, r24	; 0x0a
    13f8:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	68 c0       	rjmp	.+208    	; 0x14ce <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    13fe:	fc 01       	movw	r30, r24
    1400:	47 85       	ldd	r20, Z+15	; 0x0f
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	42 17       	cp	r20, r18
    1406:	53 07       	cpc	r21, r19
    1408:	09 f0       	breq	.+2      	; 0x140c <udi_hid_setup+0x78>
    140a:	56 c0       	rjmp	.+172    	; 0x14b8 <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    140c:	c0 93 d5 23 	sts	0x23D5, r28	; 0x8023d5 <udd_g_ctrlreq+0x8>
    1410:	d0 93 d6 23 	sts	0x23D6, r29	; 0x8023d6 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    1414:	ed ec       	ldi	r30, 0xCD	; 205
    1416:	f3 e2       	ldi	r31, 0x23	; 35
    1418:	26 81       	ldd	r18, Z+6	; 0x06
    141a:	37 81       	ldd	r19, Z+7	; 0x07
    141c:	dc 01       	movw	r26, r24
    141e:	50 96       	adiw	r26, 0x10	; 16
    1420:	8d 91       	ld	r24, X+
    1422:	9c 91       	ld	r25, X
    1424:	51 97       	sbiw	r26, 0x11	; 17
    1426:	28 17       	cp	r18, r24
    1428:	39 07       	cpc	r19, r25
    142a:	08 f4       	brcc	.+2      	; 0x142e <udi_hid_setup+0x9a>
    142c:	c9 01       	movw	r24, r18
    142e:	82 87       	std	Z+10, r24	; 0x0a
    1430:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	4c c0       	rjmp	.+152    	; 0x14ce <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1436:	90 32       	cpi	r25, 0x20	; 32
    1438:	09 f0       	breq	.+2      	; 0x143c <udi_hid_setup+0xa8>
    143a:	40 c0       	rjmp	.+128    	; 0x14bc <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    143c:	80 91 ce 23 	lds	r24, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x1>
    1440:	82 30       	cpi	r24, 0x02	; 2
    1442:	39 f0       	breq	.+14     	; 0x1452 <udi_hid_setup+0xbe>
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	71 f0       	breq	.+28     	; 0x1464 <udi_hid_setup+0xd0>
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	d1 f5       	brne	.+116    	; 0x14c0 <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    144c:	f9 01       	movw	r30, r18
    144e:	19 95       	eicall
    1450:	3e c0       	rjmp	.+124    	; 0x14ce <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    1452:	ed ec       	ldi	r30, 0xCD	; 205
    1454:	f3 e2       	ldi	r31, 0x23	; 35
    1456:	a0 87       	std	Z+8, r26	; 0x08
    1458:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	82 87       	std	Z+10, r24	; 0x0a
    1460:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1462:	35 c0       	rjmp	.+106    	; 0x14ce <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    1464:	ed ec       	ldi	r30, 0xCD	; 205
    1466:	f3 e2       	ldi	r31, 0x23	; 35
    1468:	60 87       	std	Z+8, r22	; 0x08
    146a:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	82 87       	std	Z+10, r24	; 0x0a
    1472:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1474:	2c c0       	rjmp	.+88     	; 0x14ce <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1476:	90 76       	andi	r25, 0x60	; 96
    1478:	90 32       	cpi	r25, 0x20	; 32
    147a:	21 f5       	brne	.+72     	; 0x14c4 <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    147c:	80 91 ce 23 	lds	r24, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x1>
    1480:	8a 30       	cpi	r24, 0x0A	; 10
    1482:	39 f0       	breq	.+14     	; 0x1492 <udi_hid_setup+0xfe>
    1484:	8b 30       	cpi	r24, 0x0B	; 11
    1486:	51 f0       	breq	.+20     	; 0x149c <udi_hid_setup+0x108>
    1488:	89 30       	cpi	r24, 0x09	; 9
    148a:	f1 f4       	brne	.+60     	; 0x14c8 <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    148c:	f9 01       	movw	r30, r18
    148e:	19 95       	eicall
    1490:	1e c0       	rjmp	.+60     	; 0x14ce <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    1492:	80 91 d0 23 	lds	r24, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x3>
    1496:	8c 93       	st	X, r24
				return true;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	19 c0       	rjmp	.+50     	; 0x14ce <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    149c:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0x6>
    14a0:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0x7>
    14a4:	89 2b       	or	r24, r25
    14a6:	91 f4       	brne	.+36     	; 0x14cc <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    14a8:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x2>
    14ac:	db 01       	movw	r26, r22
    14ae:	8c 93       	st	X, r24
				return true;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	0d c0       	rjmp	.+26     	; 0x14ce <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	0b c0       	rjmp	.+22     	; 0x14ce <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	09 c0       	rjmp	.+18     	; 0x14ce <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	07 c0       	rjmp	.+14     	; 0x14ce <udi_hid_setup+0x13a>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	05 c0       	rjmp	.+10     	; 0x14ce <udi_hid_setup+0x13a>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	03 c0       	rjmp	.+6      	; 0x14ce <udi_hid_setup+0x13a>
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	01 c0       	rjmp	.+2      	; 0x14ce <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    14cc:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    14d4:	e0 91 f8 21 	lds	r30, 0x21F8	; 0x8021f8 <udc_ptr_conf>
    14d8:	f0 91 f9 21 	lds	r31, 0x21F9	; 0x8021f9 <udc_ptr_conf+0x1>
    14dc:	01 90       	ld	r0, Z+
    14de:	f0 81       	ld	r31, Z
    14e0:	e0 2d       	mov	r30, r0
    14e2:	22 81       	ldd	r18, Z+2	; 0x02
    14e4:	33 81       	ldd	r19, Z+3	; 0x03
    14e6:	2e 0f       	add	r18, r30
    14e8:	3f 1f       	adc	r19, r31
    14ea:	fc 01       	movw	r30, r24
    14ec:	40 81       	ld	r20, Z
    14ee:	e4 0f       	add	r30, r20
    14f0:	f1 1d       	adc	r31, r1
    14f2:	e2 17       	cp	r30, r18
    14f4:	f3 07       	cpc	r31, r19
    14f6:	a0 f4       	brcc	.+40     	; 0x1520 <udc_next_desc_in_iface+0x4c>
    14f8:	81 81       	ldd	r24, Z+1	; 0x01
    14fa:	84 30       	cpi	r24, 0x04	; 4
    14fc:	a1 f0       	breq	.+40     	; 0x1526 <udc_next_desc_in_iface+0x52>
    14fe:	86 13       	cpse	r24, r22
    1500:	06 c0       	rjmp	.+12     	; 0x150e <udc_next_desc_in_iface+0x3a>
    1502:	14 c0       	rjmp	.+40     	; 0x152c <udc_next_desc_in_iface+0x58>
    1504:	81 81       	ldd	r24, Z+1	; 0x01
    1506:	84 30       	cpi	r24, 0x04	; 4
    1508:	a1 f0       	breq	.+40     	; 0x1532 <udc_next_desc_in_iface+0x5e>
    150a:	86 17       	cp	r24, r22
    150c:	a9 f0       	breq	.+42     	; 0x1538 <udc_next_desc_in_iface+0x64>
    150e:	80 81       	ld	r24, Z
    1510:	e8 0f       	add	r30, r24
    1512:	f1 1d       	adc	r31, r1
    1514:	e2 17       	cp	r30, r18
    1516:	f3 07       	cpc	r31, r19
    1518:	a8 f3       	brcs	.-22     	; 0x1504 <udc_next_desc_in_iface+0x30>
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	08 95       	ret
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	08 95       	ret
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	08 95       	ret
    152c:	8e 2f       	mov	r24, r30
    152e:	9f 2f       	mov	r25, r31
    1530:	08 95       	ret
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	08 95       	ret
    1538:	8e 2f       	mov	r24, r30
    153a:	9f 2f       	mov	r25, r31
    153c:	08 95       	ret

0000153e <udc_valid_address>:
    153e:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x2>
    1542:	8f 77       	andi	r24, 0x7F	; 127
    1544:	95 c7       	rjmp	.+3882   	; 0x2470 <udd_set_address>
    1546:	08 95       	ret

00001548 <udc_update_iface_desc>:
    1548:	90 91 fa 21 	lds	r25, 0x21FA	; 0x8021fa <udc_num_configuration>
    154c:	99 23       	and	r25, r25
    154e:	81 f1       	breq	.+96     	; 0x15b0 <udc_update_iface_desc+0x68>
    1550:	e0 91 f8 21 	lds	r30, 0x21F8	; 0x8021f8 <udc_ptr_conf>
    1554:	f0 91 f9 21 	lds	r31, 0x21F9	; 0x8021f9 <udc_ptr_conf+0x1>
    1558:	01 90       	ld	r0, Z+
    155a:	f0 81       	ld	r31, Z
    155c:	e0 2d       	mov	r30, r0
    155e:	94 81       	ldd	r25, Z+4	; 0x04
    1560:	89 17       	cp	r24, r25
    1562:	40 f5       	brcc	.+80     	; 0x15b4 <udc_update_iface_desc+0x6c>
    1564:	e0 93 f6 21 	sts	0x21F6, r30	; 0x8021f6 <udc_ptr_iface>
    1568:	f0 93 f7 21 	sts	0x21F7, r31	; 0x8021f7 <udc_ptr_iface+0x1>
    156c:	22 81       	ldd	r18, Z+2	; 0x02
    156e:	33 81       	ldd	r19, Z+3	; 0x03
    1570:	2e 0f       	add	r18, r30
    1572:	3f 1f       	adc	r19, r31
    1574:	e2 17       	cp	r30, r18
    1576:	f3 07       	cpc	r31, r19
    1578:	f8 f4       	brcc	.+62     	; 0x15b8 <udc_update_iface_desc+0x70>
    157a:	91 81       	ldd	r25, Z+1	; 0x01
    157c:	94 30       	cpi	r25, 0x04	; 4
    157e:	61 f4       	brne	.+24     	; 0x1598 <udc_update_iface_desc+0x50>
    1580:	92 81       	ldd	r25, Z+2	; 0x02
    1582:	89 13       	cpse	r24, r25
    1584:	09 c0       	rjmp	.+18     	; 0x1598 <udc_update_iface_desc+0x50>
    1586:	93 81       	ldd	r25, Z+3	; 0x03
    1588:	96 13       	cpse	r25, r22
    158a:	06 c0       	rjmp	.+12     	; 0x1598 <udc_update_iface_desc+0x50>
    158c:	e0 93 f6 21 	sts	0x21F6, r30	; 0x8021f6 <udc_ptr_iface>
    1590:	f0 93 f7 21 	sts	0x21F7, r31	; 0x8021f7 <udc_ptr_iface+0x1>
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	08 95       	ret
    1598:	90 81       	ld	r25, Z
    159a:	e9 0f       	add	r30, r25
    159c:	f1 1d       	adc	r31, r1
    159e:	e2 17       	cp	r30, r18
    15a0:	f3 07       	cpc	r31, r19
    15a2:	58 f3       	brcs	.-42     	; 0x157a <udc_update_iface_desc+0x32>
    15a4:	e0 93 f6 21 	sts	0x21F6, r30	; 0x8021f6 <udc_ptr_iface>
    15a8:	f0 93 f7 21 	sts	0x21F7, r31	; 0x8021f7 <udc_ptr_iface+0x1>
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	08 95       	ret
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	08 95       	ret
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	08 95       	ret
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	08 95       	ret

000015bc <udc_iface_disable>:
    15bc:	ef 92       	push	r14
    15be:	ff 92       	push	r15
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	c8 2f       	mov	r28, r24
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	be df       	rcall	.-132    	; 0x1548 <udc_update_iface_desc>
    15cc:	18 2f       	mov	r17, r24
    15ce:	88 23       	and	r24, r24
    15d0:	81 f1       	breq	.+96     	; 0x1632 <udc_iface_disable+0x76>
    15d2:	a0 91 f8 21 	lds	r26, 0x21F8	; 0x8021f8 <udc_ptr_conf>
    15d6:	b0 91 f9 21 	lds	r27, 0x21F9	; 0x8021f9 <udc_ptr_conf+0x1>
    15da:	ec 2f       	mov	r30, r28
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	ee 0f       	add	r30, r30
    15e0:	ff 1f       	adc	r31, r31
    15e2:	12 96       	adiw	r26, 0x02	; 2
    15e4:	8d 91       	ld	r24, X+
    15e6:	9c 91       	ld	r25, X
    15e8:	13 97       	sbiw	r26, 0x03	; 3
    15ea:	e8 0f       	add	r30, r24
    15ec:	f9 1f       	adc	r31, r25
    15ee:	e0 80       	ld	r14, Z
    15f0:	f1 80       	ldd	r15, Z+1	; 0x01
    15f2:	d7 01       	movw	r26, r14
    15f4:	16 96       	adiw	r26, 0x06	; 6
    15f6:	ed 91       	ld	r30, X+
    15f8:	fc 91       	ld	r31, X
    15fa:	17 97       	sbiw	r26, 0x07	; 7
    15fc:	19 95       	eicall
    15fe:	68 2f       	mov	r22, r24
    1600:	8c 2f       	mov	r24, r28
    1602:	a2 df       	rcall	.-188    	; 0x1548 <udc_update_iface_desc>
    1604:	18 2f       	mov	r17, r24
    1606:	88 23       	and	r24, r24
    1608:	a1 f0       	breq	.+40     	; 0x1632 <udc_iface_disable+0x76>
    160a:	c0 91 f6 21 	lds	r28, 0x21F6	; 0x8021f6 <udc_ptr_iface>
    160e:	d0 91 f7 21 	lds	r29, 0x21F7	; 0x8021f7 <udc_ptr_iface+0x1>
    1612:	65 e0       	ldi	r22, 0x05	; 5
    1614:	ce 01       	movw	r24, r28
    1616:	5e df       	rcall	.-324    	; 0x14d4 <udc_next_desc_in_iface>
    1618:	ec 01       	movw	r28, r24
    161a:	89 2b       	or	r24, r25
    161c:	21 f0       	breq	.+8      	; 0x1626 <udc_iface_disable+0x6a>
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	0e 94 38 14 	call	0x2870	; 0x2870 <udd_ep_free>
    1624:	f6 cf       	rjmp	.-20     	; 0x1612 <udc_iface_disable+0x56>
    1626:	d7 01       	movw	r26, r14
    1628:	12 96       	adiw	r26, 0x02	; 2
    162a:	ed 91       	ld	r30, X+
    162c:	fc 91       	ld	r31, X
    162e:	13 97       	sbiw	r26, 0x03	; 3
    1630:	19 95       	eicall
    1632:	81 2f       	mov	r24, r17
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	ff 90       	pop	r15
    163c:	ef 90       	pop	r14
    163e:	08 95       	ret

00001640 <udc_iface_enable>:
    1640:	1f 93       	push	r17
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	18 2f       	mov	r17, r24
    1648:	7f df       	rcall	.-258    	; 0x1548 <udc_update_iface_desc>
    164a:	88 23       	and	r24, r24
    164c:	39 f1       	breq	.+78     	; 0x169c <udc_iface_enable+0x5c>
    164e:	c0 91 f6 21 	lds	r28, 0x21F6	; 0x8021f6 <udc_ptr_iface>
    1652:	d0 91 f7 21 	lds	r29, 0x21F7	; 0x8021f7 <udc_ptr_iface+0x1>
    1656:	65 e0       	ldi	r22, 0x05	; 5
    1658:	ce 01       	movw	r24, r28
    165a:	3c df       	rcall	.-392    	; 0x14d4 <udc_next_desc_in_iface>
    165c:	ec 01       	movw	r28, r24
    165e:	89 2b       	or	r24, r25
    1660:	41 f0       	breq	.+16     	; 0x1672 <udc_iface_enable+0x32>
    1662:	4c 81       	ldd	r20, Y+4	; 0x04
    1664:	5d 81       	ldd	r21, Y+5	; 0x05
    1666:	6b 81       	ldd	r22, Y+3	; 0x03
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	0f d7       	rcall	.+3614   	; 0x248a <udd_ep_alloc>
    166c:	81 11       	cpse	r24, r1
    166e:	f3 cf       	rjmp	.-26     	; 0x1656 <udc_iface_enable+0x16>
    1670:	15 c0       	rjmp	.+42     	; 0x169c <udc_iface_enable+0x5c>
    1672:	a0 91 f8 21 	lds	r26, 0x21F8	; 0x8021f8 <udc_ptr_conf>
    1676:	b0 91 f9 21 	lds	r27, 0x21F9	; 0x8021f9 <udc_ptr_conf+0x1>
    167a:	e1 2f       	mov	r30, r17
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	ee 0f       	add	r30, r30
    1680:	ff 1f       	adc	r31, r31
    1682:	12 96       	adiw	r26, 0x02	; 2
    1684:	8d 91       	ld	r24, X+
    1686:	9c 91       	ld	r25, X
    1688:	13 97       	sbiw	r26, 0x03	; 3
    168a:	e8 0f       	add	r30, r24
    168c:	f9 1f       	adc	r31, r25
    168e:	01 90       	ld	r0, Z+
    1690:	f0 81       	ld	r31, Z
    1692:	e0 2d       	mov	r30, r0
    1694:	01 90       	ld	r0, Z+
    1696:	f0 81       	ld	r31, Z
    1698:	e0 2d       	mov	r30, r0
    169a:	19 95       	eicall
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	08 95       	ret

000016a4 <udc_get_interface_desc>:
    16a4:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <udc_ptr_iface>
    16a8:	90 91 f7 21 	lds	r25, 0x21F7	; 0x8021f7 <udc_ptr_iface+0x1>
    16ac:	08 95       	ret

000016ae <udc_start>:
    16ae:	55 c6       	rjmp	.+3242   	; 0x235a <udd_enable>
    16b0:	08 95       	ret

000016b2 <udc_reset>:
    16b2:	cf 93       	push	r28
    16b4:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <udc_num_configuration>
    16b8:	88 23       	and	r24, r24
    16ba:	c1 f0       	breq	.+48     	; 0x16ec <udc_reset+0x3a>
    16bc:	e0 91 f8 21 	lds	r30, 0x21F8	; 0x8021f8 <udc_ptr_conf>
    16c0:	f0 91 f9 21 	lds	r31, 0x21F9	; 0x8021f9 <udc_ptr_conf+0x1>
    16c4:	01 90       	ld	r0, Z+
    16c6:	f0 81       	ld	r31, Z
    16c8:	e0 2d       	mov	r30, r0
    16ca:	84 81       	ldd	r24, Z+4	; 0x04
    16cc:	88 23       	and	r24, r24
    16ce:	71 f0       	breq	.+28     	; 0x16ec <udc_reset+0x3a>
    16d0:	c0 e0       	ldi	r28, 0x00	; 0
    16d2:	8c 2f       	mov	r24, r28
    16d4:	73 df       	rcall	.-282    	; 0x15bc <udc_iface_disable>
    16d6:	cf 5f       	subi	r28, 0xFF	; 255
    16d8:	e0 91 f8 21 	lds	r30, 0x21F8	; 0x8021f8 <udc_ptr_conf>
    16dc:	f0 91 f9 21 	lds	r31, 0x21F9	; 0x8021f9 <udc_ptr_conf+0x1>
    16e0:	01 90       	ld	r0, Z+
    16e2:	f0 81       	ld	r31, Z
    16e4:	e0 2d       	mov	r30, r0
    16e6:	84 81       	ldd	r24, Z+4	; 0x04
    16e8:	c8 17       	cp	r28, r24
    16ea:	98 f3       	brcs	.-26     	; 0x16d2 <udc_reset+0x20>
    16ec:	10 92 fa 21 	sts	0x21FA, r1	; 0x8021fa <udc_num_configuration>
    16f0:	80 91 fe 21 	lds	r24, 0x21FE	; 0x8021fe <udc_device_status>
    16f4:	81 fd       	sbrc	r24, 1
    16f6:	0e 94 56 16 	call	0x2cac	; 0x2cac <main_remotewakeup_disable>
    16fa:	10 92 fe 21 	sts	0x21FE, r1	; 0x8021fe <udc_device_status>
    16fe:	10 92 ff 21 	sts	0x21FF, r1	; 0x8021ff <udc_device_status+0x1>
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1706:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1708:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <udc_num_configuration>
    170c:	88 23       	and	r24, r24
    170e:	49 f1       	breq	.+82     	; 0x1762 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1710:	a0 91 f8 21 	lds	r26, 0x21F8	; 0x8021f8 <udc_ptr_conf>
    1714:	b0 91 f9 21 	lds	r27, 0x21F9	; 0x8021f9 <udc_ptr_conf+0x1>
    1718:	ed 91       	ld	r30, X+
    171a:	fc 91       	ld	r31, X
    171c:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    171e:	84 81       	ldd	r24, Z+4	; 0x04
    1720:	88 23       	and	r24, r24
    1722:	f9 f0       	breq	.+62     	; 0x1762 <udc_sof_notify+0x5c>
    1724:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1726:	ec 2f       	mov	r30, r28
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	ee 0f       	add	r30, r30
    172c:	ff 1f       	adc	r31, r31
    172e:	12 96       	adiw	r26, 0x02	; 2
    1730:	8d 91       	ld	r24, X+
    1732:	9c 91       	ld	r25, X
    1734:	13 97       	sbiw	r26, 0x03	; 3
    1736:	e8 0f       	add	r30, r24
    1738:	f9 1f       	adc	r31, r25
    173a:	01 90       	ld	r0, Z+
    173c:	f0 81       	ld	r31, Z
    173e:	e0 2d       	mov	r30, r0
    1740:	00 84       	ldd	r0, Z+8	; 0x08
    1742:	f1 85       	ldd	r31, Z+9	; 0x09
    1744:	e0 2d       	mov	r30, r0
    1746:	30 97       	sbiw	r30, 0x00	; 0
    1748:	09 f0       	breq	.+2      	; 0x174c <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    174a:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    174c:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    174e:	a0 91 f8 21 	lds	r26, 0x21F8	; 0x8021f8 <udc_ptr_conf>
    1752:	b0 91 f9 21 	lds	r27, 0x21F9	; 0x8021f9 <udc_ptr_conf+0x1>
    1756:	ed 91       	ld	r30, X+
    1758:	fc 91       	ld	r31, X
    175a:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    175c:	84 81       	ldd	r24, Z+4	; 0x04
    175e:	c8 17       	cp	r28, r24
    1760:	10 f3       	brcs	.-60     	; 0x1726 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1762:	cf 91       	pop	r28
    1764:	08 95       	ret

00001766 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    176e:	ed ec       	ldi	r30, 0xCD	; 205
    1770:	f3 e2       	ldi	r31, 0x23	; 35
    1772:	12 86       	std	Z+10, r1	; 0x0a
    1774:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1776:	14 86       	std	Z+12, r1	; 0x0c
    1778:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    177a:	16 86       	std	Z+14, r1	; 0x0e
    177c:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    177e:	80 81       	ld	r24, Z
    1780:	88 23       	and	r24, r24
    1782:	0c f0       	brlt	.+2      	; 0x1786 <udc_process_setup+0x20>
    1784:	7e c2       	rjmp	.+1276   	; 0x1c82 <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1786:	20 91 d3 23 	lds	r18, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0x6>
    178a:	30 91 d4 23 	lds	r19, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0x7>
    178e:	21 15       	cp	r18, r1
    1790:	31 05       	cpc	r19, r1
    1792:	09 f0       	breq	.+2      	; 0x1796 <udc_process_setup+0x30>
    1794:	7b c2       	rjmp	.+1270   	; 0x1c8c <udc_process_setup+0x526>
    1796:	6d c2       	rjmp	.+1242   	; 0x1c72 <udc_process_setup+0x50c>
    1798:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    179a:	09 f0       	breq	.+2      	; 0x179e <udc_process_setup+0x38>
    179c:	a0 c0       	rjmp	.+320    	; 0x18de <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    179e:	90 91 ce 23 	lds	r25, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x1>
    17a2:	96 30       	cpi	r25, 0x06	; 6
    17a4:	79 f0       	breq	.+30     	; 0x17c4 <udc_process_setup+0x5e>
    17a6:	98 30       	cpi	r25, 0x08	; 8
    17a8:	09 f4       	brne	.+2      	; 0x17ac <udc_process_setup+0x46>
    17aa:	8f c0       	rjmp	.+286    	; 0x18ca <udc_process_setup+0x164>
    17ac:	91 11       	cpse	r25, r1
    17ae:	97 c0       	rjmp	.+302    	; 0x18de <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    17b0:	22 30       	cpi	r18, 0x02	; 2
    17b2:	31 05       	cpc	r19, r1
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <udc_process_setup+0x52>
    17b6:	19 c2       	rjmp	.+1074   	; 0x1bea <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    17b8:	62 e0       	ldi	r22, 0x02	; 2
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	8e ef       	ldi	r24, 0xFE	; 254
    17be:	91 e2       	ldi	r25, 0x21	; 33
    17c0:	5d d6       	rcall	.+3258   	; 0x247c <udd_set_setup_payload>
    17c2:	69 c2       	rjmp	.+1234   	; 0x1c96 <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    17c4:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x2>
    17c8:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    17cc:	29 2f       	mov	r18, r25
    17ce:	33 27       	eor	r19, r19
    17d0:	22 30       	cpi	r18, 0x02	; 2
    17d2:	31 05       	cpc	r19, r1
    17d4:	a9 f0       	breq	.+42     	; 0x1800 <udc_process_setup+0x9a>
    17d6:	20 f4       	brcc	.+8      	; 0x17e0 <udc_process_setup+0x7a>
    17d8:	21 30       	cpi	r18, 0x01	; 1
    17da:	31 05       	cpc	r19, r1
    17dc:	41 f0       	breq	.+16     	; 0x17ee <udc_process_setup+0x88>
    17de:	c7 c1       	rjmp	.+910    	; 0x1b6e <udc_process_setup+0x408>
    17e0:	23 30       	cpi	r18, 0x03	; 3
    17e2:	31 05       	cpc	r19, r1
    17e4:	d9 f1       	breq	.+118    	; 0x185c <udc_process_setup+0xf6>
    17e6:	2f 30       	cpi	r18, 0x0F	; 15
    17e8:	31 05       	cpc	r19, r1
    17ea:	51 f1       	breq	.+84     	; 0x1840 <udc_process_setup+0xda>
    17ec:	c0 c1       	rjmp	.+896    	; 0x1b6e <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    17ee:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <udc_config>
    17f2:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    17f6:	dc 01       	movw	r26, r24
    17f8:	6c 91       	ld	r22, X
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	3f d6       	rcall	.+3198   	; 0x247c <udd_set_setup_payload>
    17fe:	56 c0       	rjmp	.+172    	; 0x18ac <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1800:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    1804:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
    1808:	21 89       	ldd	r18, Z+17	; 0x11
    180a:	82 17       	cp	r24, r18
    180c:	08 f0       	brcs	.+2      	; 0x1810 <udc_process_setup+0xaa>
    180e:	ed c1       	rjmp	.+986    	; 0x1bea <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1810:	99 27       	eor	r25, r25
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    181e:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    1822:	e8 0f       	add	r30, r24
    1824:	f9 1f       	adc	r31, r25
    1826:	80 81       	ld	r24, Z
    1828:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    182a:	fc 01       	movw	r30, r24
    182c:	62 81       	ldd	r22, Z+2	; 0x02
    182e:	73 81       	ldd	r23, Z+3	; 0x03
    1830:	25 d6       	rcall	.+3146   	; 0x247c <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1832:	e0 91 d5 23 	lds	r30, 0x23D5	; 0x8023d5 <udd_g_ctrlreq+0x8>
    1836:	f0 91 d6 23 	lds	r31, 0x23D6	; 0x8023d6 <udd_g_ctrlreq+0x9>
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	81 83       	std	Z+1, r24	; 0x01
    183e:	36 c0       	rjmp	.+108    	; 0x18ac <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1840:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <udc_config+0x4>
    1844:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <udc_config+0x5>
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	09 f4       	brne	.+2      	; 0x184e <udc_process_setup+0xe8>
    184c:	ce c1       	rjmp	.+924    	; 0x1bea <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    184e:	dc 01       	movw	r26, r24
    1850:	12 96       	adiw	r26, 0x02	; 2
    1852:	6d 91       	ld	r22, X+
    1854:	7c 91       	ld	r23, X
    1856:	13 97       	sbiw	r26, 0x03	; 3
    1858:	11 d6       	rcall	.+3106   	; 0x247c <udd_set_setup_payload>
    185a:	28 c0       	rjmp	.+80     	; 0x18ac <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    185c:	99 27       	eor	r25, r25
    185e:	81 30       	cpi	r24, 0x01	; 1
    1860:	91 05       	cpc	r25, r1
    1862:	71 f0       	breq	.+28     	; 0x1880 <udc_process_setup+0x11a>
    1864:	38 f0       	brcs	.+14     	; 0x1874 <udc_process_setup+0x10e>
    1866:	02 97       	sbiw	r24, 0x02	; 2
    1868:	09 f0       	breq	.+2      	; 0x186c <udc_process_setup+0x106>
    186a:	8a c1       	rjmp	.+788    	; 0x1b80 <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    186c:	e4 e5       	ldi	r30, 0x54	; 84
    186e:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1870:	31 e2       	ldi	r19, 0x21	; 33
    1872:	09 c0       	rjmp	.+18     	; 0x1886 <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1874:	64 e0       	ldi	r22, 0x04	; 4
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	80 e8       	ldi	r24, 0x80	; 128
    187a:	91 e2       	ldi	r25, 0x21	; 33
    187c:	ff d5       	rcall	.+3070   	; 0x247c <udd_set_setup_payload>
    187e:	16 c0       	rjmp	.+44     	; 0x18ac <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1880:	e6 e7       	ldi	r30, 0x76	; 118
    1882:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1884:	39 e0       	ldi	r19, 0x09	; 9
    1886:	a2 e1       	ldi	r26, 0x12	; 18
    1888:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    188a:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    188c:	81 91       	ld	r24, Z+
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	8d 93       	st	X+, r24
    1892:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1894:	2f 5f       	subi	r18, 0xFF	; 255
    1896:	23 17       	cp	r18, r19
    1898:	c8 f3       	brcs	.-14     	; 0x188c <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    189a:	63 2f       	mov	r22, r19
    189c:	66 0f       	add	r22, r22
    189e:	6e 5f       	subi	r22, 0xFE	; 254
    18a0:	60 93 10 21 	sts	0x2110, r22	; 0x802110 <udc_string_desc>
		udd_set_setup_payload(
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	80 e1       	ldi	r24, 0x10	; 16
    18a8:	91 e2       	ldi	r25, 0x21	; 33
    18aa:	e8 d5       	rcall	.+3024   	; 0x247c <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    18ac:	ed ec       	ldi	r30, 0xCD	; 205
    18ae:	f3 e2       	ldi	r31, 0x23	; 35
    18b0:	86 81       	ldd	r24, Z+6	; 0x06
    18b2:	97 81       	ldd	r25, Z+7	; 0x07
    18b4:	22 85       	ldd	r18, Z+10	; 0x0a
    18b6:	33 85       	ldd	r19, Z+11	; 0x0b
    18b8:	82 17       	cp	r24, r18
    18ba:	93 07       	cpc	r25, r19
    18bc:	08 f0       	brcs	.+2      	; 0x18c0 <udc_process_setup+0x15a>
    18be:	eb c1       	rjmp	.+982    	; 0x1c96 <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    18c0:	80 93 d7 23 	sts	0x23D7, r24	; 0x8023d7 <udd_g_ctrlreq+0xa>
    18c4:	90 93 d8 23 	sts	0x23D8, r25	; 0x8023d8 <udd_g_ctrlreq+0xb>
    18c8:	e6 c1       	rjmp	.+972    	; 0x1c96 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    18ca:	21 30       	cpi	r18, 0x01	; 1
    18cc:	31 05       	cpc	r19, r1
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    18d0:	8c c1       	rjmp	.+792    	; 0x1bea <udc_process_setup+0x484>
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	8a ef       	ldi	r24, 0xFA	; 250
    18d8:	91 e2       	ldi	r25, 0x21	; 33
    18da:	d0 d5       	rcall	.+2976   	; 0x247c <udd_set_setup_payload>
    18dc:	dc c1       	rjmp	.+952    	; 0x1c96 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	e1 f5       	brne	.+120    	; 0x195a <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    18e2:	90 91 ce 23 	lds	r25, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x1>
    18e6:	9a 30       	cpi	r25, 0x0A	; 10
    18e8:	c1 f5       	brne	.+112    	; 0x195a <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    18ea:	21 30       	cpi	r18, 0x01	; 1
    18ec:	31 05       	cpc	r19, r1
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <udc_process_setup+0x18c>
    18f0:	4c c1       	rjmp	.+664    	; 0x1b8a <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    18f2:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <udc_num_configuration>
    18f6:	88 23       	and	r24, r24
    18f8:	09 f4       	brne	.+2      	; 0x18fc <udc_process_setup+0x196>
    18fa:	47 c1       	rjmp	.+654    	; 0x1b8a <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18fc:	c0 91 d1 23 	lds	r28, 0x23D1	; 0x8023d1 <udd_g_ctrlreq+0x4>
    1900:	d0 91 d2 23 	lds	r29, 0x23D2	; 0x8023d2 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1904:	00 91 f8 21 	lds	r16, 0x21F8	; 0x8021f8 <udc_ptr_conf>
    1908:	10 91 f9 21 	lds	r17, 0x21F9	; 0x8021f9 <udc_ptr_conf+0x1>
    190c:	d8 01       	movw	r26, r16
    190e:	ed 91       	ld	r30, X+
    1910:	fc 91       	ld	r31, X
    1912:	84 81       	ldd	r24, Z+4	; 0x04
    1914:	c8 17       	cp	r28, r24
    1916:	08 f0       	brcs	.+2      	; 0x191a <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1918:	38 c1       	rjmp	.+624    	; 0x1b8a <udc_process_setup+0x424>
    191a:	60 e0       	ldi	r22, 0x00	; 0
    191c:	8c 2f       	mov	r24, r28
    191e:	14 de       	rcall	.-984    	; 0x1548 <udc_update_iface_desc>
    1920:	88 23       	and	r24, r24
    1922:	09 f4       	brne	.+2      	; 0x1926 <udc_process_setup+0x1c0>
    1924:	2d c1       	rjmp	.+602    	; 0x1b80 <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1926:	ce 01       	movw	r24, r28
    1928:	99 27       	eor	r25, r25
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	d8 01       	movw	r26, r16
    1930:	12 96       	adiw	r26, 0x02	; 2
    1932:	ed 91       	ld	r30, X+
    1934:	fc 91       	ld	r31, X
    1936:	13 97       	sbiw	r26, 0x03	; 3
    1938:	e8 0f       	add	r30, r24
    193a:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    193c:	01 90       	ld	r0, Z+
    193e:	f0 81       	ld	r31, Z
    1940:	e0 2d       	mov	r30, r0
    1942:	86 81       	ldd	r24, Z+6	; 0x06
    1944:	97 81       	ldd	r25, Z+7	; 0x07
    1946:	fc 01       	movw	r30, r24
    1948:	19 95       	eicall
    194a:	80 93 fc 21 	sts	0x21FC, r24	; 0x8021fc <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    194e:	61 e0       	ldi	r22, 0x01	; 1
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	8c ef       	ldi	r24, 0xFC	; 252
    1954:	91 e2       	ldi	r25, 0x21	; 33
    1956:	92 d5       	rcall	.+2852   	; 0x247c <udd_set_setup_payload>
    1958:	9e c1       	rjmp	.+828    	; 0x1c96 <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    195a:	82 30       	cpi	r24, 0x02	; 2
    195c:	09 f0       	breq	.+2      	; 0x1960 <udc_process_setup+0x1fa>
    195e:	10 c1       	rjmp	.+544    	; 0x1b80 <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1960:	80 91 ce 23 	lds	r24, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x1>
    1964:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1966:	05 c1       	rjmp	.+522    	; 0x1b72 <udc_process_setup+0x40c>
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	09 f0       	breq	.+2      	; 0x1970 <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    196e:	3d c1       	rjmp	.+634    	; 0x1bea <udc_process_setup+0x484>
    1970:	80 91 d1 23 	lds	r24, 0x23D1	; 0x8023d1 <udd_g_ctrlreq+0x4>
    1974:	12 d6       	rcall	.+3108   	; 0x259a <udd_ep_is_halted>
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <udc_ep_status.4579>
    197c:	90 93 f5 21 	sts	0x21F5, r25	; 0x8021f5 <udc_ep_status.4579+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1980:	62 e0       	ldi	r22, 0x02	; 2
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	84 ef       	ldi	r24, 0xF4	; 244
    1986:	91 e2       	ldi	r25, 0x21	; 33
    1988:	79 d5       	rcall	.+2802   	; 0x247c <udd_set_setup_payload>
    198a:	85 c1       	rjmp	.+778    	; 0x1c96 <udc_process_setup+0x530>
    198c:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    198e:	09 f0       	breq	.+2      	; 0x1992 <udc_process_setup+0x22c>
    1990:	9f c0       	rjmp	.+318    	; 0x1ad0 <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1992:	90 91 ce 23 	lds	r25, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x1>
    1996:	93 30       	cpi	r25, 0x03	; 3
    1998:	91 f1       	breq	.+100    	; 0x19fe <udc_process_setup+0x298>
    199a:	18 f4       	brcc	.+6      	; 0x19a2 <udc_process_setup+0x23c>
    199c:	91 30       	cpi	r25, 0x01	; 1
    199e:	a9 f0       	breq	.+42     	; 0x19ca <udc_process_setup+0x264>
    19a0:	97 c0       	rjmp	.+302    	; 0x1ad0 <udc_process_setup+0x36a>
    19a2:	95 30       	cpi	r25, 0x05	; 5
    19a4:	21 f0       	breq	.+8      	; 0x19ae <udc_process_setup+0x248>
    19a6:	99 30       	cpi	r25, 0x09	; 9
    19a8:	09 f4       	brne	.+2      	; 0x19ac <udc_process_setup+0x246>
    19aa:	43 c0       	rjmp	.+134    	; 0x1a32 <udc_process_setup+0x2cc>
    19ac:	91 c0       	rjmp	.+290    	; 0x1ad0 <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19ae:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0x6>
    19b2:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0x7>
    19b6:	89 2b       	or	r24, r25
    19b8:	09 f0       	breq	.+2      	; 0x19bc <udc_process_setup+0x256>
    19ba:	17 c1       	rjmp	.+558    	; 0x1bea <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    19bc:	8f e9       	ldi	r24, 0x9F	; 159
    19be:	9a e0       	ldi	r25, 0x0A	; 10
    19c0:	80 93 d9 23 	sts	0x23D9, r24	; 0x8023d9 <udd_g_ctrlreq+0xc>
    19c4:	90 93 da 23 	sts	0x23DA, r25	; 0x8023da <udd_g_ctrlreq+0xd>
    19c8:	66 c1       	rjmp	.+716    	; 0x1c96 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19ca:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0x6>
    19ce:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0x7>
    19d2:	89 2b       	or	r24, r25
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <udc_process_setup+0x272>
    19d6:	09 c1       	rjmp	.+530    	; 0x1bea <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    19d8:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x2>
    19dc:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x3>
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <udc_process_setup+0x280>
    19e4:	02 c1       	rjmp	.+516    	; 0x1bea <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    19e6:	80 91 fe 21 	lds	r24, 0x21FE	; 0x8021fe <udc_device_status>
    19ea:	90 91 ff 21 	lds	r25, 0x21FF	; 0x8021ff <udc_device_status+0x1>
    19ee:	8d 7f       	andi	r24, 0xFD	; 253
    19f0:	80 93 fe 21 	sts	0x21FE, r24	; 0x8021fe <udc_device_status>
    19f4:	90 93 ff 21 	sts	0x21FF, r25	; 0x8021ff <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    19f8:	0e 94 56 16 	call	0x2cac	; 0x2cac <main_remotewakeup_disable>
    19fc:	4c c1       	rjmp	.+664    	; 0x1c96 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    19fe:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0x6>
    1a02:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0x7>
    1a06:	89 2b       	or	r24, r25
    1a08:	09 f0       	breq	.+2      	; 0x1a0c <udc_process_setup+0x2a6>
    1a0a:	ef c0       	rjmp	.+478    	; 0x1bea <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1a0c:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x2>
    1a10:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x3>
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	09 f0       	breq	.+2      	; 0x1a1a <udc_process_setup+0x2b4>
    1a18:	ae c0       	rjmp	.+348    	; 0x1b76 <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    1a1a:	80 91 fe 21 	lds	r24, 0x21FE	; 0x8021fe <udc_device_status>
    1a1e:	90 91 ff 21 	lds	r25, 0x21FF	; 0x8021ff <udc_device_status+0x1>
    1a22:	82 60       	ori	r24, 0x02	; 2
    1a24:	80 93 fe 21 	sts	0x21FE, r24	; 0x8021fe <udc_device_status>
    1a28:	90 93 ff 21 	sts	0x21FF, r25	; 0x8021ff <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    1a2c:	0e 94 55 16 	call	0x2caa	; 0x2caa <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1a30:	32 c1       	rjmp	.+612    	; 0x1c96 <udc_process_setup+0x530>
    1a32:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0x6>
    1a36:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0x7>
    1a3a:	89 2b       	or	r24, r25
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1a3e:	d5 c0       	rjmp	.+426    	; 0x1bea <udc_process_setup+0x484>
    1a40:	1a d5       	rcall	.+2612   	; 0x2476 <udd_getaddress>
    1a42:	88 23       	and	r24, r24
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <udc_process_setup+0x2e2>
    1a46:	9c c0       	rjmp	.+312    	; 0x1b80 <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a48:	20 91 cf 23 	lds	r18, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x2>
    1a4c:	30 91 d0 23 	lds	r19, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    1a50:	33 27       	eor	r19, r19
    1a52:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    1a56:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1a5a:	81 89       	ldd	r24, Z+17	; 0x11
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	82 17       	cp	r24, r18
    1a60:	93 07       	cpc	r25, r19
    1a62:	08 f4       	brcc	.+2      	; 0x1a66 <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1a64:	8d c0       	rjmp	.+282    	; 0x1b80 <udc_process_setup+0x41a>
    1a66:	25 de       	rcall	.-950    	; 0x16b2 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1a68:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x2>
    1a6c:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x3>
    1a70:	80 93 fa 21 	sts	0x21FA, r24	; 0x8021fa <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1a74:	88 23       	and	r24, r24
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <udc_process_setup+0x314>
    1a78:	0e c1       	rjmp	.+540    	; 0x1c96 <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1a7a:	99 27       	eor	r25, r25
    1a7c:	81 50       	subi	r24, 0x01	; 1
    1a7e:	90 4c       	sbci	r25, 0xC0	; 192
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    1a8c:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    1a90:	e8 0f       	add	r30, r24
    1a92:	f9 1f       	adc	r31, r25
    1a94:	e0 93 f8 21 	sts	0x21F8, r30	; 0x8021f8 <udc_ptr_conf>
    1a98:	f0 93 f9 21 	sts	0x21F9, r31	; 0x8021f9 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a9c:	01 90       	ld	r0, Z+
    1a9e:	f0 81       	ld	r31, Z
    1aa0:	e0 2d       	mov	r30, r0
    1aa2:	84 81       	ldd	r24, Z+4	; 0x04
    1aa4:	88 23       	and	r24, r24
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <udc_process_setup+0x344>
    1aa8:	f6 c0       	rjmp	.+492    	; 0x1c96 <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1aaa:	c0 e0       	ldi	r28, 0x00	; 0
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	8c 2f       	mov	r24, r28
    1ab0:	c7 dd       	rcall	.-1138   	; 0x1640 <udc_iface_enable>
    1ab2:	88 23       	and	r24, r24
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <udc_process_setup+0x352>
    1ab6:	64 c0       	rjmp	.+200    	; 0x1b80 <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1ab8:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1aba:	e0 91 f8 21 	lds	r30, 0x21F8	; 0x8021f8 <udc_ptr_conf>
    1abe:	f0 91 f9 21 	lds	r31, 0x21F9	; 0x8021f9 <udc_ptr_conf+0x1>
    1ac2:	01 90       	ld	r0, Z+
    1ac4:	f0 81       	ld	r31, Z
    1ac6:	e0 2d       	mov	r30, r0
    1ac8:	84 81       	ldd	r24, Z+4	; 0x04
    1aca:	c8 17       	cp	r28, r24
    1acc:	78 f3       	brcs	.-34     	; 0x1aac <udc_process_setup+0x346>
    1ace:	e3 c0       	rjmp	.+454    	; 0x1c96 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1ad0:	81 30       	cpi	r24, 0x01	; 1
    1ad2:	e9 f4       	brne	.+58     	; 0x1b0e <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1ad4:	90 91 ce 23 	lds	r25, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x1>
    1ad8:	9b 30       	cpi	r25, 0x0B	; 11
    1ada:	c9 f4       	brne	.+50     	; 0x1b0e <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1adc:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0x6>
    1ae0:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0x7>
    1ae4:	89 2b       	or	r24, r25
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1ae8:	50 c0       	rjmp	.+160    	; 0x1b8a <udc_process_setup+0x424>
    1aea:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <udc_num_configuration>
    1aee:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <udc_process_setup+0x38e>
    1af2:	4b c0       	rjmp	.+150    	; 0x1b8a <udc_process_setup+0x424>
    1af4:	ed ec       	ldi	r30, 0xCD	; 205
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1af6:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1af8:	c4 81       	ldd	r28, Z+4	; 0x04
    1afa:	d2 81       	ldd	r29, Z+2	; 0x02
    1afc:	8c 2f       	mov	r24, r28
    1afe:	5e dd       	rcall	.-1348   	; 0x15bc <udc_iface_disable>
    1b00:	88 23       	and	r24, r24
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1b04:	3d c0       	rjmp	.+122    	; 0x1b80 <udc_process_setup+0x41a>
    1b06:	6d 2f       	mov	r22, r29
    1b08:	8c 2f       	mov	r24, r28
    1b0a:	9a dd       	rcall	.-1228   	; 0x1640 <udc_iface_enable>
    1b0c:	37 c0       	rjmp	.+110    	; 0x1b7c <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1b0e:	82 30       	cpi	r24, 0x02	; 2
    1b10:	b9 f5       	brne	.+110    	; 0x1b80 <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b12:	80 91 ce 23 	lds	r24, 0x23CE	; 0x8023ce <udd_g_ctrlreq+0x1>
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	19 f0       	breq	.+6      	; 0x1b20 <udc_process_setup+0x3ba>
    1b1a:	83 30       	cpi	r24, 0x03	; 3
    1b1c:	99 f0       	breq	.+38     	; 0x1b44 <udc_process_setup+0x3de>
    1b1e:	2d c0       	rjmp	.+90     	; 0x1b7a <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b20:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0x6>
    1b24:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0x7>
    1b28:	89 2b       	or	r24, r25
    1b2a:	09 f0       	breq	.+2      	; 0x1b2e <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1b2c:	5e c0       	rjmp	.+188    	; 0x1bea <udc_process_setup+0x484>
    1b2e:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x2>
    1b32:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x3>
    1b36:	89 2b       	or	r24, r25
    1b38:	09 f0       	breq	.+2      	; 0x1b3c <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b3a:	57 c0       	rjmp	.+174    	; 0x1bea <udc_process_setup+0x484>
    1b3c:	80 91 d1 23 	lds	r24, 0x23D1	; 0x8023d1 <udd_g_ctrlreq+0x4>
    1b40:	47 d5       	rcall	.+2702   	; 0x25d0 <udd_ep_clear_halt>
    1b42:	1c c0       	rjmp	.+56     	; 0x1b7c <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1b44:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0x6>
    1b48:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0x7>
    1b4c:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <udc_process_setup+0x3ec>
    1b50:	4c c0       	rjmp	.+152    	; 0x1bea <udc_process_setup+0x484>
    1b52:	80 91 cf 23 	lds	r24, 0x23CF	; 0x8023cf <udd_g_ctrlreq+0x2>
    1b56:	90 91 d0 23 	lds	r25, 0x23D0	; 0x8023d0 <udd_g_ctrlreq+0x3>
    1b5a:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <udc_process_setup+0x3fa>
    1b5e:	45 c0       	rjmp	.+138    	; 0x1bea <udc_process_setup+0x484>
    1b60:	cd ec       	ldi	r28, 0xCD	; 205
    1b62:	d3 e2       	ldi	r29, 0x23	; 35
    1b64:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1b66:	35 d6       	rcall	.+3178   	; 0x27d2 <udd_ep_abort>
    1b68:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6a:	9e d6       	rcall	.+3388   	; 0x28a8 <udd_ep_set_halt>
    1b6c:	07 c0       	rjmp	.+14     	; 0x1b7c <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	05 c0       	rjmp	.+10     	; 0x1b7c <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	03 c0       	rjmp	.+6      	; 0x1b7c <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	01 c0       	rjmp	.+2      	; 0x1b7c <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1b7c:	81 11       	cpse	r24, r1
    1b7e:	8c c0       	rjmp	.+280    	; 0x1c98 <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1b80:	80 91 cd 23 	lds	r24, 0x23CD	; 0x8023cd <udd_g_ctrlreq>
    1b84:	8f 71       	andi	r24, 0x1F	; 31
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	81 f5       	brne	.+96     	; 0x1bea <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1b8a:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <udc_num_configuration>
    1b8e:	88 23       	and	r24, r24
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b92:	71 c0       	rjmp	.+226    	; 0x1c76 <udc_process_setup+0x510>
    1b94:	00 91 d1 23 	lds	r16, 0x23D1	; 0x8023d1 <udd_g_ctrlreq+0x4>
    1b98:	10 91 d2 23 	lds	r17, 0x23D2	; 0x8023d2 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b9c:	c0 91 f8 21 	lds	r28, 0x21F8	; 0x8021f8 <udc_ptr_conf>
    1ba0:	d0 91 f9 21 	lds	r29, 0x21F9	; 0x8021f9 <udc_ptr_conf+0x1>
    1ba4:	e8 81       	ld	r30, Y
    1ba6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ba8:	84 81       	ldd	r24, Z+4	; 0x04
    1baa:	08 17       	cp	r16, r24
    1bac:	08 f0       	brcs	.+2      	; 0x1bb0 <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1bae:	65 c0       	rjmp	.+202    	; 0x1c7a <udc_process_setup+0x514>
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	80 2f       	mov	r24, r16
    1bb4:	c9 dc       	rcall	.-1646   	; 0x1548 <udc_update_iface_desc>
    1bb6:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1bb8:	c1 f0       	breq	.+48     	; 0x1bea <udc_process_setup+0x484>
    1bba:	f8 01       	movw	r30, r16
    1bbc:	ff 27       	eor	r31, r31
    1bbe:	cf 01       	movw	r24, r30
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	ea 81       	ldd	r30, Y+2	; 0x02
    1bc6:	fb 81       	ldd	r31, Y+3	; 0x03
    1bc8:	e8 0f       	add	r30, r24
    1bca:	f9 1f       	adc	r31, r25
    1bcc:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1bce:	d1 81       	ldd	r29, Z+1	; 0x01
    1bd0:	ee 81       	ldd	r30, Y+6	; 0x06
    1bd2:	ff 81       	ldd	r31, Y+7	; 0x07
    1bd4:	19 95       	eicall
    1bd6:	68 2f       	mov	r22, r24
    1bd8:	80 2f       	mov	r24, r16
    1bda:	b6 dc       	rcall	.-1684   	; 0x1548 <udc_update_iface_desc>
    1bdc:	88 23       	and	r24, r24
    1bde:	29 f0       	breq	.+10     	; 0x1bea <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1be0:	ec 81       	ldd	r30, Y+4	; 0x04
    1be2:	fd 81       	ldd	r31, Y+5	; 0x05
    1be4:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1be6:	81 11       	cpse	r24, r1
    1be8:	57 c0       	rjmp	.+174    	; 0x1c98 <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1bea:	80 91 cd 23 	lds	r24, 0x23CD	; 0x8023cd <udd_g_ctrlreq>
    1bee:	8f 71       	andi	r24, 0x1F	; 31
    1bf0:	82 30       	cpi	r24, 0x02	; 2
    1bf2:	09 f0       	breq	.+2      	; 0x1bf6 <udc_process_setup+0x490>
    1bf4:	44 c0       	rjmp	.+136    	; 0x1c7e <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1bf6:	80 91 fa 21 	lds	r24, 0x21FA	; 0x8021fa <udc_num_configuration>
    1bfa:	88 23       	and	r24, r24
    1bfc:	b1 f1       	breq	.+108    	; 0x1c6a <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1bfe:	a0 91 f8 21 	lds	r26, 0x21F8	; 0x8021f8 <udc_ptr_conf>
    1c02:	b0 91 f9 21 	lds	r27, 0x21F9	; 0x8021f9 <udc_ptr_conf+0x1>
    1c06:	ed 91       	ld	r30, X+
    1c08:	fc 91       	ld	r31, X
    1c0a:	11 97       	sbiw	r26, 0x01	; 1
    1c0c:	84 81       	ldd	r24, Z+4	; 0x04
    1c0e:	88 23       	and	r24, r24
    1c10:	71 f1       	breq	.+92     	; 0x1c6e <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1c12:	c0 e0       	ldi	r28, 0x00	; 0
    1c14:	ec 2f       	mov	r30, r28
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	ee 0f       	add	r30, r30
    1c1a:	ff 1f       	adc	r31, r31
    1c1c:	12 96       	adiw	r26, 0x02	; 2
    1c1e:	8d 91       	ld	r24, X+
    1c20:	9c 91       	ld	r25, X
    1c22:	13 97       	sbiw	r26, 0x03	; 3
    1c24:	e8 0f       	add	r30, r24
    1c26:	f9 1f       	adc	r31, r25
    1c28:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1c2a:	11 81       	ldd	r17, Z+1	; 0x01
    1c2c:	d8 01       	movw	r26, r16
    1c2e:	16 96       	adiw	r26, 0x06	; 6
    1c30:	ed 91       	ld	r30, X+
    1c32:	fc 91       	ld	r31, X
    1c34:	17 97       	sbiw	r26, 0x07	; 7
    1c36:	19 95       	eicall
    1c38:	68 2f       	mov	r22, r24
    1c3a:	8c 2f       	mov	r24, r28
    1c3c:	85 dc       	rcall	.-1782   	; 0x1548 <udc_update_iface_desc>
    1c3e:	88 23       	and	r24, r24
    1c40:	59 f1       	breq	.+86     	; 0x1c98 <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1c42:	d8 01       	movw	r26, r16
    1c44:	14 96       	adiw	r26, 0x04	; 4
    1c46:	ed 91       	ld	r30, X+
    1c48:	fc 91       	ld	r31, X
    1c4a:	15 97       	sbiw	r26, 0x05	; 5
    1c4c:	19 95       	eicall
    1c4e:	81 11       	cpse	r24, r1
    1c50:	23 c0       	rjmp	.+70     	; 0x1c98 <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1c52:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c54:	a0 91 f8 21 	lds	r26, 0x21F8	; 0x8021f8 <udc_ptr_conf>
    1c58:	b0 91 f9 21 	lds	r27, 0x21F9	; 0x8021f9 <udc_ptr_conf+0x1>
    1c5c:	ed 91       	ld	r30, X+
    1c5e:	fc 91       	ld	r31, X
    1c60:	11 97       	sbiw	r26, 0x01	; 1
    1c62:	94 81       	ldd	r25, Z+4	; 0x04
    1c64:	c9 17       	cp	r28, r25
    1c66:	b0 f2       	brcs	.-84     	; 0x1c14 <udc_process_setup+0x4ae>
    1c68:	17 c0       	rjmp	.+46     	; 0x1c98 <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	15 c0       	rjmp	.+42     	; 0x1c98 <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	13 c0       	rjmp	.+38     	; 0x1c98 <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	11 c0       	rjmp	.+34     	; 0x1c98 <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	0f c0       	rjmp	.+30     	; 0x1c98 <udc_process_setup+0x532>
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	0d c0       	rjmp	.+26     	; 0x1c98 <udc_process_setup+0x532>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	0b c0       	rjmp	.+22     	; 0x1c98 <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1c82:	98 2f       	mov	r25, r24
    1c84:	90 76       	andi	r25, 0x60	; 96
    1c86:	09 f0       	breq	.+2      	; 0x1c8a <udc_process_setup+0x524>
    1c88:	7b cf       	rjmp	.-266    	; 0x1b80 <udc_process_setup+0x41a>
    1c8a:	80 ce       	rjmp	.-768    	; 0x198c <udc_process_setup+0x226>
    1c8c:	98 2f       	mov	r25, r24
    1c8e:	90 76       	andi	r25, 0x60	; 96
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <udc_process_setup+0x52e>
    1c92:	76 cf       	rjmp	.-276    	; 0x1b80 <udc_process_setup+0x41a>
    1c94:	81 cd       	rjmp	.-1278   	; 0x1798 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	08 95       	ret

00001ca2 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1ca2:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1ca6:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1ca8:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1caa:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1cae:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1cb0:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1cb4:	08 95       	ret

00001cb6 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1cb6:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1cb8:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1cba:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1cbc:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1cbe:	60 83       	st	Z, r22
	ret                             // Return to caller
    1cc0:	08 95       	ret

00001cc2 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	1f 92       	push	r1
    1cc8:	1f 92       	push	r1
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	81 11       	cpse	r24, r1
    1cd0:	26 c0       	rjmp	.+76     	; 0x1d1e <udd_sleep_mode+0x5c>
    1cd2:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_b_idle>
    1cd6:	99 23       	and	r25, r25
    1cd8:	f9 f0       	breq	.+62     	; 0x1d18 <udd_sleep_mode+0x56>
    1cda:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <sleepmgr_locks+0x1>
    1cde:	91 11       	cpse	r25, r1
    1ce0:	01 c0       	rjmp	.+2      	; 0x1ce4 <udd_sleep_mode+0x22>
    1ce2:	ff cf       	rjmp	.-2      	; 0x1ce2 <udd_sleep_mode+0x20>
    1ce4:	9f b7       	in	r25, 0x3f	; 63
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	f8 94       	cli
    1cea:	2a 81       	ldd	r18, Y+2	; 0x02
    1cec:	e7 ec       	ldi	r30, 0xC7	; 199
    1cee:	f3 e2       	ldi	r31, 0x23	; 35
    1cf0:	91 81       	ldd	r25, Z+1	; 0x01
    1cf2:	91 50       	subi	r25, 0x01	; 1
    1cf4:	91 83       	std	Z+1, r25	; 0x01
    1cf6:	2f bf       	out	0x3f, r18	; 63
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <udd_sleep_mode+0x56>
    1cfa:	90 91 c8 23 	lds	r25, 0x23C8	; 0x8023c8 <sleepmgr_locks+0x1>
    1cfe:	9f 3f       	cpi	r25, 0xFF	; 255
    1d00:	09 f4       	brne	.+2      	; 0x1d04 <udd_sleep_mode+0x42>
    1d02:	ff cf       	rjmp	.-2      	; 0x1d02 <udd_sleep_mode+0x40>
    1d04:	9f b7       	in	r25, 0x3f	; 63
    1d06:	99 83       	std	Y+1, r25	; 0x01
    1d08:	f8 94       	cli
    1d0a:	29 81       	ldd	r18, Y+1	; 0x01
    1d0c:	e7 ec       	ldi	r30, 0xC7	; 199
    1d0e:	f3 e2       	ldi	r31, 0x23	; 35
    1d10:	91 81       	ldd	r25, Z+1	; 0x01
    1d12:	9f 5f       	subi	r25, 0xFF	; 255
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	2f bf       	out	0x3f, r18	; 63
    1d18:	80 93 c0 23 	sts	0x23C0, r24	; 0x8023c0 <udd_b_idle>
    1d1c:	05 c0       	rjmp	.+10     	; 0x1d28 <udd_sleep_mode+0x66>
    1d1e:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_b_idle>
    1d22:	99 23       	and	r25, r25
    1d24:	51 f3       	breq	.-44     	; 0x1cfa <udd_sleep_mode+0x38>
    1d26:	f8 cf       	rjmp	.-16     	; 0x1d18 <udd_sleep_mode+0x56>
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	08 95       	ret

00001d32 <udd_ctrl_init>:
    1d32:	0f 93       	push	r16
    1d34:	e8 ec       	ldi	r30, 0xC8	; 200
    1d36:	f4 e0       	ldi	r31, 0x04	; 4
    1d38:	80 81       	ld	r24, Z
    1d3a:	8f 7d       	andi	r24, 0xDF	; 223
    1d3c:	80 83       	st	Z, r24
    1d3e:	80 81       	ld	r24, Z
    1d40:	8f 7d       	andi	r24, 0xDF	; 223
    1d42:	80 83       	st	Z, r24
    1d44:	e4 e7       	ldi	r30, 0x74	; 116
    1d46:	f3 e2       	ldi	r31, 0x23	; 35
    1d48:	02 e0       	ldi	r16, 0x02	; 2
    1d4a:	05 93       	las	Z, r16
    1d4c:	10 92 76 23 	sts	0x2376, r1	; 0x802376 <udd_sram+0x1e>
    1d50:	10 92 77 23 	sts	0x2377, r1	; 0x802377 <udd_sram+0x1f>
    1d54:	00 e2       	ldi	r16, 0x20	; 32
    1d56:	06 93       	lac	Z, r16
    1d58:	00 e4       	ldi	r16, 0x40	; 64
    1d5a:	06 93       	lac	Z, r16
    1d5c:	ec e6       	ldi	r30, 0x6C	; 108
    1d5e:	f3 e2       	ldi	r31, 0x23	; 35
    1d60:	00 e4       	ldi	r16, 0x40	; 64
    1d62:	06 93       	lac	Z, r16
    1d64:	ed ec       	ldi	r30, 0xCD	; 205
    1d66:	f3 e2       	ldi	r31, 0x23	; 35
    1d68:	14 86       	std	Z+12, r1	; 0x0c
    1d6a:	15 86       	std	Z+13, r1	; 0x0d
    1d6c:	16 86       	std	Z+14, r1	; 0x0e
    1d6e:	17 86       	std	Z+15, r1	; 0x0f
    1d70:	12 86       	std	Z+10, r1	; 0x0a
    1d72:	13 86       	std	Z+11, r1	; 0x0b
    1d74:	10 92 55 23 	sts	0x2355, r1	; 0x802355 <udd_ep_control_state>
    1d78:	0f 91       	pop	r16
    1d7a:	08 95       	ret

00001d7c <udd_ctrl_stall_data>:
    1d7c:	0f 93       	push	r16
    1d7e:	85 e0       	ldi	r24, 0x05	; 5
    1d80:	80 93 55 23 	sts	0x2355, r24	; 0x802355 <udd_ep_control_state>
    1d84:	e5 e7       	ldi	r30, 0x75	; 117
    1d86:	f3 e2       	ldi	r31, 0x23	; 35
    1d88:	04 e0       	ldi	r16, 0x04	; 4
    1d8a:	05 93       	las	Z, r16
    1d8c:	ed e6       	ldi	r30, 0x6D	; 109
    1d8e:	f3 e2       	ldi	r31, 0x23	; 35
    1d90:	04 e0       	ldi	r16, 0x04	; 4
    1d92:	05 93       	las	Z, r16
    1d94:	0f 91       	pop	r16
    1d96:	08 95       	ret

00001d98 <udd_ctrl_send_zlp_in>:
    1d98:	0f 93       	push	r16
    1d9a:	83 e0       	ldi	r24, 0x03	; 3
    1d9c:	80 93 55 23 	sts	0x2355, r24	; 0x802355 <udd_ep_control_state>
    1da0:	10 92 76 23 	sts	0x2376, r1	; 0x802376 <udd_sram+0x1e>
    1da4:	10 92 77 23 	sts	0x2377, r1	; 0x802377 <udd_sram+0x1f>
    1da8:	e4 e7       	ldi	r30, 0x74	; 116
    1daa:	f3 e2       	ldi	r31, 0x23	; 35
    1dac:	02 e0       	ldi	r16, 0x02	; 2
    1dae:	06 93       	lac	Z, r16
    1db0:	0f 91       	pop	r16
    1db2:	08 95       	ret

00001db4 <udd_ctrl_endofrequest>:
    1db4:	e0 91 d9 23 	lds	r30, 0x23D9	; 0x8023d9 <udd_g_ctrlreq+0xc>
    1db8:	f0 91 da 23 	lds	r31, 0x23DA	; 0x8023da <udd_g_ctrlreq+0xd>
    1dbc:	30 97       	sbiw	r30, 0x00	; 0
    1dbe:	09 f0       	breq	.+2      	; 0x1dc2 <udd_ctrl_endofrequest+0xe>
    1dc0:	19 95       	eicall
    1dc2:	08 95       	ret

00001dc4 <udd_ctrl_in_sent>:
    1dc4:	0f 93       	push	r16
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	80 91 55 23 	lds	r24, 0x2355	; 0x802355 <udd_ep_control_state>
    1dce:	83 30       	cpi	r24, 0x03	; 3
    1dd0:	19 f4       	brne	.+6      	; 0x1dd8 <udd_ctrl_in_sent+0x14>
    1dd2:	f0 df       	rcall	.-32     	; 0x1db4 <udd_ctrl_endofrequest>
    1dd4:	ae df       	rcall	.-164    	; 0x1d32 <udd_ctrl_init>
    1dd6:	5e c0       	rjmp	.+188    	; 0x1e94 <udd_ctrl_in_sent+0xd0>
    1dd8:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <udd_ctrl_payload_nb_trans>
    1ddc:	90 91 52 23 	lds	r25, 0x2352	; 0x802352 <udd_ctrl_payload_nb_trans+0x1>
    1de0:	c0 91 d7 23 	lds	r28, 0x23D7	; 0x8023d7 <udd_g_ctrlreq+0xa>
    1de4:	d0 91 d8 23 	lds	r29, 0x23D8	; 0x8023d8 <udd_g_ctrlreq+0xb>
    1de8:	c8 1b       	sub	r28, r24
    1dea:	d9 0b       	sbc	r29, r25
    1dec:	71 f5       	brne	.+92     	; 0x1e4a <udd_ctrl_in_sent+0x86>
    1dee:	20 91 53 23 	lds	r18, 0x2353	; 0x802353 <udd_ctrl_prev_payload_nb_trans>
    1df2:	30 91 54 23 	lds	r19, 0x2354	; 0x802354 <udd_ctrl_prev_payload_nb_trans+0x1>
    1df6:	82 0f       	add	r24, r18
    1df8:	93 1f       	adc	r25, r19
    1dfa:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <udd_ctrl_prev_payload_nb_trans>
    1dfe:	90 93 54 23 	sts	0x2354, r25	; 0x802354 <udd_ctrl_prev_payload_nb_trans+0x1>
    1e02:	20 91 d3 23 	lds	r18, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0x6>
    1e06:	30 91 d4 23 	lds	r19, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0x7>
    1e0a:	82 17       	cp	r24, r18
    1e0c:	93 07       	cpc	r25, r19
    1e0e:	21 f0       	breq	.+8      	; 0x1e18 <udd_ctrl_in_sent+0x54>
    1e10:	80 91 00 22 	lds	r24, 0x2200	; 0x802200 <b_shortpacket.5295>
    1e14:	88 23       	and	r24, r24
    1e16:	41 f0       	breq	.+16     	; 0x1e28 <udd_ctrl_in_sent+0x64>
    1e18:	84 e0       	ldi	r24, 0x04	; 4
    1e1a:	80 93 55 23 	sts	0x2355, r24	; 0x802355 <udd_ep_control_state>
    1e1e:	ec e6       	ldi	r30, 0x6C	; 108
    1e20:	f3 e2       	ldi	r31, 0x23	; 35
    1e22:	02 e0       	ldi	r16, 0x02	; 2
    1e24:	06 93       	lac	Z, r16
    1e26:	36 c0       	rjmp	.+108    	; 0x1e94 <udd_ctrl_in_sent+0xd0>
    1e28:	e0 91 db 23 	lds	r30, 0x23DB	; 0x8023db <udd_g_ctrlreq+0xe>
    1e2c:	f0 91 dc 23 	lds	r31, 0x23DC	; 0x8023dc <udd_g_ctrlreq+0xf>
    1e30:	30 97       	sbiw	r30, 0x00	; 0
    1e32:	99 f0       	breq	.+38     	; 0x1e5a <udd_ctrl_in_sent+0x96>
    1e34:	19 95       	eicall
    1e36:	88 23       	and	r24, r24
    1e38:	81 f0       	breq	.+32     	; 0x1e5a <udd_ctrl_in_sent+0x96>
    1e3a:	10 92 51 23 	sts	0x2351, r1	; 0x802351 <udd_ctrl_payload_nb_trans>
    1e3e:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <udd_ctrl_payload_nb_trans+0x1>
    1e42:	c0 91 d7 23 	lds	r28, 0x23D7	; 0x8023d7 <udd_g_ctrlreq+0xa>
    1e46:	d0 91 d8 23 	lds	r29, 0x23D8	; 0x8023d8 <udd_g_ctrlreq+0xb>
    1e4a:	c8 30       	cpi	r28, 0x08	; 8
    1e4c:	d1 05       	cpc	r29, r1
    1e4e:	28 f0       	brcs	.+10     	; 0x1e5a <udd_ctrl_in_sent+0x96>
    1e50:	10 92 00 22 	sts	0x2200, r1	; 0x802200 <b_shortpacket.5295>
    1e54:	c8 e0       	ldi	r28, 0x08	; 8
    1e56:	d0 e0       	ldi	r29, 0x00	; 0
    1e58:	03 c0       	rjmp	.+6      	; 0x1e60 <udd_ctrl_in_sent+0x9c>
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	80 93 00 22 	sts	0x2200, r24	; 0x802200 <b_shortpacket.5295>
    1e60:	e8 e5       	ldi	r30, 0x58	; 88
    1e62:	f3 e2       	ldi	r31, 0x23	; 35
    1e64:	c6 8f       	std	Z+30, r28	; 0x1e
    1e66:	d7 8f       	std	Z+31, r29	; 0x1f
    1e68:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <udd_ctrl_payload_nb_trans>
    1e6c:	90 91 52 23 	lds	r25, 0x2352	; 0x802352 <udd_ctrl_payload_nb_trans+0x1>
    1e70:	20 91 d5 23 	lds	r18, 0x23D5	; 0x8023d5 <udd_g_ctrlreq+0x8>
    1e74:	30 91 d6 23 	lds	r19, 0x23D6	; 0x8023d6 <udd_g_ctrlreq+0x9>
    1e78:	28 0f       	add	r18, r24
    1e7a:	39 1f       	adc	r19, r25
    1e7c:	20 a3       	std	Z+32, r18	; 0x20
    1e7e:	31 a3       	std	Z+33, r19	; 0x21
    1e80:	c8 0f       	add	r28, r24
    1e82:	d9 1f       	adc	r29, r25
    1e84:	c0 93 51 23 	sts	0x2351, r28	; 0x802351 <udd_ctrl_payload_nb_trans>
    1e88:	d0 93 52 23 	sts	0x2352, r29	; 0x802352 <udd_ctrl_payload_nb_trans+0x1>
    1e8c:	e4 e7       	ldi	r30, 0x74	; 116
    1e8e:	f3 e2       	ldi	r31, 0x23	; 35
    1e90:	02 e0       	ldi	r16, 0x02	; 2
    1e92:	06 93       	lac	Z, r16
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	0f 91       	pop	r16
    1e9a:	08 95       	ret

00001e9c <udd_ep_get_size>:
    1e9c:	fc 01       	movw	r30, r24
    1e9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ea0:	e8 2f       	mov	r30, r24
    1ea2:	e7 70       	andi	r30, 0x07	; 7
    1ea4:	8e 2f       	mov	r24, r30
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	31 97       	sbiw	r30, 0x01	; 1
    1eac:	e7 30       	cpi	r30, 0x07	; 7
    1eae:	f1 05       	cpc	r31, r1
    1eb0:	d0 f4       	brcc	.+52     	; 0x1ee6 <udd_ep_get_size+0x4a>
    1eb2:	88 27       	eor	r24, r24
    1eb4:	e9 5f       	subi	r30, 0xF9	; 249
    1eb6:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eba:	27 c7       	rjmp	.+3662   	; 0x2d0a <__tablejump2__>
    1ebc:	80 e1       	ldi	r24, 0x10	; 16
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	08 95       	ret
    1ec2:	80 e2       	ldi	r24, 0x20	; 32
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	08 95       	ret
    1ec8:	80 e4       	ldi	r24, 0x40	; 64
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	08 95       	ret
    1ece:	80 e8       	ldi	r24, 0x80	; 128
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	08 95       	ret
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	08 95       	ret
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	92 e0       	ldi	r25, 0x02	; 2
    1ede:	08 95       	ret
    1ee0:	8f ef       	ldi	r24, 0xFF	; 255
    1ee2:	93 e0       	ldi	r25, 0x03	; 3
    1ee4:	08 95       	ret
    1ee6:	88 e0       	ldi	r24, 0x08	; 8
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	08 95       	ret

00001eec <udd_ep_get_job>:
    1eec:	28 2f       	mov	r18, r24
    1eee:	2f 70       	andi	r18, 0x0F	; 15
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	22 0f       	add	r18, r18
    1ef4:	33 1f       	adc	r19, r19
    1ef6:	08 2e       	mov	r0, r24
    1ef8:	00 0c       	add	r0, r0
    1efa:	99 0b       	sbc	r25, r25
    1efc:	88 27       	eor	r24, r24
    1efe:	99 0f       	add	r25, r25
    1f00:	88 1f       	adc	r24, r24
    1f02:	99 27       	eor	r25, r25
    1f04:	82 0f       	add	r24, r18
    1f06:	93 1f       	adc	r25, r19
    1f08:	02 97       	sbiw	r24, 0x02	; 2
    1f0a:	9c 01       	movw	r18, r24
    1f0c:	22 0f       	add	r18, r18
    1f0e:	33 1f       	adc	r19, r19
    1f10:	22 0f       	add	r18, r18
    1f12:	33 1f       	adc	r19, r19
    1f14:	22 0f       	add	r18, r18
    1f16:	33 1f       	adc	r19, r19
    1f18:	82 0f       	add	r24, r18
    1f1a:	93 1f       	adc	r25, r19
    1f1c:	8f 5f       	subi	r24, 0xFF	; 255
    1f1e:	9c 4d       	sbci	r25, 0xDC	; 220
    1f20:	08 95       	ret

00001f22 <udd_ctrl_interrupt_tc_setup>:
    1f22:	0f 93       	push	r16
    1f24:	cf 93       	push	r28
    1f26:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1f2a:	80 ff       	sbrs	r24, 0
    1f2c:	64 c0       	rjmp	.+200    	; 0x1ff6 <udd_ctrl_interrupt_tc_setup+0xd4>
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1f34:	ec e6       	ldi	r30, 0x6C	; 108
    1f36:	f3 e2       	ldi	r31, 0x23	; 35
    1f38:	00 e8       	ldi	r16, 0x80	; 128
    1f3a:	06 93       	lac	Z, r16
    1f3c:	e4 e7       	ldi	r30, 0x74	; 116
    1f3e:	f3 e2       	ldi	r31, 0x23	; 35
    1f40:	00 e8       	ldi	r16, 0x80	; 128
    1f42:	06 93       	lac	Z, r16
    1f44:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    1f48:	ec e6       	ldi	r30, 0x6C	; 108
    1f4a:	f3 e2       	ldi	r31, 0x23	; 35
    1f4c:	00 e1       	ldi	r16, 0x10	; 16
    1f4e:	06 93       	lac	Z, r16
    1f50:	80 91 55 23 	lds	r24, 0x2355	; 0x802355 <udd_ep_control_state>
    1f54:	88 23       	and	r24, r24
    1f56:	29 f0       	breq	.+10     	; 0x1f62 <udd_ctrl_interrupt_tc_setup+0x40>
    1f58:	83 50       	subi	r24, 0x03	; 3
    1f5a:	82 30       	cpi	r24, 0x02	; 2
    1f5c:	08 f4       	brcc	.+2      	; 0x1f60 <udd_ctrl_interrupt_tc_setup+0x3e>
    1f5e:	2a df       	rcall	.-428    	; 0x1db4 <udd_ctrl_endofrequest>
    1f60:	e8 de       	rcall	.-560    	; 0x1d32 <udd_ctrl_init>
    1f62:	80 91 6e 23 	lds	r24, 0x236E	; 0x80236e <udd_sram+0x16>
    1f66:	90 91 6f 23 	lds	r25, 0x236F	; 0x80236f <udd_sram+0x17>
    1f6a:	08 97       	sbiw	r24, 0x08	; 8
    1f6c:	09 f0       	breq	.+2      	; 0x1f70 <udd_ctrl_interrupt_tc_setup+0x4e>
    1f6e:	45 c0       	rjmp	.+138    	; 0x1ffa <udd_ctrl_interrupt_tc_setup+0xd8>
    1f70:	88 e0       	ldi	r24, 0x08	; 8
    1f72:	e9 e4       	ldi	r30, 0x49	; 73
    1f74:	f3 e2       	ldi	r31, 0x23	; 35
    1f76:	ad ec       	ldi	r26, 0xCD	; 205
    1f78:	b3 e2       	ldi	r27, 0x23	; 35
    1f7a:	01 90       	ld	r0, Z+
    1f7c:	0d 92       	st	X+, r0
    1f7e:	8a 95       	dec	r24
    1f80:	e1 f7       	brne	.-8      	; 0x1f7a <udd_ctrl_interrupt_tc_setup+0x58>
    1f82:	e8 ec       	ldi	r30, 0xC8	; 200
    1f84:	f4 e0       	ldi	r31, 0x04	; 4
    1f86:	80 81       	ld	r24, Z
    1f88:	80 62       	ori	r24, 0x20	; 32
    1f8a:	80 83       	st	Z, r24
    1f8c:	80 81       	ld	r24, Z
    1f8e:	80 62       	ori	r24, 0x20	; 32
    1f90:	80 83       	st	Z, r24
    1f92:	e9 db       	rcall	.-2094   	; 0x1766 <udc_process_setup>
    1f94:	c8 2f       	mov	r28, r24
    1f96:	81 11       	cpse	r24, r1
    1f98:	03 c0       	rjmp	.+6      	; 0x1fa0 <udd_ctrl_interrupt_tc_setup+0x7e>
    1f9a:	f0 de       	rcall	.-544    	; 0x1d7c <udd_ctrl_stall_data>
    1f9c:	c1 e0       	ldi	r28, 0x01	; 1
    1f9e:	2e c0       	rjmp	.+92     	; 0x1ffc <udd_ctrl_interrupt_tc_setup+0xda>
    1fa0:	80 91 cd 23 	lds	r24, 0x23CD	; 0x8023cd <udd_g_ctrlreq>
    1fa4:	88 23       	and	r24, r24
    1fa6:	6c f4       	brge	.+26     	; 0x1fc2 <udd_ctrl_interrupt_tc_setup+0xa0>
    1fa8:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <udd_ctrl_prev_payload_nb_trans>
    1fac:	10 92 54 23 	sts	0x2354, r1	; 0x802354 <udd_ctrl_prev_payload_nb_trans+0x1>
    1fb0:	10 92 51 23 	sts	0x2351, r1	; 0x802351 <udd_ctrl_payload_nb_trans>
    1fb4:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <udd_ctrl_payload_nb_trans+0x1>
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	80 93 55 23 	sts	0x2355, r24	; 0x802355 <udd_ep_control_state>
    1fbe:	02 df       	rcall	.-508    	; 0x1dc4 <udd_ctrl_in_sent>
    1fc0:	1d c0       	rjmp	.+58     	; 0x1ffc <udd_ctrl_interrupt_tc_setup+0xda>
    1fc2:	80 91 d3 23 	lds	r24, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0x6>
    1fc6:	90 91 d4 23 	lds	r25, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0x7>
    1fca:	89 2b       	or	r24, r25
    1fcc:	11 f4       	brne	.+4      	; 0x1fd2 <udd_ctrl_interrupt_tc_setup+0xb0>
    1fce:	e4 de       	rcall	.-568    	; 0x1d98 <udd_ctrl_send_zlp_in>
    1fd0:	15 c0       	rjmp	.+42     	; 0x1ffc <udd_ctrl_interrupt_tc_setup+0xda>
    1fd2:	10 92 53 23 	sts	0x2353, r1	; 0x802353 <udd_ctrl_prev_payload_nb_trans>
    1fd6:	10 92 54 23 	sts	0x2354, r1	; 0x802354 <udd_ctrl_prev_payload_nb_trans+0x1>
    1fda:	10 92 51 23 	sts	0x2351, r1	; 0x802351 <udd_ctrl_payload_nb_trans>
    1fde:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <udd_ctrl_payload_nb_trans+0x1>
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	80 93 55 23 	sts	0x2355, r24	; 0x802355 <udd_ep_control_state>
    1fe8:	ec e6       	ldi	r30, 0x6C	; 108
    1fea:	f3 e2       	ldi	r31, 0x23	; 35
    1fec:	02 e0       	ldi	r16, 0x02	; 2
    1fee:	06 93       	lac	Z, r16
    1ff0:	00 e2       	ldi	r16, 0x20	; 32
    1ff2:	06 93       	lac	Z, r16
    1ff4:	03 c0       	rjmp	.+6      	; 0x1ffc <udd_ctrl_interrupt_tc_setup+0xda>
    1ff6:	c0 e0       	ldi	r28, 0x00	; 0
    1ff8:	01 c0       	rjmp	.+2      	; 0x1ffc <udd_ctrl_interrupt_tc_setup+0xda>
    1ffa:	c1 e0       	ldi	r28, 0x01	; 1
    1ffc:	8c 2f       	mov	r24, r28
    1ffe:	cf 91       	pop	r28
    2000:	0f 91       	pop	r16
    2002:	08 95       	ret

00002004 <udd_ep_trans_complet>:
    2004:	8f 92       	push	r8
    2006:	9f 92       	push	r9
    2008:	af 92       	push	r10
    200a:	bf 92       	push	r11
    200c:	df 92       	push	r13
    200e:	ef 92       	push	r14
    2010:	ff 92       	push	r15
    2012:	0f 93       	push	r16
    2014:	1f 93       	push	r17
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	d8 2e       	mov	r13, r24
    201c:	67 df       	rcall	.-306    	; 0x1eec <udd_ep_get_job>
    201e:	8c 01       	movw	r16, r24
    2020:	cd 2d       	mov	r28, r13
    2022:	cf 70       	andi	r28, 0x0F	; 15
    2024:	d0 e0       	ldi	r29, 0x00	; 0
    2026:	ce 01       	movw	r24, r28
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	cd 2d       	mov	r28, r13
    202e:	0d 2c       	mov	r0, r13
    2030:	00 0c       	add	r0, r0
    2032:	dd 0b       	sbc	r29, r29
    2034:	cc 27       	eor	r28, r28
    2036:	dd 0f       	add	r29, r29
    2038:	cc 1f       	adc	r28, r28
    203a:	dd 27       	eor	r29, r29
    203c:	c8 0f       	add	r28, r24
    203e:	d9 1f       	adc	r29, r25
    2040:	ce 01       	movw	r24, r28
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	9c 01       	movw	r18, r24
    2050:	24 59       	subi	r18, 0x94	; 148
    2052:	3c 4d       	sbci	r19, 0xDC	; 220
    2054:	79 01       	movw	r14, r18
    2056:	c9 01       	movw	r24, r18
    2058:	21 df       	rcall	.-446    	; 0x1e9c <udd_ep_get_size>
    205a:	4c 01       	movw	r8, r24
    205c:	dd 20       	and	r13, r13
    205e:	0c f0       	brlt	.+2      	; 0x2062 <udd_ep_trans_complet+0x5e>
    2060:	79 c0       	rjmp	.+242    	; 0x2154 <udd_ep_trans_complet+0x150>
    2062:	fe 01       	movw	r30, r28
    2064:	ee 0f       	add	r30, r30
    2066:	ff 1f       	adc	r31, r31
    2068:	ee 0f       	add	r30, r30
    206a:	ff 1f       	adc	r31, r31
    206c:	ee 0f       	add	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	e8 5a       	subi	r30, 0xA8	; 168
    2072:	fc 4d       	sbci	r31, 0xDC	; 220
    2074:	22 8d       	ldd	r18, Z+26	; 0x1a
    2076:	33 8d       	ldd	r19, Z+27	; 0x1b
    2078:	d8 01       	movw	r26, r16
    207a:	15 96       	adiw	r26, 0x05	; 5
    207c:	8d 91       	ld	r24, X+
    207e:	9c 91       	ld	r25, X
    2080:	16 97       	sbiw	r26, 0x06	; 6
    2082:	82 0f       	add	r24, r18
    2084:	93 1f       	adc	r25, r19
    2086:	15 96       	adiw	r26, 0x05	; 5
    2088:	8d 93       	st	X+, r24
    208a:	9c 93       	st	X, r25
    208c:	16 97       	sbiw	r26, 0x06	; 6
    208e:	13 96       	adiw	r26, 0x03	; 3
    2090:	2d 91       	ld	r18, X+
    2092:	3c 91       	ld	r19, X
    2094:	14 97       	sbiw	r26, 0x04	; 4
    2096:	82 17       	cp	r24, r18
    2098:	93 07       	cpc	r25, r19
    209a:	09 f4       	brne	.+2      	; 0x209e <udd_ep_trans_complet+0x9a>
    209c:	45 c0       	rjmp	.+138    	; 0x2128 <udd_ep_trans_complet+0x124>
    209e:	28 1b       	sub	r18, r24
    20a0:	39 0b       	sbc	r19, r25
    20a2:	21 15       	cp	r18, r1
    20a4:	b4 e0       	ldi	r27, 0x04	; 4
    20a6:	3b 07       	cpc	r19, r27
    20a8:	38 f0       	brcs	.+14     	; 0x20b8 <udd_ep_trans_complet+0xb4>
    20aa:	2f ef       	ldi	r18, 0xFF	; 255
    20ac:	33 e0       	ldi	r19, 0x03	; 3
    20ae:	c9 01       	movw	r24, r18
    20b0:	b4 01       	movw	r22, r8
    20b2:	17 d6       	rcall	.+3118   	; 0x2ce2 <__udivmodhi4>
    20b4:	28 1b       	sub	r18, r24
    20b6:	39 0b       	sbc	r19, r25
    20b8:	f8 01       	movw	r30, r16
    20ba:	80 81       	ld	r24, Z
    20bc:	81 ff       	sbrs	r24, 1
    20be:	09 c0       	rjmp	.+18     	; 0x20d2 <udd_ep_trans_complet+0xce>
    20c0:	c9 01       	movw	r24, r18
    20c2:	b4 01       	movw	r22, r8
    20c4:	0e d6       	rcall	.+3100   	; 0x2ce2 <__udivmodhi4>
    20c6:	41 e0       	ldi	r20, 0x01	; 1
    20c8:	89 2b       	or	r24, r25
    20ca:	09 f0       	breq	.+2      	; 0x20ce <udd_ep_trans_complet+0xca>
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	84 2f       	mov	r24, r20
    20d0:	01 c0       	rjmp	.+2      	; 0x20d4 <udd_ep_trans_complet+0xd0>
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	d8 01       	movw	r26, r16
    20d6:	9c 91       	ld	r25, X
    20d8:	80 fb       	bst	r24, 0
    20da:	91 f9       	bld	r25, 1
    20dc:	9c 93       	st	X, r25
    20de:	fe 01       	movw	r30, r28
    20e0:	ee 0f       	add	r30, r30
    20e2:	ff 1f       	adc	r31, r31
    20e4:	ee 0f       	add	r30, r30
    20e6:	ff 1f       	adc	r31, r31
    20e8:	ee 0f       	add	r30, r30
    20ea:	ff 1f       	adc	r31, r31
    20ec:	e8 5a       	subi	r30, 0xA8	; 168
    20ee:	fc 4d       	sbci	r31, 0xDC	; 220
    20f0:	12 8e       	std	Z+26, r1	; 0x1a
    20f2:	13 8e       	std	Z+27, r1	; 0x1b
    20f4:	26 8b       	std	Z+22, r18	; 0x16
    20f6:	37 8b       	std	Z+23, r19	; 0x17
    20f8:	11 96       	adiw	r26, 0x01	; 1
    20fa:	2d 91       	ld	r18, X+
    20fc:	3c 91       	ld	r19, X
    20fe:	12 97       	sbiw	r26, 0x02	; 2
    2100:	15 96       	adiw	r26, 0x05	; 5
    2102:	8d 91       	ld	r24, X+
    2104:	9c 91       	ld	r25, X
    2106:	16 97       	sbiw	r26, 0x06	; 6
    2108:	82 0f       	add	r24, r18
    210a:	93 1f       	adc	r25, r19
    210c:	cc 0f       	add	r28, r28
    210e:	dd 1f       	adc	r29, r29
    2110:	cc 0f       	add	r28, r28
    2112:	dd 1f       	adc	r29, r29
    2114:	cc 0f       	add	r28, r28
    2116:	dd 1f       	adc	r29, r29
    2118:	c0 59       	subi	r28, 0x90	; 144
    211a:	dc 4d       	sbci	r29, 0xDC	; 220
    211c:	88 83       	st	Y, r24
    211e:	99 83       	std	Y+1, r25	; 0x01
    2120:	f7 01       	movw	r30, r14
    2122:	02 e0       	ldi	r16, 0x02	; 2
    2124:	06 93       	lac	Z, r16
    2126:	e0 c0       	rjmp	.+448    	; 0x22e8 <udd_ep_trans_complet+0x2e4>
    2128:	d8 01       	movw	r26, r16
    212a:	8c 91       	ld	r24, X
    212c:	81 ff       	sbrs	r24, 1
    212e:	c9 c0       	rjmp	.+402    	; 0x22c2 <udd_ep_trans_complet+0x2be>
    2130:	8d 7f       	andi	r24, 0xFD	; 253
    2132:	8c 93       	st	X, r24
    2134:	cc 0f       	add	r28, r28
    2136:	dd 1f       	adc	r29, r29
    2138:	cc 0f       	add	r28, r28
    213a:	dd 1f       	adc	r29, r29
    213c:	cc 0f       	add	r28, r28
    213e:	dd 1f       	adc	r29, r29
    2140:	c8 5a       	subi	r28, 0xA8	; 168
    2142:	dc 4d       	sbci	r29, 0xDC	; 220
    2144:	1a 8e       	std	Y+26, r1	; 0x1a
    2146:	1b 8e       	std	Y+27, r1	; 0x1b
    2148:	1e 8a       	std	Y+22, r1	; 0x16
    214a:	1f 8a       	std	Y+23, r1	; 0x17
    214c:	f7 01       	movw	r30, r14
    214e:	02 e0       	ldi	r16, 0x02	; 2
    2150:	06 93       	lac	Z, r16
    2152:	ca c0       	rjmp	.+404    	; 0x22e8 <udd_ep_trans_complet+0x2e4>
    2154:	fe 01       	movw	r30, r28
    2156:	ee 0f       	add	r30, r30
    2158:	ff 1f       	adc	r31, r31
    215a:	ee 0f       	add	r30, r30
    215c:	ff 1f       	adc	r31, r31
    215e:	ee 0f       	add	r30, r30
    2160:	ff 1f       	adc	r31, r31
    2162:	e8 5a       	subi	r30, 0xA8	; 168
    2164:	fc 4d       	sbci	r31, 0xDC	; 220
    2166:	a6 88       	ldd	r10, Z+22	; 0x16
    2168:	b7 88       	ldd	r11, Z+23	; 0x17
    216a:	d8 01       	movw	r26, r16
    216c:	8c 91       	ld	r24, X
    216e:	82 ff       	sbrs	r24, 2
    2170:	19 c0       	rjmp	.+50     	; 0x21a4 <udd_ep_trans_complet+0x1a0>
    2172:	11 96       	adiw	r26, 0x01	; 1
    2174:	ed 91       	ld	r30, X+
    2176:	fc 91       	ld	r31, X
    2178:	12 97       	sbiw	r26, 0x02	; 2
    217a:	15 96       	adiw	r26, 0x05	; 5
    217c:	2d 91       	ld	r18, X+
    217e:	3c 91       	ld	r19, X
    2180:	16 97       	sbiw	r26, 0x06	; 6
    2182:	13 96       	adiw	r26, 0x03	; 3
    2184:	8d 91       	ld	r24, X+
    2186:	9c 91       	ld	r25, X
    2188:	14 97       	sbiw	r26, 0x04	; 4
    218a:	b4 01       	movw	r22, r8
    218c:	aa d5       	rcall	.+2900   	; 0x2ce2 <__udivmodhi4>
    218e:	b0 e4       	ldi	r27, 0x40	; 64
    2190:	db 9e       	mul	r13, r27
    2192:	b0 01       	movw	r22, r0
    2194:	11 24       	eor	r1, r1
    2196:	6f 53       	subi	r22, 0x3F	; 63
    2198:	7e 4d       	sbci	r23, 0xDE	; 222
    219a:	ac 01       	movw	r20, r24
    219c:	cf 01       	movw	r24, r30
    219e:	82 0f       	add	r24, r18
    21a0:	93 1f       	adc	r25, r19
    21a2:	bb d5       	rcall	.+2934   	; 0x2d1a <memcpy>
    21a4:	f8 01       	movw	r30, r16
    21a6:	25 81       	ldd	r18, Z+5	; 0x05
    21a8:	36 81       	ldd	r19, Z+6	; 0x06
    21aa:	2a 0d       	add	r18, r10
    21ac:	3b 1d       	adc	r19, r11
    21ae:	25 83       	std	Z+5, r18	; 0x05
    21b0:	36 83       	std	Z+6, r19	; 0x06
    21b2:	83 81       	ldd	r24, Z+3	; 0x03
    21b4:	94 81       	ldd	r25, Z+4	; 0x04
    21b6:	82 17       	cp	r24, r18
    21b8:	93 07       	cpc	r25, r19
    21ba:	68 f4       	brcc	.+26     	; 0x21d6 <udd_ep_trans_complet+0x1d2>
    21bc:	85 83       	std	Z+5, r24	; 0x05
    21be:	96 83       	std	Z+6, r25	; 0x06
    21c0:	cc 0f       	add	r28, r28
    21c2:	dd 1f       	adc	r29, r29
    21c4:	cc 0f       	add	r28, r28
    21c6:	dd 1f       	adc	r29, r29
    21c8:	cc 0f       	add	r28, r28
    21ca:	dd 1f       	adc	r29, r29
    21cc:	c8 5a       	subi	r28, 0xA8	; 168
    21ce:	dc 4d       	sbci	r29, 0xDC	; 220
    21d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21d4:	76 c0       	rjmp	.+236    	; 0x22c2 <udd_ep_trans_complet+0x2be>
    21d6:	fe 01       	movw	r30, r28
    21d8:	ee 0f       	add	r30, r30
    21da:	ff 1f       	adc	r31, r31
    21dc:	ee 0f       	add	r30, r30
    21de:	ff 1f       	adc	r31, r31
    21e0:	ee 0f       	add	r30, r30
    21e2:	ff 1f       	adc	r31, r31
    21e4:	e8 5a       	subi	r30, 0xA8	; 168
    21e6:	fc 4d       	sbci	r31, 0xDC	; 220
    21e8:	42 8d       	ldd	r20, Z+26	; 0x1a
    21ea:	53 8d       	ldd	r21, Z+27	; 0x1b
    21ec:	a4 16       	cp	r10, r20
    21ee:	b5 06       	cpc	r11, r21
    21f0:	09 f0       	breq	.+2      	; 0x21f4 <udd_ep_trans_complet+0x1f0>
    21f2:	67 c0       	rjmp	.+206    	; 0x22c2 <udd_ep_trans_complet+0x2be>
    21f4:	28 17       	cp	r18, r24
    21f6:	39 07       	cpc	r19, r25
    21f8:	09 f4       	brne	.+2      	; 0x21fc <udd_ep_trans_complet+0x1f8>
    21fa:	63 c0       	rjmp	.+198    	; 0x22c2 <udd_ep_trans_complet+0x2be>
    21fc:	ac 01       	movw	r20, r24
    21fe:	42 1b       	sub	r20, r18
    2200:	53 0b       	sbc	r21, r19
    2202:	9a 01       	movw	r18, r20
    2204:	21 15       	cp	r18, r1
    2206:	54 e0       	ldi	r21, 0x04	; 4
    2208:	35 07       	cpc	r19, r21
    220a:	40 f0       	brcs	.+16     	; 0x221c <udd_ep_trans_complet+0x218>
    220c:	2f ef       	ldi	r18, 0xFF	; 255
    220e:	33 e0       	ldi	r19, 0x03	; 3
    2210:	c9 01       	movw	r24, r18
    2212:	b4 01       	movw	r22, r8
    2214:	66 d5       	rcall	.+2764   	; 0x2ce2 <__udivmodhi4>
    2216:	28 1b       	sub	r18, r24
    2218:	39 0b       	sbc	r19, r25
    221a:	05 c0       	rjmp	.+10     	; 0x2226 <udd_ep_trans_complet+0x222>
    221c:	c9 01       	movw	r24, r18
    221e:	b4 01       	movw	r22, r8
    2220:	60 d5       	rcall	.+2752   	; 0x2ce2 <__udivmodhi4>
    2222:	28 1b       	sub	r18, r24
    2224:	39 0b       	sbc	r19, r25
    2226:	fe 01       	movw	r30, r28
    2228:	ee 0f       	add	r30, r30
    222a:	ff 1f       	adc	r31, r31
    222c:	ee 0f       	add	r30, r30
    222e:	ff 1f       	adc	r31, r31
    2230:	ee 0f       	add	r30, r30
    2232:	ff 1f       	adc	r31, r31
    2234:	e8 5a       	subi	r30, 0xA8	; 168
    2236:	fc 4d       	sbci	r31, 0xDC	; 220
    2238:	16 8a       	std	Z+22, r1	; 0x16
    223a:	17 8a       	std	Z+23, r1	; 0x17
    223c:	28 15       	cp	r18, r8
    223e:	39 05       	cpc	r19, r9
    2240:	00 f5       	brcc	.+64     	; 0x2282 <udd_ep_trans_complet+0x27e>
    2242:	d8 01       	movw	r26, r16
    2244:	8c 91       	ld	r24, X
    2246:	84 60       	ori	r24, 0x04	; 4
    2248:	8c 93       	st	X, r24
    224a:	b0 e4       	ldi	r27, 0x40	; 64
    224c:	db 9e       	mul	r13, r27
    224e:	c0 01       	movw	r24, r0
    2250:	11 24       	eor	r1, r1
    2252:	8f 53       	subi	r24, 0x3F	; 63
    2254:	9e 4d       	sbci	r25, 0xDE	; 222
    2256:	fe 01       	movw	r30, r28
    2258:	ee 0f       	add	r30, r30
    225a:	ff 1f       	adc	r31, r31
    225c:	ee 0f       	add	r30, r30
    225e:	ff 1f       	adc	r31, r31
    2260:	ee 0f       	add	r30, r30
    2262:	ff 1f       	adc	r31, r31
    2264:	e0 59       	subi	r30, 0x90	; 144
    2266:	fc 4d       	sbci	r31, 0xDC	; 220
    2268:	80 83       	st	Z, r24
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	cc 0f       	add	r28, r28
    226e:	dd 1f       	adc	r29, r29
    2270:	cc 0f       	add	r28, r28
    2272:	dd 1f       	adc	r29, r29
    2274:	cc 0f       	add	r28, r28
    2276:	dd 1f       	adc	r29, r29
    2278:	c8 5a       	subi	r28, 0xA8	; 168
    227a:	dc 4d       	sbci	r29, 0xDC	; 220
    227c:	8a 8e       	std	Y+26, r8	; 0x1a
    227e:	9b 8e       	std	Y+27, r9	; 0x1b
    2280:	1c c0       	rjmp	.+56     	; 0x22ba <udd_ep_trans_complet+0x2b6>
    2282:	f8 01       	movw	r30, r16
    2284:	41 81       	ldd	r20, Z+1	; 0x01
    2286:	52 81       	ldd	r21, Z+2	; 0x02
    2288:	85 81       	ldd	r24, Z+5	; 0x05
    228a:	96 81       	ldd	r25, Z+6	; 0x06
    228c:	84 0f       	add	r24, r20
    228e:	95 1f       	adc	r25, r21
    2290:	fe 01       	movw	r30, r28
    2292:	ee 0f       	add	r30, r30
    2294:	ff 1f       	adc	r31, r31
    2296:	ee 0f       	add	r30, r30
    2298:	ff 1f       	adc	r31, r31
    229a:	ee 0f       	add	r30, r30
    229c:	ff 1f       	adc	r31, r31
    229e:	e0 59       	subi	r30, 0x90	; 144
    22a0:	fc 4d       	sbci	r31, 0xDC	; 220
    22a2:	80 83       	st	Z, r24
    22a4:	91 83       	std	Z+1, r25	; 0x01
    22a6:	cc 0f       	add	r28, r28
    22a8:	dd 1f       	adc	r29, r29
    22aa:	cc 0f       	add	r28, r28
    22ac:	dd 1f       	adc	r29, r29
    22ae:	cc 0f       	add	r28, r28
    22b0:	dd 1f       	adc	r29, r29
    22b2:	c8 5a       	subi	r28, 0xA8	; 168
    22b4:	dc 4d       	sbci	r29, 0xDC	; 220
    22b6:	2a 8f       	std	Y+26, r18	; 0x1a
    22b8:	3b 8f       	std	Y+27, r19	; 0x1b
    22ba:	f7 01       	movw	r30, r14
    22bc:	02 e0       	ldi	r16, 0x02	; 2
    22be:	06 93       	lac	Z, r16
    22c0:	13 c0       	rjmp	.+38     	; 0x22e8 <udd_ep_trans_complet+0x2e4>
    22c2:	d8 01       	movw	r26, r16
    22c4:	8c 91       	ld	r24, X
    22c6:	80 ff       	sbrs	r24, 0
    22c8:	0f c0       	rjmp	.+30     	; 0x22e8 <udd_ep_trans_complet+0x2e4>
    22ca:	8e 7f       	andi	r24, 0xFE	; 254
    22cc:	8c 93       	st	X, r24
    22ce:	17 96       	adiw	r26, 0x07	; 7
    22d0:	ed 91       	ld	r30, X+
    22d2:	fc 91       	ld	r31, X
    22d4:	18 97       	sbiw	r26, 0x08	; 8
    22d6:	30 97       	sbiw	r30, 0x00	; 0
    22d8:	39 f0       	breq	.+14     	; 0x22e8 <udd_ep_trans_complet+0x2e4>
    22da:	15 96       	adiw	r26, 0x05	; 5
    22dc:	6d 91       	ld	r22, X+
    22de:	7c 91       	ld	r23, X
    22e0:	16 97       	sbiw	r26, 0x06	; 6
    22e2:	4d 2d       	mov	r20, r13
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	19 95       	eicall
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	1f 91       	pop	r17
    22ee:	0f 91       	pop	r16
    22f0:	ff 90       	pop	r15
    22f2:	ef 90       	pop	r14
    22f4:	df 90       	pop	r13
    22f6:	bf 90       	pop	r11
    22f8:	af 90       	pop	r10
    22fa:	9f 90       	pop	r9
    22fc:	8f 90       	pop	r8
    22fe:	08 95       	ret

00002300 <udd_attach>:
    2300:	1f 93       	push	r17
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
    2306:	1f 92       	push	r1
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	8f b7       	in	r24, 0x3f	; 63
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	f8 94       	cli
    2312:	19 81       	ldd	r17, Y+1	; 0x01
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	d5 dc       	rcall	.-1622   	; 0x1cc2 <udd_sleep_mode>
    2318:	ea ec       	ldi	r30, 0xCA	; 202
    231a:	f4 e0       	ldi	r31, 0x04	; 4
    231c:	80 e4       	ldi	r24, 0x40	; 64
    231e:	80 83       	st	Z, r24
    2320:	80 e2       	ldi	r24, 0x20	; 32
    2322:	80 83       	st	Z, r24
    2324:	e1 ec       	ldi	r30, 0xC1	; 193
    2326:	f4 e0       	ldi	r31, 0x04	; 4
    2328:	80 81       	ld	r24, Z
    232a:	81 60       	ori	r24, 0x01	; 1
    232c:	80 83       	st	Z, r24
    232e:	a9 ec       	ldi	r26, 0xC9	; 201
    2330:	b4 e0       	ldi	r27, 0x04	; 4
    2332:	8c 91       	ld	r24, X
    2334:	82 60       	ori	r24, 0x02	; 2
    2336:	8c 93       	st	X, r24
    2338:	e8 ec       	ldi	r30, 0xC8	; 200
    233a:	f4 e0       	ldi	r31, 0x04	; 4
    233c:	80 81       	ld	r24, Z
    233e:	80 64       	ori	r24, 0x40	; 64
    2340:	80 83       	st	Z, r24
    2342:	8c 91       	ld	r24, X
    2344:	81 60       	ori	r24, 0x01	; 1
    2346:	8c 93       	st	X, r24
    2348:	80 81       	ld	r24, Z
    234a:	80 68       	ori	r24, 0x80	; 128
    234c:	80 83       	st	Z, r24
    234e:	1f bf       	out	0x3f, r17	; 63
    2350:	0f 90       	pop	r0
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	08 95       	ret

0000235a <udd_enable>:
    235a:	0f 93       	push	r16
    235c:	1f 93       	push	r17
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	1f 92       	push	r1
    2364:	1f 92       	push	r1
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	00 e6       	ldi	r16, 0x60	; 96
    236c:	10 e0       	ldi	r17, 0x00	; 0
    236e:	f8 01       	movw	r30, r16
    2370:	10 82       	st	Z, r1
    2372:	80 e3       	ldi	r24, 0x30	; 48
    2374:	0e 94 52 08 	call	0x10a4	; 0x10a4 <sysclk_enable_usb>
    2378:	e0 ec       	ldi	r30, 0xC0	; 192
    237a:	f4 e0       	ldi	r31, 0x04	; 4
    237c:	80 81       	ld	r24, Z
    237e:	80 64       	ori	r24, 0x40	; 64
    2380:	80 83       	st	Z, r24
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	f8 01       	movw	r30, r16
    2386:	80 83       	st	Z, r24
    2388:	8f b7       	in	r24, 0x3f	; 63
    238a:	8a 83       	std	Y+2, r24	; 0x02
    238c:	f8 94       	cli
    238e:	1a 81       	ldd	r17, Y+2	; 0x02
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	fc 01       	movw	r30, r24
    2396:	ee 0f       	add	r30, r30
    2398:	ff 1f       	adc	r31, r31
    239a:	ee 0f       	add	r30, r30
    239c:	ff 1f       	adc	r31, r31
    239e:	ee 0f       	add	r30, r30
    23a0:	ff 1f       	adc	r31, r31
    23a2:	e8 5a       	subi	r30, 0xA8	; 168
    23a4:	fc 4d       	sbci	r31, 0xDC	; 220
    23a6:	15 8a       	std	Z+21, r1	; 0x15
    23a8:	01 96       	adiw	r24, 0x01	; 1
    23aa:	8a 30       	cpi	r24, 0x0A	; 10
    23ac:	91 05       	cpc	r25, r1
    23ae:	91 f7       	brne	.-28     	; 0x2394 <udd_enable+0x3a>
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	fc 01       	movw	r30, r24
    23b6:	ee 0f       	add	r30, r30
    23b8:	ff 1f       	adc	r31, r31
    23ba:	ee 0f       	add	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	ee 0f       	add	r30, r30
    23c0:	ff 1f       	adc	r31, r31
    23c2:	e8 0f       	add	r30, r24
    23c4:	f9 1f       	adc	r31, r25
    23c6:	ef 5f       	subi	r30, 0xFF	; 255
    23c8:	fc 4d       	sbci	r31, 0xDC	; 220
    23ca:	20 81       	ld	r18, Z
    23cc:	2e 7f       	andi	r18, 0xFE	; 254
    23ce:	20 83       	st	Z, r18
    23d0:	01 96       	adiw	r24, 0x01	; 1
    23d2:	88 30       	cpi	r24, 0x08	; 8
    23d4:	91 05       	cpc	r25, r1
    23d6:	71 f7       	brne	.-36     	; 0x23b4 <udd_enable+0x5a>
    23d8:	6a e1       	ldi	r22, 0x1A	; 26
    23da:	70 e0       	ldi	r23, 0x00	; 0
    23dc:	82 e0       	ldi	r24, 0x02	; 2
    23de:	61 dc       	rcall	.-1854   	; 0x1ca2 <nvm_read_byte>
    23e0:	8f 3f       	cpi	r24, 0xFF	; 255
    23e2:	19 f0       	breq	.+6      	; 0x23ea <udd_enable+0x90>
    23e4:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    23e8:	03 c0       	rjmp	.+6      	; 0x23f0 <udd_enable+0x96>
    23ea:	8f e1       	ldi	r24, 0x1F	; 31
    23ec:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    23f0:	6b e1       	ldi	r22, 0x1B	; 27
    23f2:	70 e0       	ldi	r23, 0x00	; 0
    23f4:	82 e0       	ldi	r24, 0x02	; 2
    23f6:	55 dc       	rcall	.-1878   	; 0x1ca2 <nvm_read_byte>
    23f8:	8f 3f       	cpi	r24, 0xFF	; 255
    23fa:	19 f0       	breq	.+6      	; 0x2402 <udd_enable+0xa8>
    23fc:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    2400:	03 c0       	rjmp	.+6      	; 0x2408 <udd_enable+0xae>
    2402:	8f e1       	ldi	r24, 0x1F	; 31
    2404:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    2408:	e0 ec       	ldi	r30, 0xC0	; 192
    240a:	f4 e0       	ldi	r31, 0x04	; 4
    240c:	80 81       	ld	r24, Z
    240e:	84 60       	ori	r24, 0x04	; 4
    2410:	80 83       	st	Z, r24
    2412:	80 81       	ld	r24, Z
    2414:	80 68       	ori	r24, 0x80	; 128
    2416:	80 83       	st	Z, r24
    2418:	80 81       	ld	r24, Z
    241a:	80 61       	ori	r24, 0x10	; 16
    241c:	80 83       	st	Z, r24
    241e:	8c e6       	ldi	r24, 0x6C	; 108
    2420:	93 e2       	ldi	r25, 0x23	; 35
    2422:	86 83       	std	Z+6, r24	; 0x06
    2424:	97 83       	std	Z+7, r25	; 0x07
    2426:	80 81       	ld	r24, Z
    2428:	80 62       	ori	r24, 0x20	; 32
    242a:	80 83       	st	Z, r24
    242c:	8f ef       	ldi	r24, 0xFF	; 255
    242e:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    2432:	e8 ec       	ldi	r30, 0xC8	; 200
    2434:	f4 e0       	ldi	r31, 0x04	; 4
    2436:	80 81       	ld	r24, Z
    2438:	81 60       	ori	r24, 0x01	; 1
    243a:	80 83       	st	Z, r24
    243c:	10 92 c0 23 	sts	0x23C0, r1	; 0x8023c0 <udd_b_idle>
    2440:	80 91 cc 23 	lds	r24, 0x23CC	; 0x8023cc <sleepmgr_locks+0x5>
    2444:	8f 3f       	cpi	r24, 0xFF	; 255
    2446:	09 f4       	brne	.+2      	; 0x244a <udd_enable+0xf0>
    2448:	ff cf       	rjmp	.-2      	; 0x2448 <udd_enable+0xee>
    244a:	8f b7       	in	r24, 0x3f	; 63
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	f8 94       	cli
    2450:	99 81       	ldd	r25, Y+1	; 0x01
    2452:	e7 ec       	ldi	r30, 0xC7	; 199
    2454:	f3 e2       	ldi	r31, 0x23	; 35
    2456:	85 81       	ldd	r24, Z+5	; 0x05
    2458:	8f 5f       	subi	r24, 0xFF	; 255
    245a:	85 83       	std	Z+5, r24	; 0x05
    245c:	9f bf       	out	0x3f, r25	; 63
    245e:	50 df       	rcall	.-352    	; 0x2300 <udd_attach>
    2460:	1f bf       	out	0x3f, r17	; 63
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	1f 91       	pop	r17
    246c:	0f 91       	pop	r16
    246e:	08 95       	ret

00002470 <udd_set_address>:
    2470:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    2474:	08 95       	ret

00002476 <udd_getaddress>:
    2476:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    247a:	08 95       	ret

0000247c <udd_set_setup_payload>:
    247c:	ed ec       	ldi	r30, 0xCD	; 205
    247e:	f3 e2       	ldi	r31, 0x23	; 35
    2480:	80 87       	std	Z+8, r24	; 0x08
    2482:	91 87       	std	Z+9, r25	; 0x09
    2484:	62 87       	std	Z+10, r22	; 0x0a
    2486:	73 87       	std	Z+11, r23	; 0x0b
    2488:	08 95       	ret

0000248a <udd_ep_alloc>:
    248a:	28 2f       	mov	r18, r24
    248c:	2f 70       	andi	r18, 0x0F	; 15
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	22 0f       	add	r18, r18
    2492:	33 1f       	adc	r19, r19
    2494:	08 2e       	mov	r0, r24
    2496:	00 0c       	add	r0, r0
    2498:	99 0b       	sbc	r25, r25
    249a:	88 27       	eor	r24, r24
    249c:	99 0f       	add	r25, r25
    249e:	88 1f       	adc	r24, r24
    24a0:	99 27       	eor	r25, r25
    24a2:	82 0f       	add	r24, r18
    24a4:	93 1f       	adc	r25, r19
    24a6:	fc 01       	movw	r30, r24
    24a8:	ee 0f       	add	r30, r30
    24aa:	ff 1f       	adc	r31, r31
    24ac:	ee 0f       	add	r30, r30
    24ae:	ff 1f       	adc	r31, r31
    24b0:	ee 0f       	add	r30, r30
    24b2:	ff 1f       	adc	r31, r31
    24b4:	e8 5a       	subi	r30, 0xA8	; 168
    24b6:	fc 4d       	sbci	r31, 0xDC	; 220
    24b8:	25 89       	ldd	r18, Z+21	; 0x15
    24ba:	20 7c       	andi	r18, 0xC0	; 192
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <udd_ep_alloc+0x36>
    24be:	69 c0       	rjmp	.+210    	; 0x2592 <udd_ep_alloc+0x108>
    24c0:	63 70       	andi	r22, 0x03	; 3
    24c2:	61 30       	cpi	r22, 0x01	; 1
    24c4:	11 f0       	breq	.+4      	; 0x24ca <udd_ep_alloc+0x40>
    24c6:	18 f4       	brcc	.+6      	; 0x24ce <udd_ep_alloc+0x44>
    24c8:	04 c0       	rjmp	.+8      	; 0x24d2 <udd_ep_alloc+0x48>
    24ca:	60 ec       	ldi	r22, 0xC0	; 192
    24cc:	03 c0       	rjmp	.+6      	; 0x24d4 <udd_ep_alloc+0x4a>
    24ce:	60 e8       	ldi	r22, 0x80	; 128
    24d0:	01 c0       	rjmp	.+2      	; 0x24d4 <udd_ep_alloc+0x4a>
    24d2:	60 e4       	ldi	r22, 0x40	; 64
    24d4:	40 38       	cpi	r20, 0x80	; 128
    24d6:	51 05       	cpc	r21, r1
    24d8:	e9 f0       	breq	.+58     	; 0x2514 <udd_ep_alloc+0x8a>
    24da:	50 f4       	brcc	.+20     	; 0x24f0 <udd_ep_alloc+0x66>
    24dc:	40 32       	cpi	r20, 0x20	; 32
    24de:	51 05       	cpc	r21, r1
    24e0:	a9 f0       	breq	.+42     	; 0x250c <udd_ep_alloc+0x82>
    24e2:	40 34       	cpi	r20, 0x40	; 64
    24e4:	51 05       	cpc	r21, r1
    24e6:	a1 f0       	breq	.+40     	; 0x2510 <udd_ep_alloc+0x86>
    24e8:	40 31       	cpi	r20, 0x10	; 16
    24ea:	51 05       	cpc	r21, r1
    24ec:	d9 f4       	brne	.+54     	; 0x2524 <udd_ep_alloc+0x9a>
    24ee:	0c c0       	rjmp	.+24     	; 0x2508 <udd_ep_alloc+0x7e>
    24f0:	41 15       	cp	r20, r1
    24f2:	22 e0       	ldi	r18, 0x02	; 2
    24f4:	52 07       	cpc	r21, r18
    24f6:	91 f0       	breq	.+36     	; 0x251c <udd_ep_alloc+0x92>
    24f8:	4f 3f       	cpi	r20, 0xFF	; 255
    24fa:	23 e0       	ldi	r18, 0x03	; 3
    24fc:	52 07       	cpc	r21, r18
    24fe:	81 f0       	breq	.+32     	; 0x2520 <udd_ep_alloc+0x96>
    2500:	41 15       	cp	r20, r1
    2502:	51 40       	sbci	r21, 0x01	; 1
    2504:	79 f4       	brne	.+30     	; 0x2524 <udd_ep_alloc+0x9a>
    2506:	08 c0       	rjmp	.+16     	; 0x2518 <udd_ep_alloc+0x8e>
    2508:	21 e0       	ldi	r18, 0x01	; 1
    250a:	0d c0       	rjmp	.+26     	; 0x2526 <udd_ep_alloc+0x9c>
    250c:	22 e0       	ldi	r18, 0x02	; 2
    250e:	0b c0       	rjmp	.+22     	; 0x2526 <udd_ep_alloc+0x9c>
    2510:	23 e0       	ldi	r18, 0x03	; 3
    2512:	09 c0       	rjmp	.+18     	; 0x2526 <udd_ep_alloc+0x9c>
    2514:	24 e0       	ldi	r18, 0x04	; 4
    2516:	07 c0       	rjmp	.+14     	; 0x2526 <udd_ep_alloc+0x9c>
    2518:	25 e0       	ldi	r18, 0x05	; 5
    251a:	05 c0       	rjmp	.+10     	; 0x2526 <udd_ep_alloc+0x9c>
    251c:	26 e0       	ldi	r18, 0x06	; 6
    251e:	03 c0       	rjmp	.+6      	; 0x2526 <udd_ep_alloc+0x9c>
    2520:	27 e0       	ldi	r18, 0x07	; 7
    2522:	01 c0       	rjmp	.+2      	; 0x2526 <udd_ep_alloc+0x9c>
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	fc 01       	movw	r30, r24
    2528:	ee 0f       	add	r30, r30
    252a:	ff 1f       	adc	r31, r31
    252c:	ee 0f       	add	r30, r30
    252e:	ff 1f       	adc	r31, r31
    2530:	ee 0f       	add	r30, r30
    2532:	ff 1f       	adc	r31, r31
    2534:	e8 5a       	subi	r30, 0xA8	; 168
    2536:	fc 4d       	sbci	r31, 0xDC	; 220
    2538:	15 8a       	std	Z+21, r1	; 0x15
    253a:	36 e0       	ldi	r19, 0x06	; 6
    253c:	34 8b       	std	Z+20, r19	; 0x14
    253e:	26 2b       	or	r18, r22
    2540:	25 8b       	std	Z+21, r18	; 0x15
    2542:	fc 01       	movw	r30, r24
    2544:	ee 0f       	add	r30, r30
    2546:	ff 1f       	adc	r31, r31
    2548:	ee 0f       	add	r30, r30
    254a:	ff 1f       	adc	r31, r31
    254c:	ee 0f       	add	r30, r30
    254e:	ff 1f       	adc	r31, r31
    2550:	e8 5a       	subi	r30, 0xA8	; 168
    2552:	fc 4d       	sbci	r31, 0xDC	; 220
    2554:	25 89       	ldd	r18, Z+21	; 0x15
    2556:	20 7c       	andi	r18, 0xC0	; 192
    2558:	20 3c       	cpi	r18, 0xC0	; 192
    255a:	69 f4       	brne	.+26     	; 0x2576 <udd_ep_alloc+0xec>
    255c:	fc 01       	movw	r30, r24
    255e:	ee 0f       	add	r30, r30
    2560:	ff 1f       	adc	r31, r31
    2562:	ee 0f       	add	r30, r30
    2564:	ff 1f       	adc	r31, r31
    2566:	ee 0f       	add	r30, r30
    2568:	ff 1f       	adc	r31, r31
    256a:	e8 5a       	subi	r30, 0xA8	; 168
    256c:	fc 4d       	sbci	r31, 0xDC	; 220
    256e:	25 89       	ldd	r18, Z+21	; 0x15
    2570:	27 70       	andi	r18, 0x07	; 7
    2572:	27 30       	cpi	r18, 0x07	; 7
    2574:	81 f0       	breq	.+32     	; 0x2596 <udd_ep_alloc+0x10c>
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	88 0f       	add	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	fc 01       	movw	r30, r24
    2584:	e8 5a       	subi	r30, 0xA8	; 168
    2586:	fc 4d       	sbci	r31, 0xDC	; 220
    2588:	85 89       	ldd	r24, Z+21	; 0x15
    258a:	80 62       	ori	r24, 0x20	; 32
    258c:	85 8b       	std	Z+21, r24	; 0x15
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	08 95       	ret
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	08 95       	ret
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	08 95       	ret

0000259a <udd_ep_is_halted>:
    259a:	e8 2f       	mov	r30, r24
    259c:	ef 70       	andi	r30, 0x0F	; 15
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	ee 0f       	add	r30, r30
    25a2:	ff 1f       	adc	r31, r31
    25a4:	08 2e       	mov	r0, r24
    25a6:	00 0c       	add	r0, r0
    25a8:	99 0b       	sbc	r25, r25
    25aa:	88 27       	eor	r24, r24
    25ac:	99 0f       	add	r25, r25
    25ae:	88 1f       	adc	r24, r24
    25b0:	99 27       	eor	r25, r25
    25b2:	e8 0f       	add	r30, r24
    25b4:	f9 1f       	adc	r31, r25
    25b6:	ee 0f       	add	r30, r30
    25b8:	ff 1f       	adc	r31, r31
    25ba:	ee 0f       	add	r30, r30
    25bc:	ff 1f       	adc	r31, r31
    25be:	ee 0f       	add	r30, r30
    25c0:	ff 1f       	adc	r31, r31
    25c2:	e8 5a       	subi	r30, 0xA8	; 168
    25c4:	fc 4d       	sbci	r31, 0xDC	; 220
    25c6:	85 89       	ldd	r24, Z+21	; 0x15
    25c8:	82 fb       	bst	r24, 2
    25ca:	88 27       	eor	r24, r24
    25cc:	80 f9       	bld	r24, 0
    25ce:	08 95       	ret

000025d0 <udd_ep_clear_halt>:
    25d0:	0f 93       	push	r16
    25d2:	28 2f       	mov	r18, r24
    25d4:	2f 70       	andi	r18, 0x0F	; 15
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	a9 01       	movw	r20, r18
    25da:	44 0f       	add	r20, r20
    25dc:	55 1f       	adc	r21, r21
    25de:	28 2f       	mov	r18, r24
    25e0:	08 2e       	mov	r0, r24
    25e2:	00 0c       	add	r0, r0
    25e4:	33 0b       	sbc	r19, r19
    25e6:	22 27       	eor	r18, r18
    25e8:	33 0f       	add	r19, r19
    25ea:	22 1f       	adc	r18, r18
    25ec:	33 27       	eor	r19, r19
    25ee:	24 0f       	add	r18, r20
    25f0:	35 1f       	adc	r19, r21
    25f2:	a9 01       	movw	r20, r18
    25f4:	44 0f       	add	r20, r20
    25f6:	55 1f       	adc	r21, r21
    25f8:	44 0f       	add	r20, r20
    25fa:	55 1f       	adc	r21, r21
    25fc:	44 0f       	add	r20, r20
    25fe:	55 1f       	adc	r21, r21
    2600:	fa 01       	movw	r30, r20
    2602:	e4 59       	subi	r30, 0x94	; 148
    2604:	fc 4d       	sbci	r31, 0xDC	; 220
    2606:	01 e0       	ldi	r16, 0x01	; 1
    2608:	06 93       	lac	Z, r16
    260a:	fa 01       	movw	r30, r20
    260c:	e8 5a       	subi	r30, 0xA8	; 168
    260e:	fc 4d       	sbci	r31, 0xDC	; 220
    2610:	95 89       	ldd	r25, Z+21	; 0x15
    2612:	92 ff       	sbrs	r25, 2
    2614:	11 c0       	rjmp	.+34     	; 0x2638 <udd_ep_clear_halt+0x68>
    2616:	fa 01       	movw	r30, r20
    2618:	e8 5a       	subi	r30, 0xA8	; 168
    261a:	fc 4d       	sbci	r31, 0xDC	; 220
    261c:	95 89       	ldd	r25, Z+21	; 0x15
    261e:	9b 7f       	andi	r25, 0xFB	; 251
    2620:	95 8b       	std	Z+21, r25	; 0x15
    2622:	64 dc       	rcall	.-1848   	; 0x1eec <udd_ep_get_job>
    2624:	fc 01       	movw	r30, r24
    2626:	80 81       	ld	r24, Z
    2628:	80 ff       	sbrs	r24, 0
    262a:	06 c0       	rjmp	.+12     	; 0x2638 <udd_ep_clear_halt+0x68>
    262c:	8e 7f       	andi	r24, 0xFE	; 254
    262e:	80 83       	st	Z, r24
    2630:	07 80       	ldd	r0, Z+7	; 0x07
    2632:	f0 85       	ldd	r31, Z+8	; 0x08
    2634:	e0 2d       	mov	r30, r0
    2636:	19 95       	eicall
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	0f 91       	pop	r16
    263c:	08 95       	ret

0000263e <udd_ep_run>:
    263e:	6f 92       	push	r6
    2640:	7f 92       	push	r7
    2642:	8f 92       	push	r8
    2644:	9f 92       	push	r9
    2646:	af 92       	push	r10
    2648:	bf 92       	push	r11
    264a:	cf 92       	push	r12
    264c:	df 92       	push	r13
    264e:	ef 92       	push	r14
    2650:	ff 92       	push	r15
    2652:	0f 93       	push	r16
    2654:	1f 93       	push	r17
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	1f 92       	push	r1
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	78 2e       	mov	r7, r24
    2662:	66 2e       	mov	r6, r22
    2664:	4a 01       	movw	r8, r20
    2666:	59 01       	movw	r10, r18
    2668:	41 dc       	rcall	.-1918   	; 0x1eec <udd_ep_get_job>
    266a:	6c 01       	movw	r12, r24
    266c:	27 2d       	mov	r18, r7
    266e:	87 2d       	mov	r24, r7
    2670:	8f 70       	andi	r24, 0x0F	; 15
    2672:	e8 2e       	mov	r14, r24
    2674:	f1 2c       	mov	r15, r1
    2676:	c7 01       	movw	r24, r14
    2678:	88 0f       	add	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	e7 2c       	mov	r14, r7
    267e:	07 2c       	mov	r0, r7
    2680:	00 0c       	add	r0, r0
    2682:	ff 08       	sbc	r15, r15
    2684:	ee 24       	eor	r14, r14
    2686:	ff 0c       	add	r15, r15
    2688:	ee 1c       	adc	r14, r14
    268a:	ff 24       	eor	r15, r15
    268c:	e8 0e       	add	r14, r24
    268e:	f9 1e       	adc	r15, r25
    2690:	f7 01       	movw	r30, r14
    2692:	ee 0f       	add	r30, r30
    2694:	ff 1f       	adc	r31, r31
    2696:	ee 0f       	add	r30, r30
    2698:	ff 1f       	adc	r31, r31
    269a:	ee 0f       	add	r30, r30
    269c:	ff 1f       	adc	r31, r31
    269e:	e8 5a       	subi	r30, 0xA8	; 168
    26a0:	fc 4d       	sbci	r31, 0xDC	; 220
    26a2:	85 89       	ldd	r24, Z+21	; 0x15
    26a4:	80 7c       	andi	r24, 0xC0	; 192
    26a6:	09 f4       	brne	.+2      	; 0x26aa <udd_ep_run+0x6c>
    26a8:	81 c0       	rjmp	.+258    	; 0x27ac <udd_ep_run+0x16e>
    26aa:	f7 01       	movw	r30, r14
    26ac:	ee 0f       	add	r30, r30
    26ae:	ff 1f       	adc	r31, r31
    26b0:	ee 0f       	add	r30, r30
    26b2:	ff 1f       	adc	r31, r31
    26b4:	ee 0f       	add	r30, r30
    26b6:	ff 1f       	adc	r31, r31
    26b8:	e8 5a       	subi	r30, 0xA8	; 168
    26ba:	fc 4d       	sbci	r31, 0xDC	; 220
    26bc:	85 89       	ldd	r24, Z+21	; 0x15
    26be:	80 7c       	andi	r24, 0xC0	; 192
    26c0:	80 3c       	cpi	r24, 0xC0	; 192
    26c2:	61 f0       	breq	.+24     	; 0x26dc <udd_ep_run+0x9e>
    26c4:	f7 01       	movw	r30, r14
    26c6:	ee 0f       	add	r30, r30
    26c8:	ff 1f       	adc	r31, r31
    26ca:	ee 0f       	add	r30, r30
    26cc:	ff 1f       	adc	r31, r31
    26ce:	ee 0f       	add	r30, r30
    26d0:	ff 1f       	adc	r31, r31
    26d2:	e8 5a       	subi	r30, 0xA8	; 168
    26d4:	fc 4d       	sbci	r31, 0xDC	; 220
    26d6:	85 89       	ldd	r24, Z+21	; 0x15
    26d8:	82 fd       	sbrc	r24, 2
    26da:	6a c0       	rjmp	.+212    	; 0x27b0 <udd_ep_run+0x172>
    26dc:	8f b7       	in	r24, 0x3f	; 63
    26de:	89 83       	std	Y+1, r24	; 0x01
    26e0:	f8 94       	cli
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	f6 01       	movw	r30, r12
    26e6:	90 81       	ld	r25, Z
    26e8:	90 ff       	sbrs	r25, 0
    26ea:	03 c0       	rjmp	.+6      	; 0x26f2 <udd_ep_run+0xb4>
    26ec:	8f bf       	out	0x3f, r24	; 63
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	60 c0       	rjmp	.+192    	; 0x27b2 <udd_ep_run+0x174>
    26f2:	f6 01       	movw	r30, r12
    26f4:	90 81       	ld	r25, Z
    26f6:	91 60       	ori	r25, 0x01	; 1
    26f8:	90 83       	st	Z, r25
    26fa:	8f bf       	out	0x3f, r24	; 63
    26fc:	81 82       	std	Z+1, r8	; 0x01
    26fe:	92 82       	std	Z+2, r9	; 0x02
    2700:	a3 82       	std	Z+3, r10	; 0x03
    2702:	b4 82       	std	Z+4, r11	; 0x04
    2704:	15 82       	std	Z+5, r1	; 0x05
    2706:	16 82       	std	Z+6, r1	; 0x06
    2708:	07 83       	std	Z+7, r16	; 0x07
    270a:	10 87       	std	Z+8, r17	; 0x08
    270c:	61 10       	cpse	r6, r1
    270e:	06 c0       	rjmp	.+12     	; 0x271c <udd_ep_run+0xde>
    2710:	91 e0       	ldi	r25, 0x01	; 1
    2712:	a1 14       	cp	r10, r1
    2714:	b1 04       	cpc	r11, r1
    2716:	19 f0       	breq	.+6      	; 0x271e <udd_ep_run+0xe0>
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	01 c0       	rjmp	.+2      	; 0x271e <udd_ep_run+0xe0>
    271c:	91 e0       	ldi	r25, 0x01	; 1
    271e:	f6 01       	movw	r30, r12
    2720:	80 81       	ld	r24, Z
    2722:	90 fb       	bst	r25, 0
    2724:	81 f9       	bld	r24, 1
    2726:	8b 7f       	andi	r24, 0xFB	; 251
    2728:	80 83       	st	Z, r24
    272a:	22 23       	and	r18, r18
    272c:	64 f4       	brge	.+24     	; 0x2746 <udd_ep_run+0x108>
    272e:	f7 01       	movw	r30, r14
    2730:	ee 0f       	add	r30, r30
    2732:	ff 1f       	adc	r31, r31
    2734:	ee 0f       	add	r30, r30
    2736:	ff 1f       	adc	r31, r31
    2738:	ee 0f       	add	r30, r30
    273a:	ff 1f       	adc	r31, r31
    273c:	e8 5a       	subi	r30, 0xA8	; 168
    273e:	fc 4d       	sbci	r31, 0xDC	; 220
    2740:	12 8e       	std	Z+26, r1	; 0x1a
    2742:	13 8e       	std	Z+27, r1	; 0x1b
    2744:	2f c0       	rjmp	.+94     	; 0x27a4 <udd_ep_run+0x166>
    2746:	f7 01       	movw	r30, r14
    2748:	ee 0f       	add	r30, r30
    274a:	ff 1f       	adc	r31, r31
    274c:	ee 0f       	add	r30, r30
    274e:	ff 1f       	adc	r31, r31
    2750:	ee 0f       	add	r30, r30
    2752:	ff 1f       	adc	r31, r31
    2754:	e8 5a       	subi	r30, 0xA8	; 168
    2756:	fc 4d       	sbci	r31, 0xDC	; 220
    2758:	85 89       	ldd	r24, Z+21	; 0x15
    275a:	80 7c       	andi	r24, 0xC0	; 192
    275c:	80 3c       	cpi	r24, 0xC0	; 192
    275e:	a9 f4       	brne	.+42     	; 0x278a <udd_ep_run+0x14c>
    2760:	c7 01       	movw	r24, r14
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	88 0f       	add	r24, r24
    276c:	99 1f       	adc	r25, r25
    276e:	84 59       	subi	r24, 0x94	; 148
    2770:	9c 4d       	sbci	r25, 0xDC	; 220
    2772:	94 db       	rcall	.-2264   	; 0x1e9c <udd_ep_get_size>
    2774:	bc 01       	movw	r22, r24
    2776:	c5 01       	movw	r24, r10
    2778:	b4 d2       	rcall	.+1384   	; 0x2ce2 <__udivmodhi4>
    277a:	89 2b       	or	r24, r25
    277c:	31 f0       	breq	.+12     	; 0x278a <udd_ep_run+0x14c>
    277e:	f6 01       	movw	r30, r12
    2780:	80 81       	ld	r24, Z
    2782:	8e 7f       	andi	r24, 0xFE	; 254
    2784:	80 83       	st	Z, r24
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	14 c0       	rjmp	.+40     	; 0x27b2 <udd_ep_run+0x174>
    278a:	f7 01       	movw	r30, r14
    278c:	ee 0f       	add	r30, r30
    278e:	ff 1f       	adc	r31, r31
    2790:	ee 0f       	add	r30, r30
    2792:	ff 1f       	adc	r31, r31
    2794:	ee 0f       	add	r30, r30
    2796:	ff 1f       	adc	r31, r31
    2798:	e8 5a       	subi	r30, 0xA8	; 168
    279a:	fc 4d       	sbci	r31, 0xDC	; 220
    279c:	16 8a       	std	Z+22, r1	; 0x16
    279e:	17 8a       	std	Z+23, r1	; 0x17
    27a0:	12 8e       	std	Z+26, r1	; 0x1a
    27a2:	13 8e       	std	Z+27, r1	; 0x1b
    27a4:	87 2d       	mov	r24, r7
    27a6:	2e dc       	rcall	.-1956   	; 0x2004 <udd_ep_trans_complet>
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	03 c0       	rjmp	.+6      	; 0x27b2 <udd_ep_run+0x174>
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	01 c0       	rjmp	.+2      	; 0x27b2 <udd_ep_run+0x174>
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	0f 90       	pop	r0
    27b4:	df 91       	pop	r29
    27b6:	cf 91       	pop	r28
    27b8:	1f 91       	pop	r17
    27ba:	0f 91       	pop	r16
    27bc:	ff 90       	pop	r15
    27be:	ef 90       	pop	r14
    27c0:	df 90       	pop	r13
    27c2:	cf 90       	pop	r12
    27c4:	bf 90       	pop	r11
    27c6:	af 90       	pop	r10
    27c8:	9f 90       	pop	r9
    27ca:	8f 90       	pop	r8
    27cc:	7f 90       	pop	r7
    27ce:	6f 90       	pop	r6
    27d0:	08 95       	ret

000027d2 <udd_ep_abort>:
    27d2:	ff 92       	push	r15
    27d4:	0f 93       	push	r16
    27d6:	1f 93       	push	r17
    27d8:	cf 93       	push	r28
    27da:	df 93       	push	r29
    27dc:	18 2f       	mov	r17, r24
    27de:	c8 2f       	mov	r28, r24
    27e0:	cf 70       	andi	r28, 0x0F	; 15
    27e2:	d0 e0       	ldi	r29, 0x00	; 0
    27e4:	ce 01       	movw	r24, r28
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	c1 2f       	mov	r28, r17
    27ec:	01 2e       	mov	r0, r17
    27ee:	00 0c       	add	r0, r0
    27f0:	dd 0b       	sbc	r29, r29
    27f2:	cc 27       	eor	r28, r28
    27f4:	dd 0f       	add	r29, r29
    27f6:	cc 1f       	adc	r28, r28
    27f8:	dd 27       	eor	r29, r29
    27fa:	c8 0f       	add	r28, r24
    27fc:	d9 1f       	adc	r29, r25
    27fe:	81 2f       	mov	r24, r17
    2800:	75 db       	rcall	.-2326   	; 0x1eec <udd_ep_get_job>
    2802:	dc 01       	movw	r26, r24
    2804:	fe 01       	movw	r30, r28
    2806:	ee 0f       	add	r30, r30
    2808:	ff 1f       	adc	r31, r31
    280a:	ee 0f       	add	r30, r30
    280c:	ff 1f       	adc	r31, r31
    280e:	ee 0f       	add	r30, r30
    2810:	ff 1f       	adc	r31, r31
    2812:	e4 59       	subi	r30, 0x94	; 148
    2814:	fc 4d       	sbci	r31, 0xDC	; 220
    2816:	02 e0       	ldi	r16, 0x02	; 2
    2818:	05 93       	las	Z, r16
    281a:	8c 91       	ld	r24, X
    281c:	80 ff       	sbrs	r24, 0
    281e:	22 c0       	rjmp	.+68     	; 0x2864 <udd_ep_abort+0x92>
    2820:	8e 7f       	andi	r24, 0xFE	; 254
    2822:	8c 93       	st	X, r24
    2824:	17 96       	adiw	r26, 0x07	; 7
    2826:	ed 91       	ld	r30, X+
    2828:	fc 91       	ld	r31, X
    282a:	18 97       	sbiw	r26, 0x08	; 8
    282c:	30 97       	sbiw	r30, 0x00	; 0
    282e:	d1 f0       	breq	.+52     	; 0x2864 <udd_ep_abort+0x92>
    2830:	11 23       	and	r17, r17
    2832:	5c f4       	brge	.+22     	; 0x284a <udd_ep_abort+0x78>
    2834:	cc 0f       	add	r28, r28
    2836:	dd 1f       	adc	r29, r29
    2838:	cc 0f       	add	r28, r28
    283a:	dd 1f       	adc	r29, r29
    283c:	cc 0f       	add	r28, r28
    283e:	dd 1f       	adc	r29, r29
    2840:	c8 5a       	subi	r28, 0xA8	; 168
    2842:	dc 4d       	sbci	r29, 0xDC	; 220
    2844:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2846:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2848:	0a c0       	rjmp	.+20     	; 0x285e <udd_ep_abort+0x8c>
    284a:	cc 0f       	add	r28, r28
    284c:	dd 1f       	adc	r29, r29
    284e:	cc 0f       	add	r28, r28
    2850:	dd 1f       	adc	r29, r29
    2852:	cc 0f       	add	r28, r28
    2854:	dd 1f       	adc	r29, r29
    2856:	c8 5a       	subi	r28, 0xA8	; 168
    2858:	dc 4d       	sbci	r29, 0xDC	; 220
    285a:	6e 89       	ldd	r22, Y+22	; 0x16
    285c:	7f 89       	ldd	r23, Y+23	; 0x17
    285e:	41 2f       	mov	r20, r17
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	19 95       	eicall
    2864:	df 91       	pop	r29
    2866:	cf 91       	pop	r28
    2868:	1f 91       	pop	r17
    286a:	0f 91       	pop	r16
    286c:	ff 90       	pop	r15
    286e:	08 95       	ret

00002870 <udd_ep_free>:
    2870:	cf 93       	push	r28
    2872:	c8 2f       	mov	r28, r24
    2874:	ae df       	rcall	.-164    	; 0x27d2 <udd_ep_abort>
    2876:	ec 2f       	mov	r30, r28
    2878:	ef 70       	andi	r30, 0x0F	; 15
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	ee 0f       	add	r30, r30
    287e:	ff 1f       	adc	r31, r31
    2880:	8c 2f       	mov	r24, r28
    2882:	cc 0f       	add	r28, r28
    2884:	99 0b       	sbc	r25, r25
    2886:	88 27       	eor	r24, r24
    2888:	99 0f       	add	r25, r25
    288a:	88 1f       	adc	r24, r24
    288c:	99 27       	eor	r25, r25
    288e:	e8 0f       	add	r30, r24
    2890:	f9 1f       	adc	r31, r25
    2892:	ee 0f       	add	r30, r30
    2894:	ff 1f       	adc	r31, r31
    2896:	ee 0f       	add	r30, r30
    2898:	ff 1f       	adc	r31, r31
    289a:	ee 0f       	add	r30, r30
    289c:	ff 1f       	adc	r31, r31
    289e:	e8 5a       	subi	r30, 0xA8	; 168
    28a0:	fc 4d       	sbci	r31, 0xDC	; 220
    28a2:	15 8a       	std	Z+21, r1	; 0x15
    28a4:	cf 91       	pop	r28
    28a6:	08 95       	ret

000028a8 <udd_ep_set_halt>:
    28a8:	e8 2f       	mov	r30, r24
    28aa:	ef 70       	andi	r30, 0x0F	; 15
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	ee 0f       	add	r30, r30
    28b0:	ff 1f       	adc	r31, r31
    28b2:	28 2f       	mov	r18, r24
    28b4:	08 2e       	mov	r0, r24
    28b6:	00 0c       	add	r0, r0
    28b8:	33 0b       	sbc	r19, r19
    28ba:	22 27       	eor	r18, r18
    28bc:	33 0f       	add	r19, r19
    28be:	22 1f       	adc	r18, r18
    28c0:	33 27       	eor	r19, r19
    28c2:	e2 0f       	add	r30, r18
    28c4:	f3 1f       	adc	r31, r19
    28c6:	ee 0f       	add	r30, r30
    28c8:	ff 1f       	adc	r31, r31
    28ca:	ee 0f       	add	r30, r30
    28cc:	ff 1f       	adc	r31, r31
    28ce:	ee 0f       	add	r30, r30
    28d0:	ff 1f       	adc	r31, r31
    28d2:	e8 5a       	subi	r30, 0xA8	; 168
    28d4:	fc 4d       	sbci	r31, 0xDC	; 220
    28d6:	95 89       	ldd	r25, Z+21	; 0x15
    28d8:	94 60       	ori	r25, 0x04	; 4
    28da:	95 8b       	std	Z+21, r25	; 0x15
    28dc:	7a df       	rcall	.-268    	; 0x27d2 <udd_ep_abort>
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	08 95       	ret

000028e2 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    28e2:	1f 92       	push	r1
    28e4:	0f 92       	push	r0
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	0f 92       	push	r0
    28ea:	11 24       	eor	r1, r1
    28ec:	0b b6       	in	r0, 0x3b	; 59
    28ee:	0f 92       	push	r0
    28f0:	0f 93       	push	r16
    28f2:	2f 93       	push	r18
    28f4:	3f 93       	push	r19
    28f6:	4f 93       	push	r20
    28f8:	5f 93       	push	r21
    28fa:	6f 93       	push	r22
    28fc:	7f 93       	push	r23
    28fe:	8f 93       	push	r24
    2900:	9f 93       	push	r25
    2902:	af 93       	push	r26
    2904:	bf 93       	push	r27
    2906:	cf 93       	push	r28
    2908:	ef 93       	push	r30
    290a:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    290c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2910:	88 23       	and	r24, r24
    2912:	3c f4       	brge	.+14     	; 0x2922 <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    2914:	80 e8       	ldi	r24, 0x80	; 128
    2916:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    291a:	0e 94 83 0b 	call	0x1706	; 0x1706 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    291e:	b0 d1       	rcall	.+864    	; 0x2c80 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2920:	89 c0       	rjmp	.+274    	; 0x2a34 <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2922:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2926:	82 ff       	sbrs	r24, 2
    2928:	20 c0       	rjmp	.+64     	; 0x296a <__vector_125+0x88>
		udd_ack_underflow_event();
    292a:	84 e0       	ldi	r24, 0x04	; 4
    292c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    2930:	80 91 74 23 	lds	r24, 0x2374	; 0x802374 <udd_sram+0x1c>
    2934:	86 ff       	sbrs	r24, 6
    2936:	7e c0       	rjmp	.+252    	; 0x2a34 <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2938:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    293c:	81 fd       	sbrc	r24, 1
    293e:	7a c0       	rjmp	.+244    	; 0x2a34 <__vector_125+0x152>
    2940:	f0 da       	rcall	.-2592   	; 0x1f22 <udd_ctrl_interrupt_tc_setup>
    2942:	81 11       	cpse	r24, r1
    2944:	77 c0       	rjmp	.+238    	; 0x2a34 <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2946:	80 91 55 23 	lds	r24, 0x2355	; 0x802355 <udd_ep_control_state>
    294a:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    294c:	11 f4       	brne	.+4      	; 0x2952 <__vector_125+0x70>
    294e:	24 da       	rcall	.-3000   	; 0x1d98 <udd_ctrl_send_zlp_in>
    2950:	71 c0       	rjmp	.+226    	; 0x2a34 <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2952:	84 30       	cpi	r24, 0x04	; 4
    2954:	09 f0       	breq	.+2      	; 0x2958 <__vector_125+0x76>
    2956:	6e c0       	rjmp	.+220    	; 0x2a34 <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2958:	e5 e7       	ldi	r30, 0x75	; 117
    295a:	f3 e2       	ldi	r31, 0x23	; 35
    295c:	04 e0       	ldi	r16, 0x04	; 4
    295e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2960:	ed e6       	ldi	r30, 0x6D	; 109
    2962:	f3 e2       	ldi	r31, 0x23	; 35
    2964:	04 e0       	ldi	r16, 0x04	; 4
    2966:	05 93       	las	Z, r16
    2968:	65 c0       	rjmp	.+202    	; 0x2a34 <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    296a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    296e:	81 ff       	sbrs	r24, 1
    2970:	5c c0       	rjmp	.+184    	; 0x2a2a <__vector_125+0x148>
		udd_ack_overflow_event();
    2972:	82 e0       	ldi	r24, 0x02	; 2
    2974:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    2978:	80 91 6c 23 	lds	r24, 0x236C	; 0x80236c <udd_sram+0x14>
    297c:	86 ff       	sbrs	r24, 6
    297e:	5a c0       	rjmp	.+180    	; 0x2a34 <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2980:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2984:	81 fd       	sbrc	r24, 1
    2986:	56 c0       	rjmp	.+172    	; 0x2a34 <__vector_125+0x152>
    2988:	cc da       	rcall	.-2664   	; 0x1f22 <udd_ctrl_interrupt_tc_setup>
    298a:	81 11       	cpse	r24, r1
    298c:	53 c0       	rjmp	.+166    	; 0x2a34 <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    298e:	80 91 55 23 	lds	r24, 0x2355	; 0x802355 <udd_ep_control_state>
    2992:	82 30       	cpi	r24, 0x02	; 2
    2994:	41 f4       	brne	.+16     	; 0x29a6 <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2996:	84 e0       	ldi	r24, 0x04	; 4
    2998:	80 93 55 23 	sts	0x2355, r24	; 0x802355 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    299c:	ec e6       	ldi	r30, 0x6C	; 108
    299e:	f3 e2       	ldi	r31, 0x23	; 35
    29a0:	02 e0       	ldi	r16, 0x02	; 2
    29a2:	06 93       	lac	Z, r16
    29a4:	47 c0       	rjmp	.+142    	; 0x2a34 <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    29a6:	83 30       	cpi	r24, 0x03	; 3
    29a8:	09 f0       	breq	.+2      	; 0x29ac <__vector_125+0xca>
    29aa:	44 c0       	rjmp	.+136    	; 0x2a34 <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    29ac:	e5 e7       	ldi	r30, 0x75	; 117
    29ae:	f3 e2       	ldi	r31, 0x23	; 35
    29b0:	04 e0       	ldi	r16, 0x04	; 4
    29b2:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    29b4:	ed e6       	ldi	r30, 0x6D	; 109
    29b6:	f3 e2       	ldi	r31, 0x23	; 35
    29b8:	04 e0       	ldi	r16, 0x04	; 4
    29ba:	05 93       	las	Z, r16
    29bc:	3b c0       	rjmp	.+118    	; 0x2a34 <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    29be:	80 e1       	ldi	r24, 0x10	; 16
    29c0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    29c4:	c1 e0       	ldi	r28, 0x01	; 1
    29c6:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    29c8:	04 df       	rcall	.-504    	; 0x27d2 <udd_ep_abort>
    29ca:	8c 2f       	mov	r24, r28
    29cc:	80 68       	ori	r24, 0x80	; 128
    29ce:	01 df       	rcall	.-510    	; 0x27d2 <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    29d0:	cf 5f       	subi	r28, 0xFF	; 255
    29d2:	c5 30       	cpi	r28, 0x05	; 5
    29d4:	c1 f7       	brne	.-16     	; 0x29c6 <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    29d6:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    29da:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    29de:	e8 e5       	ldi	r30, 0x58	; 88
    29e0:	f3 e2       	ldi	r31, 0x23	; 35
    29e2:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    29e4:	96 e0       	ldi	r25, 0x06	; 6
    29e6:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    29e8:	80 e4       	ldi	r24, 0x40	; 64
    29ea:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    29ec:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    29ee:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    29f0:	85 8f       	std	Z+29, r24	; 0x1d
    29f2:	89 e4       	ldi	r24, 0x49	; 73
    29f4:	93 e2       	ldi	r25, 0x23	; 35
    29f6:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    29f8:	91 8f       	std	Z+25, r25	; 0x19
    29fa:	9b d9       	rcall	.-3274   	; 0x1d32 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    29fc:	1b c0       	rjmp	.+54     	; 0x2a34 <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    29fe:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    2a02:	86 ff       	sbrs	r24, 6
    2a04:	07 c0       	rjmp	.+14     	; 0x2a14 <__vector_125+0x132>
    2a06:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2a08:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2a0e:	59 d9       	rcall	.-3406   	; 0x1cc2 <udd_sleep_mode>
    2a10:	35 d1       	rcall	.+618    	; 0x2c7c <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    2a12:	10 c0       	rjmp	.+32     	; 0x2a34 <__vector_125+0x152>
    2a14:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    2a18:	85 ff       	sbrs	r24, 5
    2a1a:	0c c0       	rjmp	.+24     	; 0x2a34 <__vector_125+0x152>
    2a1c:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    2a1e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2a22:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2a24:	4e d9       	rcall	.-3428   	; 0x1cc2 <udd_sleep_mode>
    2a26:	2b d1       	rcall	.+598    	; 0x2c7e <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    2a28:	05 c0       	rjmp	.+10     	; 0x2a34 <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2a2a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2a2e:	84 fd       	sbrc	r24, 4
    2a30:	c6 cf       	rjmp	.-116    	; 0x29be <__vector_125+0xdc>
    2a32:	e5 cf       	rjmp	.-54     	; 0x29fe <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2a34:	ff 91       	pop	r31
    2a36:	ef 91       	pop	r30
    2a38:	cf 91       	pop	r28
    2a3a:	bf 91       	pop	r27
    2a3c:	af 91       	pop	r26
    2a3e:	9f 91       	pop	r25
    2a40:	8f 91       	pop	r24
    2a42:	7f 91       	pop	r23
    2a44:	6f 91       	pop	r22
    2a46:	5f 91       	pop	r21
    2a48:	4f 91       	pop	r20
    2a4a:	3f 91       	pop	r19
    2a4c:	2f 91       	pop	r18
    2a4e:	0f 91       	pop	r16
    2a50:	0f 90       	pop	r0
    2a52:	0b be       	out	0x3b, r0	; 59
    2a54:	0f 90       	pop	r0
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	0f 90       	pop	r0
    2a5a:	1f 90       	pop	r1
    2a5c:	18 95       	reti

00002a5e <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2a5e:	1f 92       	push	r1
    2a60:	0f 92       	push	r0
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	0f 92       	push	r0
    2a66:	11 24       	eor	r1, r1
    2a68:	0b b6       	in	r0, 0x3b	; 59
    2a6a:	0f 92       	push	r0
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	2f 93       	push	r18
    2a72:	3f 93       	push	r19
    2a74:	4f 93       	push	r20
    2a76:	5f 93       	push	r21
    2a78:	6f 93       	push	r22
    2a7a:	7f 93       	push	r23
    2a7c:	8f 93       	push	r24
    2a7e:	9f 93       	push	r25
    2a80:	af 93       	push	r26
    2a82:	bf 93       	push	r27
    2a84:	cf 93       	push	r28
    2a86:	df 93       	push	r29
    2a88:	ef 93       	push	r30
    2a8a:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2a8c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2a90:	81 fd       	sbrc	r24, 1
    2a92:	03 c0       	rjmp	.+6      	; 0x2a9a <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2a94:	46 da       	rcall	.-2932   	; 0x1f22 <udd_ctrl_interrupt_tc_setup>
    2a96:	81 11       	cpse	r24, r1
    2a98:	c3 c0       	rjmp	.+390    	; 0x2c20 <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2a9a:	82 e0       	ldi	r24, 0x02	; 2
    2a9c:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2aa0:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2aa4:	81 95       	neg	r24
    2aa6:	88 0f       	add	r24, r24
    2aa8:	ec e6       	ldi	r30, 0x6C	; 108
    2aaa:	f3 e2       	ldi	r31, 0x23	; 35
    2aac:	e8 1b       	sub	r30, r24
    2aae:	f1 09       	sbc	r31, r1
    2ab0:	20 81       	ld	r18, Z
    2ab2:	31 81       	ldd	r19, Z+1	; 0x01
    2ab4:	2c 56       	subi	r18, 0x6C	; 108
    2ab6:	33 42       	sbci	r19, 0x23	; 35
    2ab8:	36 95       	lsr	r19
    2aba:	27 95       	ror	r18
    2abc:	36 95       	lsr	r19
    2abe:	27 95       	ror	r18
    2ac0:	36 95       	lsr	r19
    2ac2:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2ac4:	82 2f       	mov	r24, r18
    2ac6:	86 95       	lsr	r24
    2ac8:	20 fd       	sbrc	r18, 0
    2aca:	02 c0       	rjmp	.+4      	; 0x2ad0 <__vector_126+0x72>
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	01 c0       	rjmp	.+2      	; 0x2ad2 <__vector_126+0x74>
    2ad0:	90 e8       	ldi	r25, 0x80	; 128
    2ad2:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2ad4:	e8 2f       	mov	r30, r24
    2ad6:	ef 70       	andi	r30, 0x0F	; 15
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	ee 0f       	add	r30, r30
    2adc:	ff 1f       	adc	r31, r31
    2ade:	28 2f       	mov	r18, r24
    2ae0:	08 2e       	mov	r0, r24
    2ae2:	00 0c       	add	r0, r0
    2ae4:	33 0b       	sbc	r19, r19
    2ae6:	22 27       	eor	r18, r18
    2ae8:	33 0f       	add	r19, r19
    2aea:	22 1f       	adc	r18, r18
    2aec:	33 27       	eor	r19, r19
    2aee:	e2 0f       	add	r30, r18
    2af0:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2af2:	df 01       	movw	r26, r30
    2af4:	aa 0f       	add	r26, r26
    2af6:	bb 1f       	adc	r27, r27
    2af8:	aa 0f       	add	r26, r26
    2afa:	bb 1f       	adc	r27, r27
    2afc:	aa 0f       	add	r26, r26
    2afe:	bb 1f       	adc	r27, r27
    2b00:	a8 5a       	subi	r26, 0xA8	; 168
    2b02:	bc 4d       	sbci	r27, 0xDC	; 220
    2b04:	54 96       	adiw	r26, 0x14	; 20
    2b06:	9c 91       	ld	r25, X
    2b08:	95 ff       	sbrs	r25, 5
    2b0a:	8a c0       	rjmp	.+276    	; 0x2c20 <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2b0c:	ee 0f       	add	r30, r30
    2b0e:	ff 1f       	adc	r31, r31
    2b10:	ee 0f       	add	r30, r30
    2b12:	ff 1f       	adc	r31, r31
    2b14:	ee 0f       	add	r30, r30
    2b16:	ff 1f       	adc	r31, r31
    2b18:	e4 59       	subi	r30, 0x94	; 148
    2b1a:	fc 4d       	sbci	r31, 0xDC	; 220
    2b1c:	00 e2       	ldi	r16, 0x20	; 32
    2b1e:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2b20:	81 11       	cpse	r24, r1
    2b22:	79 c0       	rjmp	.+242    	; 0x2c16 <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2b24:	80 91 55 23 	lds	r24, 0x2355	; 0x802355 <udd_ep_control_state>
    2b28:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2b2a:	19 f4       	brne	.+6      	; 0x2b32 <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2b2c:	43 d9       	rcall	.-3450   	; 0x1db4 <udd_ctrl_endofrequest>
    2b2e:	01 d9       	rcall	.-3582   	; 0x1d32 <udd_ctrl_init>
    2b30:	77 c0       	rjmp	.+238    	; 0x2c20 <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2b32:	00 91 6e 23 	lds	r16, 0x236E	; 0x80236e <udd_sram+0x16>
    2b36:	10 91 6f 23 	lds	r17, 0x236F	; 0x80236f <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2b3a:	80 91 d7 23 	lds	r24, 0x23D7	; 0x8023d7 <udd_g_ctrlreq+0xa>
    2b3e:	90 91 d8 23 	lds	r25, 0x23D8	; 0x8023d8 <udd_g_ctrlreq+0xb>
    2b42:	c0 91 51 23 	lds	r28, 0x2351	; 0x802351 <udd_ctrl_payload_nb_trans>
    2b46:	d0 91 52 23 	lds	r29, 0x2352	; 0x802352 <udd_ctrl_payload_nb_trans+0x1>
    2b4a:	98 01       	movw	r18, r16
    2b4c:	2c 0f       	add	r18, r28
    2b4e:	3d 1f       	adc	r19, r29
    2b50:	82 17       	cp	r24, r18
    2b52:	93 07       	cpc	r25, r19
    2b54:	18 f4       	brcc	.+6      	; 0x2b5c <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2b56:	8c 01       	movw	r16, r24
    2b58:	0c 1b       	sub	r16, r28
    2b5a:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2b5c:	80 91 d5 23 	lds	r24, 0x23D5	; 0x8023d5 <udd_g_ctrlreq+0x8>
    2b60:	90 91 d6 23 	lds	r25, 0x23D6	; 0x8023d6 <udd_g_ctrlreq+0x9>
    2b64:	a8 01       	movw	r20, r16
    2b66:	69 e4       	ldi	r22, 0x49	; 73
    2b68:	73 e2       	ldi	r23, 0x23	; 35
    2b6a:	8c 0f       	add	r24, r28
    2b6c:	9d 1f       	adc	r25, r29
    2b6e:	d5 d0       	rcall	.+426    	; 0x2d1a <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2b70:	c0 0f       	add	r28, r16
    2b72:	d1 1f       	adc	r29, r17
    2b74:	c0 93 51 23 	sts	0x2351, r28	; 0x802351 <udd_ctrl_payload_nb_trans>
    2b78:	d0 93 52 23 	sts	0x2352, r29	; 0x802352 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2b7c:	08 30       	cpi	r16, 0x08	; 8
    2b7e:	11 05       	cpc	r17, r1
    2b80:	69 f4       	brne	.+26     	; 0x2b9c <__vector_126+0x13e>
    2b82:	80 91 53 23 	lds	r24, 0x2353	; 0x802353 <udd_ctrl_prev_payload_nb_trans>
    2b86:	90 91 54 23 	lds	r25, 0x2354	; 0x802354 <udd_ctrl_prev_payload_nb_trans+0x1>
    2b8a:	8c 0f       	add	r24, r28
    2b8c:	9d 1f       	adc	r25, r29
    2b8e:	20 91 d3 23 	lds	r18, 0x23D3	; 0x8023d3 <udd_g_ctrlreq+0x6>
    2b92:	30 91 d4 23 	lds	r19, 0x23D4	; 0x8023d4 <udd_g_ctrlreq+0x7>
    2b96:	82 17       	cp	r24, r18
    2b98:	93 07       	cpc	r25, r19
    2b9a:	80 f0       	brcs	.+32     	; 0x2bbc <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2b9c:	ed ec       	ldi	r30, 0xCD	; 205
    2b9e:	f3 e2       	ldi	r31, 0x23	; 35
    2ba0:	c2 87       	std	Z+10, r28	; 0x0a
    2ba2:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2ba4:	06 84       	ldd	r0, Z+14	; 0x0e
    2ba6:	f7 85       	ldd	r31, Z+15	; 0x0f
    2ba8:	e0 2d       	mov	r30, r0
    2baa:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    2bac:	29 f0       	breq	.+10     	; 0x2bb8 <__vector_126+0x15a>
    2bae:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    2bb0:	81 11       	cpse	r24, r1
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <__vector_126+0x15a>
    2bb4:	e3 d8       	rcall	.-3642   	; 0x1d7c <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2bb6:	34 c0       	rjmp	.+104    	; 0x2c20 <__vector_126+0x1c2>
    2bb8:	ef d8       	rcall	.-3618   	; 0x1d98 <udd_ctrl_send_zlp_in>
    2bba:	32 c0       	rjmp	.+100    	; 0x2c20 <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2bbc:	80 91 d7 23 	lds	r24, 0x23D7	; 0x8023d7 <udd_g_ctrlreq+0xa>
    2bc0:	90 91 d8 23 	lds	r25, 0x23D8	; 0x8023d8 <udd_g_ctrlreq+0xb>
    2bc4:	c8 17       	cp	r28, r24
    2bc6:	d9 07       	cpc	r29, r25
    2bc8:	f9 f4       	brne	.+62     	; 0x2c08 <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2bca:	e0 91 db 23 	lds	r30, 0x23DB	; 0x8023db <udd_g_ctrlreq+0xe>
    2bce:	f0 91 dc 23 	lds	r31, 0x23DC	; 0x8023dc <udd_g_ctrlreq+0xf>
    2bd2:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2bd4:	11 f4       	brne	.+4      	; 0x2bda <__vector_126+0x17c>
    2bd6:	d2 d8       	rcall	.-3676   	; 0x1d7c <udd_ctrl_stall_data>
    2bd8:	23 c0       	rjmp	.+70     	; 0x2c20 <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2bda:	19 95       	eicall
    2bdc:	81 11       	cpse	r24, r1
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2be0:	cd d8       	rcall	.-3686   	; 0x1d7c <udd_ctrl_stall_data>
    2be2:	1e c0       	rjmp	.+60     	; 0x2c20 <__vector_126+0x1c2>
    2be4:	20 91 53 23 	lds	r18, 0x2353	; 0x802353 <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2be8:	30 91 54 23 	lds	r19, 0x2354	; 0x802354 <udd_ctrl_prev_payload_nb_trans+0x1>
    2bec:	80 91 51 23 	lds	r24, 0x2351	; 0x802351 <udd_ctrl_payload_nb_trans>
    2bf0:	90 91 52 23 	lds	r25, 0x2352	; 0x802352 <udd_ctrl_payload_nb_trans+0x1>
    2bf4:	82 0f       	add	r24, r18
    2bf6:	93 1f       	adc	r25, r19
    2bf8:	80 93 53 23 	sts	0x2353, r24	; 0x802353 <udd_ctrl_prev_payload_nb_trans>
    2bfc:	90 93 54 23 	sts	0x2354, r25	; 0x802354 <udd_ctrl_prev_payload_nb_trans+0x1>
    2c00:	10 92 51 23 	sts	0x2351, r1	; 0x802351 <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2c04:	10 92 52 23 	sts	0x2352, r1	; 0x802352 <udd_ctrl_payload_nb_trans+0x1>
    2c08:	ec e6       	ldi	r30, 0x6C	; 108
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2c0a:	f3 e2       	ldi	r31, 0x23	; 35
    2c0c:	02 e0       	ldi	r16, 0x02	; 2
    2c0e:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2c10:	00 e2       	ldi	r16, 0x20	; 32
    2c12:	06 93       	lac	Z, r16
    2c14:	05 c0       	rjmp	.+10     	; 0x2c20 <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2c16:	80 38       	cpi	r24, 0x80	; 128
		udd_ctrl_in_sent();
    2c18:	11 f4       	brne	.+4      	; 0x2c1e <__vector_126+0x1c0>
    2c1a:	d4 d8       	rcall	.-3672   	; 0x1dc4 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2c1c:	01 c0       	rjmp	.+2      	; 0x2c20 <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2c1e:	f2 d9       	rcall	.-3100   	; 0x2004 <udd_ep_trans_complet>
    2c20:	ff 91       	pop	r31
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2c22:	ef 91       	pop	r30
    2c24:	df 91       	pop	r29
    2c26:	cf 91       	pop	r28
    2c28:	bf 91       	pop	r27
    2c2a:	af 91       	pop	r26
    2c2c:	9f 91       	pop	r25
    2c2e:	8f 91       	pop	r24
    2c30:	7f 91       	pop	r23
    2c32:	6f 91       	pop	r22
    2c34:	5f 91       	pop	r21
    2c36:	4f 91       	pop	r20
    2c38:	3f 91       	pop	r19
    2c3a:	2f 91       	pop	r18
    2c3c:	1f 91       	pop	r17
    2c3e:	0f 91       	pop	r16
    2c40:	0f 90       	pop	r0
    2c42:	0b be       	out	0x3b, r0	; 59
    2c44:	0f 90       	pop	r0
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	0f 90       	pop	r0
    2c4a:	1f 90       	pop	r1
    2c4c:	18 95       	reti

00002c4e <main>:

static const uint8_t sequence = 1;

int main (void)
{
	irq_initialize_vectors();  // initializes vector table
    2c4e:	87 e0       	ldi	r24, 0x07	; 7
    2c50:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();          // enables CPU interrupts
    2c54:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2c56:	e7 ec       	ldi	r30, 0xC7	; 199
    2c58:	f3 e2       	ldi	r31, 0x23	; 35
    2c5a:	10 82       	st	Z, r1
    2c5c:	11 82       	std	Z+1, r1	; 0x01
    2c5e:	12 82       	std	Z+2, r1	; 0x02
    2c60:	13 82       	std	Z+3, r1	; 0x03
    2c62:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();           // initialize sleep manager
	sysclk_init();             // initialize clock
    2c68:	0e 94 c5 07 	call	0xf8a	; 0xf8a <sysclk_init>

	io_ui_process(); // initializes board i/o pins
    2c6c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <io_ui_process>

	udc_start();               // starts USB device controller
    2c70:	0e 94 57 0b 	call	0x16ae	; 0x16ae <udc_start>

	startup_ui_process(sequence); // pick preferred sequence (1-5)
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	0e 94 b9 07 	call	0xf72	; 0xf72 <startup_ui_process>
    2c7a:	ff cf       	rjmp	.-2      	; 0x2c7a <main+0x2c>

00002c7c <main_suspend_action>:

	while (true) { }
}

/* -------------------------------- USB -------------------------------- */
void main_suspend_action(void) { }
    2c7c:	08 95       	ret

00002c7e <main_resume_action>:
void main_resume_action(void) { }
    2c7e:	08 95       	ret

00002c80 <main_sof_action>:

void main_sof_action(void) {	// called each Start of Frame event (1 ms)
	if (!main_b_kbd_enable)
    2c80:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <main_b_kbd_enable>
    2c84:	88 23       	and	r24, r24
    2c86:	81 f0       	breq	.+32     	; 0x2ca8 <main_sof_action+0x28>
		return;
	kbd_ui_process();
    2c88:	0e 94 bd 07 	call	0xf7a	; 0xf7a <kbd_ui_process>

	if (!main_b_generic_enable)
    2c8c:	80 91 c2 23 	lds	r24, 0x23C2	; 0x8023c2 <main_b_generic_enable>
    2c90:	88 23       	and	r24, r24
    2c92:	51 f0       	breq	.+20     	; 0x2ca8 <main_sof_action+0x28>
		return;
	jstk_ui_process();
    2c94:	0e 94 bb 07 	call	0xf76	; 0xf76 <jstk_ui_process>

	if (!main_b_led_enable)
    2c98:	80 91 c1 23 	lds	r24, 0x23C1	; 0x8023c1 <main_b_led_enable>
    2c9c:	88 23       	and	r24, r24
    2c9e:	21 f0       	breq	.+8      	; 0x2ca8 <main_sof_action+0x28>
		return;
	led_ui_process();
    2ca0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <led_ui_process>

	status_ui_process();
    2ca4:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <status_ui_process>
    2ca8:	08 95       	ret

00002caa <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    2caa:	08 95       	ret

00002cac <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    2cac:	08 95       	ret

00002cae <main_kbd_enable>:

/* ----------------------------- keyboard ------------------------------ */
bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	80 93 c3 23 	sts	0x23C3, r24	; 0x8023c3 <main_b_kbd_enable>
	return true;
}
    2cb4:	08 95       	ret

00002cb6 <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    2cb6:	10 92 c3 23 	sts	0x23C3, r1	; 0x8023c3 <main_b_kbd_enable>
    2cba:	08 95       	ret

00002cbc <main_generic_enable>:
}

/* ----------------------------- joystick ------------------------------ */
bool main_generic_enable(void) {
	main_b_generic_enable = true;
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	80 93 c2 23 	sts	0x23C2, r24	; 0x8023c2 <main_b_generic_enable>
	return true;
}
    2cc2:	08 95       	ret

00002cc4 <main_generic_disable>:

void main_generic_disable(void) {
	main_b_generic_enable = false;
    2cc4:	10 92 c2 23 	sts	0x23C2, r1	; 0x8023c2 <main_b_generic_enable>
    2cc8:	08 95       	ret

00002cca <main_led_enable>:
}

/* ------------------------------- LEDs -------------------------------- */
bool main_led_enable(void) {
	main_b_led_enable = true;
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	80 93 c1 23 	sts	0x23C1, r24	; 0x8023c1 <main_b_led_enable>
	return true;
}
    2cd0:	08 95       	ret

00002cd2 <main_led_disable>:

void main_led_disable(void) {
	main_b_led_enable = false;
    2cd2:	10 92 c1 23 	sts	0x23C1, r1	; 0x8023c1 <main_b_led_enable>
    2cd6:	08 95       	ret

00002cd8 <main_led_report_out>:
}

void main_led_report_out(uint8_t const *report) {
	led_set(report[0]);
    2cd8:	fc 01       	movw	r30, r24
    2cda:	80 81       	ld	r24, Z
    2cdc:	0c 94 c1 07 	jmp	0xf82	; 0xf82 <led_set>
    2ce0:	08 95       	ret

00002ce2 <__udivmodhi4>:
    2ce2:	aa 1b       	sub	r26, r26
    2ce4:	bb 1b       	sub	r27, r27
    2ce6:	51 e1       	ldi	r21, 0x11	; 17
    2ce8:	07 c0       	rjmp	.+14     	; 0x2cf8 <__udivmodhi4_ep>

00002cea <__udivmodhi4_loop>:
    2cea:	aa 1f       	adc	r26, r26
    2cec:	bb 1f       	adc	r27, r27
    2cee:	a6 17       	cp	r26, r22
    2cf0:	b7 07       	cpc	r27, r23
    2cf2:	10 f0       	brcs	.+4      	; 0x2cf8 <__udivmodhi4_ep>
    2cf4:	a6 1b       	sub	r26, r22
    2cf6:	b7 0b       	sbc	r27, r23

00002cf8 <__udivmodhi4_ep>:
    2cf8:	88 1f       	adc	r24, r24
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	5a 95       	dec	r21
    2cfe:	a9 f7       	brne	.-22     	; 0x2cea <__udivmodhi4_loop>
    2d00:	80 95       	com	r24
    2d02:	90 95       	com	r25
    2d04:	bc 01       	movw	r22, r24
    2d06:	cd 01       	movw	r24, r26
    2d08:	08 95       	ret

00002d0a <__tablejump2__>:
    2d0a:	ee 0f       	add	r30, r30
    2d0c:	ff 1f       	adc	r31, r31
    2d0e:	88 1f       	adc	r24, r24
    2d10:	8b bf       	out	0x3b, r24	; 59
    2d12:	07 90       	elpm	r0, Z+
    2d14:	f6 91       	elpm	r31, Z
    2d16:	e0 2d       	mov	r30, r0
    2d18:	19 94       	eijmp

00002d1a <memcpy>:
    2d1a:	fb 01       	movw	r30, r22
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	02 c0       	rjmp	.+4      	; 0x2d24 <memcpy+0xa>
    2d20:	01 90       	ld	r0, Z+
    2d22:	0d 92       	st	X+, r0
    2d24:	41 50       	subi	r20, 0x01	; 1
    2d26:	50 40       	sbci	r21, 0x00	; 0
    2d28:	d8 f7       	brcc	.-10     	; 0x2d20 <memcpy+0x6>
    2d2a:	08 95       	ret

00002d2c <_exit>:
    2d2c:	f8 94       	cli

00002d2e <__stop_program>:
    2d2e:	ff cf       	rjmp	.-2      	; 0x2d2e <__stop_program>
