
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000266c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000190  00802000  0000266c  00002700  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000231  00802190  00802190  00002890  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002890  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000540  00000000  00000000  00002900  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a622  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005036  00000000  00000000  0000d462  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009472  00000000  00000000  00012498  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b80  00000000  00000000  0001b90c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036757  00000000  00000000  0001c48c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027cd  00000000  00000000  00052be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000508  00000000  00000000  000553b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ceff  00000000  00000000  000558b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	2c c1       	rjmp	.+600    	; 0x25e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c1       	rjmp	.+596    	; 0x25e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c1       	rjmp	.+592    	; 0x25e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c1       	rjmp	.+588    	; 0x25e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c1       	rjmp	.+584    	; 0x25e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c1       	rjmp	.+580    	; 0x25e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c1       	rjmp	.+576    	; 0x25e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c1       	rjmp	.+572    	; 0x25e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c1       	rjmp	.+568    	; 0x25e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c1       	rjmp	.+564    	; 0x25e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	18 c1       	rjmp	.+560    	; 0x25e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c1       	rjmp	.+556    	; 0x25e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c1       	rjmp	.+552    	; 0x25e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c1       	rjmp	.+548    	; 0x25e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c1       	rjmp	.+544    	; 0x25e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c1       	rjmp	.+540    	; 0x25e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c1       	rjmp	.+536    	; 0x25e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c1       	rjmp	.+532    	; 0x25e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c1       	rjmp	.+528    	; 0x25e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c1       	rjmp	.+524    	; 0x25e <__bad_interrupt>
      52:	00 00       	nop
      54:	04 c1       	rjmp	.+520    	; 0x25e <__bad_interrupt>
      56:	00 00       	nop
      58:	02 c1       	rjmp	.+516    	; 0x25e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	00 c1       	rjmp	.+512    	; 0x25e <__bad_interrupt>
      5e:	00 00       	nop
      60:	fe c0       	rjmp	.+508    	; 0x25e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c0       	rjmp	.+504    	; 0x25e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c0       	rjmp	.+500    	; 0x25e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c0       	rjmp	.+496    	; 0x25e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c0       	rjmp	.+492    	; 0x25e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c0       	rjmp	.+488    	; 0x25e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c0       	rjmp	.+484    	; 0x25e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c0       	rjmp	.+480    	; 0x25e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c0       	rjmp	.+476    	; 0x25e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c0       	rjmp	.+472    	; 0x25e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c0       	rjmp	.+468    	; 0x25e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c0       	rjmp	.+464    	; 0x25e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c0       	rjmp	.+460    	; 0x25e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c0       	rjmp	.+456    	; 0x25e <__bad_interrupt>
      96:	00 00       	nop
      98:	e2 c0       	rjmp	.+452    	; 0x25e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e0 c0       	rjmp	.+448    	; 0x25e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	de c0       	rjmp	.+444    	; 0x25e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dc c0       	rjmp	.+440    	; 0x25e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	da c0       	rjmp	.+436    	; 0x25e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d8 c0       	rjmp	.+432    	; 0x25e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d6 c0       	rjmp	.+428    	; 0x25e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d4 c0       	rjmp	.+424    	; 0x25e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d2 c0       	rjmp	.+420    	; 0x25e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d0 c0       	rjmp	.+416    	; 0x25e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ce c0       	rjmp	.+412    	; 0x25e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cc c0       	rjmp	.+408    	; 0x25e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ca c0       	rjmp	.+404    	; 0x25e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c8 c0       	rjmp	.+400    	; 0x25e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c6 c0       	rjmp	.+396    	; 0x25e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c4 c0       	rjmp	.+392    	; 0x25e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c2 c0       	rjmp	.+388    	; 0x25e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <__bad_interrupt>
      de:	00 00       	nop
      e0:	be c0       	rjmp	.+380    	; 0x25e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bc c0       	rjmp	.+376    	; 0x25e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ba c0       	rjmp	.+372    	; 0x25e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b8 c0       	rjmp	.+368    	; 0x25e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b6 c0       	rjmp	.+364    	; 0x25e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b4 c0       	rjmp	.+360    	; 0x25e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b2 c0       	rjmp	.+356    	; 0x25e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b0 c0       	rjmp	.+352    	; 0x25e <__bad_interrupt>
      fe:	00 00       	nop
     100:	ae c0       	rjmp	.+348    	; 0x25e <__bad_interrupt>
     102:	00 00       	nop
     104:	ac c0       	rjmp	.+344    	; 0x25e <__bad_interrupt>
     106:	00 00       	nop
     108:	aa c0       	rjmp	.+340    	; 0x25e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a8 c0       	rjmp	.+336    	; 0x25e <__bad_interrupt>
     10e:	00 00       	nop
     110:	a6 c0       	rjmp	.+332    	; 0x25e <__bad_interrupt>
     112:	00 00       	nop
     114:	a4 c0       	rjmp	.+328    	; 0x25e <__bad_interrupt>
     116:	00 00       	nop
     118:	a2 c0       	rjmp	.+324    	; 0x25e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c0       	rjmp	.+320    	; 0x25e <__bad_interrupt>
     11e:	00 00       	nop
     120:	9e c0       	rjmp	.+316    	; 0x25e <__bad_interrupt>
     122:	00 00       	nop
     124:	9c c0       	rjmp	.+312    	; 0x25e <__bad_interrupt>
     126:	00 00       	nop
     128:	9a c0       	rjmp	.+308    	; 0x25e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	98 c0       	rjmp	.+304    	; 0x25e <__bad_interrupt>
     12e:	00 00       	nop
     130:	96 c0       	rjmp	.+300    	; 0x25e <__bad_interrupt>
     132:	00 00       	nop
     134:	94 c0       	rjmp	.+296    	; 0x25e <__bad_interrupt>
     136:	00 00       	nop
     138:	92 c0       	rjmp	.+292    	; 0x25e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	90 c0       	rjmp	.+288    	; 0x25e <__bad_interrupt>
     13e:	00 00       	nop
     140:	8e c0       	rjmp	.+284    	; 0x25e <__bad_interrupt>
     142:	00 00       	nop
     144:	8c c0       	rjmp	.+280    	; 0x25e <__bad_interrupt>
     146:	00 00       	nop
     148:	8a c0       	rjmp	.+276    	; 0x25e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	88 c0       	rjmp	.+272    	; 0x25e <__bad_interrupt>
     14e:	00 00       	nop
     150:	86 c0       	rjmp	.+268    	; 0x25e <__bad_interrupt>
     152:	00 00       	nop
     154:	84 c0       	rjmp	.+264    	; 0x25e <__bad_interrupt>
     156:	00 00       	nop
     158:	82 c0       	rjmp	.+260    	; 0x25e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	80 c0       	rjmp	.+256    	; 0x25e <__bad_interrupt>
     15e:	00 00       	nop
     160:	7e c0       	rjmp	.+252    	; 0x25e <__bad_interrupt>
     162:	00 00       	nop
     164:	7c c0       	rjmp	.+248    	; 0x25e <__bad_interrupt>
     166:	00 00       	nop
     168:	7a c0       	rjmp	.+244    	; 0x25e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	78 c0       	rjmp	.+240    	; 0x25e <__bad_interrupt>
     16e:	00 00       	nop
     170:	76 c0       	rjmp	.+236    	; 0x25e <__bad_interrupt>
     172:	00 00       	nop
     174:	74 c0       	rjmp	.+232    	; 0x25e <__bad_interrupt>
     176:	00 00       	nop
     178:	72 c0       	rjmp	.+228    	; 0x25e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	70 c0       	rjmp	.+224    	; 0x25e <__bad_interrupt>
     17e:	00 00       	nop
     180:	6e c0       	rjmp	.+220    	; 0x25e <__bad_interrupt>
     182:	00 00       	nop
     184:	6c c0       	rjmp	.+216    	; 0x25e <__bad_interrupt>
     186:	00 00       	nop
     188:	6a c0       	rjmp	.+212    	; 0x25e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	68 c0       	rjmp	.+208    	; 0x25e <__bad_interrupt>
     18e:	00 00       	nop
     190:	66 c0       	rjmp	.+204    	; 0x25e <__bad_interrupt>
     192:	00 00       	nop
     194:	64 c0       	rjmp	.+200    	; 0x25e <__bad_interrupt>
     196:	00 00       	nop
     198:	62 c0       	rjmp	.+196    	; 0x25e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	60 c0       	rjmp	.+192    	; 0x25e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5c c0       	rjmp	.+184    	; 0x25e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5a c0       	rjmp	.+180    	; 0x25e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	58 c0       	rjmp	.+176    	; 0x25e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	56 c0       	rjmp	.+172    	; 0x25e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	54 c0       	rjmp	.+168    	; 0x25e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	52 c0       	rjmp	.+164    	; 0x25e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	50 c0       	rjmp	.+160    	; 0x25e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4e c0       	rjmp	.+156    	; 0x25e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4c c0       	rjmp	.+152    	; 0x25e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4a c0       	rjmp	.+148    	; 0x25e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	48 c0       	rjmp	.+144    	; 0x25e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	46 c0       	rjmp	.+140    	; 0x25e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	44 c0       	rjmp	.+136    	; 0x25e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	40 c0       	rjmp	.+128    	; 0x25e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3e c0       	rjmp	.+124    	; 0x25e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3c c0       	rjmp	.+120    	; 0x25e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3a c0       	rjmp	.+116    	; 0x25e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	38 c0       	rjmp	.+112    	; 0x25e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	36 c0       	rjmp	.+108    	; 0x25e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__vector_125>
     1f8:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__vector_126>
     1fc:	e2 03       	fmuls	r22, r18
     1fe:	2b 04       	cpc	r2, r11
     200:	d8 03       	fmulsu	r21, r16
     202:	2d 04       	cpc	r2, r13
     204:	da 03       	fmulsu	r21, r18
     206:	dc 03       	fmulsu	r21, r20
     208:	de 03       	fmulsu	r21, r22
     20a:	e0 03       	fmuls	r22, r16
     20c:	e2 03       	fmuls	r22, r18
     20e:	01 0c       	add	r0, r1
     210:	04 0c       	add	r0, r4
     212:	07 0c       	add	r0, r7
     214:	0a 0c       	add	r0, r10
     216:	0d 0c       	add	r0, r13
     218:	10 0c       	add	r1, r0
     21a:	13 0c       	add	r1, r3

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df e5       	ldi	r29, 0x5F	; 95
     226:	de bf       	out	0x3e, r29	; 62
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	11 e2       	ldi	r17, 0x21	; 33
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	ec e6       	ldi	r30, 0x6C	; 108
     234:	f6 e2       	ldi	r31, 0x26	; 38
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a0 39       	cpi	r26, 0x90	; 144
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	23 e2       	ldi	r18, 0x23	; 35
     248:	a0 e9       	ldi	r26, 0x90	; 144
     24a:	b1 e2       	ldi	r27, 0x21	; 33
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	a1 3c       	cpi	r26, 0xC1	; 193
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 cf 12 	call	0x259e	; 0x259e <main>
     25a:	0c 94 34 13 	jmp	0x2668	; 0x2668 <_exit>

0000025e <__bad_interrupt>:
     25e:	d0 ce       	rjmp	.-608    	; 0x0 <__vectors>

00000260 <udi_hid_led_getsetting>:
		                 udi_hid_led_setreport);
}

uint8_t udi_hid_led_getsetting(void) {
	return 0;
}
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret

00000264 <udi_hid_led_setreport>:

static bool udi_hid_led_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8)) &&
     264:	30 91 b3 23 	lds	r19, 0x23B3	; 0x8023b3 <udd_g_ctrlreq+0x2>
     268:	20 91 b4 23 	lds	r18, 0x23B4	; 0x8023b4 <udd_g_ctrlreq+0x3>
     26c:	82 2f       	mov	r24, r18
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 97       	sbiw	r24, 0x02	; 2
     272:	c1 f4       	brne	.+48     	; 0x2a4 <udi_hid_led_setreport+0x40>
     274:	31 11       	cpse	r19, r1
     276:	18 c0       	rjmp	.+48     	; 0x2a8 <udi_hid_led_setreport+0x44>
	   (0 == (0xFF & udd_g_ctrlreq.req.wValue))                         &&
     278:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udd_g_ctrlreq+0x6>
     27c:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <udd_g_ctrlreq+0x7>
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	a1 f4       	brne	.+40     	; 0x2ac <udi_hid_led_setreport+0x48>
	   (UDI_HID_LED_REPORT_OUT_SIZE == udd_g_ctrlreq.req.wLength))
	{
		udd_g_ctrlreq.payload      = udi_hid_led_report_out;
     284:	e1 eb       	ldi	r30, 0xB1	; 177
     286:	f3 e2       	ldi	r31, 0x23	; 35
     288:	80 e9       	ldi	r24, 0x90	; 144
     28a:	91 e2       	ldi	r25, 0x21	; 33
     28c:	80 87       	std	Z+8, r24	; 0x08
     28e:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.payload_size = UDI_HID_LED_REPORT_OUT_SIZE;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	82 87       	std	Z+10, r24	; 0x0a
     296:	93 87       	std	Z+11, r25	; 0x0b
		udd_g_ctrlreq.callback     = udi_hid_led_report_out_received;
     298:	84 e7       	ldi	r24, 0x74	; 116
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	84 87       	std	Z+12, r24	; 0x0c
     29e:	95 87       	std	Z+13, r25	; 0x0d
		return true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	08 95       	ret
	}
	return false;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 95       	ret
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
     2ac:	80 e0       	ldi	r24, 0x00	; 0
}
     2ae:	08 95       	ret

000002b0 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     2b4:	04 e7       	ldi	r16, 0x74	; 116
     2b6:	11 e0       	ldi	r17, 0x01	; 1
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e9       	ldi	r20, 0x90	; 144
     2be:	51 e2       	ldi	r21, 0x21	; 33
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	08 95       	ret

000002ce <udi_hid_led_enable>:
		                                    iram_size_t     nb_received,
		                                    udd_ep_id_t     ep);

static bool udi_hid_led_report_out_enable(void);

bool udi_hid_led_enable(void) {
     2ce:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     2d0:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     2d4:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <__data_end>

	if(!udi_hid_led_report_out_enable())
     2d8:	eb df       	rcall	.-42     	; 0x2b0 <udi_hid_led_report_out_enable>
     2da:	c8 2f       	mov	r28, r24
     2dc:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     2de:	0e 94 03 13 	call	0x2606	; 0x2606 <main_led_enable>
	return true;
}
     2e2:	8c 2f       	mov	r24, r28
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     2e8:	81 11       	cpse	r24, r1
     2ea:	07 c0       	rjmp	.+14     	; 0x2fa <udi_hid_led_report_out_received+0x12>
     2ec:	61 30       	cpi	r22, 0x01	; 1
     2ee:	71 05       	cpc	r23, r1
     2f0:	21 f4       	brne	.+8      	; 0x2fa <udi_hid_led_report_out_received+0x12>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     2f2:	80 e9       	ldi	r24, 0x90	; 144
     2f4:	91 e2       	ldi	r25, 0x21	; 33
     2f6:	0e 94 0a 13 	call	0x2614	; 0x2614 <main_led_report_out>
	}
	udi_hid_led_report_out_enable();
     2fa:	da cf       	rjmp	.-76     	; 0x2b0 <udi_hid_led_report_out_enable>
     2fc:	08 95       	ret

000002fe <udi_hid_led_disable>:
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     2fe:	0c 94 07 13 	jmp	0x260e	; 0x260e <main_led_disable>
     302:	08 95       	ret

00000304 <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     304:	22 e3       	ldi	r18, 0x32	; 50
     306:	31 e0       	ldi	r19, 0x01	; 1
     308:	40 e0       	ldi	r20, 0x00	; 0
     30a:	50 e2       	ldi	r21, 0x20	; 32
     30c:	60 e9       	ldi	r22, 0x90	; 144
     30e:	71 e2       	ldi	r23, 0x21	; 33
     310:	82 e9       	ldi	r24, 0x92	; 146
     312:	91 e2       	ldi	r25, 0x21	; 33
     314:	e2 c4       	rjmp	.+2500   	; 0xcda <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     316:	08 95       	ret

00000318 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     318:	e0 e0       	ldi	r30, 0x00	; 0
     31a:	f6 e0       	ldi	r31, 0x06	; 6
     31c:	9f ef       	ldi	r25, 0xFF	; 255
     31e:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     320:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     322:	e0 e2       	ldi	r30, 0x20	; 32
     324:	f6 e0       	ldi	r31, 0x06	; 6
     326:	3f e3       	ldi	r19, 0x3F	; 63
     328:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     32a:	88 e1       	ldi	r24, 0x18	; 24
     32c:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     32e:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     330:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     332:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     334:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     336:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     338:	20 ec       	ldi	r18, 0xC0	; 192
     33a:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     33c:	40 e4       	ldi	r20, 0x40	; 64
     33e:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     340:	40 e8       	ldi	r20, 0x80	; 128
     342:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     344:	e0 e4       	ldi	r30, 0x40	; 64
     346:	f6 e0       	ldi	r31, 0x06	; 6
     348:	4c ef       	ldi	r20, 0xFC	; 252
     34a:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     34c:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     34e:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     350:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     352:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     354:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     356:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     358:	43 e0       	ldi	r20, 0x03	; 3
     35a:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     35c:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     35e:	e0 e6       	ldi	r30, 0x60	; 96
     360:	f6 e0       	ldi	r31, 0x06	; 6
     362:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     364:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     366:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     368:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36a:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36c:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36e:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     370:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     372:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     374:	e0 e8       	ldi	r30, 0x80	; 128
     376:	f6 e0       	ldi	r31, 0x06	; 6
     378:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     37a:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     37c:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     37e:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     380:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     382:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     384:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     386:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     388:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     38a:	e0 ea       	ldi	r30, 0xA0	; 160
     38c:	f6 e0       	ldi	r31, 0x06	; 6
     38e:	90 ef       	ldi	r25, 0xF0	; 240
     390:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     392:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     394:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     396:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     398:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     39a:	8f e0       	ldi	r24, 0x0F	; 15
     39c:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     39e:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     3a0:	64 c2       	rjmp	.+1224   	; 0x86a <led_init>
     3a2:	08 95       	ret

000003a4 <jstk_readVertIndex>:

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     3a4:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>
     3a8:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	92 2b       	or	r25, r18
     3b0:	96 95       	lsr	r25
     3b2:	87 95       	ror	r24
     3b4:	96 95       	lsr	r25
     3b6:	87 95       	ror	r24
     3b8:	bc 01       	movw	r22, r24
     3ba:	7f 70       	andi	r23, 0x0F	; 15
     3bc:	80 ff       	sbrs	r24, 0
     3be:	17 c0       	rjmp	.+46     	; 0x3ee <jstk_readVertIndex+0x4a>
     3c0:	21 e0       	ldi	r18, 0x01	; 1
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	e1 e0       	ldi	r30, 0x01	; 1
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	82 2f       	mov	r24, r18
     3ca:	af 01       	movw	r20, r30
     3cc:	02 2e       	mov	r0, r18
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <jstk_readVertIndex+0x30>
     3d0:	44 0f       	add	r20, r20
     3d2:	55 1f       	adc	r21, r21
     3d4:	0a 94       	dec	r0
     3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <jstk_readVertIndex+0x2c>
     3d8:	46 23       	and	r20, r22
     3da:	57 23       	and	r21, r23
     3dc:	45 2b       	or	r20, r21
     3de:	41 f0       	breq	.+16     	; 0x3f0 <jstk_readVertIndex+0x4c>
     3e0:	2f 5f       	subi	r18, 0xFF	; 255
     3e2:	3f 4f       	sbci	r19, 0xFF	; 255
     3e4:	2c 30       	cpi	r18, 0x0C	; 12
     3e6:	31 05       	cpc	r19, r1
     3e8:	79 f7       	brne	.-34     	; 0x3c8 <jstk_readVertIndex+0x24>
     3ea:	8f ef       	ldi	r24, 0xFF	; 255
     3ec:	08 95       	ret
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	08 95       	ret

000003f2 <jstk_readHoriIndex>:
     3f2:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     3f6:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	92 2b       	or	r25, r18
     3fe:	bc 01       	movw	r22, r24
     400:	7f 70       	andi	r23, 0x0F	; 15
     402:	80 ff       	sbrs	r24, 0
     404:	17 c0       	rjmp	.+46     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     406:	21 e0       	ldi	r18, 0x01	; 1
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	e1 e0       	ldi	r30, 0x01	; 1
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	82 2f       	mov	r24, r18
     410:	af 01       	movw	r20, r30
     412:	02 2e       	mov	r0, r18
     414:	02 c0       	rjmp	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     416:	44 0f       	add	r20, r20
     418:	55 1f       	adc	r21, r21
     41a:	0a 94       	dec	r0
     41c:	e2 f7       	brpl	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41e:	46 23       	and	r20, r22
     420:	57 23       	and	r21, r23
     422:	45 2b       	or	r20, r21
     424:	41 f0       	breq	.+16     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     426:	2f 5f       	subi	r18, 0xFF	; 255
     428:	3f 4f       	sbci	r19, 0xFF	; 255
     42a:	2c 30       	cpi	r18, 0x0C	; 12
     42c:	31 05       	cpc	r19, r1
     42e:	79 f7       	brne	.-34     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     430:	8f ef       	ldi	r24, 0xFF	; 255
     432:	08 95       	ret
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	08 95       	ret

00000438 <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     438:	88 23       	and	r24, r24
     43a:	f4 f1       	brlt	.+124    	; 0x4b8 <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     43c:	9b ef       	ldi	r25, 0xFB	; 251
     43e:	98 0f       	add	r25, r24
     440:	92 30       	cpi	r25, 0x02	; 2
     442:	e0 f1       	brcs	.+120    	; 0x4bc <jstk_ledMask+0x84>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     444:	85 30       	cpi	r24, 0x05	; 5
     446:	34 f4       	brge	.+12     	; 0x454 <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     448:	95 e0       	ldi	r25, 0x05	; 5
     44a:	98 1b       	sub	r25, r24
     44c:	92 30       	cpi	r25, 0x02	; 2
     44e:	08 f0       	brcs	.+2      	; 0x452 <jstk_ledMask+0x1a>
     450:	42 c0       	rjmp	.+132    	; 0x4d6 <jstk_ledMask+0x9e>
     452:	36 c0       	rjmp	.+108    	; 0x4c0 <jstk_ledMask+0x88>
     454:	9a ef       	ldi	r25, 0xFA	; 250
     456:	98 0f       	add	r25, r24
     458:	92 30       	cpi	r25, 0x02	; 2
     45a:	b0 f5       	brcc	.+108    	; 0x4c8 <jstk_ledMask+0x90>
     45c:	31 c0       	rjmp	.+98     	; 0x4c0 <jstk_ledMask+0x88>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     45e:	62 e0       	ldi	r22, 0x02	; 2
     460:	23 e0       	ldi	r18, 0x03	; 3
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     468:	e1 e0       	ldi	r30, 0x01	; 1
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	af 01       	movw	r20, r30
     46e:	02 2e       	mov	r0, r18
     470:	02 c0       	rjmp	.+4      	; 0x476 <jstk_ledMask+0x3e>
     472:	44 0f       	add	r20, r20
     474:	55 1f       	adc	r21, r21
     476:	0a 94       	dec	r0
     478:	e2 f7       	brpl	.-8      	; 0x472 <jstk_ledMask+0x3a>
     47a:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     47c:	9f 5f       	subi	r25, 0xFF	; 255
     47e:	21 50       	subi	r18, 0x01	; 1
     480:	31 09       	sbc	r19, r1
     482:	96 17       	cp	r25, r22
     484:	98 f3       	brcs	.-26     	; 0x46c <jstk_ledMask+0x34>
     486:	08 95       	ret
     488:	81 50       	subi	r24, 0x01	; 1
     48a:	48 2f       	mov	r20, r24
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	4b 5f       	subi	r20, 0xFB	; 251
     490:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     492:	24 e0       	ldi	r18, 0x04	; 4
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     498:	e1 e0       	ldi	r30, 0x01	; 1
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	bf 01       	movw	r22, r30
     49e:	02 2e       	mov	r0, r18
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <jstk_ledMask+0x6e>
     4a2:	66 0f       	add	r22, r22
     4a4:	77 1f       	adc	r23, r23
     4a6:	0a 94       	dec	r0
     4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <jstk_ledMask+0x6a>
     4aa:	86 2b       	or	r24, r22
     4ac:	2f 5f       	subi	r18, 0xFF	; 255
     4ae:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     4b0:	24 17       	cp	r18, r20
     4b2:	35 07       	cpc	r19, r21
     4b4:	99 f7       	brne	.-26     	; 0x49c <jstk_ledMask+0x64>
     4b6:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     4bc:	88 e1       	ldi	r24, 0x18	; 24
     4be:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     4c0:	85 30       	cpi	r24, 0x05	; 5
     4c2:	6c f2       	brlt	.-102    	; 0x45e <jstk_ledMask+0x26>
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	e0 cf       	rjmp	.-64     	; 0x488 <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4c8:	85 50       	subi	r24, 0x05	; 5
     4ca:	85 30       	cpi	r24, 0x05	; 5
     4cc:	08 f0       	brcs	.+2      	; 0x4d0 <jstk_ledMask+0x98>
     4ce:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     4d0:	81 11       	cpse	r24, r1
     4d2:	da cf       	rjmp	.-76     	; 0x488 <jstk_ledMask+0x50>
     4d4:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4d6:	66 e0       	ldi	r22, 0x06	; 6
     4d8:	68 1b       	sub	r22, r24
     4da:	65 30       	cpi	r22, 0x05	; 5
     4dc:	08 f0       	brcs	.+2      	; 0x4e0 <jstk_ledMask+0xa8>
     4de:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     4e0:	61 11       	cpse	r22, r1
     4e2:	be cf       	rjmp	.-132    	; 0x460 <jstk_ledMask+0x28>
     4e4:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     4e6:	08 95       	ret

000004e8 <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     4e8:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     4ea:	5c df       	rcall	.-328    	; 0x3a4 <jstk_readVertIndex>
     4ec:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     4ee:	81 df       	rcall	.-254    	; 0x3f2 <jstk_readHoriIndex>
     4f0:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     4f2:	24 f4       	brge	.+8      	; 0x4fc <jstk_readMask+0x14>
     4f4:	88 23       	and	r24, r24
     4f6:	c4 f0       	brlt	.+48     	; 0x528 <jstk_readMask+0x40>
     4f8:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     4fa:	09 c0       	rjmp	.+18     	; 0x50e <jstk_readMask+0x26>
     4fc:	c6 30       	cpi	r28, 0x06	; 6
     4fe:	1c f0       	brlt	.+6      	; 0x506 <jstk_readMask+0x1e>
     500:	9b ef       	ldi	r25, 0xFB	; 251
     502:	9c 0f       	add	r25, r28
     504:	02 c0       	rjmp	.+4      	; 0x50a <jstk_readMask+0x22>
     506:	95 e0       	ldi	r25, 0x05	; 5
     508:	9c 1b       	sub	r25, r28
     50a:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     50c:	54 f0       	brlt	.+20     	; 0x522 <jstk_readMask+0x3a>
     50e:	86 30       	cpi	r24, 0x06	; 6
     510:	1c f0       	brlt	.+6      	; 0x518 <jstk_readMask+0x30>
     512:	2b ef       	ldi	r18, 0xFB	; 251
     514:	28 0f       	add	r18, r24
     516:	02 c0       	rjmp	.+4      	; 0x51c <jstk_readMask+0x34>
     518:	25 e0       	ldi	r18, 0x05	; 5
     51a:	28 1b       	sub	r18, r24
     51c:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     51e:	08 f4       	brcc	.+2      	; 0x522 <jstk_readMask+0x3a>
     520:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     522:	8c 2f       	mov	r24, r28
     524:	89 df       	rcall	.-238    	; 0x438 <jstk_ledMask>
     526:	01 c0       	rjmp	.+2      	; 0x52a <jstk_readMask+0x42>
     528:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     52a:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     52c:	08 95       	ret

0000052e <jstk_usbTask>:
     52e:	61 df       	rcall	.-318    	; 0x3f2 <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     530:	88 23       	and	r24, r24
     532:	3c f0       	brlt	.+14     	; 0x542 <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     534:	e8 2f       	mov	r30, r24
     536:	88 0f       	add	r24, r24
     538:	ff 0b       	sbc	r31, r31
     53a:	ec 57       	subi	r30, 0x7C	; 124
     53c:	fe 4d       	sbci	r31, 0xDE	; 222
     53e:	80 81       	ld	r24, Z
     540:	01 c0       	rjmp	.+2      	; 0x544 <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     542:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     544:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <jstk_usbReport>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     548:	2d df       	rcall	.-422    	; 0x3a4 <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     54a:	88 23       	and	r24, r24
     54c:	3c f0       	brlt	.+14     	; 0x55c <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     54e:	e8 2f       	mov	r30, r24
     550:	88 0f       	add	r24, r24
     552:	ff 0b       	sbc	r31, r31
     554:	ec 57       	subi	r30, 0x7C	; 124
     556:	fe 4d       	sbci	r31, 0xDE	; 222
     558:	80 81       	ld	r24, Z
     55a:	01 c0       	rjmp	.+2      	; 0x55e <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     55c:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     55e:	e4 e9       	ldi	r30, 0x94	; 148
     560:	f1 e2       	ldi	r31, 0x21	; 33
     562:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     564:	20 81       	ld	r18, Z
     566:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     56a:	29 13       	cpse	r18, r25
     56c:	04 c0       	rjmp	.+8      	; 0x576 <jstk_usbTask+0x48>
     56e:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     572:	98 17       	cp	r25, r24
     574:	71 f0       	breq	.+28     	; 0x592 <jstk_usbTask+0x64>
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     576:	84 e9       	ldi	r24, 0x94	; 148
     578:	91 e2       	ldi	r25, 0x21	; 33
     57a:	be d2       	rcall	.+1404   	; 0xaf8 <udi_hid_generic_send_report_in>
     57c:	88 23       	and	r24, r24
     57e:	49 f0       	breq	.+18     	; 0x592 <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     580:	e6 e2       	ldi	r30, 0x26	; 38
     582:	f0 e2       	ldi	r31, 0x20	; 32
     584:	a4 e9       	ldi	r26, 0x94	; 148
     586:	b1 e2       	ldi	r27, 0x21	; 33
     588:	8c 91       	ld	r24, X
     58a:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     58c:	11 96       	adiw	r26, 0x01	; 1
     58e:	8c 91       	ld	r24, X
     590:	81 83       	std	Z+1, r24	; 0x01
     592:	08 95       	ret

00000594 <joystick>:
    }
}

void joystick(void) 
{
    jstk_mask = jstk_readMask();            // pick LED's
     594:	a9 df       	rcall	.-174    	; 0x4e8 <jstk_readMask>
     596:	80 93 a8 23 	sts	0x23A8, r24	; 0x8023a8 <jstk_mask>
    jstk_testMode = PORTB.IN;               // checks switch for testing mode
     59a:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     59e:	90 93 a9 23 	sts	0x23A9, r25	; 0x8023a9 <jstk_testMode>

    if ((jstk_testMode & PIN4_bm) == 0) {   // test mode
     5a2:	90 91 a9 23 	lds	r25, 0x23A9	; 0x8023a9 <jstk_testMode>
     5a6:	94 fd       	sbrc	r25, 4
     5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <joystick+0x24>
        if (jstk_mask) {
     5aa:	88 23       	and	r24, r24
            led_allOff();
     5ac:	31 f0       	breq	.+12     	; 0x5ba <joystick+0x26>
     5ae:	63 d1       	rcall	.+710    	; 0x876 <led_allOff>
            led_on(jstk_mask);
     5b0:	80 91 a8 23 	lds	r24, 0x23A8	; 0x8023a8 <jstk_mask>
     5b4:	64 c1       	rjmp	.+712    	; 0x87e <led_on>
        }
    } else {                                // normal mode
        // led_allOff();                       // for testing
        jstk_usbTask();                     // send to USB
     5b6:	08 95       	ret
     5b8:	ba cf       	rjmp	.-140    	; 0x52e <jstk_usbTask>
     5ba:	08 95       	ret

000005bc <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     5bc:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <kpd_keyPressed>
     5c0:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <kpd_currState>
     5c4:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <kpd_prevState>
     5c8:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <kpd_exitTestMode>
     5cc:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <kpd_rowVal>
     5d0:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <kpd_code>
     5d4:	e5 ea       	ldi	r30, 0xA5	; 165
     5d6:	f1 e2       	ldi	r31, 0x21	; 33
     5d8:	81 e6       	ldi	r24, 0x61	; 97
     5da:	80 83       	st	Z, r24
     5dc:	80 e6       	ldi	r24, 0x60	; 96
     5de:	81 83       	std	Z+1, r24	; 0x01
     5e0:	12 82       	std	Z+2, r1	; 0x02
     5e2:	13 82       	std	Z+3, r1	; 0x03
     5e4:	8f e5       	ldi	r24, 0x5F	; 95
     5e6:	84 83       	std	Z+4, r24	; 0x04
     5e8:	8e e5       	ldi	r24, 0x5E	; 94
     5ea:	85 83       	std	Z+5, r24	; 0x05
     5ec:	16 82       	std	Z+6, r1	; 0x06
     5ee:	17 82       	std	Z+7, r1	; 0x07
     5f0:	8d e5       	ldi	r24, 0x5D	; 93
     5f2:	80 87       	std	Z+8, r24	; 0x08
     5f4:	11 86       	std	Z+9, r1	; 0x09
     5f6:	12 86       	std	Z+10, r1	; 0x0a
     5f8:	13 86       	std	Z+11, r1	; 0x0b
     5fa:	14 86       	std	Z+12, r1	; 0x0c
     5fc:	15 86       	std	Z+13, r1	; 0x0d
     5fe:	89 e5       	ldi	r24, 0x59	; 89
     600:	86 87       	std	Z+14, r24	; 0x0e
     602:	8b e5       	ldi	r24, 0x5B	; 91
     604:	87 87       	std	Z+15, r24	; 0x0f
     606:	10 8a       	std	Z+16, r1	; 0x10
     608:	11 8a       	std	Z+17, r1	; 0x11
     60a:	8a e5       	ldi	r24, 0x5A	; 90
     60c:	82 8b       	std	Z+18, r24	; 0x12
     60e:	8c e5       	ldi	r24, 0x5C	; 92
     610:	83 8b       	std	Z+19, r24	; 0x13
     612:	e0 ea       	ldi	r30, 0xA0	; 160
     614:	f1 e2       	ldi	r31, 0x21	; 33
     616:	8e e0       	ldi	r24, 0x0E	; 14
     618:	80 83       	st	Z, r24
     61a:	8d e0       	ldi	r24, 0x0D	; 13
     61c:	81 83       	std	Z+1, r24	; 0x01
     61e:	8b e0       	ldi	r24, 0x0B	; 11
     620:	82 83       	std	Z+2, r24	; 0x02
     622:	87 e0       	ldi	r24, 0x07	; 7
     624:	83 83       	std	Z+3, r24	; 0x03
     626:	8f ef       	ldi	r24, 0xFF	; 255
     628:	84 83       	std	Z+4, r24	; 0x04
     62a:	08 95       	ret

0000062c <keypad_poll>:
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	10 92 9d 21 	sts	0x219D, r1	; 0x80219d <kpd_detectedCol>
     634:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <kpd_count.5308>
     638:	a0 ea       	ldi	r26, 0xA0	; 160
     63a:	b6 e0       	ldi	r27, 0x06	; 6
     63c:	c0 e2       	ldi	r28, 0x20	; 32
     63e:	d6 e0       	ldi	r29, 0x06	; 6
     640:	90 e8       	ldi	r25, 0x80	; 128
     642:	62 e0       	ldi	r22, 0x02	; 2
     644:	25 e0       	ldi	r18, 0x05	; 5
     646:	54 e0       	ldi	r21, 0x04	; 4
     648:	41 e0       	ldi	r20, 0x01	; 1
     64a:	33 e0       	ldi	r19, 0x03	; 3
     64c:	57 c0       	rjmp	.+174    	; 0x6fc <keypad_poll+0xd0>
     64e:	e0 91 96 21 	lds	r30, 0x2196	; 0x802196 <kpd_count.5308>
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	e0 56       	subi	r30, 0x60	; 96
     656:	fe 4d       	sbci	r31, 0xDE	; 222
     658:	80 81       	ld	r24, Z
     65a:	14 96       	adiw	r26, 0x04	; 4
     65c:	8c 93       	st	X, r24
     65e:	14 97       	sbiw	r26, 0x04	; 4
     660:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <kpd_count.5308>
     664:	84 30       	cpi	r24, 0x04	; 4
     666:	11 f4       	brne	.+4      	; 0x66c <keypad_poll+0x40>
     668:	9e 83       	std	Y+6, r25	; 0x06
     66a:	01 c0       	rjmp	.+2      	; 0x66e <keypad_poll+0x42>
     66c:	9d 83       	std	Y+5, r25	; 0x05
     66e:	18 96       	adiw	r26, 0x08	; 8
     670:	8c 91       	ld	r24, X
     672:	18 97       	sbiw	r26, 0x08	; 8
     674:	80 7f       	andi	r24, 0xF0	; 240
     676:	80 93 9f 21 	sts	0x219F, r24	; 0x80219f <kpd_rowVal>
     67a:	80 91 9f 21 	lds	r24, 0x219F	; 0x80219f <kpd_rowVal>
     67e:	80 3b       	cpi	r24, 0xB0	; 176
     680:	d1 f0       	breq	.+52     	; 0x6b6 <keypad_poll+0x8a>
     682:	18 f4       	brcc	.+6      	; 0x68a <keypad_poll+0x5e>
     684:	80 37       	cpi	r24, 0x70	; 112
     686:	01 f1       	breq	.+64     	; 0x6c8 <keypad_poll+0x9c>
     688:	28 c0       	rjmp	.+80     	; 0x6da <keypad_poll+0xae>
     68a:	80 3d       	cpi	r24, 0xD0	; 208
     68c:	59 f0       	breq	.+22     	; 0x6a4 <keypad_poll+0x78>
     68e:	80 3e       	cpi	r24, 0xE0	; 224
     690:	21 f5       	brne	.+72     	; 0x6da <keypad_poll+0xae>
     692:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <kpd_detectedRow>
     696:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <kpd_count.5308>
     69a:	80 93 9d 21 	sts	0x219D, r24	; 0x80219d <kpd_detectedCol>
     69e:	20 93 96 21 	sts	0x2196, r18	; 0x802196 <kpd_count.5308>
     6a2:	2c c0       	rjmp	.+88     	; 0x6fc <keypad_poll+0xd0>
     6a4:	40 93 9e 21 	sts	0x219E, r20	; 0x80219e <kpd_detectedRow>
     6a8:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <kpd_count.5308>
     6ac:	80 93 9d 21 	sts	0x219D, r24	; 0x80219d <kpd_detectedCol>
     6b0:	20 93 96 21 	sts	0x2196, r18	; 0x802196 <kpd_count.5308>
     6b4:	23 c0       	rjmp	.+70     	; 0x6fc <keypad_poll+0xd0>
     6b6:	60 93 9e 21 	sts	0x219E, r22	; 0x80219e <kpd_detectedRow>
     6ba:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <kpd_count.5308>
     6be:	80 93 9d 21 	sts	0x219D, r24	; 0x80219d <kpd_detectedCol>
     6c2:	20 93 96 21 	sts	0x2196, r18	; 0x802196 <kpd_count.5308>
     6c6:	1a c0       	rjmp	.+52     	; 0x6fc <keypad_poll+0xd0>
     6c8:	30 93 9e 21 	sts	0x219E, r19	; 0x80219e <kpd_detectedRow>
     6cc:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <kpd_count.5308>
     6d0:	80 93 9d 21 	sts	0x219D, r24	; 0x80219d <kpd_detectedCol>
     6d4:	20 93 96 21 	sts	0x2196, r18	; 0x802196 <kpd_count.5308>
     6d8:	11 c0       	rjmp	.+34     	; 0x6fc <keypad_poll+0xd0>
     6da:	50 93 9e 21 	sts	0x219E, r21	; 0x80219e <kpd_detectedRow>
     6de:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <kpd_count.5308>
     6e2:	80 93 9d 21 	sts	0x219D, r24	; 0x80219d <kpd_detectedCol>
     6e6:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <kpd_count.5308>
     6ea:	85 30       	cpi	r24, 0x05	; 5
     6ec:	10 f0       	brcs	.+4      	; 0x6f2 <keypad_poll+0xc6>
     6ee:	20 93 9d 21 	sts	0x219D, r18	; 0x80219d <kpd_detectedCol>
     6f2:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <kpd_count.5308>
     6f6:	8f 5f       	subi	r24, 0xFF	; 255
     6f8:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <kpd_count.5308>
     6fc:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <kpd_count.5308>
     700:	85 30       	cpi	r24, 0x05	; 5
     702:	08 f4       	brcc	.+2      	; 0x706 <keypad_poll+0xda>
     704:	a4 cf       	rjmp	.-184    	; 0x64e <keypad_poll+0x22>
     706:	80 e8       	ldi	r24, 0x80	; 128
     708:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     70c:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <kpd_detectedRow>
     710:	84 30       	cpi	r24, 0x04	; 4
     712:	e0 f4       	brcc	.+56     	; 0x74c <keypad_poll+0x120>
     714:	80 91 9d 21 	lds	r24, 0x219D	; 0x80219d <kpd_detectedCol>
     718:	85 30       	cpi	r24, 0x05	; 5
     71a:	c0 f4       	brcc	.+48     	; 0x74c <keypad_poll+0x120>
     71c:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <kpd_keyPressed>
     720:	81 11       	cpse	r24, r1
     722:	1a c0       	rjmp	.+52     	; 0x758 <keypad_poll+0x12c>
     724:	e0 91 9d 21 	lds	r30, 0x219D	; 0x80219d <kpd_detectedCol>
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <kpd_detectedRow>
     72e:	ee 0f       	add	r30, r30
     730:	ff 1f       	adc	r31, r31
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	eb 55       	subi	r30, 0x5B	; 91
     738:	fe 4d       	sbci	r31, 0xDE	; 222
     73a:	e8 0f       	add	r30, r24
     73c:	f1 1d       	adc	r31, r1
     73e:	80 81       	ld	r24, Z
     740:	80 93 9b 21 	sts	0x219B, r24	; 0x80219b <kpd_code>
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <kpd_keyPressed>
     74a:	06 c0       	rjmp	.+12     	; 0x758 <keypad_poll+0x12c>
     74c:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <kpd_keyPressed>
     750:	81 30       	cpi	r24, 0x01	; 1
     752:	11 f4       	brne	.+4      	; 0x758 <keypad_poll+0x12c>
     754:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <kpd_keyPressed>
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <keypad_report>:

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     75e:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     762:	80 93 aa 23 	sts	0x23AA, r24	; 0x8023aa <kpd_testMode>
	}
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     766:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     76a:	80 93 99 21 	sts	0x2199, r24	; 0x802199 <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     76e:	80 91 9b 21 	lds	r24, 0x219B	; 0x80219b <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_codeOut = keypad_getCode();    // current code to be outputed
     772:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <kpd_codeOut>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     776:	80 91 aa 23 	lds	r24, 0x23AA	; 0x8023aa <kpd_testMode>
     77a:	84 fd       	sbrc	r24, 4
     77c:	29 c0       	rjmp	.+82     	; 0x7d0 <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     77e:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <kpd_currState>
     782:	81 30       	cpi	r24, 0x01	; 1
     784:	09 f0       	breq	.+2      	; 0x788 <keypad_report+0x2a>
     786:	57 c0       	rjmp	.+174    	; 0x836 <keypad_report+0xd8>
     788:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <kpd_prevState>
     78c:	81 11       	cpse	r24, r1
     78e:	53 c0       	rjmp	.+166    	; 0x836 <keypad_report+0xd8>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
     790:	e0 91 98 21 	lds	r30, 0x2198	; 0x802198 <kpd_codeOut>
     794:	8e 2f       	mov	r24, r30
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	fc 01       	movw	r30, r24
     79a:	e9 55       	subi	r30, 0x59	; 89
     79c:	f1 09       	sbc	r31, r1
     79e:	e9 30       	cpi	r30, 0x09	; 9
     7a0:	f1 05       	cpc	r31, r1
     7a2:	90 f4       	brcc	.+36     	; 0x7c8 <keypad_report+0x6a>
     7a4:	88 27       	eor	r24, r24
     7a6:	e2 50       	subi	r30, 0x02	; 2
     7a8:	ff 4f       	sbci	r31, 0xFF	; 255
     7aa:	8f 4f       	sbci	r24, 0xFF	; 255
     7ac:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     7b4:	80 e1       	ldi	r24, 0x10	; 16
     7b6:	07 c0       	rjmp	.+14     	; 0x7c6 <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     7b8:	80 e2       	ldi	r24, 0x20	; 32
     7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     7bc:	80 e4       	ldi	r24, 0x40	; 64
     7be:	03 c0       	rjmp	.+6      	; 0x7c6 <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     7c0:	80 e8       	ldi	r24, 0x80	; 128
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     7c4:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     7c6:	5e d0       	rcall	.+188    	; 0x884 <led_toggle>
			kpd_exitTestMode = 1;	// flag for exiting test mode
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <kpd_exitTestMode>
     7ce:	33 c0       	rjmp	.+102    	; 0x836 <keypad_report+0xd8>
		}
	}
	else // normal mode
	{
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
     7d0:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <kpd_currState>
     7d4:	81 30       	cpi	r24, 0x01	; 1
     7d6:	81 f4       	brne	.+32     	; 0x7f8 <keypad_report+0x9a>
     7d8:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <kpd_prevState>
     7dc:	81 11       	cpse	r24, r1
     7de:	0c c0       	rjmp	.+24     	; 0x7f8 <keypad_report+0x9a>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     7e0:	80 91 9b 21 	lds	r24, 0x219B	; 0x80219b <kpd_code>
		}
	}
	else // normal mode
	{
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
			kpd_codeOut = keypad_getCode();
     7e4:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <kpd_codeOut>
			BD76319_KeyToReport(kpd_currState, kpd_codeOut);
     7e8:	60 91 98 21 	lds	r22, 0x2198	; 0x802198 <kpd_codeOut>
     7ec:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <kpd_currState>
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	50 d0       	rcall	.+160    	; 0x896 <BD76319_KeyToReport>
     7f6:	13 c0       	rjmp	.+38     	; 0x81e <keypad_report+0xc0>
		} else if (kpd_currState == KEYPAD_RELEASED && kpd_prevState == KEYPAD_PRESSED) {
     7f8:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <kpd_currState>
     7fc:	81 11       	cpse	r24, r1
     7fe:	0f c0       	rjmp	.+30     	; 0x81e <keypad_report+0xc0>
     800:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <kpd_prevState>
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	59 f4       	brne	.+22     	; 0x81e <keypad_report+0xc0>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     808:	80 91 9b 21 	lds	r24, 0x219B	; 0x80219b <kpd_code>
	{
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
			kpd_codeOut = keypad_getCode();
			BD76319_KeyToReport(kpd_currState, kpd_codeOut);
		} else if (kpd_currState == KEYPAD_RELEASED && kpd_prevState == KEYPAD_PRESSED) {
			kpd_codeOut = keypad_getCode();
     80c:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <kpd_codeOut>
			BD76319_KeyToReport(kpd_currState, kpd_codeOut);
     810:	60 91 98 21 	lds	r22, 0x2198	; 0x802198 <kpd_codeOut>
     814:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <kpd_currState>
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	3c d0       	rcall	.+120    	; 0x896 <BD76319_KeyToReport>
		}
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
     81e:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <kpd_currState>
     822:	81 30       	cpi	r24, 0x01	; 1
     824:	41 f4       	brne	.+16     	; 0x836 <keypad_report+0xd8>
     826:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <kpd_prevState>
     82a:	81 11       	cpse	r24, r1
     82c:	04 c0       	rjmp	.+8      	; 0x836 <keypad_report+0xd8>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     82e:	80 91 9b 21 	lds	r24, 0x219B	; 0x80219b <kpd_code>
		} else if (kpd_currState == KEYPAD_RELEASED && kpd_prevState == KEYPAD_PRESSED) {
			kpd_codeOut = keypad_getCode();
			BD76319_KeyToReport(kpd_currState, kpd_codeOut);
		}
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
			kpd_codeOut = keypad_getCode();
     832:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <kpd_codeOut>
		}
	}
	
	// clears LEDs when exiting test mode
	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     836:	80 91 aa 23 	lds	r24, 0x23AA	; 0x8023aa <kpd_testMode>
     83a:	84 ff       	sbrs	r24, 4
     83c:	07 c0       	rjmp	.+14     	; 0x84c <keypad_report+0xee>
     83e:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <kpd_exitTestMode>
     842:	81 30       	cpi	r24, 0x01	; 1
		led_allOff();
     844:	19 f4       	brne	.+6      	; 0x84c <keypad_report+0xee>
     846:	17 d0       	rcall	.+46     	; 0x876 <led_allOff>
		kpd_exitTestMode = 0;
     848:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <kpd_exitTestMode>
	}
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
     84c:	80 91 99 21 	lds	r24, 0x2199	; 0x802199 <kpd_currState>
     850:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <kpd_prevState>
}
     854:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	b6 cf       	rjmp	.-148    	; 0x7c6 <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     85a:	88 e0       	ldi	r24, 0x08	; 8
     85c:	b4 cf       	rjmp	.-152    	; 0x7c6 <keypad_report+0x68>

0000085e <keypad>:
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
}

void keypad(void) {
	keypad_poll();
     85e:	e6 de       	rcall	.-564    	; 0x62c <keypad_poll>
	keypad_report();
     860:	7e df       	rcall	.-260    	; 0x75e <keypad_report>
     862:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <udd_get_frame_number>
	BD76319_ui_process(udd_get_frame_number());
     866:	1c c0       	rjmp	.+56     	; 0x8a0 <BD76319_ui_process>
     868:	08 95       	ret

0000086a <led_init>:
     86a:	e0 e0       	ldi	r30, 0x00	; 0
void led_on(uint8_t mask) {		// LED on
    LED_PORT.OUTCLR = mask;		// drive low (on)
}

void led_off(uint8_t mask) {	// LED off
    LED_PORT.OUTSET = mask;		// drive high (off)
     86c:	f6 e0       	ldi	r31, 0x06	; 6
     86e:	8f ef       	ldi	r24, 0xFF	; 255
     870:	81 83       	std	Z+1, r24	; 0x01
     872:	85 83       	std	Z+5, r24	; 0x05
     874:	08 95       	ret

00000876 <led_allOff>:
     876:	8f ef       	ldi	r24, 0xFF	; 255
     878:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     87c:	08 95       	ret

0000087e <led_on>:
     87e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     882:	08 95       	ret

00000884 <led_toggle>:
}

void led_toggle(uint8_t mask) {	// toggle LED
    LED_PORT.OUTTGL = mask;
     884:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     888:	08 95       	ret

0000088a <led_setStatus>:
}

void led_setStatus(uint8_t mask) {
    LED_PORT.OUTSET = LED_MASK;
     88a:	e0 e0       	ldi	r30, 0x00	; 0
     88c:	f6 e0       	ldi	r31, 0x06	; 6
     88e:	9f ef       	ldi	r25, 0xFF	; 255
     890:	95 83       	std	Z+5, r25	; 0x05
    LED_PORT.OUTCLR = mask;
     892:	86 83       	std	Z+6, r24	; 0x06
     894:	08 95       	ret

00000896 <BD76319_KeyToReport>:
// }

void BD76319_KeyToReport(uint16_t pui_KeyStatus, uint16_t pui_KeyValue)
{

	ui_KeyStatusToReport = pui_KeyStatus;
     896:	80 93 bb 21 	sts	0x21BB, r24	; 0x8021bb <ui_KeyStatusToReport>
	ui_KeyToReport = pui_KeyValue;
     89a:	60 93 ba 21 	sts	0x21BA, r22	; 0x8021ba <ui_KeyToReport>
     89e:	08 95       	ret

000008a0 <BD76319_ui_process>:

void BD76319_ui_process(uint16_t pui_framenumber)
{
	static bool last_state = false;

	bool curr = ui_KeyStatusToReport;
     8a0:	90 91 bb 21 	lds	r25, 0x21BB	; 0x8021bb <ui_KeyStatusToReport>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	91 11       	cpse	r25, r1
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <BD76319_ui_process+0xc>
     8aa:	80 e0       	ldi	r24, 0x00	; 0
	if (curr != last_state) {
     8ac:	20 91 b9 21 	lds	r18, 0x21B9	; 0x8021b9 <last_state.5299>
     8b0:	82 17       	cp	r24, r18
     8b2:	49 f0       	breq	.+18     	; 0x8c6 <BD76319_ui_process+0x26>
		last_state = curr;
     8b4:	80 93 b9 21 	sts	0x21B9, r24	; 0x8021b9 <last_state.5299>
		uint8_t v = ui_KeyToReport;
     8b8:	80 91 ba 21 	lds	r24, 0x21BA	; 0x8021ba <ui_KeyToReport>
		if (curr)
     8bc:	99 23       	and	r25, r25
     8be:	11 f0       	breq	.+4      	; 0x8c4 <BD76319_ui_process+0x24>
			udi_hid_kbd_down(v);
     8c0:	d8 c1       	rjmp	.+944    	; 0xc72 <udi_hid_kbd_down>
     8c2:	08 95       	ret
		else
			udi_hid_kbd_up(v);
     8c4:	9a c1       	rjmp	.+820    	; 0xbfa <udi_hid_kbd_up>
     8c6:	08 95       	ret

000008c8 <jstk_ui_process>:
     8c8:	65 ce       	rjmp	.-822    	; 0x594 <joystick>
// 	// Write Alarm information to Alarm LEDs
// 	PORTA.OUT = ~value;
// }

void jstk_ui_process(void) {
	joystick();
     8ca:	08 95       	ret

000008cc <kbd_ui_process>:
}

void kbd_ui_process(void) {
	keypad();
     8cc:	c8 cf       	rjmp	.-112    	; 0x85e <keypad>
     8ce:	08 95       	ret

000008d0 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	27 97       	sbiw	r28, 0x07	; 7
     8de:	cd bf       	out	0x3d, r28	; 61
     8e0:	de bf       	out	0x3e, r29	; 62
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     8e8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     8ec:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     8f0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     8f4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     8f8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     8fc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     900:	65 e0       	ldi	r22, 0x05	; 5
     902:	81 e4       	ldi	r24, 0x41	; 65
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	7a d6       	rcall	.+3316   	; 0x15fc <ccp_write_io>
     908:	6c e1       	ldi	r22, 0x1C	; 28
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	6c d6       	rcall	.+3288   	; 0x15e8 <nvm_read_byte>
     910:	8a 83       	std	Y+2, r24	; 0x02
     912:	6d e1       	ldi	r22, 0x1D	; 29
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	67 d6       	rcall	.+3278   	; 0x15e8 <nvm_read_byte>
     91a:	89 83       	std	Y+1, r24	; 0x01
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	9a 81       	ldd	r25, Y+2	; 0x02
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	21 f4       	brne	.+8      	; 0x92c <sysclk_init+0x5c>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	93 e2       	ldi	r25, 0x23	; 35
     928:	89 83       	std	Y+1, r24	; 0x01
     92a:	9a 83       	std	Y+2, r25	; 0x02
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	9a 81       	ldd	r25, Y+2	; 0x02
     930:	8b 83       	std	Y+3, r24	; 0x03
     932:	9c 83       	std	Y+4, r25	; 0x04
     934:	e0 e6       	ldi	r30, 0x60	; 96
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	82 83       	std	Z+2, r24	; 0x02
     93a:	8c 81       	ldd	r24, Y+4	; 0x04
     93c:	83 83       	std	Z+3, r24	; 0x03
     93e:	8f b7       	in	r24, 0x3f	; 63
     940:	8e 83       	std	Y+6, r24	; 0x06
     942:	f8 94       	cli
     944:	9e 81       	ldd	r25, Y+6	; 0x06
     946:	e0 e5       	ldi	r30, 0x50	; 80
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 81       	ld	r24, Z
     94c:	82 60       	ori	r24, 0x02	; 2
     94e:	80 83       	st	Z, r24
     950:	9f bf       	out	0x3f, r25	; 63
     952:	81 81       	ldd	r24, Z+1	; 0x01
     954:	81 ff       	sbrs	r24, 1
     956:	fd cf       	rjmp	.-6      	; 0x952 <sysclk_init+0x82>
     958:	8f b7       	in	r24, 0x3f	; 63
     95a:	8f 83       	std	Y+7, r24	; 0x07
     95c:	f8 94       	cli
     95e:	9f 81       	ldd	r25, Y+7	; 0x07
     960:	00 e5       	ldi	r16, 0x50	; 80
     962:	10 e0       	ldi	r17, 0x00	; 0
     964:	d8 01       	movw	r26, r16
     966:	16 96       	adiw	r26, 0x06	; 6
     968:	8c 91       	ld	r24, X
     96a:	16 97       	sbiw	r26, 0x06	; 6
     96c:	89 7f       	andi	r24, 0xF9	; 249
     96e:	16 96       	adiw	r26, 0x06	; 6
     970:	8c 93       	st	X, r24
     972:	16 97       	sbiw	r26, 0x06	; 6
     974:	e0 e6       	ldi	r30, 0x60	; 96
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	80 e8       	ldi	r24, 0x80	; 128
     97a:	85 83       	std	Z+5, r24	; 0x05
     97c:	8b eb       	ldi	r24, 0xBB	; 187
     97e:	86 83       	std	Z+6, r24	; 0x06
     980:	16 96       	adiw	r26, 0x06	; 6
     982:	8c 91       	ld	r24, X
     984:	16 97       	sbiw	r26, 0x06	; 6
     986:	84 60       	ori	r24, 0x04	; 4
     988:	16 96       	adiw	r26, 0x06	; 6
     98a:	8c 93       	st	X, r24
     98c:	80 81       	ld	r24, Z
     98e:	81 60       	ori	r24, 0x01	; 1
     990:	80 83       	st	Z, r24
     992:	9f bf       	out	0x3f, r25	; 63
     994:	61 e0       	ldi	r22, 0x01	; 1
     996:	80 e4       	ldi	r24, 0x40	; 64
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	30 d6       	rcall	.+3168   	; 0x15fc <ccp_write_io>
     99c:	8f b7       	in	r24, 0x3f	; 63
     99e:	8d 83       	std	Y+5, r24	; 0x05
     9a0:	f8 94       	cli
     9a2:	9d 81       	ldd	r25, Y+5	; 0x05
     9a4:	f8 01       	movw	r30, r16
     9a6:	80 81       	ld	r24, Z
     9a8:	8e 7f       	andi	r24, 0xFE	; 254
     9aa:	80 83       	st	Z, r24
     9ac:	9f bf       	out	0x3f, r25	; 63
     9ae:	27 96       	adiw	r28, 0x07	; 7
     9b0:	cd bf       	out	0x3d, r28	; 61
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	08 95       	ret

000009be <sysclk_enable_module>:
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	1f 92       	push	r1
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	9f b7       	in	r25, 0x3f	; 63
     9ca:	99 83       	std	Y+1, r25	; 0x01
     9cc:	f8 94       	cli
     9ce:	99 81       	ldd	r25, Y+1	; 0x01
     9d0:	e8 2f       	mov	r30, r24
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	e0 59       	subi	r30, 0x90	; 144
     9d6:	ff 4f       	sbci	r31, 0xFF	; 255
     9d8:	60 95       	com	r22
     9da:	80 81       	ld	r24, Z
     9dc:	68 23       	and	r22, r24
     9de:	60 83       	st	Z, r22
     9e0:	9f bf       	out	0x3f, r25	; 63
     9e2:	0f 90       	pop	r0
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	08 95       	ret

000009ea <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
     9ea:	cf 93       	push	r28
     9ec:	df 93       	push	r29
     9ee:	1f 92       	push	r1
     9f0:	1f 92       	push	r1
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     9f6:	86 30       	cpi	r24, 0x06	; 6
     9f8:	11 f0       	breq	.+4      	; 0x9fe <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     9fe:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     a00:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     a04:	81 fd       	sbrc	r24, 1
     a06:	2a c0       	rjmp	.+84     	; 0xa5c <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a08:	8f b7       	in	r24, 0x3f	; 63
     a0a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     a0c:	f8 94       	cli
	return flags;
     a0e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     a10:	e0 e5       	ldi	r30, 0x50	; 80
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	80 81       	ld	r24, Z
     a16:	82 60       	ori	r24, 0x02	; 2
     a18:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a1a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     a1c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     a1e:	81 ff       	sbrs	r24, 1
     a20:	fd cf       	rjmp	.-6      	; 0xa1c <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a22:	8f b7       	in	r24, 0x3f	; 63
     a24:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     a26:	f8 94       	cli
	return flags;
     a28:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     a2a:	a0 e5       	ldi	r26, 0x50	; 80
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
     a2e:	16 96       	adiw	r26, 0x06	; 6
     a30:	8c 91       	ld	r24, X
     a32:	16 97       	sbiw	r26, 0x06	; 6
     a34:	89 7f       	andi	r24, 0xF9	; 249
     a36:	16 96       	adiw	r26, 0x06	; 6
     a38:	8c 93       	st	X, r24
     a3a:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     a3c:	e0 e6       	ldi	r30, 0x60	; 96
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 e8       	ldi	r24, 0x80	; 128
     a42:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     a44:	8b eb       	ldi	r24, 0xBB	; 187
     a46:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     a48:	16 96       	adiw	r26, 0x06	; 6
     a4a:	8c 91       	ld	r24, X
     a4c:	16 97       	sbiw	r26, 0x06	; 6
     a4e:	84 60       	ori	r24, 0x04	; 4
     a50:	16 96       	adiw	r26, 0x06	; 6
     a52:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     a54:	80 81       	ld	r24, Z
     a56:	81 60       	ori	r24, 0x01	; 1
     a58:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a5a:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     a5c:	63 60       	ori	r22, 0x03	; 3
     a5e:	84 e4       	ldi	r24, 0x44	; 68
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	cc d5       	rcall	.+2968   	; 0x15fc <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     a64:	60 e4       	ldi	r22, 0x40	; 64
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	aa df       	rcall	.-172    	; 0x9be <sysclk_enable_module>
}
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	08 95       	ret

00000a78 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     a78:	30 91 b3 23 	lds	r19, 0x23B3	; 0x8023b3 <udd_g_ctrlreq+0x2>
     a7c:	20 91 b4 23 	lds	r18, 0x23B4	; 0x8023b4 <udd_g_ctrlreq+0x3>
     a80:	82 2f       	mov	r24, r18
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	03 97       	sbiw	r24, 0x03	; 3
     a86:	b1 f4       	brne	.+44     	; 0xab4 <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     a88:	31 11       	cpse	r19, r1
     a8a:	16 c0       	rjmp	.+44     	; 0xab8 <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
     a8c:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udd_g_ctrlreq+0x6>
     a90:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <udd_g_ctrlreq+0x7>
     a94:	89 2b       	or	r24, r25
     a96:	91 f4       	brne	.+36     	; 0xabc <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     a98:	e1 eb       	ldi	r30, 0xB1	; 177
     a9a:	f3 e2       	ldi	r31, 0x23	; 35
     a9c:	8c eb       	ldi	r24, 0xBC	; 188
     a9e:	91 e2       	ldi	r25, 0x21	; 33
     aa0:	80 87       	std	Z+8, r24	; 0x08
     aa2:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     aa4:	80 e6       	ldi	r24, 0x60	; 96
     aa6:	95 e0       	ldi	r25, 0x05	; 5
     aa8:	84 87       	std	Z+12, r24	; 0x0c
     aaa:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
     aac:	12 86       	std	Z+10, r1	; 0x0a
     aae:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	08 95       	ret
	}
	return false;
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	08 95       	ret
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	08 95       	ret
     abc:	80 e0       	ldi	r24, 0x00	; 0
}
     abe:	08 95       	ret

00000ac0 <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
     ac0:	08 95       	ret

00000ac2 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	80 93 be 21 	sts	0x21BE, r24	; 0x8021be <udi_hid_generic_b_report_in_free>
     ac8:	08 95       	ret

00000aca <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
     aca:	10 92 c2 21 	sts	0x21C2, r1	; 0x8021c2 <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
     ace:	10 92 c0 21 	sts	0x21C0, r1	; 0x8021c0 <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	80 93 be 21 	sts	0x21BE, r24	; 0x8021be <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
     ad8:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <main_generic_enable>
}
     adc:	08 95       	ret

00000ade <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
     ade:	0c 94 00 13 	jmp	0x2600	; 0x2600 <main_generic_disable>
     ae2:	08 95       	ret

00000ae4 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
     ae4:	2c e3       	ldi	r18, 0x3C	; 60
     ae6:	35 e0       	ldi	r19, 0x05	; 5
     ae8:	46 ea       	ldi	r20, 0xA6	; 166
     aea:	50 e2       	ldi	r21, 0x20	; 32
     aec:	60 ec       	ldi	r22, 0xC0	; 192
     aee:	71 e2       	ldi	r23, 0x21	; 33
     af0:	82 ec       	ldi	r24, 0xC2	; 194
     af2:	91 e2       	ldi	r25, 0x21	; 33
     af4:	f2 c0       	rjmp	.+484    	; 0xcda <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
     af6:	08 95       	ret

00000af8 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	1f 92       	push	r1
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
     b08:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
     b0a:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <udi_hid_generic_b_report_in_free>
     b0e:	88 23       	and	r24, r24
     b10:	09 f1       	breq	.+66     	; 0xb54 <udi_hid_generic_send_report_in+0x5c>
     b12:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b14:	8f b7       	in	r24, 0x3f	; 63
     b16:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b18:	f8 94       	cli
	return flags;
     b1a:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
     b1c:	10 92 bc 21 	sts	0x21BC, r1	; 0x8021bc <udi_hid_generic_report_feature>
     b20:	10 92 bd 21 	sts	0x21BD, r1	; 0x8021bd <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
     b24:	80 81       	ld	r24, Z
     b26:	91 81       	ldd	r25, Z+1	; 0x01
     b28:	80 93 bc 21 	sts	0x21BC, r24	; 0x8021bc <udi_hid_generic_report_feature>
     b2c:	90 93 bd 21 	sts	0x21BD, r25	; 0x8021bd <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     b30:	01 e6       	ldi	r16, 0x61	; 97
     b32:	15 e0       	ldi	r17, 0x05	; 5
     b34:	22 e0       	ldi	r18, 0x02	; 2
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	4c eb       	ldi	r20, 0xBC	; 188
     b3a:	51 e2       	ldi	r21, 0x21	; 33
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	89 27       	eor	r24, r25
     b48:	80 93 be 21 	sts	0x21BE, r24	; 0x8021be <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b4c:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
     b4e:	80 91 be 21 	lds	r24, 0x21BE	; 0x8021be <udi_hid_generic_b_report_in_free>
     b52:	89 27       	eor	r24, r25

}
     b54:	0f 90       	pop	r0
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	ff 90       	pop	r15
     b60:	08 95       	ret

00000b62 <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	08 95       	ret

00000b66 <udi_hid_kbd_setreport>:
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	08 95       	ret

00000b6a <udi_hid_kbd_enable>:
     b6a:	10 92 d8 21 	sts	0x21D8, r1	; 0x8021d8 <udi_hid_kbd_rate>
     b6e:	10 92 d6 21 	sts	0x21D6, r1	; 0x8021d6 <udi_hid_kbd_protocol>
     b72:	10 92 cc 21 	sts	0x21CC, r1	; 0x8021cc <udi_hid_kbd_b_report_trans_ongoing>
     b76:	88 e0       	ldi	r24, 0x08	; 8
     b78:	ed ec       	ldi	r30, 0xCD	; 205
     b7a:	f1 e2       	ldi	r31, 0x21	; 33
     b7c:	df 01       	movw	r26, r30
     b7e:	1d 92       	st	X+, r1
     b80:	8a 95       	dec	r24
     b82:	e9 f7       	brne	.-6      	; 0xb7e <udi_hid_kbd_enable+0x14>
     b84:	10 92 d5 21 	sts	0x21D5, r1	; 0x8021d5 <udi_hid_kbd_b_report_valid>
     b88:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <main_kbd_enable>
     b8c:	08 95       	ret

00000b8e <udi_hid_kbd_disable>:
     b8e:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <main_kbd_disable>
     b92:	08 95       	ret

00000b94 <udi_hid_kbd_setup>:
     b94:	23 eb       	ldi	r18, 0xB3	; 179
     b96:	35 e0       	ldi	r19, 0x05	; 5
     b98:	4b ec       	ldi	r20, 0xCB	; 203
     b9a:	50 e2       	ldi	r21, 0x20	; 32
     b9c:	66 ed       	ldi	r22, 0xD6	; 214
     b9e:	71 e2       	ldi	r23, 0x21	; 33
     ba0:	88 ed       	ldi	r24, 0xD8	; 216
     ba2:	91 e2       	ldi	r25, 0x21	; 33
     ba4:	9a c0       	rjmp	.+308    	; 0xcda <udi_hid_setup>
     ba6:	08 95       	ret

00000ba8 <udi_hid_kbd_send_report>:
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	80 91 cc 21 	lds	r24, 0x21CC	; 0x8021cc <udi_hid_kbd_b_report_trans_ongoing>
     bb0:	81 11       	cpse	r24, r1
     bb2:	18 c0       	rjmp	.+48     	; 0xbe4 <udi_hid_kbd_send_report+0x3c>
     bb4:	88 e0       	ldi	r24, 0x08	; 8
     bb6:	ed ec       	ldi	r30, 0xCD	; 205
     bb8:	f1 e2       	ldi	r31, 0x21	; 33
     bba:	a4 ec       	ldi	r26, 0xC4	; 196
     bbc:	b1 e2       	ldi	r27, 0x21	; 33
     bbe:	01 90       	ld	r0, Z+
     bc0:	0d 92       	st	X+, r0
     bc2:	8a 95       	dec	r24
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <udi_hid_kbd_send_report+0x16>
     bc6:	10 92 d5 21 	sts	0x21D5, r1	; 0x8021d5 <udi_hid_kbd_b_report_valid>
     bca:	06 ef       	ldi	r16, 0xF6	; 246
     bcc:	15 e0       	ldi	r17, 0x05	; 5
     bce:	28 e0       	ldi	r18, 0x08	; 8
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	44 ec       	ldi	r20, 0xC4	; 196
     bd4:	51 e2       	ldi	r21, 0x21	; 33
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	81 e8       	ldi	r24, 0x81	; 129
     bda:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <udd_ep_run>
     bde:	80 93 cc 21 	sts	0x21CC, r24	; 0x8021cc <udi_hid_kbd_b_report_trans_ongoing>
     be2:	01 c0       	rjmp	.+2      	; 0xbe6 <udi_hid_kbd_send_report+0x3e>
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	08 95       	ret

00000bec <udi_hid_kbd_report_sent>:
     bec:	10 92 cc 21 	sts	0x21CC, r1	; 0x8021cc <udi_hid_kbd_b_report_trans_ongoing>
     bf0:	80 91 d5 21 	lds	r24, 0x21D5	; 0x8021d5 <udi_hid_kbd_b_report_valid>
     bf4:	81 11       	cpse	r24, r1
     bf6:	d8 cf       	rjmp	.-80     	; 0xba8 <udi_hid_kbd_send_report>
     bf8:	08 95       	ret

00000bfa <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	1f 92       	push	r1
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c06:	9f b7       	in	r25, 0x3f	; 63
     c08:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     c0a:	f8 94       	cli
	return flags;
     c0c:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
     c0e:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <udi_hid_kbd_report+0x2>
     c12:	99 23       	and	r25, r25
     c14:	41 f0       	breq	.+16     	; 0xc26 <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
     c16:	89 17       	cp	r24, r25
     c18:	a9 f0       	breq	.+42     	; 0xc44 <udi_hid_kbd_up+0x4a>
     c1a:	e0 ed       	ldi	r30, 0xD0	; 208
     c1c:	f1 e2       	ldi	r31, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     c1e:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
     c20:	21 91       	ld	r18, Z+
     c22:	21 11       	cpse	r18, r1
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c26:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
     c28:	1e c0       	rjmp	.+60     	; 0xc66 <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
     c2a:	28 17       	cp	r18, r24
     c2c:	21 f0       	breq	.+8      	; 0xc36 <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     c2e:	9f 5f       	subi	r25, 0xFF	; 255
     c30:	98 30       	cpi	r25, 0x08	; 8
     c32:	b1 f7       	brne	.-20     	; 0xc20 <udi_hid_kbd_up+0x26>
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
     c36:	98 30       	cpi	r25, 0x08	; 8
     c38:	19 f0       	breq	.+6      	; 0xc40 <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
     c3a:	97 30       	cpi	r25, 0x07	; 7
     c3c:	20 f0       	brcs	.+8      	; 0xc46 <udi_hid_kbd_up+0x4c>
     c3e:	0c c0       	rjmp	.+24     	; 0xc58 <udi_hid_kbd_up+0x5e>
     c40:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
     c42:	11 c0       	rjmp	.+34     	; 0xc66 <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     c44:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
     c46:	e9 2f       	mov	r30, r25
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	e3 53       	subi	r30, 0x33	; 51
     c4c:	fe 4d       	sbci	r31, 0xDE	; 222
     c4e:	81 81       	ldd	r24, Z+1	; 0x01
     c50:	80 83       	st	Z, r24
		i++;
     c52:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
     c54:	97 30       	cpi	r25, 0x07	; 7
     c56:	b9 f7       	brne	.-18     	; 0xc46 <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
     c58:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	80 93 d5 21 	sts	0x21D5, r24	; 0x8021d5 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
     c62:	a2 df       	rcall	.-188    	; 0xba8 <udi_hid_kbd_send_report>
     c64:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	0f 90       	pop	r0
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	08 95       	ret

00000c72 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	1f 92       	push	r1
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c7e:	9f b7       	in	r25, 0x3f	; 63
     c80:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     c82:	f8 94       	cli
	return flags;
     c84:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
     c86:	90 91 cf 21 	lds	r25, 0x21CF	; 0x8021cf <udi_hid_kbd_report+0x2>
     c8a:	99 23       	and	r25, r25
     c8c:	b1 f0       	breq	.+44     	; 0xcba <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
     c8e:	89 17       	cp	r24, r25
     c90:	41 f0       	breq	.+16     	; 0xca2 <udi_hid_kbd_down+0x30>
     c92:	a0 ed       	ldi	r26, 0xD0	; 208
     c94:	b1 e2       	ldi	r27, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     c96:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
     c98:	9d 91       	ld	r25, X+
     c9a:	99 23       	and	r25, r25
     c9c:	49 f0       	breq	.+18     	; 0xcb0 <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
     c9e:	98 13       	cpse	r25, r24
     ca0:	03 c0       	rjmp	.+6      	; 0xca8 <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ca2:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	14 c0       	rjmp	.+40     	; 0xcd0 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     ca8:	ef 5f       	subi	r30, 0xFF	; 255
     caa:	e8 30       	cpi	r30, 0x08	; 8
     cac:	a9 f7       	brne	.-22     	; 0xc98 <udi_hid_kbd_down+0x26>
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
     cb0:	e8 30       	cpi	r30, 0x08	; 8
     cb2:	21 f4       	brne	.+8      	; 0xcbc <udi_hid_kbd_down+0x4a>
     cb4:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	0b c0       	rjmp	.+22     	; 0xcd0 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     cba:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	e3 53       	subi	r30, 0x33	; 51
     cc0:	fe 4d       	sbci	r31, 0xDE	; 222
     cc2:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	80 93 d5 21 	sts	0x21D5, r24	; 0x8021d5 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
     cca:	6e df       	rcall	.-292    	; 0xba8 <udi_hid_kbd_send_report>
     ccc:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
     cce:	81 e0       	ldi	r24, 0x01	; 1
}
     cd0:	0f 90       	pop	r0
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	1f 91       	pop	r17
     cd8:	08 95       	ret

00000cda <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	dc 01       	movw	r26, r24
     ce0:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
     ce2:	90 91 b1 23 	lds	r25, 0x23B1	; 0x8023b1 <udd_g_ctrlreq>
     ce6:	99 23       	and	r25, r25
     ce8:	0c f0       	brlt	.+2      	; 0xcec <udi_hid_setup+0x12>
     cea:	68 c0       	rjmp	.+208    	; 0xdbc <udi_hid_setup+0xe2>
     cec:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     cee:	09 f0       	breq	.+2      	; 0xcf2 <udi_hid_setup+0x18>
     cf0:	45 c0       	rjmp	.+138    	; 0xd7c <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     cf2:	80 91 b2 23 	lds	r24, 0x23B2	; 0x8023b2 <udd_g_ctrlreq+0x1>
     cf6:	86 30       	cpi	r24, 0x06	; 6
     cf8:	09 f0       	breq	.+2      	; 0xcfc <udi_hid_setup+0x22>
     cfa:	40 c0       	rjmp	.+128    	; 0xd7c <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
     cfc:	76 d1       	rcall	.+748    	; 0xfea <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     cfe:	dc 01       	movw	r26, r24
     d00:	1a 96       	adiw	r26, 0x0a	; 10
     d02:	2c 91       	ld	r18, X
     d04:	1a 97       	sbiw	r26, 0x0a	; 10
     d06:	21 32       	cpi	r18, 0x21	; 33
     d08:	09 f0       	breq	.+2      	; 0xd0c <udi_hid_setup+0x32>
     d0a:	77 c0       	rjmp	.+238    	; 0xdfa <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     d0c:	20 91 b4 23 	lds	r18, 0x23B4	; 0x8023b4 <udd_g_ctrlreq+0x3>
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	21 32       	cpi	r18, 0x21	; 33
     d14:	31 05       	cpc	r19, r1
     d16:	b1 f4       	brne	.+44     	; 0xd44 <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     d18:	9c 01       	movw	r18, r24
     d1a:	27 5f       	subi	r18, 0xF7	; 247
     d1c:	3f 4f       	sbci	r19, 0xFF	; 255
     d1e:	20 93 b9 23 	sts	0x23B9, r18	; 0x8023b9 <udd_g_ctrlreq+0x8>
     d22:	30 93 ba 23 	sts	0x23BA, r19	; 0x8023ba <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
     d26:	e1 eb       	ldi	r30, 0xB1	; 177
     d28:	f3 e2       	ldi	r31, 0x23	; 35
     d2a:	19 96       	adiw	r26, 0x09	; 9
     d2c:	8c 91       	ld	r24, X
     d2e:	26 81       	ldd	r18, Z+6	; 0x06
     d30:	37 81       	ldd	r19, Z+7	; 0x07
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	28 17       	cp	r18, r24
     d36:	39 07       	cpc	r19, r25
     d38:	08 f4       	brcc	.+2      	; 0xd3c <udi_hid_setup+0x62>
     d3a:	c9 01       	movw	r24, r18
     d3c:	82 87       	std	Z+10, r24	; 0x0a
     d3e:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	68 c0       	rjmp	.+208    	; 0xe14 <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     d44:	fc 01       	movw	r30, r24
     d46:	47 85       	ldd	r20, Z+15	; 0x0f
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	42 17       	cp	r20, r18
     d4c:	53 07       	cpc	r21, r19
     d4e:	09 f0       	breq	.+2      	; 0xd52 <udi_hid_setup+0x78>
     d50:	56 c0       	rjmp	.+172    	; 0xdfe <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
     d52:	c0 93 b9 23 	sts	0x23B9, r28	; 0x8023b9 <udd_g_ctrlreq+0x8>
     d56:	d0 93 ba 23 	sts	0x23BA, r29	; 0x8023ba <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
     d5a:	e1 eb       	ldi	r30, 0xB1	; 177
     d5c:	f3 e2       	ldi	r31, 0x23	; 35
     d5e:	26 81       	ldd	r18, Z+6	; 0x06
     d60:	37 81       	ldd	r19, Z+7	; 0x07
     d62:	dc 01       	movw	r26, r24
     d64:	50 96       	adiw	r26, 0x10	; 16
     d66:	8d 91       	ld	r24, X+
     d68:	9c 91       	ld	r25, X
     d6a:	51 97       	sbiw	r26, 0x11	; 17
     d6c:	28 17       	cp	r18, r24
     d6e:	39 07       	cpc	r19, r25
     d70:	08 f4       	brcc	.+2      	; 0xd74 <udi_hid_setup+0x9a>
     d72:	c9 01       	movw	r24, r18
     d74:	82 87       	std	Z+10, r24	; 0x0a
     d76:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	4c c0       	rjmp	.+152    	; 0xe14 <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     d7c:	90 32       	cpi	r25, 0x20	; 32
     d7e:	09 f0       	breq	.+2      	; 0xd82 <udi_hid_setup+0xa8>
     d80:	40 c0       	rjmp	.+128    	; 0xe02 <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     d82:	80 91 b2 23 	lds	r24, 0x23B2	; 0x8023b2 <udd_g_ctrlreq+0x1>
     d86:	82 30       	cpi	r24, 0x02	; 2
     d88:	39 f0       	breq	.+14     	; 0xd98 <udi_hid_setup+0xbe>
     d8a:	83 30       	cpi	r24, 0x03	; 3
     d8c:	71 f0       	breq	.+28     	; 0xdaa <udi_hid_setup+0xd0>
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	d1 f5       	brne	.+116    	; 0xe06 <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
     d92:	f9 01       	movw	r30, r18
     d94:	19 95       	eicall
     d96:	3e c0       	rjmp	.+124    	; 0xe14 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
     d98:	e1 eb       	ldi	r30, 0xB1	; 177
     d9a:	f3 e2       	ldi	r31, 0x23	; 35
     d9c:	a0 87       	std	Z+8, r26	; 0x08
     d9e:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	82 87       	std	Z+10, r24	; 0x0a
     da6:	93 87       	std	Z+11, r25	; 0x0b
				return true;
     da8:	35 c0       	rjmp	.+106    	; 0xe14 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
     daa:	e1 eb       	ldi	r30, 0xB1	; 177
     dac:	f3 e2       	ldi	r31, 0x23	; 35
     dae:	60 87       	std	Z+8, r22	; 0x08
     db0:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	82 87       	std	Z+10, r24	; 0x0a
     db8:	93 87       	std	Z+11, r25	; 0x0b
				return true;
     dba:	2c c0       	rjmp	.+88     	; 0xe14 <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     dbc:	90 76       	andi	r25, 0x60	; 96
     dbe:	90 32       	cpi	r25, 0x20	; 32
     dc0:	21 f5       	brne	.+72     	; 0xe0a <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     dc2:	80 91 b2 23 	lds	r24, 0x23B2	; 0x8023b2 <udd_g_ctrlreq+0x1>
     dc6:	8a 30       	cpi	r24, 0x0A	; 10
     dc8:	39 f0       	breq	.+14     	; 0xdd8 <udi_hid_setup+0xfe>
     dca:	8b 30       	cpi	r24, 0x0B	; 11
     dcc:	51 f0       	breq	.+20     	; 0xde2 <udi_hid_setup+0x108>
     dce:	89 30       	cpi	r24, 0x09	; 9
     dd0:	f1 f4       	brne	.+60     	; 0xe0e <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
     dd2:	f9 01       	movw	r30, r18
     dd4:	19 95       	eicall
     dd6:	1e c0       	rjmp	.+60     	; 0xe14 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
     dd8:	80 91 b4 23 	lds	r24, 0x23B4	; 0x8023b4 <udd_g_ctrlreq+0x3>
     ddc:	8c 93       	st	X, r24
				return true;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	19 c0       	rjmp	.+50     	; 0xe14 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
     de2:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udd_g_ctrlreq+0x6>
     de6:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <udd_g_ctrlreq+0x7>
     dea:	89 2b       	or	r24, r25
     dec:	91 f4       	brne	.+36     	; 0xe12 <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
     dee:	80 91 b3 23 	lds	r24, 0x23B3	; 0x8023b3 <udd_g_ctrlreq+0x2>
     df2:	db 01       	movw	r26, r22
     df4:	8c 93       	st	X, r24
				return true;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	0d c0       	rjmp	.+26     	; 0xe14 <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	0b c0       	rjmp	.+22     	; 0xe14 <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	09 c0       	rjmp	.+18     	; 0xe14 <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	07 c0       	rjmp	.+14     	; 0xe14 <udi_hid_setup+0x13a>
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <udi_hid_setup+0x13a>
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	03 c0       	rjmp	.+6      	; 0xe14 <udi_hid_setup+0x13a>
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
     e12:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	08 95       	ret

00000e1a <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     e1a:	e0 91 de 21 	lds	r30, 0x21DE	; 0x8021de <udc_ptr_conf>
     e1e:	f0 91 df 21 	lds	r31, 0x21DF	; 0x8021df <udc_ptr_conf+0x1>
     e22:	01 90       	ld	r0, Z+
     e24:	f0 81       	ld	r31, Z
     e26:	e0 2d       	mov	r30, r0
     e28:	22 81       	ldd	r18, Z+2	; 0x02
     e2a:	33 81       	ldd	r19, Z+3	; 0x03
     e2c:	2e 0f       	add	r18, r30
     e2e:	3f 1f       	adc	r19, r31
     e30:	fc 01       	movw	r30, r24
     e32:	40 81       	ld	r20, Z
     e34:	e4 0f       	add	r30, r20
     e36:	f1 1d       	adc	r31, r1
     e38:	e2 17       	cp	r30, r18
     e3a:	f3 07       	cpc	r31, r19
     e3c:	a0 f4       	brcc	.+40     	; 0xe66 <udc_next_desc_in_iface+0x4c>
     e3e:	81 81       	ldd	r24, Z+1	; 0x01
     e40:	84 30       	cpi	r24, 0x04	; 4
     e42:	a1 f0       	breq	.+40     	; 0xe6c <udc_next_desc_in_iface+0x52>
     e44:	86 13       	cpse	r24, r22
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <udc_next_desc_in_iface+0x3a>
     e48:	14 c0       	rjmp	.+40     	; 0xe72 <udc_next_desc_in_iface+0x58>
     e4a:	81 81       	ldd	r24, Z+1	; 0x01
     e4c:	84 30       	cpi	r24, 0x04	; 4
     e4e:	a1 f0       	breq	.+40     	; 0xe78 <udc_next_desc_in_iface+0x5e>
     e50:	86 17       	cp	r24, r22
     e52:	a9 f0       	breq	.+42     	; 0xe7e <udc_next_desc_in_iface+0x64>
     e54:	80 81       	ld	r24, Z
     e56:	e8 0f       	add	r30, r24
     e58:	f1 1d       	adc	r31, r1
     e5a:	e2 17       	cp	r30, r18
     e5c:	f3 07       	cpc	r31, r19
     e5e:	a8 f3       	brcs	.-22     	; 0xe4a <udc_next_desc_in_iface+0x30>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	08 95       	ret
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	08 95       	ret
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	08 95       	ret
     e72:	8e 2f       	mov	r24, r30
     e74:	9f 2f       	mov	r25, r31
     e76:	08 95       	ret
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	08 95       	ret
     e7e:	8e 2f       	mov	r24, r30
     e80:	9f 2f       	mov	r25, r31
     e82:	08 95       	ret

00000e84 <udc_valid_address>:
     e84:	80 91 b3 23 	lds	r24, 0x23B3	; 0x8023b3 <udd_g_ctrlreq+0x2>
     e88:	8f 77       	andi	r24, 0x7F	; 127
     e8a:	95 c7       	rjmp	.+3882   	; 0x1db6 <udd_set_address>
     e8c:	08 95       	ret

00000e8e <udc_update_iface_desc>:
     e8e:	90 91 e0 21 	lds	r25, 0x21E0	; 0x8021e0 <udc_num_configuration>
     e92:	99 23       	and	r25, r25
     e94:	81 f1       	breq	.+96     	; 0xef6 <udc_update_iface_desc+0x68>
     e96:	e0 91 de 21 	lds	r30, 0x21DE	; 0x8021de <udc_ptr_conf>
     e9a:	f0 91 df 21 	lds	r31, 0x21DF	; 0x8021df <udc_ptr_conf+0x1>
     e9e:	01 90       	ld	r0, Z+
     ea0:	f0 81       	ld	r31, Z
     ea2:	e0 2d       	mov	r30, r0
     ea4:	94 81       	ldd	r25, Z+4	; 0x04
     ea6:	89 17       	cp	r24, r25
     ea8:	40 f5       	brcc	.+80     	; 0xefa <udc_update_iface_desc+0x6c>
     eaa:	e0 93 dc 21 	sts	0x21DC, r30	; 0x8021dc <udc_ptr_iface>
     eae:	f0 93 dd 21 	sts	0x21DD, r31	; 0x8021dd <udc_ptr_iface+0x1>
     eb2:	22 81       	ldd	r18, Z+2	; 0x02
     eb4:	33 81       	ldd	r19, Z+3	; 0x03
     eb6:	2e 0f       	add	r18, r30
     eb8:	3f 1f       	adc	r19, r31
     eba:	e2 17       	cp	r30, r18
     ebc:	f3 07       	cpc	r31, r19
     ebe:	f8 f4       	brcc	.+62     	; 0xefe <udc_update_iface_desc+0x70>
     ec0:	91 81       	ldd	r25, Z+1	; 0x01
     ec2:	94 30       	cpi	r25, 0x04	; 4
     ec4:	61 f4       	brne	.+24     	; 0xede <udc_update_iface_desc+0x50>
     ec6:	92 81       	ldd	r25, Z+2	; 0x02
     ec8:	89 13       	cpse	r24, r25
     eca:	09 c0       	rjmp	.+18     	; 0xede <udc_update_iface_desc+0x50>
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	96 13       	cpse	r25, r22
     ed0:	06 c0       	rjmp	.+12     	; 0xede <udc_update_iface_desc+0x50>
     ed2:	e0 93 dc 21 	sts	0x21DC, r30	; 0x8021dc <udc_ptr_iface>
     ed6:	f0 93 dd 21 	sts	0x21DD, r31	; 0x8021dd <udc_ptr_iface+0x1>
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	08 95       	ret
     ede:	90 81       	ld	r25, Z
     ee0:	e9 0f       	add	r30, r25
     ee2:	f1 1d       	adc	r31, r1
     ee4:	e2 17       	cp	r30, r18
     ee6:	f3 07       	cpc	r31, r19
     ee8:	58 f3       	brcs	.-42     	; 0xec0 <udc_update_iface_desc+0x32>
     eea:	e0 93 dc 21 	sts	0x21DC, r30	; 0x8021dc <udc_ptr_iface>
     eee:	f0 93 dd 21 	sts	0x21DD, r31	; 0x8021dd <udc_ptr_iface+0x1>
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	08 95       	ret
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	08 95       	ret
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	08 95       	ret
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	08 95       	ret

00000f02 <udc_iface_disable>:
     f02:	ef 92       	push	r14
     f04:	ff 92       	push	r15
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	c8 2f       	mov	r28, r24
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	be df       	rcall	.-132    	; 0xe8e <udc_update_iface_desc>
     f12:	18 2f       	mov	r17, r24
     f14:	88 23       	and	r24, r24
     f16:	81 f1       	breq	.+96     	; 0xf78 <udc_iface_disable+0x76>
     f18:	a0 91 de 21 	lds	r26, 0x21DE	; 0x8021de <udc_ptr_conf>
     f1c:	b0 91 df 21 	lds	r27, 0x21DF	; 0x8021df <udc_ptr_conf+0x1>
     f20:	ec 2f       	mov	r30, r28
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	12 96       	adiw	r26, 0x02	; 2
     f2a:	8d 91       	ld	r24, X+
     f2c:	9c 91       	ld	r25, X
     f2e:	13 97       	sbiw	r26, 0x03	; 3
     f30:	e8 0f       	add	r30, r24
     f32:	f9 1f       	adc	r31, r25
     f34:	e0 80       	ld	r14, Z
     f36:	f1 80       	ldd	r15, Z+1	; 0x01
     f38:	d7 01       	movw	r26, r14
     f3a:	16 96       	adiw	r26, 0x06	; 6
     f3c:	ed 91       	ld	r30, X+
     f3e:	fc 91       	ld	r31, X
     f40:	17 97       	sbiw	r26, 0x07	; 7
     f42:	19 95       	eicall
     f44:	68 2f       	mov	r22, r24
     f46:	8c 2f       	mov	r24, r28
     f48:	a2 df       	rcall	.-188    	; 0xe8e <udc_update_iface_desc>
     f4a:	18 2f       	mov	r17, r24
     f4c:	88 23       	and	r24, r24
     f4e:	a1 f0       	breq	.+40     	; 0xf78 <udc_iface_disable+0x76>
     f50:	c0 91 dc 21 	lds	r28, 0x21DC	; 0x8021dc <udc_ptr_iface>
     f54:	d0 91 dd 21 	lds	r29, 0x21DD	; 0x8021dd <udc_ptr_iface+0x1>
     f58:	65 e0       	ldi	r22, 0x05	; 5
     f5a:	ce 01       	movw	r24, r28
     f5c:	5e df       	rcall	.-324    	; 0xe1a <udc_next_desc_in_iface>
     f5e:	ec 01       	movw	r28, r24
     f60:	89 2b       	or	r24, r25
     f62:	21 f0       	breq	.+8      	; 0xf6c <udc_iface_disable+0x6a>
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <udd_ep_free>
     f6a:	f6 cf       	rjmp	.-20     	; 0xf58 <udc_iface_disable+0x56>
     f6c:	d7 01       	movw	r26, r14
     f6e:	12 96       	adiw	r26, 0x02	; 2
     f70:	ed 91       	ld	r30, X+
     f72:	fc 91       	ld	r31, X
     f74:	13 97       	sbiw	r26, 0x03	; 3
     f76:	19 95       	eicall
     f78:	81 2f       	mov	r24, r17
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	ff 90       	pop	r15
     f82:	ef 90       	pop	r14
     f84:	08 95       	ret

00000f86 <udc_iface_enable>:
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	18 2f       	mov	r17, r24
     f8e:	7f df       	rcall	.-258    	; 0xe8e <udc_update_iface_desc>
     f90:	88 23       	and	r24, r24
     f92:	39 f1       	breq	.+78     	; 0xfe2 <udc_iface_enable+0x5c>
     f94:	c0 91 dc 21 	lds	r28, 0x21DC	; 0x8021dc <udc_ptr_iface>
     f98:	d0 91 dd 21 	lds	r29, 0x21DD	; 0x8021dd <udc_ptr_iface+0x1>
     f9c:	65 e0       	ldi	r22, 0x05	; 5
     f9e:	ce 01       	movw	r24, r28
     fa0:	3c df       	rcall	.-392    	; 0xe1a <udc_next_desc_in_iface>
     fa2:	ec 01       	movw	r28, r24
     fa4:	89 2b       	or	r24, r25
     fa6:	41 f0       	breq	.+16     	; 0xfb8 <udc_iface_enable+0x32>
     fa8:	4c 81       	ldd	r20, Y+4	; 0x04
     faa:	5d 81       	ldd	r21, Y+5	; 0x05
     fac:	6b 81       	ldd	r22, Y+3	; 0x03
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	14 d7       	rcall	.+3624   	; 0x1dda <udd_ep_alloc>
     fb2:	81 11       	cpse	r24, r1
     fb4:	f3 cf       	rjmp	.-26     	; 0xf9c <udc_iface_enable+0x16>
     fb6:	15 c0       	rjmp	.+42     	; 0xfe2 <udc_iface_enable+0x5c>
     fb8:	a0 91 de 21 	lds	r26, 0x21DE	; 0x8021de <udc_ptr_conf>
     fbc:	b0 91 df 21 	lds	r27, 0x21DF	; 0x8021df <udc_ptr_conf+0x1>
     fc0:	e1 2f       	mov	r30, r17
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	ee 0f       	add	r30, r30
     fc6:	ff 1f       	adc	r31, r31
     fc8:	12 96       	adiw	r26, 0x02	; 2
     fca:	8d 91       	ld	r24, X+
     fcc:	9c 91       	ld	r25, X
     fce:	13 97       	sbiw	r26, 0x03	; 3
     fd0:	e8 0f       	add	r30, r24
     fd2:	f9 1f       	adc	r31, r25
     fd4:	01 90       	ld	r0, Z+
     fd6:	f0 81       	ld	r31, Z
     fd8:	e0 2d       	mov	r30, r0
     fda:	01 90       	ld	r0, Z+
     fdc:	f0 81       	ld	r31, Z
     fde:	e0 2d       	mov	r30, r0
     fe0:	19 95       	eicall
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	08 95       	ret

00000fea <udc_get_interface_desc>:
     fea:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <udc_ptr_iface>
     fee:	90 91 dd 21 	lds	r25, 0x21DD	; 0x8021dd <udc_ptr_iface+0x1>
     ff2:	08 95       	ret

00000ff4 <udc_start>:
     ff4:	55 c6       	rjmp	.+3242   	; 0x1ca0 <udd_enable>
     ff6:	08 95       	ret

00000ff8 <udc_reset>:
     ff8:	cf 93       	push	r28
     ffa:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <udc_num_configuration>
     ffe:	88 23       	and	r24, r24
    1000:	c1 f0       	breq	.+48     	; 0x1032 <__EEPROM_REGION_LENGTH__+0x32>
    1002:	e0 91 de 21 	lds	r30, 0x21DE	; 0x8021de <udc_ptr_conf>
    1006:	f0 91 df 21 	lds	r31, 0x21DF	; 0x8021df <udc_ptr_conf+0x1>
    100a:	01 90       	ld	r0, Z+
    100c:	f0 81       	ld	r31, Z
    100e:	e0 2d       	mov	r30, r0
    1010:	84 81       	ldd	r24, Z+4	; 0x04
    1012:	88 23       	and	r24, r24
    1014:	71 f0       	breq	.+28     	; 0x1032 <__EEPROM_REGION_LENGTH__+0x32>
    1016:	c0 e0       	ldi	r28, 0x00	; 0
    1018:	8c 2f       	mov	r24, r28
    101a:	73 df       	rcall	.-282    	; 0xf02 <udc_iface_disable>
    101c:	cf 5f       	subi	r28, 0xFF	; 255
    101e:	e0 91 de 21 	lds	r30, 0x21DE	; 0x8021de <udc_ptr_conf>
    1022:	f0 91 df 21 	lds	r31, 0x21DF	; 0x8021df <udc_ptr_conf+0x1>
    1026:	01 90       	ld	r0, Z+
    1028:	f0 81       	ld	r31, Z
    102a:	e0 2d       	mov	r30, r0
    102c:	84 81       	ldd	r24, Z+4	; 0x04
    102e:	c8 17       	cp	r28, r24
    1030:	98 f3       	brcs	.-26     	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    1032:	10 92 e0 21 	sts	0x21E0, r1	; 0x8021e0 <udc_num_configuration>
    1036:	80 91 e4 21 	lds	r24, 0x21E4	; 0x8021e4 <udc_device_status>
    103a:	81 fd       	sbrc	r24, 1
    103c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <main_remotewakeup_disable>
    1040:	10 92 e4 21 	sts	0x21E4, r1	; 0x8021e4 <udc_device_status>
    1044:	10 92 e5 21 	sts	0x21E5, r1	; 0x8021e5 <udc_device_status+0x1>
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    104c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    104e:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <udc_num_configuration>
    1052:	88 23       	and	r24, r24
    1054:	49 f1       	breq	.+82     	; 0x10a8 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1056:	a0 91 de 21 	lds	r26, 0x21DE	; 0x8021de <udc_ptr_conf>
    105a:	b0 91 df 21 	lds	r27, 0x21DF	; 0x8021df <udc_ptr_conf+0x1>
    105e:	ed 91       	ld	r30, X+
    1060:	fc 91       	ld	r31, X
    1062:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1064:	84 81       	ldd	r24, Z+4	; 0x04
    1066:	88 23       	and	r24, r24
    1068:	f9 f0       	breq	.+62     	; 0x10a8 <udc_sof_notify+0x5c>
    106a:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    106c:	ec 2f       	mov	r30, r28
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	ee 0f       	add	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	12 96       	adiw	r26, 0x02	; 2
    1076:	8d 91       	ld	r24, X+
    1078:	9c 91       	ld	r25, X
    107a:	13 97       	sbiw	r26, 0x03	; 3
    107c:	e8 0f       	add	r30, r24
    107e:	f9 1f       	adc	r31, r25
    1080:	01 90       	ld	r0, Z+
    1082:	f0 81       	ld	r31, Z
    1084:	e0 2d       	mov	r30, r0
    1086:	00 84       	ldd	r0, Z+8	; 0x08
    1088:	f1 85       	ldd	r31, Z+9	; 0x09
    108a:	e0 2d       	mov	r30, r0
    108c:	30 97       	sbiw	r30, 0x00	; 0
    108e:	09 f0       	breq	.+2      	; 0x1092 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1090:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1092:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1094:	a0 91 de 21 	lds	r26, 0x21DE	; 0x8021de <udc_ptr_conf>
    1098:	b0 91 df 21 	lds	r27, 0x21DF	; 0x8021df <udc_ptr_conf+0x1>
    109c:	ed 91       	ld	r30, X+
    109e:	fc 91       	ld	r31, X
    10a0:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    10a2:	84 81       	ldd	r24, Z+4	; 0x04
    10a4:	c8 17       	cp	r28, r24
    10a6:	10 f3       	brcs	.-60     	; 0x106c <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    10b4:	e1 eb       	ldi	r30, 0xB1	; 177
    10b6:	f3 e2       	ldi	r31, 0x23	; 35
    10b8:	12 86       	std	Z+10, r1	; 0x0a
    10ba:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    10bc:	14 86       	std	Z+12, r1	; 0x0c
    10be:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    10c0:	16 86       	std	Z+14, r1	; 0x0e
    10c2:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    10c4:	80 81       	ld	r24, Z
    10c6:	88 23       	and	r24, r24
    10c8:	0c f0       	brlt	.+2      	; 0x10cc <udc_process_setup+0x20>
    10ca:	7e c2       	rjmp	.+1276   	; 0x15c8 <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    10cc:	20 91 b7 23 	lds	r18, 0x23B7	; 0x8023b7 <udd_g_ctrlreq+0x6>
    10d0:	30 91 b8 23 	lds	r19, 0x23B8	; 0x8023b8 <udd_g_ctrlreq+0x7>
    10d4:	21 15       	cp	r18, r1
    10d6:	31 05       	cpc	r19, r1
    10d8:	09 f0       	breq	.+2      	; 0x10dc <udc_process_setup+0x30>
    10da:	7b c2       	rjmp	.+1270   	; 0x15d2 <udc_process_setup+0x526>
    10dc:	6d c2       	rjmp	.+1242   	; 0x15b8 <udc_process_setup+0x50c>
    10de:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <udc_process_setup+0x38>
    10e2:	a0 c0       	rjmp	.+320    	; 0x1224 <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    10e4:	90 91 b2 23 	lds	r25, 0x23B2	; 0x8023b2 <udd_g_ctrlreq+0x1>
    10e8:	96 30       	cpi	r25, 0x06	; 6
    10ea:	79 f0       	breq	.+30     	; 0x110a <udc_process_setup+0x5e>
    10ec:	98 30       	cpi	r25, 0x08	; 8
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <udc_process_setup+0x46>
    10f0:	8f c0       	rjmp	.+286    	; 0x1210 <udc_process_setup+0x164>
    10f2:	91 11       	cpse	r25, r1
    10f4:	97 c0       	rjmp	.+302    	; 0x1224 <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	09 f0       	breq	.+2      	; 0x10fe <udc_process_setup+0x52>
    10fc:	19 c2       	rjmp	.+1074   	; 0x1530 <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    10fe:	62 e0       	ldi	r22, 0x02	; 2
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	84 ee       	ldi	r24, 0xE4	; 228
    1104:	91 e2       	ldi	r25, 0x21	; 33
    1106:	62 d6       	rcall	.+3268   	; 0x1dcc <udd_set_setup_payload>
    1108:	69 c2       	rjmp	.+1234   	; 0x15dc <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    110a:	80 91 b3 23 	lds	r24, 0x23B3	; 0x8023b3 <udd_g_ctrlreq+0x2>
    110e:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1112:	29 2f       	mov	r18, r25
    1114:	33 27       	eor	r19, r19
    1116:	22 30       	cpi	r18, 0x02	; 2
    1118:	31 05       	cpc	r19, r1
    111a:	a9 f0       	breq	.+42     	; 0x1146 <udc_process_setup+0x9a>
    111c:	20 f4       	brcc	.+8      	; 0x1126 <udc_process_setup+0x7a>
    111e:	21 30       	cpi	r18, 0x01	; 1
    1120:	31 05       	cpc	r19, r1
    1122:	41 f0       	breq	.+16     	; 0x1134 <udc_process_setup+0x88>
    1124:	c7 c1       	rjmp	.+910    	; 0x14b4 <udc_process_setup+0x408>
    1126:	23 30       	cpi	r18, 0x03	; 3
    1128:	31 05       	cpc	r19, r1
    112a:	d9 f1       	breq	.+118    	; 0x11a2 <udc_process_setup+0xf6>
    112c:	2f 30       	cpi	r18, 0x0F	; 15
    112e:	31 05       	cpc	r19, r1
    1130:	51 f1       	breq	.+84     	; 0x1186 <udc_process_setup+0xda>
    1132:	c0 c1       	rjmp	.+896    	; 0x14b4 <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1134:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <udc_config>
    1138:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    113c:	dc 01       	movw	r26, r24
    113e:	6c 91       	ld	r22, X
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	44 d6       	rcall	.+3208   	; 0x1dcc <udd_set_setup_payload>
    1144:	56 c0       	rjmp	.+172    	; 0x11f2 <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1146:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    114a:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
    114e:	21 89       	ldd	r18, Z+17	; 0x11
    1150:	82 17       	cp	r24, r18
    1152:	08 f0       	brcs	.+2      	; 0x1156 <udc_process_setup+0xaa>
    1154:	ed c1       	rjmp	.+986    	; 0x1530 <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1156:	99 27       	eor	r25, r25
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    1164:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    1168:	e8 0f       	add	r30, r24
    116a:	f9 1f       	adc	r31, r25
    116c:	80 81       	ld	r24, Z
    116e:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1170:	fc 01       	movw	r30, r24
    1172:	62 81       	ldd	r22, Z+2	; 0x02
    1174:	73 81       	ldd	r23, Z+3	; 0x03
    1176:	2a d6       	rcall	.+3156   	; 0x1dcc <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1178:	e0 91 b9 23 	lds	r30, 0x23B9	; 0x8023b9 <udd_g_ctrlreq+0x8>
    117c:	f0 91 ba 23 	lds	r31, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x9>
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	81 83       	std	Z+1, r24	; 0x01
    1184:	36 c0       	rjmp	.+108    	; 0x11f2 <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1186:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <udc_config+0x4>
    118a:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <udc_config+0x5>
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	09 f4       	brne	.+2      	; 0x1194 <udc_process_setup+0xe8>
    1192:	ce c1       	rjmp	.+924    	; 0x1530 <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1194:	dc 01       	movw	r26, r24
    1196:	12 96       	adiw	r26, 0x02	; 2
    1198:	6d 91       	ld	r22, X+
    119a:	7c 91       	ld	r23, X
    119c:	13 97       	sbiw	r26, 0x03	; 3
    119e:	16 d6       	rcall	.+3116   	; 0x1dcc <udd_set_setup_payload>
    11a0:	28 c0       	rjmp	.+80     	; 0x11f2 <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    11a2:	99 27       	eor	r25, r25
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	91 05       	cpc	r25, r1
    11a8:	71 f0       	breq	.+28     	; 0x11c6 <udc_process_setup+0x11a>
    11aa:	38 f0       	brcs	.+14     	; 0x11ba <udc_process_setup+0x10e>
    11ac:	02 97       	sbiw	r24, 0x02	; 2
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <udc_process_setup+0x106>
    11b0:	8a c1       	rjmp	.+788    	; 0x14c6 <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    11b2:	e4 e5       	ldi	r30, 0x54	; 84
    11b4:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    11b6:	31 e2       	ldi	r19, 0x21	; 33
    11b8:	09 c0       	rjmp	.+18     	; 0x11cc <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    11ba:	64 e0       	ldi	r22, 0x04	; 4
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	80 e8       	ldi	r24, 0x80	; 128
    11c0:	91 e2       	ldi	r25, 0x21	; 33
    11c2:	04 d6       	rcall	.+3080   	; 0x1dcc <udd_set_setup_payload>
    11c4:	16 c0       	rjmp	.+44     	; 0x11f2 <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    11c6:	e6 e7       	ldi	r30, 0x76	; 118
    11c8:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    11ca:	39 e0       	ldi	r19, 0x09	; 9
    11cc:	a2 e1       	ldi	r26, 0x12	; 18
    11ce:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    11d0:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    11d2:	81 91       	ld	r24, Z+
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	8d 93       	st	X+, r24
    11d8:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    11da:	2f 5f       	subi	r18, 0xFF	; 255
    11dc:	23 17       	cp	r18, r19
    11de:	c8 f3       	brcs	.-14     	; 0x11d2 <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    11e0:	63 2f       	mov	r22, r19
    11e2:	66 0f       	add	r22, r22
    11e4:	6e 5f       	subi	r22, 0xFE	; 254
    11e6:	60 93 10 21 	sts	0x2110, r22	; 0x802110 <udc_string_desc>
		udd_set_setup_payload(
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	80 e1       	ldi	r24, 0x10	; 16
    11ee:	91 e2       	ldi	r25, 0x21	; 33
    11f0:	ed d5       	rcall	.+3034   	; 0x1dcc <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    11f2:	e1 eb       	ldi	r30, 0xB1	; 177
    11f4:	f3 e2       	ldi	r31, 0x23	; 35
    11f6:	86 81       	ldd	r24, Z+6	; 0x06
    11f8:	97 81       	ldd	r25, Z+7	; 0x07
    11fa:	22 85       	ldd	r18, Z+10	; 0x0a
    11fc:	33 85       	ldd	r19, Z+11	; 0x0b
    11fe:	82 17       	cp	r24, r18
    1200:	93 07       	cpc	r25, r19
    1202:	08 f0       	brcs	.+2      	; 0x1206 <udc_process_setup+0x15a>
    1204:	eb c1       	rjmp	.+982    	; 0x15dc <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1206:	80 93 bb 23 	sts	0x23BB, r24	; 0x8023bb <udd_g_ctrlreq+0xa>
    120a:	90 93 bc 23 	sts	0x23BC, r25	; 0x8023bc <udd_g_ctrlreq+0xb>
    120e:	e6 c1       	rjmp	.+972    	; 0x15dc <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1210:	21 30       	cpi	r18, 0x01	; 1
    1212:	31 05       	cpc	r19, r1
    1214:	09 f0       	breq	.+2      	; 0x1218 <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1216:	8c c1       	rjmp	.+792    	; 0x1530 <udc_process_setup+0x484>
    1218:	61 e0       	ldi	r22, 0x01	; 1
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	80 ee       	ldi	r24, 0xE0	; 224
    121e:	91 e2       	ldi	r25, 0x21	; 33
    1220:	d5 d5       	rcall	.+2986   	; 0x1dcc <udd_set_setup_payload>
    1222:	dc c1       	rjmp	.+952    	; 0x15dc <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	e1 f5       	brne	.+120    	; 0x12a0 <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1228:	90 91 b2 23 	lds	r25, 0x23B2	; 0x8023b2 <udd_g_ctrlreq+0x1>
    122c:	9a 30       	cpi	r25, 0x0A	; 10
    122e:	c1 f5       	brne	.+112    	; 0x12a0 <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1230:	21 30       	cpi	r18, 0x01	; 1
    1232:	31 05       	cpc	r19, r1
    1234:	09 f0       	breq	.+2      	; 0x1238 <udc_process_setup+0x18c>
    1236:	4c c1       	rjmp	.+664    	; 0x14d0 <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1238:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <udc_num_configuration>
    123c:	88 23       	and	r24, r24
    123e:	09 f4       	brne	.+2      	; 0x1242 <udc_process_setup+0x196>
    1240:	47 c1       	rjmp	.+654    	; 0x14d0 <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1242:	c0 91 b5 23 	lds	r28, 0x23B5	; 0x8023b5 <udd_g_ctrlreq+0x4>
    1246:	d0 91 b6 23 	lds	r29, 0x23B6	; 0x8023b6 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    124a:	00 91 de 21 	lds	r16, 0x21DE	; 0x8021de <udc_ptr_conf>
    124e:	10 91 df 21 	lds	r17, 0x21DF	; 0x8021df <udc_ptr_conf+0x1>
    1252:	d8 01       	movw	r26, r16
    1254:	ed 91       	ld	r30, X+
    1256:	fc 91       	ld	r31, X
    1258:	84 81       	ldd	r24, Z+4	; 0x04
    125a:	c8 17       	cp	r28, r24
    125c:	08 f0       	brcs	.+2      	; 0x1260 <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    125e:	38 c1       	rjmp	.+624    	; 0x14d0 <udc_process_setup+0x424>
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	8c 2f       	mov	r24, r28
    1264:	14 de       	rcall	.-984    	; 0xe8e <udc_update_iface_desc>
    1266:	88 23       	and	r24, r24
    1268:	09 f4       	brne	.+2      	; 0x126c <udc_process_setup+0x1c0>
    126a:	2d c1       	rjmp	.+602    	; 0x14c6 <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    126c:	ce 01       	movw	r24, r28
    126e:	99 27       	eor	r25, r25
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	d8 01       	movw	r26, r16
    1276:	12 96       	adiw	r26, 0x02	; 2
    1278:	ed 91       	ld	r30, X+
    127a:	fc 91       	ld	r31, X
    127c:	13 97       	sbiw	r26, 0x03	; 3
    127e:	e8 0f       	add	r30, r24
    1280:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1282:	01 90       	ld	r0, Z+
    1284:	f0 81       	ld	r31, Z
    1286:	e0 2d       	mov	r30, r0
    1288:	86 81       	ldd	r24, Z+6	; 0x06
    128a:	97 81       	ldd	r25, Z+7	; 0x07
    128c:	fc 01       	movw	r30, r24
    128e:	19 95       	eicall
    1290:	80 93 e2 21 	sts	0x21E2, r24	; 0x8021e2 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1294:	61 e0       	ldi	r22, 0x01	; 1
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	82 ee       	ldi	r24, 0xE2	; 226
    129a:	91 e2       	ldi	r25, 0x21	; 33
    129c:	97 d5       	rcall	.+2862   	; 0x1dcc <udd_set_setup_payload>
    129e:	9e c1       	rjmp	.+828    	; 0x15dc <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    12a0:	82 30       	cpi	r24, 0x02	; 2
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <udc_process_setup+0x1fa>
    12a4:	10 c1       	rjmp	.+544    	; 0x14c6 <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    12a6:	80 91 b2 23 	lds	r24, 0x23B2	; 0x8023b2 <udd_g_ctrlreq+0x1>
    12aa:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    12ac:	05 c1       	rjmp	.+522    	; 0x14b8 <udc_process_setup+0x40c>
    12ae:	22 30       	cpi	r18, 0x02	; 2
    12b0:	31 05       	cpc	r19, r1
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    12b4:	3d c1       	rjmp	.+634    	; 0x1530 <udc_process_setup+0x484>
    12b6:	80 91 b5 23 	lds	r24, 0x23B5	; 0x8023b5 <udd_g_ctrlreq+0x4>
    12ba:	17 d6       	rcall	.+3118   	; 0x1eea <udd_ep_is_halted>
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	80 93 da 21 	sts	0x21DA, r24	; 0x8021da <udc_ep_status.4572>
    12c2:	90 93 db 21 	sts	0x21DB, r25	; 0x8021db <udc_ep_status.4572+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    12c6:	62 e0       	ldi	r22, 0x02	; 2
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	8a ed       	ldi	r24, 0xDA	; 218
    12cc:	91 e2       	ldi	r25, 0x21	; 33
    12ce:	7e d5       	rcall	.+2812   	; 0x1dcc <udd_set_setup_payload>
    12d0:	85 c1       	rjmp	.+778    	; 0x15dc <udc_process_setup+0x530>
    12d2:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <udc_process_setup+0x22c>
    12d6:	9f c0       	rjmp	.+318    	; 0x1416 <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    12d8:	90 91 b2 23 	lds	r25, 0x23B2	; 0x8023b2 <udd_g_ctrlreq+0x1>
    12dc:	93 30       	cpi	r25, 0x03	; 3
    12de:	91 f1       	breq	.+100    	; 0x1344 <udc_process_setup+0x298>
    12e0:	18 f4       	brcc	.+6      	; 0x12e8 <udc_process_setup+0x23c>
    12e2:	91 30       	cpi	r25, 0x01	; 1
    12e4:	a9 f0       	breq	.+42     	; 0x1310 <udc_process_setup+0x264>
    12e6:	97 c0       	rjmp	.+302    	; 0x1416 <udc_process_setup+0x36a>
    12e8:	95 30       	cpi	r25, 0x05	; 5
    12ea:	21 f0       	breq	.+8      	; 0x12f4 <udc_process_setup+0x248>
    12ec:	99 30       	cpi	r25, 0x09	; 9
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <udc_process_setup+0x246>
    12f0:	43 c0       	rjmp	.+134    	; 0x1378 <udc_process_setup+0x2cc>
    12f2:	91 c0       	rjmp	.+290    	; 0x1416 <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    12f4:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udd_g_ctrlreq+0x6>
    12f8:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <udd_g_ctrlreq+0x7>
    12fc:	89 2b       	or	r24, r25
    12fe:	09 f0       	breq	.+2      	; 0x1302 <udc_process_setup+0x256>
    1300:	17 c1       	rjmp	.+558    	; 0x1530 <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1302:	82 e4       	ldi	r24, 0x42	; 66
    1304:	97 e0       	ldi	r25, 0x07	; 7
    1306:	80 93 bd 23 	sts	0x23BD, r24	; 0x8023bd <udd_g_ctrlreq+0xc>
    130a:	90 93 be 23 	sts	0x23BE, r25	; 0x8023be <udd_g_ctrlreq+0xd>
    130e:	66 c1       	rjmp	.+716    	; 0x15dc <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1310:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udd_g_ctrlreq+0x6>
    1314:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <udd_g_ctrlreq+0x7>
    1318:	89 2b       	or	r24, r25
    131a:	09 f0       	breq	.+2      	; 0x131e <udc_process_setup+0x272>
    131c:	09 c1       	rjmp	.+530    	; 0x1530 <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    131e:	80 91 b3 23 	lds	r24, 0x23B3	; 0x8023b3 <udd_g_ctrlreq+0x2>
    1322:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <udd_g_ctrlreq+0x3>
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	09 f0       	breq	.+2      	; 0x132c <udc_process_setup+0x280>
    132a:	02 c1       	rjmp	.+516    	; 0x1530 <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    132c:	80 91 e4 21 	lds	r24, 0x21E4	; 0x8021e4 <udc_device_status>
    1330:	90 91 e5 21 	lds	r25, 0x21E5	; 0x8021e5 <udc_device_status+0x1>
    1334:	8d 7f       	andi	r24, 0xFD	; 253
    1336:	80 93 e4 21 	sts	0x21E4, r24	; 0x8021e4 <udc_device_status>
    133a:	90 93 e5 21 	sts	0x21E5, r25	; 0x8021e5 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    133e:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <main_remotewakeup_disable>
    1342:	4c c1       	rjmp	.+664    	; 0x15dc <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1344:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udd_g_ctrlreq+0x6>
    1348:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <udd_g_ctrlreq+0x7>
    134c:	89 2b       	or	r24, r25
    134e:	09 f0       	breq	.+2      	; 0x1352 <udc_process_setup+0x2a6>
    1350:	ef c0       	rjmp	.+478    	; 0x1530 <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1352:	80 91 b3 23 	lds	r24, 0x23B3	; 0x8023b3 <udd_g_ctrlreq+0x2>
    1356:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <udd_g_ctrlreq+0x3>
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	09 f0       	breq	.+2      	; 0x1360 <udc_process_setup+0x2b4>
    135e:	ae c0       	rjmp	.+348    	; 0x14bc <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    1360:	80 91 e4 21 	lds	r24, 0x21E4	; 0x8021e4 <udc_device_status>
    1364:	90 91 e5 21 	lds	r25, 0x21E5	; 0x8021e5 <udc_device_status+0x1>
    1368:	82 60       	ori	r24, 0x02	; 2
    136a:	80 93 e4 21 	sts	0x21E4, r24	; 0x8021e4 <udc_device_status>
    136e:	90 93 e5 21 	sts	0x21E5, r25	; 0x8021e5 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    1372:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1376:	32 c1       	rjmp	.+612    	; 0x15dc <udc_process_setup+0x530>
    1378:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udd_g_ctrlreq+0x6>
    137c:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <udd_g_ctrlreq+0x7>
    1380:	89 2b       	or	r24, r25
    1382:	09 f0       	breq	.+2      	; 0x1386 <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1384:	d5 c0       	rjmp	.+426    	; 0x1530 <udc_process_setup+0x484>
    1386:	1a d5       	rcall	.+2612   	; 0x1dbc <udd_getaddress>
    1388:	88 23       	and	r24, r24
    138a:	09 f4       	brne	.+2      	; 0x138e <udc_process_setup+0x2e2>
    138c:	9c c0       	rjmp	.+312    	; 0x14c6 <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    138e:	20 91 b3 23 	lds	r18, 0x23B3	; 0x8023b3 <udd_g_ctrlreq+0x2>
    1392:	30 91 b4 23 	lds	r19, 0x23B4	; 0x8023b4 <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    1396:	33 27       	eor	r19, r19
    1398:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    139c:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    13a0:	81 89       	ldd	r24, Z+17	; 0x11
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	82 17       	cp	r24, r18
    13a6:	93 07       	cpc	r25, r19
    13a8:	08 f4       	brcc	.+2      	; 0x13ac <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    13aa:	8d c0       	rjmp	.+282    	; 0x14c6 <udc_process_setup+0x41a>
    13ac:	25 de       	rcall	.-950    	; 0xff8 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    13ae:	80 91 b3 23 	lds	r24, 0x23B3	; 0x8023b3 <udd_g_ctrlreq+0x2>
    13b2:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <udd_g_ctrlreq+0x3>
    13b6:	80 93 e0 21 	sts	0x21E0, r24	; 0x8021e0 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    13ba:	88 23       	and	r24, r24
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <udc_process_setup+0x314>
    13be:	0e c1       	rjmp	.+540    	; 0x15dc <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    13c0:	99 27       	eor	r25, r25
    13c2:	81 50       	subi	r24, 0x01	; 1
    13c4:	90 4c       	sbci	r25, 0xC0	; 192
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    13d2:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    13d6:	e8 0f       	add	r30, r24
    13d8:	f9 1f       	adc	r31, r25
    13da:	e0 93 de 21 	sts	0x21DE, r30	; 0x8021de <udc_ptr_conf>
    13de:	f0 93 df 21 	sts	0x21DF, r31	; 0x8021df <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    13e2:	01 90       	ld	r0, Z+
    13e4:	f0 81       	ld	r31, Z
    13e6:	e0 2d       	mov	r30, r0
    13e8:	84 81       	ldd	r24, Z+4	; 0x04
    13ea:	88 23       	and	r24, r24
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <udc_process_setup+0x344>
    13ee:	f6 c0       	rjmp	.+492    	; 0x15dc <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    13f0:	c0 e0       	ldi	r28, 0x00	; 0
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	8c 2f       	mov	r24, r28
    13f6:	c7 dd       	rcall	.-1138   	; 0xf86 <udc_iface_enable>
    13f8:	88 23       	and	r24, r24
    13fa:	09 f4       	brne	.+2      	; 0x13fe <udc_process_setup+0x352>
    13fc:	64 c0       	rjmp	.+200    	; 0x14c6 <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    13fe:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1400:	e0 91 de 21 	lds	r30, 0x21DE	; 0x8021de <udc_ptr_conf>
    1404:	f0 91 df 21 	lds	r31, 0x21DF	; 0x8021df <udc_ptr_conf+0x1>
    1408:	01 90       	ld	r0, Z+
    140a:	f0 81       	ld	r31, Z
    140c:	e0 2d       	mov	r30, r0
    140e:	84 81       	ldd	r24, Z+4	; 0x04
    1410:	c8 17       	cp	r28, r24
    1412:	78 f3       	brcs	.-34     	; 0x13f2 <udc_process_setup+0x346>
    1414:	e3 c0       	rjmp	.+454    	; 0x15dc <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	e9 f4       	brne	.+58     	; 0x1454 <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    141a:	90 91 b2 23 	lds	r25, 0x23B2	; 0x8023b2 <udd_g_ctrlreq+0x1>
    141e:	9b 30       	cpi	r25, 0x0B	; 11
    1420:	c9 f4       	brne	.+50     	; 0x1454 <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1422:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udd_g_ctrlreq+0x6>
    1426:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <udd_g_ctrlreq+0x7>
    142a:	89 2b       	or	r24, r25
    142c:	09 f0       	breq	.+2      	; 0x1430 <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    142e:	50 c0       	rjmp	.+160    	; 0x14d0 <udc_process_setup+0x424>
    1430:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <udc_num_configuration>
    1434:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1436:	09 f4       	brne	.+2      	; 0x143a <udc_process_setup+0x38e>
    1438:	4b c0       	rjmp	.+150    	; 0x14d0 <udc_process_setup+0x424>
    143a:	e1 eb       	ldi	r30, 0xB1	; 177
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    143c:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    143e:	c4 81       	ldd	r28, Z+4	; 0x04
    1440:	d2 81       	ldd	r29, Z+2	; 0x02
    1442:	8c 2f       	mov	r24, r28
    1444:	5e dd       	rcall	.-1348   	; 0xf02 <udc_iface_disable>
    1446:	88 23       	and	r24, r24
    1448:	09 f4       	brne	.+2      	; 0x144c <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    144a:	3d c0       	rjmp	.+122    	; 0x14c6 <udc_process_setup+0x41a>
    144c:	6d 2f       	mov	r22, r29
    144e:	8c 2f       	mov	r24, r28
    1450:	9a dd       	rcall	.-1228   	; 0xf86 <udc_iface_enable>
    1452:	37 c0       	rjmp	.+110    	; 0x14c2 <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	b9 f5       	brne	.+110    	; 0x14c6 <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1458:	80 91 b2 23 	lds	r24, 0x23B2	; 0x8023b2 <udd_g_ctrlreq+0x1>
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	19 f0       	breq	.+6      	; 0x1466 <udc_process_setup+0x3ba>
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	99 f0       	breq	.+38     	; 0x148a <udc_process_setup+0x3de>
    1464:	2d c0       	rjmp	.+90     	; 0x14c0 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1466:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udd_g_ctrlreq+0x6>
    146a:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <udd_g_ctrlreq+0x7>
    146e:	89 2b       	or	r24, r25
    1470:	09 f0       	breq	.+2      	; 0x1474 <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1472:	5e c0       	rjmp	.+188    	; 0x1530 <udc_process_setup+0x484>
    1474:	80 91 b3 23 	lds	r24, 0x23B3	; 0x8023b3 <udd_g_ctrlreq+0x2>
    1478:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <udd_g_ctrlreq+0x3>
    147c:	89 2b       	or	r24, r25
    147e:	09 f0       	breq	.+2      	; 0x1482 <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1480:	57 c0       	rjmp	.+174    	; 0x1530 <udc_process_setup+0x484>
    1482:	80 91 b5 23 	lds	r24, 0x23B5	; 0x8023b5 <udd_g_ctrlreq+0x4>
    1486:	4c d5       	rcall	.+2712   	; 0x1f20 <udd_ep_clear_halt>
    1488:	1c c0       	rjmp	.+56     	; 0x14c2 <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    148a:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udd_g_ctrlreq+0x6>
    148e:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <udd_g_ctrlreq+0x7>
    1492:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1494:	09 f0       	breq	.+2      	; 0x1498 <udc_process_setup+0x3ec>
    1496:	4c c0       	rjmp	.+152    	; 0x1530 <udc_process_setup+0x484>
    1498:	80 91 b3 23 	lds	r24, 0x23B3	; 0x8023b3 <udd_g_ctrlreq+0x2>
    149c:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <udd_g_ctrlreq+0x3>
    14a0:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <udc_process_setup+0x3fa>
    14a4:	45 c0       	rjmp	.+138    	; 0x1530 <udc_process_setup+0x484>
    14a6:	c1 eb       	ldi	r28, 0xB1	; 177
    14a8:	d3 e2       	ldi	r29, 0x23	; 35
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    14ac:	3a d6       	rcall	.+3188   	; 0x2122 <udd_ep_abort>
    14ae:	8c 81       	ldd	r24, Y+4	; 0x04
    14b0:	a3 d6       	rcall	.+3398   	; 0x21f8 <udd_ep_set_halt>
    14b2:	07 c0       	rjmp	.+14     	; 0x14c2 <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	05 c0       	rjmp	.+10     	; 0x14c2 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	03 c0       	rjmp	.+6      	; 0x14c2 <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    14c0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    14c2:	81 11       	cpse	r24, r1
    14c4:	8c c0       	rjmp	.+280    	; 0x15de <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    14c6:	80 91 b1 23 	lds	r24, 0x23B1	; 0x8023b1 <udd_g_ctrlreq>
    14ca:	8f 71       	andi	r24, 0x1F	; 31
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	81 f5       	brne	.+96     	; 0x1530 <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    14d0:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <udc_num_configuration>
    14d4:	88 23       	and	r24, r24
    14d6:	09 f4       	brne	.+2      	; 0x14da <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    14d8:	71 c0       	rjmp	.+226    	; 0x15bc <udc_process_setup+0x510>
    14da:	00 91 b5 23 	lds	r16, 0x23B5	; 0x8023b5 <udd_g_ctrlreq+0x4>
    14de:	10 91 b6 23 	lds	r17, 0x23B6	; 0x8023b6 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    14e2:	c0 91 de 21 	lds	r28, 0x21DE	; 0x8021de <udc_ptr_conf>
    14e6:	d0 91 df 21 	lds	r29, 0x21DF	; 0x8021df <udc_ptr_conf+0x1>
    14ea:	e8 81       	ld	r30, Y
    14ec:	f9 81       	ldd	r31, Y+1	; 0x01
    14ee:	84 81       	ldd	r24, Z+4	; 0x04
    14f0:	08 17       	cp	r16, r24
    14f2:	08 f0       	brcs	.+2      	; 0x14f6 <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    14f4:	65 c0       	rjmp	.+202    	; 0x15c0 <udc_process_setup+0x514>
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	80 2f       	mov	r24, r16
    14fa:	c9 dc       	rcall	.-1646   	; 0xe8e <udc_update_iface_desc>
    14fc:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    14fe:	c1 f0       	breq	.+48     	; 0x1530 <udc_process_setup+0x484>
    1500:	f8 01       	movw	r30, r16
    1502:	ff 27       	eor	r31, r31
    1504:	cf 01       	movw	r24, r30
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	ea 81       	ldd	r30, Y+2	; 0x02
    150c:	fb 81       	ldd	r31, Y+3	; 0x03
    150e:	e8 0f       	add	r30, r24
    1510:	f9 1f       	adc	r31, r25
    1512:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1514:	d1 81       	ldd	r29, Z+1	; 0x01
    1516:	ee 81       	ldd	r30, Y+6	; 0x06
    1518:	ff 81       	ldd	r31, Y+7	; 0x07
    151a:	19 95       	eicall
    151c:	68 2f       	mov	r22, r24
    151e:	80 2f       	mov	r24, r16
    1520:	b6 dc       	rcall	.-1684   	; 0xe8e <udc_update_iface_desc>
    1522:	88 23       	and	r24, r24
    1524:	29 f0       	breq	.+10     	; 0x1530 <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1526:	ec 81       	ldd	r30, Y+4	; 0x04
    1528:	fd 81       	ldd	r31, Y+5	; 0x05
    152a:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    152c:	81 11       	cpse	r24, r1
    152e:	57 c0       	rjmp	.+174    	; 0x15de <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1530:	80 91 b1 23 	lds	r24, 0x23B1	; 0x8023b1 <udd_g_ctrlreq>
    1534:	8f 71       	andi	r24, 0x1F	; 31
    1536:	82 30       	cpi	r24, 0x02	; 2
    1538:	09 f0       	breq	.+2      	; 0x153c <udc_process_setup+0x490>
    153a:	44 c0       	rjmp	.+136    	; 0x15c4 <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    153c:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <udc_num_configuration>
    1540:	88 23       	and	r24, r24
    1542:	b1 f1       	breq	.+108    	; 0x15b0 <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1544:	a0 91 de 21 	lds	r26, 0x21DE	; 0x8021de <udc_ptr_conf>
    1548:	b0 91 df 21 	lds	r27, 0x21DF	; 0x8021df <udc_ptr_conf+0x1>
    154c:	ed 91       	ld	r30, X+
    154e:	fc 91       	ld	r31, X
    1550:	11 97       	sbiw	r26, 0x01	; 1
    1552:	84 81       	ldd	r24, Z+4	; 0x04
    1554:	88 23       	and	r24, r24
    1556:	71 f1       	breq	.+92     	; 0x15b4 <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1558:	c0 e0       	ldi	r28, 0x00	; 0
    155a:	ec 2f       	mov	r30, r28
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	ee 0f       	add	r30, r30
    1560:	ff 1f       	adc	r31, r31
    1562:	12 96       	adiw	r26, 0x02	; 2
    1564:	8d 91       	ld	r24, X+
    1566:	9c 91       	ld	r25, X
    1568:	13 97       	sbiw	r26, 0x03	; 3
    156a:	e8 0f       	add	r30, r24
    156c:	f9 1f       	adc	r31, r25
    156e:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1570:	11 81       	ldd	r17, Z+1	; 0x01
    1572:	d8 01       	movw	r26, r16
    1574:	16 96       	adiw	r26, 0x06	; 6
    1576:	ed 91       	ld	r30, X+
    1578:	fc 91       	ld	r31, X
    157a:	17 97       	sbiw	r26, 0x07	; 7
    157c:	19 95       	eicall
    157e:	68 2f       	mov	r22, r24
    1580:	8c 2f       	mov	r24, r28
    1582:	85 dc       	rcall	.-1782   	; 0xe8e <udc_update_iface_desc>
    1584:	88 23       	and	r24, r24
    1586:	59 f1       	breq	.+86     	; 0x15de <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1588:	d8 01       	movw	r26, r16
    158a:	14 96       	adiw	r26, 0x04	; 4
    158c:	ed 91       	ld	r30, X+
    158e:	fc 91       	ld	r31, X
    1590:	15 97       	sbiw	r26, 0x05	; 5
    1592:	19 95       	eicall
    1594:	81 11       	cpse	r24, r1
    1596:	23 c0       	rjmp	.+70     	; 0x15de <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1598:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    159a:	a0 91 de 21 	lds	r26, 0x21DE	; 0x8021de <udc_ptr_conf>
    159e:	b0 91 df 21 	lds	r27, 0x21DF	; 0x8021df <udc_ptr_conf+0x1>
    15a2:	ed 91       	ld	r30, X+
    15a4:	fc 91       	ld	r31, X
    15a6:	11 97       	sbiw	r26, 0x01	; 1
    15a8:	94 81       	ldd	r25, Z+4	; 0x04
    15aa:	c9 17       	cp	r28, r25
    15ac:	b0 f2       	brcs	.-84     	; 0x155a <udc_process_setup+0x4ae>
    15ae:	17 c0       	rjmp	.+46     	; 0x15de <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	15 c0       	rjmp	.+42     	; 0x15de <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	13 c0       	rjmp	.+38     	; 0x15de <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	11 c0       	rjmp	.+34     	; 0x15de <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	0f c0       	rjmp	.+30     	; 0x15de <udc_process_setup+0x532>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	0d c0       	rjmp	.+26     	; 0x15de <udc_process_setup+0x532>
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	0b c0       	rjmp	.+22     	; 0x15de <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    15c8:	98 2f       	mov	r25, r24
    15ca:	90 76       	andi	r25, 0x60	; 96
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <udc_process_setup+0x524>
    15ce:	7b cf       	rjmp	.-266    	; 0x14c6 <udc_process_setup+0x41a>
    15d0:	80 ce       	rjmp	.-768    	; 0x12d2 <udc_process_setup+0x226>
    15d2:	98 2f       	mov	r25, r24
    15d4:	90 76       	andi	r25, 0x60	; 96
    15d6:	09 f0       	breq	.+2      	; 0x15da <udc_process_setup+0x52e>
    15d8:	76 cf       	rjmp	.-276    	; 0x14c6 <udc_process_setup+0x41a>
    15da:	81 cd       	rjmp	.-1278   	; 0x10de <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	08 95       	ret

000015e8 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    15e8:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    15ec:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    15ee:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    15f0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    15f4:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    15f6:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    15fa:	08 95       	ret

000015fc <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    15fc:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    15fe:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1600:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1602:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1604:	60 83       	st	Z, r22
	ret                             // Return to caller
    1606:	08 95       	ret

00001608 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	1f 92       	push	r1
    160e:	1f 92       	push	r1
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	81 11       	cpse	r24, r1
    1616:	26 c0       	rjmp	.+76     	; 0x1664 <udd_sleep_mode+0x5c>
    1618:	90 91 a4 23 	lds	r25, 0x23A4	; 0x8023a4 <udd_b_idle>
    161c:	99 23       	and	r25, r25
    161e:	f9 f0       	breq	.+62     	; 0x165e <udd_sleep_mode+0x56>
    1620:	90 91 ac 23 	lds	r25, 0x23AC	; 0x8023ac <sleepmgr_locks+0x1>
    1624:	91 11       	cpse	r25, r1
    1626:	01 c0       	rjmp	.+2      	; 0x162a <udd_sleep_mode+0x22>
    1628:	ff cf       	rjmp	.-2      	; 0x1628 <udd_sleep_mode+0x20>
    162a:	9f b7       	in	r25, 0x3f	; 63
    162c:	9a 83       	std	Y+2, r25	; 0x02
    162e:	f8 94       	cli
    1630:	2a 81       	ldd	r18, Y+2	; 0x02
    1632:	eb ea       	ldi	r30, 0xAB	; 171
    1634:	f3 e2       	ldi	r31, 0x23	; 35
    1636:	91 81       	ldd	r25, Z+1	; 0x01
    1638:	91 50       	subi	r25, 0x01	; 1
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	2f bf       	out	0x3f, r18	; 63
    163e:	0f c0       	rjmp	.+30     	; 0x165e <udd_sleep_mode+0x56>
    1640:	90 91 ac 23 	lds	r25, 0x23AC	; 0x8023ac <sleepmgr_locks+0x1>
    1644:	9f 3f       	cpi	r25, 0xFF	; 255
    1646:	09 f4       	brne	.+2      	; 0x164a <udd_sleep_mode+0x42>
    1648:	ff cf       	rjmp	.-2      	; 0x1648 <udd_sleep_mode+0x40>
    164a:	9f b7       	in	r25, 0x3f	; 63
    164c:	99 83       	std	Y+1, r25	; 0x01
    164e:	f8 94       	cli
    1650:	29 81       	ldd	r18, Y+1	; 0x01
    1652:	eb ea       	ldi	r30, 0xAB	; 171
    1654:	f3 e2       	ldi	r31, 0x23	; 35
    1656:	91 81       	ldd	r25, Z+1	; 0x01
    1658:	9f 5f       	subi	r25, 0xFF	; 255
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	2f bf       	out	0x3f, r18	; 63
    165e:	80 93 a4 23 	sts	0x23A4, r24	; 0x8023a4 <udd_b_idle>
    1662:	05 c0       	rjmp	.+10     	; 0x166e <udd_sleep_mode+0x66>
    1664:	90 91 a4 23 	lds	r25, 0x23A4	; 0x8023a4 <udd_b_idle>
    1668:	99 23       	and	r25, r25
    166a:	51 f3       	breq	.-44     	; 0x1640 <udd_sleep_mode+0x38>
    166c:	f8 cf       	rjmp	.-16     	; 0x165e <udd_sleep_mode+0x56>
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <udd_ctrl_init>:
    1678:	0f 93       	push	r16
    167a:	e8 ec       	ldi	r30, 0xC8	; 200
    167c:	f4 e0       	ldi	r31, 0x04	; 4
    167e:	80 81       	ld	r24, Z
    1680:	8f 7d       	andi	r24, 0xDF	; 223
    1682:	80 83       	st	Z, r24
    1684:	80 81       	ld	r24, Z
    1686:	8f 7d       	andi	r24, 0xDF	; 223
    1688:	80 83       	st	Z, r24
    168a:	e8 e5       	ldi	r30, 0x58	; 88
    168c:	f3 e2       	ldi	r31, 0x23	; 35
    168e:	02 e0       	ldi	r16, 0x02	; 2
    1690:	05 93       	las	Z, r16
    1692:	10 92 5a 23 	sts	0x235A, r1	; 0x80235a <udd_sram+0x1e>
    1696:	10 92 5b 23 	sts	0x235B, r1	; 0x80235b <udd_sram+0x1f>
    169a:	00 e2       	ldi	r16, 0x20	; 32
    169c:	06 93       	lac	Z, r16
    169e:	00 e4       	ldi	r16, 0x40	; 64
    16a0:	06 93       	lac	Z, r16
    16a2:	e0 e5       	ldi	r30, 0x50	; 80
    16a4:	f3 e2       	ldi	r31, 0x23	; 35
    16a6:	00 e4       	ldi	r16, 0x40	; 64
    16a8:	06 93       	lac	Z, r16
    16aa:	e1 eb       	ldi	r30, 0xB1	; 177
    16ac:	f3 e2       	ldi	r31, 0x23	; 35
    16ae:	14 86       	std	Z+12, r1	; 0x0c
    16b0:	15 86       	std	Z+13, r1	; 0x0d
    16b2:	16 86       	std	Z+14, r1	; 0x0e
    16b4:	17 86       	std	Z+15, r1	; 0x0f
    16b6:	12 86       	std	Z+10, r1	; 0x0a
    16b8:	13 86       	std	Z+11, r1	; 0x0b
    16ba:	10 92 3b 23 	sts	0x233B, r1	; 0x80233b <udd_ep_control_state>
    16be:	0f 91       	pop	r16
    16c0:	08 95       	ret

000016c2 <udd_ctrl_stall_data>:
    16c2:	0f 93       	push	r16
    16c4:	85 e0       	ldi	r24, 0x05	; 5
    16c6:	80 93 3b 23 	sts	0x233B, r24	; 0x80233b <udd_ep_control_state>
    16ca:	e9 e5       	ldi	r30, 0x59	; 89
    16cc:	f3 e2       	ldi	r31, 0x23	; 35
    16ce:	04 e0       	ldi	r16, 0x04	; 4
    16d0:	05 93       	las	Z, r16
    16d2:	e1 e5       	ldi	r30, 0x51	; 81
    16d4:	f3 e2       	ldi	r31, 0x23	; 35
    16d6:	04 e0       	ldi	r16, 0x04	; 4
    16d8:	05 93       	las	Z, r16
    16da:	0f 91       	pop	r16
    16dc:	08 95       	ret

000016de <udd_ctrl_send_zlp_in>:
    16de:	0f 93       	push	r16
    16e0:	83 e0       	ldi	r24, 0x03	; 3
    16e2:	80 93 3b 23 	sts	0x233B, r24	; 0x80233b <udd_ep_control_state>
    16e6:	10 92 5a 23 	sts	0x235A, r1	; 0x80235a <udd_sram+0x1e>
    16ea:	10 92 5b 23 	sts	0x235B, r1	; 0x80235b <udd_sram+0x1f>
    16ee:	e8 e5       	ldi	r30, 0x58	; 88
    16f0:	f3 e2       	ldi	r31, 0x23	; 35
    16f2:	02 e0       	ldi	r16, 0x02	; 2
    16f4:	06 93       	lac	Z, r16
    16f6:	0f 91       	pop	r16
    16f8:	08 95       	ret

000016fa <udd_ctrl_endofrequest>:
    16fa:	e0 91 bd 23 	lds	r30, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0xc>
    16fe:	f0 91 be 23 	lds	r31, 0x23BE	; 0x8023be <udd_g_ctrlreq+0xd>
    1702:	30 97       	sbiw	r30, 0x00	; 0
    1704:	09 f0       	breq	.+2      	; 0x1708 <udd_ctrl_endofrequest+0xe>
    1706:	19 95       	eicall
    1708:	08 95       	ret

0000170a <udd_ctrl_in_sent>:
    170a:	0f 93       	push	r16
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	80 91 3b 23 	lds	r24, 0x233B	; 0x80233b <udd_ep_control_state>
    1714:	83 30       	cpi	r24, 0x03	; 3
    1716:	19 f4       	brne	.+6      	; 0x171e <udd_ctrl_in_sent+0x14>
    1718:	f0 df       	rcall	.-32     	; 0x16fa <udd_ctrl_endofrequest>
    171a:	ae df       	rcall	.-164    	; 0x1678 <udd_ctrl_init>
    171c:	5e c0       	rjmp	.+188    	; 0x17da <udd_ctrl_in_sent+0xd0>
    171e:	80 91 37 23 	lds	r24, 0x2337	; 0x802337 <udd_ctrl_payload_nb_trans>
    1722:	90 91 38 23 	lds	r25, 0x2338	; 0x802338 <udd_ctrl_payload_nb_trans+0x1>
    1726:	c0 91 bb 23 	lds	r28, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0xa>
    172a:	d0 91 bc 23 	lds	r29, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0xb>
    172e:	c8 1b       	sub	r28, r24
    1730:	d9 0b       	sbc	r29, r25
    1732:	71 f5       	brne	.+92     	; 0x1790 <udd_ctrl_in_sent+0x86>
    1734:	20 91 39 23 	lds	r18, 0x2339	; 0x802339 <udd_ctrl_prev_payload_nb_trans>
    1738:	30 91 3a 23 	lds	r19, 0x233A	; 0x80233a <udd_ctrl_prev_payload_nb_trans+0x1>
    173c:	82 0f       	add	r24, r18
    173e:	93 1f       	adc	r25, r19
    1740:	80 93 39 23 	sts	0x2339, r24	; 0x802339 <udd_ctrl_prev_payload_nb_trans>
    1744:	90 93 3a 23 	sts	0x233A, r25	; 0x80233a <udd_ctrl_prev_payload_nb_trans+0x1>
    1748:	20 91 b7 23 	lds	r18, 0x23B7	; 0x8023b7 <udd_g_ctrlreq+0x6>
    174c:	30 91 b8 23 	lds	r19, 0x23B8	; 0x8023b8 <udd_g_ctrlreq+0x7>
    1750:	82 17       	cp	r24, r18
    1752:	93 07       	cpc	r25, r19
    1754:	21 f0       	breq	.+8      	; 0x175e <udd_ctrl_in_sent+0x54>
    1756:	80 91 e6 21 	lds	r24, 0x21E6	; 0x8021e6 <b_shortpacket.5288>
    175a:	88 23       	and	r24, r24
    175c:	41 f0       	breq	.+16     	; 0x176e <udd_ctrl_in_sent+0x64>
    175e:	84 e0       	ldi	r24, 0x04	; 4
    1760:	80 93 3b 23 	sts	0x233B, r24	; 0x80233b <udd_ep_control_state>
    1764:	e0 e5       	ldi	r30, 0x50	; 80
    1766:	f3 e2       	ldi	r31, 0x23	; 35
    1768:	02 e0       	ldi	r16, 0x02	; 2
    176a:	06 93       	lac	Z, r16
    176c:	36 c0       	rjmp	.+108    	; 0x17da <udd_ctrl_in_sent+0xd0>
    176e:	e0 91 bf 23 	lds	r30, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0xe>
    1772:	f0 91 c0 23 	lds	r31, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0xf>
    1776:	30 97       	sbiw	r30, 0x00	; 0
    1778:	99 f0       	breq	.+38     	; 0x17a0 <udd_ctrl_in_sent+0x96>
    177a:	19 95       	eicall
    177c:	88 23       	and	r24, r24
    177e:	81 f0       	breq	.+32     	; 0x17a0 <udd_ctrl_in_sent+0x96>
    1780:	10 92 37 23 	sts	0x2337, r1	; 0x802337 <udd_ctrl_payload_nb_trans>
    1784:	10 92 38 23 	sts	0x2338, r1	; 0x802338 <udd_ctrl_payload_nb_trans+0x1>
    1788:	c0 91 bb 23 	lds	r28, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0xa>
    178c:	d0 91 bc 23 	lds	r29, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0xb>
    1790:	c8 30       	cpi	r28, 0x08	; 8
    1792:	d1 05       	cpc	r29, r1
    1794:	28 f0       	brcs	.+10     	; 0x17a0 <udd_ctrl_in_sent+0x96>
    1796:	10 92 e6 21 	sts	0x21E6, r1	; 0x8021e6 <b_shortpacket.5288>
    179a:	c8 e0       	ldi	r28, 0x08	; 8
    179c:	d0 e0       	ldi	r29, 0x00	; 0
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <udd_ctrl_in_sent+0x9c>
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	80 93 e6 21 	sts	0x21E6, r24	; 0x8021e6 <b_shortpacket.5288>
    17a6:	ec e3       	ldi	r30, 0x3C	; 60
    17a8:	f3 e2       	ldi	r31, 0x23	; 35
    17aa:	c6 8f       	std	Z+30, r28	; 0x1e
    17ac:	d7 8f       	std	Z+31, r29	; 0x1f
    17ae:	80 91 37 23 	lds	r24, 0x2337	; 0x802337 <udd_ctrl_payload_nb_trans>
    17b2:	90 91 38 23 	lds	r25, 0x2338	; 0x802338 <udd_ctrl_payload_nb_trans+0x1>
    17b6:	20 91 b9 23 	lds	r18, 0x23B9	; 0x8023b9 <udd_g_ctrlreq+0x8>
    17ba:	30 91 ba 23 	lds	r19, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x9>
    17be:	28 0f       	add	r18, r24
    17c0:	39 1f       	adc	r19, r25
    17c2:	20 a3       	std	Z+32, r18	; 0x20
    17c4:	31 a3       	std	Z+33, r19	; 0x21
    17c6:	c8 0f       	add	r28, r24
    17c8:	d9 1f       	adc	r29, r25
    17ca:	c0 93 37 23 	sts	0x2337, r28	; 0x802337 <udd_ctrl_payload_nb_trans>
    17ce:	d0 93 38 23 	sts	0x2338, r29	; 0x802338 <udd_ctrl_payload_nb_trans+0x1>
    17d2:	e8 e5       	ldi	r30, 0x58	; 88
    17d4:	f3 e2       	ldi	r31, 0x23	; 35
    17d6:	02 e0       	ldi	r16, 0x02	; 2
    17d8:	06 93       	lac	Z, r16
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	0f 91       	pop	r16
    17e0:	08 95       	ret

000017e2 <udd_ep_get_size>:
    17e2:	fc 01       	movw	r30, r24
    17e4:	81 81       	ldd	r24, Z+1	; 0x01
    17e6:	e8 2f       	mov	r30, r24
    17e8:	e7 70       	andi	r30, 0x07	; 7
    17ea:	8e 2f       	mov	r24, r30
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	fc 01       	movw	r30, r24
    17f0:	31 97       	sbiw	r30, 0x01	; 1
    17f2:	e7 30       	cpi	r30, 0x07	; 7
    17f4:	f1 05       	cpc	r31, r1
    17f6:	d0 f4       	brcc	.+52     	; 0x182c <udd_ep_get_size+0x4a>
    17f8:	88 27       	eor	r24, r24
    17fa:	e9 5f       	subi	r30, 0xF9	; 249
    17fc:	fe 4f       	sbci	r31, 0xFE	; 254
    17fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1800:	22 c7       	rjmp	.+3652   	; 0x2646 <__tablejump2__>
    1802:	80 e1       	ldi	r24, 0x10	; 16
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	08 95       	ret
    1808:	80 e2       	ldi	r24, 0x20	; 32
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	08 95       	ret
    180e:	80 e4       	ldi	r24, 0x40	; 64
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	08 95       	ret
    1814:	80 e8       	ldi	r24, 0x80	; 128
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	08 95       	ret
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	08 95       	ret
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	92 e0       	ldi	r25, 0x02	; 2
    1824:	08 95       	ret
    1826:	8f ef       	ldi	r24, 0xFF	; 255
    1828:	93 e0       	ldi	r25, 0x03	; 3
    182a:	08 95       	ret
    182c:	88 e0       	ldi	r24, 0x08	; 8
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	08 95       	ret

00001832 <udd_ep_get_job>:
    1832:	28 2f       	mov	r18, r24
    1834:	2f 70       	andi	r18, 0x0F	; 15
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	22 0f       	add	r18, r18
    183a:	33 1f       	adc	r19, r19
    183c:	08 2e       	mov	r0, r24
    183e:	00 0c       	add	r0, r0
    1840:	99 0b       	sbc	r25, r25
    1842:	88 27       	eor	r24, r24
    1844:	99 0f       	add	r25, r25
    1846:	88 1f       	adc	r24, r24
    1848:	99 27       	eor	r25, r25
    184a:	82 0f       	add	r24, r18
    184c:	93 1f       	adc	r25, r19
    184e:	02 97       	sbiw	r24, 0x02	; 2
    1850:	9c 01       	movw	r18, r24
    1852:	22 0f       	add	r18, r18
    1854:	33 1f       	adc	r19, r19
    1856:	22 0f       	add	r18, r18
    1858:	33 1f       	adc	r19, r19
    185a:	22 0f       	add	r18, r18
    185c:	33 1f       	adc	r19, r19
    185e:	82 0f       	add	r24, r18
    1860:	93 1f       	adc	r25, r19
    1862:	89 51       	subi	r24, 0x19	; 25
    1864:	9d 4d       	sbci	r25, 0xDD	; 221
    1866:	08 95       	ret

00001868 <udd_ctrl_interrupt_tc_setup>:
    1868:	0f 93       	push	r16
    186a:	cf 93       	push	r28
    186c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1870:	80 ff       	sbrs	r24, 0
    1872:	64 c0       	rjmp	.+200    	; 0x193c <udd_ctrl_interrupt_tc_setup+0xd4>
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    187a:	e0 e5       	ldi	r30, 0x50	; 80
    187c:	f3 e2       	ldi	r31, 0x23	; 35
    187e:	00 e8       	ldi	r16, 0x80	; 128
    1880:	06 93       	lac	Z, r16
    1882:	e8 e5       	ldi	r30, 0x58	; 88
    1884:	f3 e2       	ldi	r31, 0x23	; 35
    1886:	00 e8       	ldi	r16, 0x80	; 128
    1888:	06 93       	lac	Z, r16
    188a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    188e:	e0 e5       	ldi	r30, 0x50	; 80
    1890:	f3 e2       	ldi	r31, 0x23	; 35
    1892:	00 e1       	ldi	r16, 0x10	; 16
    1894:	06 93       	lac	Z, r16
    1896:	80 91 3b 23 	lds	r24, 0x233B	; 0x80233b <udd_ep_control_state>
    189a:	88 23       	and	r24, r24
    189c:	29 f0       	breq	.+10     	; 0x18a8 <udd_ctrl_interrupt_tc_setup+0x40>
    189e:	83 50       	subi	r24, 0x03	; 3
    18a0:	82 30       	cpi	r24, 0x02	; 2
    18a2:	08 f4       	brcc	.+2      	; 0x18a6 <udd_ctrl_interrupt_tc_setup+0x3e>
    18a4:	2a df       	rcall	.-428    	; 0x16fa <udd_ctrl_endofrequest>
    18a6:	e8 de       	rcall	.-560    	; 0x1678 <udd_ctrl_init>
    18a8:	80 91 52 23 	lds	r24, 0x2352	; 0x802352 <udd_sram+0x16>
    18ac:	90 91 53 23 	lds	r25, 0x2353	; 0x802353 <udd_sram+0x17>
    18b0:	08 97       	sbiw	r24, 0x08	; 8
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <udd_ctrl_interrupt_tc_setup+0x4e>
    18b4:	45 c0       	rjmp	.+138    	; 0x1940 <udd_ctrl_interrupt_tc_setup+0xd8>
    18b6:	88 e0       	ldi	r24, 0x08	; 8
    18b8:	ef e2       	ldi	r30, 0x2F	; 47
    18ba:	f3 e2       	ldi	r31, 0x23	; 35
    18bc:	a1 eb       	ldi	r26, 0xB1	; 177
    18be:	b3 e2       	ldi	r27, 0x23	; 35
    18c0:	01 90       	ld	r0, Z+
    18c2:	0d 92       	st	X+, r0
    18c4:	8a 95       	dec	r24
    18c6:	e1 f7       	brne	.-8      	; 0x18c0 <udd_ctrl_interrupt_tc_setup+0x58>
    18c8:	e8 ec       	ldi	r30, 0xC8	; 200
    18ca:	f4 e0       	ldi	r31, 0x04	; 4
    18cc:	80 81       	ld	r24, Z
    18ce:	80 62       	ori	r24, 0x20	; 32
    18d0:	80 83       	st	Z, r24
    18d2:	80 81       	ld	r24, Z
    18d4:	80 62       	ori	r24, 0x20	; 32
    18d6:	80 83       	st	Z, r24
    18d8:	e9 db       	rcall	.-2094   	; 0x10ac <udc_process_setup>
    18da:	c8 2f       	mov	r28, r24
    18dc:	81 11       	cpse	r24, r1
    18de:	03 c0       	rjmp	.+6      	; 0x18e6 <udd_ctrl_interrupt_tc_setup+0x7e>
    18e0:	f0 de       	rcall	.-544    	; 0x16c2 <udd_ctrl_stall_data>
    18e2:	c1 e0       	ldi	r28, 0x01	; 1
    18e4:	2e c0       	rjmp	.+92     	; 0x1942 <udd_ctrl_interrupt_tc_setup+0xda>
    18e6:	80 91 b1 23 	lds	r24, 0x23B1	; 0x8023b1 <udd_g_ctrlreq>
    18ea:	88 23       	and	r24, r24
    18ec:	6c f4       	brge	.+26     	; 0x1908 <udd_ctrl_interrupt_tc_setup+0xa0>
    18ee:	10 92 39 23 	sts	0x2339, r1	; 0x802339 <udd_ctrl_prev_payload_nb_trans>
    18f2:	10 92 3a 23 	sts	0x233A, r1	; 0x80233a <udd_ctrl_prev_payload_nb_trans+0x1>
    18f6:	10 92 37 23 	sts	0x2337, r1	; 0x802337 <udd_ctrl_payload_nb_trans>
    18fa:	10 92 38 23 	sts	0x2338, r1	; 0x802338 <udd_ctrl_payload_nb_trans+0x1>
    18fe:	82 e0       	ldi	r24, 0x02	; 2
    1900:	80 93 3b 23 	sts	0x233B, r24	; 0x80233b <udd_ep_control_state>
    1904:	02 df       	rcall	.-508    	; 0x170a <udd_ctrl_in_sent>
    1906:	1d c0       	rjmp	.+58     	; 0x1942 <udd_ctrl_interrupt_tc_setup+0xda>
    1908:	80 91 b7 23 	lds	r24, 0x23B7	; 0x8023b7 <udd_g_ctrlreq+0x6>
    190c:	90 91 b8 23 	lds	r25, 0x23B8	; 0x8023b8 <udd_g_ctrlreq+0x7>
    1910:	89 2b       	or	r24, r25
    1912:	11 f4       	brne	.+4      	; 0x1918 <udd_ctrl_interrupt_tc_setup+0xb0>
    1914:	e4 de       	rcall	.-568    	; 0x16de <udd_ctrl_send_zlp_in>
    1916:	15 c0       	rjmp	.+42     	; 0x1942 <udd_ctrl_interrupt_tc_setup+0xda>
    1918:	10 92 39 23 	sts	0x2339, r1	; 0x802339 <udd_ctrl_prev_payload_nb_trans>
    191c:	10 92 3a 23 	sts	0x233A, r1	; 0x80233a <udd_ctrl_prev_payload_nb_trans+0x1>
    1920:	10 92 37 23 	sts	0x2337, r1	; 0x802337 <udd_ctrl_payload_nb_trans>
    1924:	10 92 38 23 	sts	0x2338, r1	; 0x802338 <udd_ctrl_payload_nb_trans+0x1>
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	80 93 3b 23 	sts	0x233B, r24	; 0x80233b <udd_ep_control_state>
    192e:	e0 e5       	ldi	r30, 0x50	; 80
    1930:	f3 e2       	ldi	r31, 0x23	; 35
    1932:	02 e0       	ldi	r16, 0x02	; 2
    1934:	06 93       	lac	Z, r16
    1936:	00 e2       	ldi	r16, 0x20	; 32
    1938:	06 93       	lac	Z, r16
    193a:	03 c0       	rjmp	.+6      	; 0x1942 <udd_ctrl_interrupt_tc_setup+0xda>
    193c:	c0 e0       	ldi	r28, 0x00	; 0
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <udd_ctrl_interrupt_tc_setup+0xda>
    1940:	c1 e0       	ldi	r28, 0x01	; 1
    1942:	8c 2f       	mov	r24, r28
    1944:	cf 91       	pop	r28
    1946:	0f 91       	pop	r16
    1948:	08 95       	ret

0000194a <udd_ep_trans_complet>:
    194a:	8f 92       	push	r8
    194c:	9f 92       	push	r9
    194e:	af 92       	push	r10
    1950:	bf 92       	push	r11
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	d8 2e       	mov	r13, r24
    1962:	67 df       	rcall	.-306    	; 0x1832 <udd_ep_get_job>
    1964:	8c 01       	movw	r16, r24
    1966:	cd 2d       	mov	r28, r13
    1968:	cf 70       	andi	r28, 0x0F	; 15
    196a:	d0 e0       	ldi	r29, 0x00	; 0
    196c:	ce 01       	movw	r24, r28
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	cd 2d       	mov	r28, r13
    1974:	0d 2c       	mov	r0, r13
    1976:	00 0c       	add	r0, r0
    1978:	dd 0b       	sbc	r29, r29
    197a:	cc 27       	eor	r28, r28
    197c:	dd 0f       	add	r29, r29
    197e:	cc 1f       	adc	r28, r28
    1980:	dd 27       	eor	r29, r29
    1982:	c8 0f       	add	r28, r24
    1984:	d9 1f       	adc	r29, r25
    1986:	ce 01       	movw	r24, r28
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	9c 01       	movw	r18, r24
    1996:	20 5b       	subi	r18, 0xB0	; 176
    1998:	3c 4d       	sbci	r19, 0xDC	; 220
    199a:	79 01       	movw	r14, r18
    199c:	c9 01       	movw	r24, r18
    199e:	21 df       	rcall	.-446    	; 0x17e2 <udd_ep_get_size>
    19a0:	4c 01       	movw	r8, r24
    19a2:	dd 20       	and	r13, r13
    19a4:	0c f0       	brlt	.+2      	; 0x19a8 <udd_ep_trans_complet+0x5e>
    19a6:	79 c0       	rjmp	.+242    	; 0x1a9a <udd_ep_trans_complet+0x150>
    19a8:	fe 01       	movw	r30, r28
    19aa:	ee 0f       	add	r30, r30
    19ac:	ff 1f       	adc	r31, r31
    19ae:	ee 0f       	add	r30, r30
    19b0:	ff 1f       	adc	r31, r31
    19b2:	ee 0f       	add	r30, r30
    19b4:	ff 1f       	adc	r31, r31
    19b6:	e4 5c       	subi	r30, 0xC4	; 196
    19b8:	fc 4d       	sbci	r31, 0xDC	; 220
    19ba:	22 8d       	ldd	r18, Z+26	; 0x1a
    19bc:	33 8d       	ldd	r19, Z+27	; 0x1b
    19be:	d8 01       	movw	r26, r16
    19c0:	15 96       	adiw	r26, 0x05	; 5
    19c2:	8d 91       	ld	r24, X+
    19c4:	9c 91       	ld	r25, X
    19c6:	16 97       	sbiw	r26, 0x06	; 6
    19c8:	82 0f       	add	r24, r18
    19ca:	93 1f       	adc	r25, r19
    19cc:	15 96       	adiw	r26, 0x05	; 5
    19ce:	8d 93       	st	X+, r24
    19d0:	9c 93       	st	X, r25
    19d2:	16 97       	sbiw	r26, 0x06	; 6
    19d4:	13 96       	adiw	r26, 0x03	; 3
    19d6:	2d 91       	ld	r18, X+
    19d8:	3c 91       	ld	r19, X
    19da:	14 97       	sbiw	r26, 0x04	; 4
    19dc:	82 17       	cp	r24, r18
    19de:	93 07       	cpc	r25, r19
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <udd_ep_trans_complet+0x9a>
    19e2:	45 c0       	rjmp	.+138    	; 0x1a6e <udd_ep_trans_complet+0x124>
    19e4:	28 1b       	sub	r18, r24
    19e6:	39 0b       	sbc	r19, r25
    19e8:	21 15       	cp	r18, r1
    19ea:	b4 e0       	ldi	r27, 0x04	; 4
    19ec:	3b 07       	cpc	r19, r27
    19ee:	38 f0       	brcs	.+14     	; 0x19fe <udd_ep_trans_complet+0xb4>
    19f0:	2f ef       	ldi	r18, 0xFF	; 255
    19f2:	33 e0       	ldi	r19, 0x03	; 3
    19f4:	c9 01       	movw	r24, r18
    19f6:	b4 01       	movw	r22, r8
    19f8:	12 d6       	rcall	.+3108   	; 0x261e <__udivmodhi4>
    19fa:	28 1b       	sub	r18, r24
    19fc:	39 0b       	sbc	r19, r25
    19fe:	f8 01       	movw	r30, r16
    1a00:	80 81       	ld	r24, Z
    1a02:	81 ff       	sbrs	r24, 1
    1a04:	09 c0       	rjmp	.+18     	; 0x1a18 <udd_ep_trans_complet+0xce>
    1a06:	c9 01       	movw	r24, r18
    1a08:	b4 01       	movw	r22, r8
    1a0a:	09 d6       	rcall	.+3090   	; 0x261e <__udivmodhi4>
    1a0c:	41 e0       	ldi	r20, 0x01	; 1
    1a0e:	89 2b       	or	r24, r25
    1a10:	09 f0       	breq	.+2      	; 0x1a14 <udd_ep_trans_complet+0xca>
    1a12:	40 e0       	ldi	r20, 0x00	; 0
    1a14:	84 2f       	mov	r24, r20
    1a16:	01 c0       	rjmp	.+2      	; 0x1a1a <udd_ep_trans_complet+0xd0>
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	d8 01       	movw	r26, r16
    1a1c:	9c 91       	ld	r25, X
    1a1e:	80 fb       	bst	r24, 0
    1a20:	91 f9       	bld	r25, 1
    1a22:	9c 93       	st	X, r25
    1a24:	fe 01       	movw	r30, r28
    1a26:	ee 0f       	add	r30, r30
    1a28:	ff 1f       	adc	r31, r31
    1a2a:	ee 0f       	add	r30, r30
    1a2c:	ff 1f       	adc	r31, r31
    1a2e:	ee 0f       	add	r30, r30
    1a30:	ff 1f       	adc	r31, r31
    1a32:	e4 5c       	subi	r30, 0xC4	; 196
    1a34:	fc 4d       	sbci	r31, 0xDC	; 220
    1a36:	12 8e       	std	Z+26, r1	; 0x1a
    1a38:	13 8e       	std	Z+27, r1	; 0x1b
    1a3a:	26 8b       	std	Z+22, r18	; 0x16
    1a3c:	37 8b       	std	Z+23, r19	; 0x17
    1a3e:	11 96       	adiw	r26, 0x01	; 1
    1a40:	2d 91       	ld	r18, X+
    1a42:	3c 91       	ld	r19, X
    1a44:	12 97       	sbiw	r26, 0x02	; 2
    1a46:	15 96       	adiw	r26, 0x05	; 5
    1a48:	8d 91       	ld	r24, X+
    1a4a:	9c 91       	ld	r25, X
    1a4c:	16 97       	sbiw	r26, 0x06	; 6
    1a4e:	82 0f       	add	r24, r18
    1a50:	93 1f       	adc	r25, r19
    1a52:	cc 0f       	add	r28, r28
    1a54:	dd 1f       	adc	r29, r29
    1a56:	cc 0f       	add	r28, r28
    1a58:	dd 1f       	adc	r29, r29
    1a5a:	cc 0f       	add	r28, r28
    1a5c:	dd 1f       	adc	r29, r29
    1a5e:	cc 5a       	subi	r28, 0xAC	; 172
    1a60:	dc 4d       	sbci	r29, 0xDC	; 220
    1a62:	88 83       	st	Y, r24
    1a64:	99 83       	std	Y+1, r25	; 0x01
    1a66:	f7 01       	movw	r30, r14
    1a68:	02 e0       	ldi	r16, 0x02	; 2
    1a6a:	06 93       	lac	Z, r16
    1a6c:	e0 c0       	rjmp	.+448    	; 0x1c2e <udd_ep_trans_complet+0x2e4>
    1a6e:	d8 01       	movw	r26, r16
    1a70:	8c 91       	ld	r24, X
    1a72:	81 ff       	sbrs	r24, 1
    1a74:	c9 c0       	rjmp	.+402    	; 0x1c08 <udd_ep_trans_complet+0x2be>
    1a76:	8d 7f       	andi	r24, 0xFD	; 253
    1a78:	8c 93       	st	X, r24
    1a7a:	cc 0f       	add	r28, r28
    1a7c:	dd 1f       	adc	r29, r29
    1a7e:	cc 0f       	add	r28, r28
    1a80:	dd 1f       	adc	r29, r29
    1a82:	cc 0f       	add	r28, r28
    1a84:	dd 1f       	adc	r29, r29
    1a86:	c4 5c       	subi	r28, 0xC4	; 196
    1a88:	dc 4d       	sbci	r29, 0xDC	; 220
    1a8a:	1a 8e       	std	Y+26, r1	; 0x1a
    1a8c:	1b 8e       	std	Y+27, r1	; 0x1b
    1a8e:	1e 8a       	std	Y+22, r1	; 0x16
    1a90:	1f 8a       	std	Y+23, r1	; 0x17
    1a92:	f7 01       	movw	r30, r14
    1a94:	02 e0       	ldi	r16, 0x02	; 2
    1a96:	06 93       	lac	Z, r16
    1a98:	ca c0       	rjmp	.+404    	; 0x1c2e <udd_ep_trans_complet+0x2e4>
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	ee 0f       	add	r30, r30
    1a9e:	ff 1f       	adc	r31, r31
    1aa0:	ee 0f       	add	r30, r30
    1aa2:	ff 1f       	adc	r31, r31
    1aa4:	ee 0f       	add	r30, r30
    1aa6:	ff 1f       	adc	r31, r31
    1aa8:	e4 5c       	subi	r30, 0xC4	; 196
    1aaa:	fc 4d       	sbci	r31, 0xDC	; 220
    1aac:	a6 88       	ldd	r10, Z+22	; 0x16
    1aae:	b7 88       	ldd	r11, Z+23	; 0x17
    1ab0:	d8 01       	movw	r26, r16
    1ab2:	8c 91       	ld	r24, X
    1ab4:	82 ff       	sbrs	r24, 2
    1ab6:	19 c0       	rjmp	.+50     	; 0x1aea <udd_ep_trans_complet+0x1a0>
    1ab8:	11 96       	adiw	r26, 0x01	; 1
    1aba:	ed 91       	ld	r30, X+
    1abc:	fc 91       	ld	r31, X
    1abe:	12 97       	sbiw	r26, 0x02	; 2
    1ac0:	15 96       	adiw	r26, 0x05	; 5
    1ac2:	2d 91       	ld	r18, X+
    1ac4:	3c 91       	ld	r19, X
    1ac6:	16 97       	sbiw	r26, 0x06	; 6
    1ac8:	13 96       	adiw	r26, 0x03	; 3
    1aca:	8d 91       	ld	r24, X+
    1acc:	9c 91       	ld	r25, X
    1ace:	14 97       	sbiw	r26, 0x04	; 4
    1ad0:	b4 01       	movw	r22, r8
    1ad2:	a5 d5       	rcall	.+2890   	; 0x261e <__udivmodhi4>
    1ad4:	b0 e4       	ldi	r27, 0x40	; 64
    1ad6:	db 9e       	mul	r13, r27
    1ad8:	b0 01       	movw	r22, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	69 55       	subi	r22, 0x59	; 89
    1ade:	7e 4d       	sbci	r23, 0xDE	; 222
    1ae0:	ac 01       	movw	r20, r24
    1ae2:	cf 01       	movw	r24, r30
    1ae4:	82 0f       	add	r24, r18
    1ae6:	93 1f       	adc	r25, r19
    1ae8:	b6 d5       	rcall	.+2924   	; 0x2656 <memcpy>
    1aea:	f8 01       	movw	r30, r16
    1aec:	25 81       	ldd	r18, Z+5	; 0x05
    1aee:	36 81       	ldd	r19, Z+6	; 0x06
    1af0:	2a 0d       	add	r18, r10
    1af2:	3b 1d       	adc	r19, r11
    1af4:	25 83       	std	Z+5, r18	; 0x05
    1af6:	36 83       	std	Z+6, r19	; 0x06
    1af8:	83 81       	ldd	r24, Z+3	; 0x03
    1afa:	94 81       	ldd	r25, Z+4	; 0x04
    1afc:	82 17       	cp	r24, r18
    1afe:	93 07       	cpc	r25, r19
    1b00:	68 f4       	brcc	.+26     	; 0x1b1c <udd_ep_trans_complet+0x1d2>
    1b02:	85 83       	std	Z+5, r24	; 0x05
    1b04:	96 83       	std	Z+6, r25	; 0x06
    1b06:	cc 0f       	add	r28, r28
    1b08:	dd 1f       	adc	r29, r29
    1b0a:	cc 0f       	add	r28, r28
    1b0c:	dd 1f       	adc	r29, r29
    1b0e:	cc 0f       	add	r28, r28
    1b10:	dd 1f       	adc	r29, r29
    1b12:	c4 5c       	subi	r28, 0xC4	; 196
    1b14:	dc 4d       	sbci	r29, 0xDC	; 220
    1b16:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b18:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b1a:	76 c0       	rjmp	.+236    	; 0x1c08 <udd_ep_trans_complet+0x2be>
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	ee 0f       	add	r30, r30
    1b20:	ff 1f       	adc	r31, r31
    1b22:	ee 0f       	add	r30, r30
    1b24:	ff 1f       	adc	r31, r31
    1b26:	ee 0f       	add	r30, r30
    1b28:	ff 1f       	adc	r31, r31
    1b2a:	e4 5c       	subi	r30, 0xC4	; 196
    1b2c:	fc 4d       	sbci	r31, 0xDC	; 220
    1b2e:	42 8d       	ldd	r20, Z+26	; 0x1a
    1b30:	53 8d       	ldd	r21, Z+27	; 0x1b
    1b32:	a4 16       	cp	r10, r20
    1b34:	b5 06       	cpc	r11, r21
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <udd_ep_trans_complet+0x1f0>
    1b38:	67 c0       	rjmp	.+206    	; 0x1c08 <udd_ep_trans_complet+0x2be>
    1b3a:	28 17       	cp	r18, r24
    1b3c:	39 07       	cpc	r19, r25
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <udd_ep_trans_complet+0x1f8>
    1b40:	63 c0       	rjmp	.+198    	; 0x1c08 <udd_ep_trans_complet+0x2be>
    1b42:	ac 01       	movw	r20, r24
    1b44:	42 1b       	sub	r20, r18
    1b46:	53 0b       	sbc	r21, r19
    1b48:	9a 01       	movw	r18, r20
    1b4a:	21 15       	cp	r18, r1
    1b4c:	54 e0       	ldi	r21, 0x04	; 4
    1b4e:	35 07       	cpc	r19, r21
    1b50:	40 f0       	brcs	.+16     	; 0x1b62 <udd_ep_trans_complet+0x218>
    1b52:	2f ef       	ldi	r18, 0xFF	; 255
    1b54:	33 e0       	ldi	r19, 0x03	; 3
    1b56:	c9 01       	movw	r24, r18
    1b58:	b4 01       	movw	r22, r8
    1b5a:	61 d5       	rcall	.+2754   	; 0x261e <__udivmodhi4>
    1b5c:	28 1b       	sub	r18, r24
    1b5e:	39 0b       	sbc	r19, r25
    1b60:	05 c0       	rjmp	.+10     	; 0x1b6c <udd_ep_trans_complet+0x222>
    1b62:	c9 01       	movw	r24, r18
    1b64:	b4 01       	movw	r22, r8
    1b66:	5b d5       	rcall	.+2742   	; 0x261e <__udivmodhi4>
    1b68:	28 1b       	sub	r18, r24
    1b6a:	39 0b       	sbc	r19, r25
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	ee 0f       	add	r30, r30
    1b70:	ff 1f       	adc	r31, r31
    1b72:	ee 0f       	add	r30, r30
    1b74:	ff 1f       	adc	r31, r31
    1b76:	ee 0f       	add	r30, r30
    1b78:	ff 1f       	adc	r31, r31
    1b7a:	e4 5c       	subi	r30, 0xC4	; 196
    1b7c:	fc 4d       	sbci	r31, 0xDC	; 220
    1b7e:	16 8a       	std	Z+22, r1	; 0x16
    1b80:	17 8a       	std	Z+23, r1	; 0x17
    1b82:	28 15       	cp	r18, r8
    1b84:	39 05       	cpc	r19, r9
    1b86:	00 f5       	brcc	.+64     	; 0x1bc8 <udd_ep_trans_complet+0x27e>
    1b88:	d8 01       	movw	r26, r16
    1b8a:	8c 91       	ld	r24, X
    1b8c:	84 60       	ori	r24, 0x04	; 4
    1b8e:	8c 93       	st	X, r24
    1b90:	b0 e4       	ldi	r27, 0x40	; 64
    1b92:	db 9e       	mul	r13, r27
    1b94:	c0 01       	movw	r24, r0
    1b96:	11 24       	eor	r1, r1
    1b98:	89 55       	subi	r24, 0x59	; 89
    1b9a:	9e 4d       	sbci	r25, 0xDE	; 222
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	ee 0f       	add	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	ee 0f       	add	r30, r30
    1ba4:	ff 1f       	adc	r31, r31
    1ba6:	ee 0f       	add	r30, r30
    1ba8:	ff 1f       	adc	r31, r31
    1baa:	ec 5a       	subi	r30, 0xAC	; 172
    1bac:	fc 4d       	sbci	r31, 0xDC	; 220
    1bae:	80 83       	st	Z, r24
    1bb0:	91 83       	std	Z+1, r25	; 0x01
    1bb2:	cc 0f       	add	r28, r28
    1bb4:	dd 1f       	adc	r29, r29
    1bb6:	cc 0f       	add	r28, r28
    1bb8:	dd 1f       	adc	r29, r29
    1bba:	cc 0f       	add	r28, r28
    1bbc:	dd 1f       	adc	r29, r29
    1bbe:	c4 5c       	subi	r28, 0xC4	; 196
    1bc0:	dc 4d       	sbci	r29, 0xDC	; 220
    1bc2:	8a 8e       	std	Y+26, r8	; 0x1a
    1bc4:	9b 8e       	std	Y+27, r9	; 0x1b
    1bc6:	1c c0       	rjmp	.+56     	; 0x1c00 <udd_ep_trans_complet+0x2b6>
    1bc8:	f8 01       	movw	r30, r16
    1bca:	41 81       	ldd	r20, Z+1	; 0x01
    1bcc:	52 81       	ldd	r21, Z+2	; 0x02
    1bce:	85 81       	ldd	r24, Z+5	; 0x05
    1bd0:	96 81       	ldd	r25, Z+6	; 0x06
    1bd2:	84 0f       	add	r24, r20
    1bd4:	95 1f       	adc	r25, r21
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	ee 0f       	add	r30, r30
    1bda:	ff 1f       	adc	r31, r31
    1bdc:	ee 0f       	add	r30, r30
    1bde:	ff 1f       	adc	r31, r31
    1be0:	ee 0f       	add	r30, r30
    1be2:	ff 1f       	adc	r31, r31
    1be4:	ec 5a       	subi	r30, 0xAC	; 172
    1be6:	fc 4d       	sbci	r31, 0xDC	; 220
    1be8:	80 83       	st	Z, r24
    1bea:	91 83       	std	Z+1, r25	; 0x01
    1bec:	cc 0f       	add	r28, r28
    1bee:	dd 1f       	adc	r29, r29
    1bf0:	cc 0f       	add	r28, r28
    1bf2:	dd 1f       	adc	r29, r29
    1bf4:	cc 0f       	add	r28, r28
    1bf6:	dd 1f       	adc	r29, r29
    1bf8:	c4 5c       	subi	r28, 0xC4	; 196
    1bfa:	dc 4d       	sbci	r29, 0xDC	; 220
    1bfc:	2a 8f       	std	Y+26, r18	; 0x1a
    1bfe:	3b 8f       	std	Y+27, r19	; 0x1b
    1c00:	f7 01       	movw	r30, r14
    1c02:	02 e0       	ldi	r16, 0x02	; 2
    1c04:	06 93       	lac	Z, r16
    1c06:	13 c0       	rjmp	.+38     	; 0x1c2e <udd_ep_trans_complet+0x2e4>
    1c08:	d8 01       	movw	r26, r16
    1c0a:	8c 91       	ld	r24, X
    1c0c:	80 ff       	sbrs	r24, 0
    1c0e:	0f c0       	rjmp	.+30     	; 0x1c2e <udd_ep_trans_complet+0x2e4>
    1c10:	8e 7f       	andi	r24, 0xFE	; 254
    1c12:	8c 93       	st	X, r24
    1c14:	17 96       	adiw	r26, 0x07	; 7
    1c16:	ed 91       	ld	r30, X+
    1c18:	fc 91       	ld	r31, X
    1c1a:	18 97       	sbiw	r26, 0x08	; 8
    1c1c:	30 97       	sbiw	r30, 0x00	; 0
    1c1e:	39 f0       	breq	.+14     	; 0x1c2e <udd_ep_trans_complet+0x2e4>
    1c20:	15 96       	adiw	r26, 0x05	; 5
    1c22:	6d 91       	ld	r22, X+
    1c24:	7c 91       	ld	r23, X
    1c26:	16 97       	sbiw	r26, 0x06	; 6
    1c28:	4d 2d       	mov	r20, r13
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	19 95       	eicall
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	1f 91       	pop	r17
    1c34:	0f 91       	pop	r16
    1c36:	ff 90       	pop	r15
    1c38:	ef 90       	pop	r14
    1c3a:	df 90       	pop	r13
    1c3c:	bf 90       	pop	r11
    1c3e:	af 90       	pop	r10
    1c40:	9f 90       	pop	r9
    1c42:	8f 90       	pop	r8
    1c44:	08 95       	ret

00001c46 <udd_attach>:
    1c46:	1f 93       	push	r17
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	1f 92       	push	r1
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	8f b7       	in	r24, 0x3f	; 63
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	f8 94       	cli
    1c58:	19 81       	ldd	r17, Y+1	; 0x01
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	d5 dc       	rcall	.-1622   	; 0x1608 <udd_sleep_mode>
    1c5e:	ea ec       	ldi	r30, 0xCA	; 202
    1c60:	f4 e0       	ldi	r31, 0x04	; 4
    1c62:	80 e4       	ldi	r24, 0x40	; 64
    1c64:	80 83       	st	Z, r24
    1c66:	80 e2       	ldi	r24, 0x20	; 32
    1c68:	80 83       	st	Z, r24
    1c6a:	e1 ec       	ldi	r30, 0xC1	; 193
    1c6c:	f4 e0       	ldi	r31, 0x04	; 4
    1c6e:	80 81       	ld	r24, Z
    1c70:	81 60       	ori	r24, 0x01	; 1
    1c72:	80 83       	st	Z, r24
    1c74:	a9 ec       	ldi	r26, 0xC9	; 201
    1c76:	b4 e0       	ldi	r27, 0x04	; 4
    1c78:	8c 91       	ld	r24, X
    1c7a:	82 60       	ori	r24, 0x02	; 2
    1c7c:	8c 93       	st	X, r24
    1c7e:	e8 ec       	ldi	r30, 0xC8	; 200
    1c80:	f4 e0       	ldi	r31, 0x04	; 4
    1c82:	80 81       	ld	r24, Z
    1c84:	80 64       	ori	r24, 0x40	; 64
    1c86:	80 83       	st	Z, r24
    1c88:	8c 91       	ld	r24, X
    1c8a:	81 60       	ori	r24, 0x01	; 1
    1c8c:	8c 93       	st	X, r24
    1c8e:	80 81       	ld	r24, Z
    1c90:	80 68       	ori	r24, 0x80	; 128
    1c92:	80 83       	st	Z, r24
    1c94:	1f bf       	out	0x3f, r17	; 63
    1c96:	0f 90       	pop	r0
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	08 95       	ret

00001ca0 <udd_enable>:
    1ca0:	0f 93       	push	r16
    1ca2:	1f 93       	push	r17
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	1f 92       	push	r1
    1caa:	1f 92       	push	r1
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	00 e6       	ldi	r16, 0x60	; 96
    1cb2:	10 e0       	ldi	r17, 0x00	; 0
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	10 82       	st	Z, r1
    1cb8:	80 e3       	ldi	r24, 0x30	; 48
    1cba:	0e 94 f5 04 	call	0x9ea	; 0x9ea <sysclk_enable_usb>
    1cbe:	e0 ec       	ldi	r30, 0xC0	; 192
    1cc0:	f4 e0       	ldi	r31, 0x04	; 4
    1cc2:	80 81       	ld	r24, Z
    1cc4:	80 64       	ori	r24, 0x40	; 64
    1cc6:	80 83       	st	Z, r24
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	f8 01       	movw	r30, r16
    1ccc:	80 83       	st	Z, r24
    1cce:	8f b7       	in	r24, 0x3f	; 63
    1cd0:	8a 83       	std	Y+2, r24	; 0x02
    1cd2:	f8 94       	cli
    1cd4:	1a 81       	ldd	r17, Y+2	; 0x02
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	fc 01       	movw	r30, r24
    1cdc:	ee 0f       	add	r30, r30
    1cde:	ff 1f       	adc	r31, r31
    1ce0:	ee 0f       	add	r30, r30
    1ce2:	ff 1f       	adc	r31, r31
    1ce4:	ee 0f       	add	r30, r30
    1ce6:	ff 1f       	adc	r31, r31
    1ce8:	e4 5c       	subi	r30, 0xC4	; 196
    1cea:	fc 4d       	sbci	r31, 0xDC	; 220
    1cec:	15 8a       	std	Z+21, r1	; 0x15
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	8a 30       	cpi	r24, 0x0A	; 10
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	91 f7       	brne	.-28     	; 0x1cda <udd_enable+0x3a>
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	ee 0f       	add	r30, r30
    1cfe:	ff 1f       	adc	r31, r31
    1d00:	ee 0f       	add	r30, r30
    1d02:	ff 1f       	adc	r31, r31
    1d04:	ee 0f       	add	r30, r30
    1d06:	ff 1f       	adc	r31, r31
    1d08:	e8 0f       	add	r30, r24
    1d0a:	f9 1f       	adc	r31, r25
    1d0c:	e9 51       	subi	r30, 0x19	; 25
    1d0e:	fd 4d       	sbci	r31, 0xDD	; 221
    1d10:	20 81       	ld	r18, Z
    1d12:	2e 7f       	andi	r18, 0xFE	; 254
    1d14:	20 83       	st	Z, r18
    1d16:	01 96       	adiw	r24, 0x01	; 1
    1d18:	88 30       	cpi	r24, 0x08	; 8
    1d1a:	91 05       	cpc	r25, r1
    1d1c:	71 f7       	brne	.-36     	; 0x1cfa <udd_enable+0x5a>
    1d1e:	6a e1       	ldi	r22, 0x1A	; 26
    1d20:	70 e0       	ldi	r23, 0x00	; 0
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	61 dc       	rcall	.-1854   	; 0x15e8 <nvm_read_byte>
    1d26:	8f 3f       	cpi	r24, 0xFF	; 255
    1d28:	19 f0       	breq	.+6      	; 0x1d30 <udd_enable+0x90>
    1d2a:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    1d2e:	03 c0       	rjmp	.+6      	; 0x1d36 <udd_enable+0x96>
    1d30:	8f e1       	ldi	r24, 0x1F	; 31
    1d32:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    1d36:	6b e1       	ldi	r22, 0x1B	; 27
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	82 e0       	ldi	r24, 0x02	; 2
    1d3c:	55 dc       	rcall	.-1878   	; 0x15e8 <nvm_read_byte>
    1d3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1d40:	19 f0       	breq	.+6      	; 0x1d48 <udd_enable+0xa8>
    1d42:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    1d46:	03 c0       	rjmp	.+6      	; 0x1d4e <udd_enable+0xae>
    1d48:	8f e1       	ldi	r24, 0x1F	; 31
    1d4a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    1d4e:	e0 ec       	ldi	r30, 0xC0	; 192
    1d50:	f4 e0       	ldi	r31, 0x04	; 4
    1d52:	80 81       	ld	r24, Z
    1d54:	84 60       	ori	r24, 0x04	; 4
    1d56:	80 83       	st	Z, r24
    1d58:	80 81       	ld	r24, Z
    1d5a:	80 68       	ori	r24, 0x80	; 128
    1d5c:	80 83       	st	Z, r24
    1d5e:	80 81       	ld	r24, Z
    1d60:	80 61       	ori	r24, 0x10	; 16
    1d62:	80 83       	st	Z, r24
    1d64:	80 e5       	ldi	r24, 0x50	; 80
    1d66:	93 e2       	ldi	r25, 0x23	; 35
    1d68:	86 83       	std	Z+6, r24	; 0x06
    1d6a:	97 83       	std	Z+7, r25	; 0x07
    1d6c:	80 81       	ld	r24, Z
    1d6e:	80 62       	ori	r24, 0x20	; 32
    1d70:	80 83       	st	Z, r24
    1d72:	8f ef       	ldi	r24, 0xFF	; 255
    1d74:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    1d78:	e8 ec       	ldi	r30, 0xC8	; 200
    1d7a:	f4 e0       	ldi	r31, 0x04	; 4
    1d7c:	80 81       	ld	r24, Z
    1d7e:	81 60       	ori	r24, 0x01	; 1
    1d80:	80 83       	st	Z, r24
    1d82:	10 92 a4 23 	sts	0x23A4, r1	; 0x8023a4 <udd_b_idle>
    1d86:	80 91 b0 23 	lds	r24, 0x23B0	; 0x8023b0 <sleepmgr_locks+0x5>
    1d8a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <udd_enable+0xf0>
    1d8e:	ff cf       	rjmp	.-2      	; 0x1d8e <udd_enable+0xee>
    1d90:	8f b7       	in	r24, 0x3f	; 63
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	f8 94       	cli
    1d96:	99 81       	ldd	r25, Y+1	; 0x01
    1d98:	eb ea       	ldi	r30, 0xAB	; 171
    1d9a:	f3 e2       	ldi	r31, 0x23	; 35
    1d9c:	85 81       	ldd	r24, Z+5	; 0x05
    1d9e:	8f 5f       	subi	r24, 0xFF	; 255
    1da0:	85 83       	std	Z+5, r24	; 0x05
    1da2:	9f bf       	out	0x3f, r25	; 63
    1da4:	50 df       	rcall	.-352    	; 0x1c46 <udd_attach>
    1da6:	1f bf       	out	0x3f, r17	; 63
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	08 95       	ret

00001db6 <udd_set_address>:
    1db6:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    1dba:	08 95       	ret

00001dbc <udd_getaddress>:
    1dbc:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    1dc0:	08 95       	ret

00001dc2 <udd_get_frame_number>:
    1dc2:	80 91 a0 23 	lds	r24, 0x23A0	; 0x8023a0 <udd_sram+0x64>
    1dc6:	90 91 a1 23 	lds	r25, 0x23A1	; 0x8023a1 <udd_sram+0x65>
    1dca:	08 95       	ret

00001dcc <udd_set_setup_payload>:
    1dcc:	e1 eb       	ldi	r30, 0xB1	; 177
    1dce:	f3 e2       	ldi	r31, 0x23	; 35
    1dd0:	80 87       	std	Z+8, r24	; 0x08
    1dd2:	91 87       	std	Z+9, r25	; 0x09
    1dd4:	62 87       	std	Z+10, r22	; 0x0a
    1dd6:	73 87       	std	Z+11, r23	; 0x0b
    1dd8:	08 95       	ret

00001dda <udd_ep_alloc>:
    1dda:	28 2f       	mov	r18, r24
    1ddc:	2f 70       	andi	r18, 0x0F	; 15
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	22 0f       	add	r18, r18
    1de2:	33 1f       	adc	r19, r19
    1de4:	08 2e       	mov	r0, r24
    1de6:	00 0c       	add	r0, r0
    1de8:	99 0b       	sbc	r25, r25
    1dea:	88 27       	eor	r24, r24
    1dec:	99 0f       	add	r25, r25
    1dee:	88 1f       	adc	r24, r24
    1df0:	99 27       	eor	r25, r25
    1df2:	82 0f       	add	r24, r18
    1df4:	93 1f       	adc	r25, r19
    1df6:	fc 01       	movw	r30, r24
    1df8:	ee 0f       	add	r30, r30
    1dfa:	ff 1f       	adc	r31, r31
    1dfc:	ee 0f       	add	r30, r30
    1dfe:	ff 1f       	adc	r31, r31
    1e00:	ee 0f       	add	r30, r30
    1e02:	ff 1f       	adc	r31, r31
    1e04:	e4 5c       	subi	r30, 0xC4	; 196
    1e06:	fc 4d       	sbci	r31, 0xDC	; 220
    1e08:	25 89       	ldd	r18, Z+21	; 0x15
    1e0a:	20 7c       	andi	r18, 0xC0	; 192
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <udd_ep_alloc+0x36>
    1e0e:	69 c0       	rjmp	.+210    	; 0x1ee2 <udd_ep_alloc+0x108>
    1e10:	63 70       	andi	r22, 0x03	; 3
    1e12:	61 30       	cpi	r22, 0x01	; 1
    1e14:	11 f0       	breq	.+4      	; 0x1e1a <udd_ep_alloc+0x40>
    1e16:	18 f4       	brcc	.+6      	; 0x1e1e <udd_ep_alloc+0x44>
    1e18:	04 c0       	rjmp	.+8      	; 0x1e22 <udd_ep_alloc+0x48>
    1e1a:	60 ec       	ldi	r22, 0xC0	; 192
    1e1c:	03 c0       	rjmp	.+6      	; 0x1e24 <udd_ep_alloc+0x4a>
    1e1e:	60 e8       	ldi	r22, 0x80	; 128
    1e20:	01 c0       	rjmp	.+2      	; 0x1e24 <udd_ep_alloc+0x4a>
    1e22:	60 e4       	ldi	r22, 0x40	; 64
    1e24:	40 38       	cpi	r20, 0x80	; 128
    1e26:	51 05       	cpc	r21, r1
    1e28:	e9 f0       	breq	.+58     	; 0x1e64 <udd_ep_alloc+0x8a>
    1e2a:	50 f4       	brcc	.+20     	; 0x1e40 <udd_ep_alloc+0x66>
    1e2c:	40 32       	cpi	r20, 0x20	; 32
    1e2e:	51 05       	cpc	r21, r1
    1e30:	a9 f0       	breq	.+42     	; 0x1e5c <udd_ep_alloc+0x82>
    1e32:	40 34       	cpi	r20, 0x40	; 64
    1e34:	51 05       	cpc	r21, r1
    1e36:	a1 f0       	breq	.+40     	; 0x1e60 <udd_ep_alloc+0x86>
    1e38:	40 31       	cpi	r20, 0x10	; 16
    1e3a:	51 05       	cpc	r21, r1
    1e3c:	d9 f4       	brne	.+54     	; 0x1e74 <udd_ep_alloc+0x9a>
    1e3e:	0c c0       	rjmp	.+24     	; 0x1e58 <udd_ep_alloc+0x7e>
    1e40:	41 15       	cp	r20, r1
    1e42:	22 e0       	ldi	r18, 0x02	; 2
    1e44:	52 07       	cpc	r21, r18
    1e46:	91 f0       	breq	.+36     	; 0x1e6c <udd_ep_alloc+0x92>
    1e48:	4f 3f       	cpi	r20, 0xFF	; 255
    1e4a:	23 e0       	ldi	r18, 0x03	; 3
    1e4c:	52 07       	cpc	r21, r18
    1e4e:	81 f0       	breq	.+32     	; 0x1e70 <udd_ep_alloc+0x96>
    1e50:	41 15       	cp	r20, r1
    1e52:	51 40       	sbci	r21, 0x01	; 1
    1e54:	79 f4       	brne	.+30     	; 0x1e74 <udd_ep_alloc+0x9a>
    1e56:	08 c0       	rjmp	.+16     	; 0x1e68 <udd_ep_alloc+0x8e>
    1e58:	21 e0       	ldi	r18, 0x01	; 1
    1e5a:	0d c0       	rjmp	.+26     	; 0x1e76 <udd_ep_alloc+0x9c>
    1e5c:	22 e0       	ldi	r18, 0x02	; 2
    1e5e:	0b c0       	rjmp	.+22     	; 0x1e76 <udd_ep_alloc+0x9c>
    1e60:	23 e0       	ldi	r18, 0x03	; 3
    1e62:	09 c0       	rjmp	.+18     	; 0x1e76 <udd_ep_alloc+0x9c>
    1e64:	24 e0       	ldi	r18, 0x04	; 4
    1e66:	07 c0       	rjmp	.+14     	; 0x1e76 <udd_ep_alloc+0x9c>
    1e68:	25 e0       	ldi	r18, 0x05	; 5
    1e6a:	05 c0       	rjmp	.+10     	; 0x1e76 <udd_ep_alloc+0x9c>
    1e6c:	26 e0       	ldi	r18, 0x06	; 6
    1e6e:	03 c0       	rjmp	.+6      	; 0x1e76 <udd_ep_alloc+0x9c>
    1e70:	27 e0       	ldi	r18, 0x07	; 7
    1e72:	01 c0       	rjmp	.+2      	; 0x1e76 <udd_ep_alloc+0x9c>
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	fc 01       	movw	r30, r24
    1e78:	ee 0f       	add	r30, r30
    1e7a:	ff 1f       	adc	r31, r31
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	e4 5c       	subi	r30, 0xC4	; 196
    1e86:	fc 4d       	sbci	r31, 0xDC	; 220
    1e88:	15 8a       	std	Z+21, r1	; 0x15
    1e8a:	36 e0       	ldi	r19, 0x06	; 6
    1e8c:	34 8b       	std	Z+20, r19	; 0x14
    1e8e:	26 2b       	or	r18, r22
    1e90:	25 8b       	std	Z+21, r18	; 0x15
    1e92:	fc 01       	movw	r30, r24
    1e94:	ee 0f       	add	r30, r30
    1e96:	ff 1f       	adc	r31, r31
    1e98:	ee 0f       	add	r30, r30
    1e9a:	ff 1f       	adc	r31, r31
    1e9c:	ee 0f       	add	r30, r30
    1e9e:	ff 1f       	adc	r31, r31
    1ea0:	e4 5c       	subi	r30, 0xC4	; 196
    1ea2:	fc 4d       	sbci	r31, 0xDC	; 220
    1ea4:	25 89       	ldd	r18, Z+21	; 0x15
    1ea6:	20 7c       	andi	r18, 0xC0	; 192
    1ea8:	20 3c       	cpi	r18, 0xC0	; 192
    1eaa:	69 f4       	brne	.+26     	; 0x1ec6 <udd_ep_alloc+0xec>
    1eac:	fc 01       	movw	r30, r24
    1eae:	ee 0f       	add	r30, r30
    1eb0:	ff 1f       	adc	r31, r31
    1eb2:	ee 0f       	add	r30, r30
    1eb4:	ff 1f       	adc	r31, r31
    1eb6:	ee 0f       	add	r30, r30
    1eb8:	ff 1f       	adc	r31, r31
    1eba:	e4 5c       	subi	r30, 0xC4	; 196
    1ebc:	fc 4d       	sbci	r31, 0xDC	; 220
    1ebe:	25 89       	ldd	r18, Z+21	; 0x15
    1ec0:	27 70       	andi	r18, 0x07	; 7
    1ec2:	27 30       	cpi	r18, 0x07	; 7
    1ec4:	81 f0       	breq	.+32     	; 0x1ee6 <udd_ep_alloc+0x10c>
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	e4 5c       	subi	r30, 0xC4	; 196
    1ed6:	fc 4d       	sbci	r31, 0xDC	; 220
    1ed8:	85 89       	ldd	r24, Z+21	; 0x15
    1eda:	80 62       	ori	r24, 0x20	; 32
    1edc:	85 8b       	std	Z+21, r24	; 0x15
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	08 95       	ret
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	08 95       	ret
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	08 95       	ret

00001eea <udd_ep_is_halted>:
    1eea:	e8 2f       	mov	r30, r24
    1eec:	ef 70       	andi	r30, 0x0F	; 15
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	ee 0f       	add	r30, r30
    1ef2:	ff 1f       	adc	r31, r31
    1ef4:	08 2e       	mov	r0, r24
    1ef6:	00 0c       	add	r0, r0
    1ef8:	99 0b       	sbc	r25, r25
    1efa:	88 27       	eor	r24, r24
    1efc:	99 0f       	add	r25, r25
    1efe:	88 1f       	adc	r24, r24
    1f00:	99 27       	eor	r25, r25
    1f02:	e8 0f       	add	r30, r24
    1f04:	f9 1f       	adc	r31, r25
    1f06:	ee 0f       	add	r30, r30
    1f08:	ff 1f       	adc	r31, r31
    1f0a:	ee 0f       	add	r30, r30
    1f0c:	ff 1f       	adc	r31, r31
    1f0e:	ee 0f       	add	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	e4 5c       	subi	r30, 0xC4	; 196
    1f14:	fc 4d       	sbci	r31, 0xDC	; 220
    1f16:	85 89       	ldd	r24, Z+21	; 0x15
    1f18:	82 fb       	bst	r24, 2
    1f1a:	88 27       	eor	r24, r24
    1f1c:	80 f9       	bld	r24, 0
    1f1e:	08 95       	ret

00001f20 <udd_ep_clear_halt>:
    1f20:	0f 93       	push	r16
    1f22:	28 2f       	mov	r18, r24
    1f24:	2f 70       	andi	r18, 0x0F	; 15
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	a9 01       	movw	r20, r18
    1f2a:	44 0f       	add	r20, r20
    1f2c:	55 1f       	adc	r21, r21
    1f2e:	28 2f       	mov	r18, r24
    1f30:	08 2e       	mov	r0, r24
    1f32:	00 0c       	add	r0, r0
    1f34:	33 0b       	sbc	r19, r19
    1f36:	22 27       	eor	r18, r18
    1f38:	33 0f       	add	r19, r19
    1f3a:	22 1f       	adc	r18, r18
    1f3c:	33 27       	eor	r19, r19
    1f3e:	24 0f       	add	r18, r20
    1f40:	35 1f       	adc	r19, r21
    1f42:	a9 01       	movw	r20, r18
    1f44:	44 0f       	add	r20, r20
    1f46:	55 1f       	adc	r21, r21
    1f48:	44 0f       	add	r20, r20
    1f4a:	55 1f       	adc	r21, r21
    1f4c:	44 0f       	add	r20, r20
    1f4e:	55 1f       	adc	r21, r21
    1f50:	fa 01       	movw	r30, r20
    1f52:	e0 5b       	subi	r30, 0xB0	; 176
    1f54:	fc 4d       	sbci	r31, 0xDC	; 220
    1f56:	01 e0       	ldi	r16, 0x01	; 1
    1f58:	06 93       	lac	Z, r16
    1f5a:	fa 01       	movw	r30, r20
    1f5c:	e4 5c       	subi	r30, 0xC4	; 196
    1f5e:	fc 4d       	sbci	r31, 0xDC	; 220
    1f60:	95 89       	ldd	r25, Z+21	; 0x15
    1f62:	92 ff       	sbrs	r25, 2
    1f64:	11 c0       	rjmp	.+34     	; 0x1f88 <udd_ep_clear_halt+0x68>
    1f66:	fa 01       	movw	r30, r20
    1f68:	e4 5c       	subi	r30, 0xC4	; 196
    1f6a:	fc 4d       	sbci	r31, 0xDC	; 220
    1f6c:	95 89       	ldd	r25, Z+21	; 0x15
    1f6e:	9b 7f       	andi	r25, 0xFB	; 251
    1f70:	95 8b       	std	Z+21, r25	; 0x15
    1f72:	5f dc       	rcall	.-1858   	; 0x1832 <udd_ep_get_job>
    1f74:	fc 01       	movw	r30, r24
    1f76:	80 81       	ld	r24, Z
    1f78:	80 ff       	sbrs	r24, 0
    1f7a:	06 c0       	rjmp	.+12     	; 0x1f88 <udd_ep_clear_halt+0x68>
    1f7c:	8e 7f       	andi	r24, 0xFE	; 254
    1f7e:	80 83       	st	Z, r24
    1f80:	07 80       	ldd	r0, Z+7	; 0x07
    1f82:	f0 85       	ldd	r31, Z+8	; 0x08
    1f84:	e0 2d       	mov	r30, r0
    1f86:	19 95       	eicall
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	0f 91       	pop	r16
    1f8c:	08 95       	ret

00001f8e <udd_ep_run>:
    1f8e:	6f 92       	push	r6
    1f90:	7f 92       	push	r7
    1f92:	8f 92       	push	r8
    1f94:	9f 92       	push	r9
    1f96:	af 92       	push	r10
    1f98:	bf 92       	push	r11
    1f9a:	cf 92       	push	r12
    1f9c:	df 92       	push	r13
    1f9e:	ef 92       	push	r14
    1fa0:	ff 92       	push	r15
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	1f 92       	push	r1
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	78 2e       	mov	r7, r24
    1fb2:	66 2e       	mov	r6, r22
    1fb4:	4a 01       	movw	r8, r20
    1fb6:	59 01       	movw	r10, r18
    1fb8:	3c dc       	rcall	.-1928   	; 0x1832 <udd_ep_get_job>
    1fba:	6c 01       	movw	r12, r24
    1fbc:	27 2d       	mov	r18, r7
    1fbe:	87 2d       	mov	r24, r7
    1fc0:	8f 70       	andi	r24, 0x0F	; 15
    1fc2:	e8 2e       	mov	r14, r24
    1fc4:	f1 2c       	mov	r15, r1
    1fc6:	c7 01       	movw	r24, r14
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	e7 2c       	mov	r14, r7
    1fce:	07 2c       	mov	r0, r7
    1fd0:	00 0c       	add	r0, r0
    1fd2:	ff 08       	sbc	r15, r15
    1fd4:	ee 24       	eor	r14, r14
    1fd6:	ff 0c       	add	r15, r15
    1fd8:	ee 1c       	adc	r14, r14
    1fda:	ff 24       	eor	r15, r15
    1fdc:	e8 0e       	add	r14, r24
    1fde:	f9 1e       	adc	r15, r25
    1fe0:	f7 01       	movw	r30, r14
    1fe2:	ee 0f       	add	r30, r30
    1fe4:	ff 1f       	adc	r31, r31
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	ff 1f       	adc	r31, r31
    1fea:	ee 0f       	add	r30, r30
    1fec:	ff 1f       	adc	r31, r31
    1fee:	e4 5c       	subi	r30, 0xC4	; 196
    1ff0:	fc 4d       	sbci	r31, 0xDC	; 220
    1ff2:	85 89       	ldd	r24, Z+21	; 0x15
    1ff4:	80 7c       	andi	r24, 0xC0	; 192
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <udd_ep_run+0x6c>
    1ff8:	81 c0       	rjmp	.+258    	; 0x20fc <udd_ep_run+0x16e>
    1ffa:	f7 01       	movw	r30, r14
    1ffc:	ee 0f       	add	r30, r30
    1ffe:	ff 1f       	adc	r31, r31
    2000:	ee 0f       	add	r30, r30
    2002:	ff 1f       	adc	r31, r31
    2004:	ee 0f       	add	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	e4 5c       	subi	r30, 0xC4	; 196
    200a:	fc 4d       	sbci	r31, 0xDC	; 220
    200c:	85 89       	ldd	r24, Z+21	; 0x15
    200e:	80 7c       	andi	r24, 0xC0	; 192
    2010:	80 3c       	cpi	r24, 0xC0	; 192
    2012:	61 f0       	breq	.+24     	; 0x202c <udd_ep_run+0x9e>
    2014:	f7 01       	movw	r30, r14
    2016:	ee 0f       	add	r30, r30
    2018:	ff 1f       	adc	r31, r31
    201a:	ee 0f       	add	r30, r30
    201c:	ff 1f       	adc	r31, r31
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	e4 5c       	subi	r30, 0xC4	; 196
    2024:	fc 4d       	sbci	r31, 0xDC	; 220
    2026:	85 89       	ldd	r24, Z+21	; 0x15
    2028:	82 fd       	sbrc	r24, 2
    202a:	6a c0       	rjmp	.+212    	; 0x2100 <udd_ep_run+0x172>
    202c:	8f b7       	in	r24, 0x3f	; 63
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	f8 94       	cli
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	f6 01       	movw	r30, r12
    2036:	90 81       	ld	r25, Z
    2038:	90 ff       	sbrs	r25, 0
    203a:	03 c0       	rjmp	.+6      	; 0x2042 <udd_ep_run+0xb4>
    203c:	8f bf       	out	0x3f, r24	; 63
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	60 c0       	rjmp	.+192    	; 0x2102 <udd_ep_run+0x174>
    2042:	f6 01       	movw	r30, r12
    2044:	90 81       	ld	r25, Z
    2046:	91 60       	ori	r25, 0x01	; 1
    2048:	90 83       	st	Z, r25
    204a:	8f bf       	out	0x3f, r24	; 63
    204c:	81 82       	std	Z+1, r8	; 0x01
    204e:	92 82       	std	Z+2, r9	; 0x02
    2050:	a3 82       	std	Z+3, r10	; 0x03
    2052:	b4 82       	std	Z+4, r11	; 0x04
    2054:	15 82       	std	Z+5, r1	; 0x05
    2056:	16 82       	std	Z+6, r1	; 0x06
    2058:	07 83       	std	Z+7, r16	; 0x07
    205a:	10 87       	std	Z+8, r17	; 0x08
    205c:	61 10       	cpse	r6, r1
    205e:	06 c0       	rjmp	.+12     	; 0x206c <udd_ep_run+0xde>
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	a1 14       	cp	r10, r1
    2064:	b1 04       	cpc	r11, r1
    2066:	19 f0       	breq	.+6      	; 0x206e <udd_ep_run+0xe0>
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	01 c0       	rjmp	.+2      	; 0x206e <udd_ep_run+0xe0>
    206c:	91 e0       	ldi	r25, 0x01	; 1
    206e:	f6 01       	movw	r30, r12
    2070:	80 81       	ld	r24, Z
    2072:	90 fb       	bst	r25, 0
    2074:	81 f9       	bld	r24, 1
    2076:	8b 7f       	andi	r24, 0xFB	; 251
    2078:	80 83       	st	Z, r24
    207a:	22 23       	and	r18, r18
    207c:	64 f4       	brge	.+24     	; 0x2096 <udd_ep_run+0x108>
    207e:	f7 01       	movw	r30, r14
    2080:	ee 0f       	add	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	ee 0f       	add	r30, r30
    2086:	ff 1f       	adc	r31, r31
    2088:	ee 0f       	add	r30, r30
    208a:	ff 1f       	adc	r31, r31
    208c:	e4 5c       	subi	r30, 0xC4	; 196
    208e:	fc 4d       	sbci	r31, 0xDC	; 220
    2090:	12 8e       	std	Z+26, r1	; 0x1a
    2092:	13 8e       	std	Z+27, r1	; 0x1b
    2094:	2f c0       	rjmp	.+94     	; 0x20f4 <udd_ep_run+0x166>
    2096:	f7 01       	movw	r30, r14
    2098:	ee 0f       	add	r30, r30
    209a:	ff 1f       	adc	r31, r31
    209c:	ee 0f       	add	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	ee 0f       	add	r30, r30
    20a2:	ff 1f       	adc	r31, r31
    20a4:	e4 5c       	subi	r30, 0xC4	; 196
    20a6:	fc 4d       	sbci	r31, 0xDC	; 220
    20a8:	85 89       	ldd	r24, Z+21	; 0x15
    20aa:	80 7c       	andi	r24, 0xC0	; 192
    20ac:	80 3c       	cpi	r24, 0xC0	; 192
    20ae:	a9 f4       	brne	.+42     	; 0x20da <udd_ep_run+0x14c>
    20b0:	c7 01       	movw	r24, r14
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	80 5b       	subi	r24, 0xB0	; 176
    20c0:	9c 4d       	sbci	r25, 0xDC	; 220
    20c2:	8f db       	rcall	.-2274   	; 0x17e2 <udd_ep_get_size>
    20c4:	bc 01       	movw	r22, r24
    20c6:	c5 01       	movw	r24, r10
    20c8:	aa d2       	rcall	.+1364   	; 0x261e <__udivmodhi4>
    20ca:	89 2b       	or	r24, r25
    20cc:	31 f0       	breq	.+12     	; 0x20da <udd_ep_run+0x14c>
    20ce:	f6 01       	movw	r30, r12
    20d0:	80 81       	ld	r24, Z
    20d2:	8e 7f       	andi	r24, 0xFE	; 254
    20d4:	80 83       	st	Z, r24
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	14 c0       	rjmp	.+40     	; 0x2102 <udd_ep_run+0x174>
    20da:	f7 01       	movw	r30, r14
    20dc:	ee 0f       	add	r30, r30
    20de:	ff 1f       	adc	r31, r31
    20e0:	ee 0f       	add	r30, r30
    20e2:	ff 1f       	adc	r31, r31
    20e4:	ee 0f       	add	r30, r30
    20e6:	ff 1f       	adc	r31, r31
    20e8:	e4 5c       	subi	r30, 0xC4	; 196
    20ea:	fc 4d       	sbci	r31, 0xDC	; 220
    20ec:	16 8a       	std	Z+22, r1	; 0x16
    20ee:	17 8a       	std	Z+23, r1	; 0x17
    20f0:	12 8e       	std	Z+26, r1	; 0x1a
    20f2:	13 8e       	std	Z+27, r1	; 0x1b
    20f4:	87 2d       	mov	r24, r7
    20f6:	29 dc       	rcall	.-1966   	; 0x194a <udd_ep_trans_complet>
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	03 c0       	rjmp	.+6      	; 0x2102 <udd_ep_run+0x174>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	01 c0       	rjmp	.+2      	; 0x2102 <udd_ep_run+0x174>
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	0f 90       	pop	r0
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	1f 91       	pop	r17
    210a:	0f 91       	pop	r16
    210c:	ff 90       	pop	r15
    210e:	ef 90       	pop	r14
    2110:	df 90       	pop	r13
    2112:	cf 90       	pop	r12
    2114:	bf 90       	pop	r11
    2116:	af 90       	pop	r10
    2118:	9f 90       	pop	r9
    211a:	8f 90       	pop	r8
    211c:	7f 90       	pop	r7
    211e:	6f 90       	pop	r6
    2120:	08 95       	ret

00002122 <udd_ep_abort>:
    2122:	ff 92       	push	r15
    2124:	0f 93       	push	r16
    2126:	1f 93       	push	r17
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	18 2f       	mov	r17, r24
    212e:	c8 2f       	mov	r28, r24
    2130:	cf 70       	andi	r28, 0x0F	; 15
    2132:	d0 e0       	ldi	r29, 0x00	; 0
    2134:	ce 01       	movw	r24, r28
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	c1 2f       	mov	r28, r17
    213c:	01 2e       	mov	r0, r17
    213e:	00 0c       	add	r0, r0
    2140:	dd 0b       	sbc	r29, r29
    2142:	cc 27       	eor	r28, r28
    2144:	dd 0f       	add	r29, r29
    2146:	cc 1f       	adc	r28, r28
    2148:	dd 27       	eor	r29, r29
    214a:	c8 0f       	add	r28, r24
    214c:	d9 1f       	adc	r29, r25
    214e:	81 2f       	mov	r24, r17
    2150:	70 db       	rcall	.-2336   	; 0x1832 <udd_ep_get_job>
    2152:	dc 01       	movw	r26, r24
    2154:	fe 01       	movw	r30, r28
    2156:	ee 0f       	add	r30, r30
    2158:	ff 1f       	adc	r31, r31
    215a:	ee 0f       	add	r30, r30
    215c:	ff 1f       	adc	r31, r31
    215e:	ee 0f       	add	r30, r30
    2160:	ff 1f       	adc	r31, r31
    2162:	e0 5b       	subi	r30, 0xB0	; 176
    2164:	fc 4d       	sbci	r31, 0xDC	; 220
    2166:	02 e0       	ldi	r16, 0x02	; 2
    2168:	05 93       	las	Z, r16
    216a:	8c 91       	ld	r24, X
    216c:	80 ff       	sbrs	r24, 0
    216e:	22 c0       	rjmp	.+68     	; 0x21b4 <udd_ep_abort+0x92>
    2170:	8e 7f       	andi	r24, 0xFE	; 254
    2172:	8c 93       	st	X, r24
    2174:	17 96       	adiw	r26, 0x07	; 7
    2176:	ed 91       	ld	r30, X+
    2178:	fc 91       	ld	r31, X
    217a:	18 97       	sbiw	r26, 0x08	; 8
    217c:	30 97       	sbiw	r30, 0x00	; 0
    217e:	d1 f0       	breq	.+52     	; 0x21b4 <udd_ep_abort+0x92>
    2180:	11 23       	and	r17, r17
    2182:	5c f4       	brge	.+22     	; 0x219a <udd_ep_abort+0x78>
    2184:	cc 0f       	add	r28, r28
    2186:	dd 1f       	adc	r29, r29
    2188:	cc 0f       	add	r28, r28
    218a:	dd 1f       	adc	r29, r29
    218c:	cc 0f       	add	r28, r28
    218e:	dd 1f       	adc	r29, r29
    2190:	c4 5c       	subi	r28, 0xC4	; 196
    2192:	dc 4d       	sbci	r29, 0xDC	; 220
    2194:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2196:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2198:	0a c0       	rjmp	.+20     	; 0x21ae <udd_ep_abort+0x8c>
    219a:	cc 0f       	add	r28, r28
    219c:	dd 1f       	adc	r29, r29
    219e:	cc 0f       	add	r28, r28
    21a0:	dd 1f       	adc	r29, r29
    21a2:	cc 0f       	add	r28, r28
    21a4:	dd 1f       	adc	r29, r29
    21a6:	c4 5c       	subi	r28, 0xC4	; 196
    21a8:	dc 4d       	sbci	r29, 0xDC	; 220
    21aa:	6e 89       	ldd	r22, Y+22	; 0x16
    21ac:	7f 89       	ldd	r23, Y+23	; 0x17
    21ae:	41 2f       	mov	r20, r17
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	19 95       	eicall
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	1f 91       	pop	r17
    21ba:	0f 91       	pop	r16
    21bc:	ff 90       	pop	r15
    21be:	08 95       	ret

000021c0 <udd_ep_free>:
    21c0:	cf 93       	push	r28
    21c2:	c8 2f       	mov	r28, r24
    21c4:	ae df       	rcall	.-164    	; 0x2122 <udd_ep_abort>
    21c6:	ec 2f       	mov	r30, r28
    21c8:	ef 70       	andi	r30, 0x0F	; 15
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	ee 0f       	add	r30, r30
    21ce:	ff 1f       	adc	r31, r31
    21d0:	8c 2f       	mov	r24, r28
    21d2:	cc 0f       	add	r28, r28
    21d4:	99 0b       	sbc	r25, r25
    21d6:	88 27       	eor	r24, r24
    21d8:	99 0f       	add	r25, r25
    21da:	88 1f       	adc	r24, r24
    21dc:	99 27       	eor	r25, r25
    21de:	e8 0f       	add	r30, r24
    21e0:	f9 1f       	adc	r31, r25
    21e2:	ee 0f       	add	r30, r30
    21e4:	ff 1f       	adc	r31, r31
    21e6:	ee 0f       	add	r30, r30
    21e8:	ff 1f       	adc	r31, r31
    21ea:	ee 0f       	add	r30, r30
    21ec:	ff 1f       	adc	r31, r31
    21ee:	e4 5c       	subi	r30, 0xC4	; 196
    21f0:	fc 4d       	sbci	r31, 0xDC	; 220
    21f2:	15 8a       	std	Z+21, r1	; 0x15
    21f4:	cf 91       	pop	r28
    21f6:	08 95       	ret

000021f8 <udd_ep_set_halt>:
    21f8:	e8 2f       	mov	r30, r24
    21fa:	ef 70       	andi	r30, 0x0F	; 15
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	ee 0f       	add	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	28 2f       	mov	r18, r24
    2204:	08 2e       	mov	r0, r24
    2206:	00 0c       	add	r0, r0
    2208:	33 0b       	sbc	r19, r19
    220a:	22 27       	eor	r18, r18
    220c:	33 0f       	add	r19, r19
    220e:	22 1f       	adc	r18, r18
    2210:	33 27       	eor	r19, r19
    2212:	e2 0f       	add	r30, r18
    2214:	f3 1f       	adc	r31, r19
    2216:	ee 0f       	add	r30, r30
    2218:	ff 1f       	adc	r31, r31
    221a:	ee 0f       	add	r30, r30
    221c:	ff 1f       	adc	r31, r31
    221e:	ee 0f       	add	r30, r30
    2220:	ff 1f       	adc	r31, r31
    2222:	e4 5c       	subi	r30, 0xC4	; 196
    2224:	fc 4d       	sbci	r31, 0xDC	; 220
    2226:	95 89       	ldd	r25, Z+21	; 0x15
    2228:	94 60       	ori	r25, 0x04	; 4
    222a:	95 8b       	std	Z+21, r25	; 0x15
    222c:	7a df       	rcall	.-268    	; 0x2122 <udd_ep_abort>
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	08 95       	ret

00002232 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2232:	1f 92       	push	r1
    2234:	0f 92       	push	r0
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	0f 92       	push	r0
    223a:	11 24       	eor	r1, r1
    223c:	0b b6       	in	r0, 0x3b	; 59
    223e:	0f 92       	push	r0
    2240:	0f 93       	push	r16
    2242:	2f 93       	push	r18
    2244:	3f 93       	push	r19
    2246:	4f 93       	push	r20
    2248:	5f 93       	push	r21
    224a:	6f 93       	push	r22
    224c:	7f 93       	push	r23
    224e:	8f 93       	push	r24
    2250:	9f 93       	push	r25
    2252:	af 93       	push	r26
    2254:	bf 93       	push	r27
    2256:	cf 93       	push	r28
    2258:	ef 93       	push	r30
    225a:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    225c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2260:	88 23       	and	r24, r24
    2262:	3c f4       	brge	.+14     	; 0x2272 <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    2264:	80 e8       	ldi	r24, 0x80	; 128
    2266:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    226a:	0e 94 26 08 	call	0x104c	; 0x104c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    226e:	af d1       	rcall	.+862    	; 0x25ce <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2270:	89 c0       	rjmp	.+274    	; 0x2384 <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2272:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2276:	82 ff       	sbrs	r24, 2
    2278:	20 c0       	rjmp	.+64     	; 0x22ba <__vector_125+0x88>
		udd_ack_underflow_event();
    227a:	84 e0       	ldi	r24, 0x04	; 4
    227c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    2280:	80 91 58 23 	lds	r24, 0x2358	; 0x802358 <udd_sram+0x1c>
    2284:	86 ff       	sbrs	r24, 6
    2286:	7e c0       	rjmp	.+252    	; 0x2384 <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2288:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    228c:	81 fd       	sbrc	r24, 1
    228e:	7a c0       	rjmp	.+244    	; 0x2384 <__vector_125+0x152>
    2290:	eb da       	rcall	.-2602   	; 0x1868 <udd_ctrl_interrupt_tc_setup>
    2292:	81 11       	cpse	r24, r1
    2294:	77 c0       	rjmp	.+238    	; 0x2384 <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2296:	80 91 3b 23 	lds	r24, 0x233B	; 0x80233b <udd_ep_control_state>
    229a:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    229c:	11 f4       	brne	.+4      	; 0x22a2 <__vector_125+0x70>
    229e:	1f da       	rcall	.-3010   	; 0x16de <udd_ctrl_send_zlp_in>
    22a0:	71 c0       	rjmp	.+226    	; 0x2384 <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    22a2:	84 30       	cpi	r24, 0x04	; 4
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <__vector_125+0x76>
    22a6:	6e c0       	rjmp	.+220    	; 0x2384 <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    22a8:	e9 e5       	ldi	r30, 0x59	; 89
    22aa:	f3 e2       	ldi	r31, 0x23	; 35
    22ac:	04 e0       	ldi	r16, 0x04	; 4
    22ae:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    22b0:	e1 e5       	ldi	r30, 0x51	; 81
    22b2:	f3 e2       	ldi	r31, 0x23	; 35
    22b4:	04 e0       	ldi	r16, 0x04	; 4
    22b6:	05 93       	las	Z, r16
    22b8:	65 c0       	rjmp	.+202    	; 0x2384 <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    22ba:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    22be:	81 ff       	sbrs	r24, 1
    22c0:	5c c0       	rjmp	.+184    	; 0x237a <__vector_125+0x148>
		udd_ack_overflow_event();
    22c2:	82 e0       	ldi	r24, 0x02	; 2
    22c4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    22c8:	80 91 50 23 	lds	r24, 0x2350	; 0x802350 <udd_sram+0x14>
    22cc:	86 ff       	sbrs	r24, 6
    22ce:	5a c0       	rjmp	.+180    	; 0x2384 <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    22d0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    22d4:	81 fd       	sbrc	r24, 1
    22d6:	56 c0       	rjmp	.+172    	; 0x2384 <__vector_125+0x152>
    22d8:	c7 da       	rcall	.-2674   	; 0x1868 <udd_ctrl_interrupt_tc_setup>
    22da:	81 11       	cpse	r24, r1
    22dc:	53 c0       	rjmp	.+166    	; 0x2384 <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    22de:	80 91 3b 23 	lds	r24, 0x233B	; 0x80233b <udd_ep_control_state>
    22e2:	82 30       	cpi	r24, 0x02	; 2
    22e4:	41 f4       	brne	.+16     	; 0x22f6 <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    22e6:	84 e0       	ldi	r24, 0x04	; 4
    22e8:	80 93 3b 23 	sts	0x233B, r24	; 0x80233b <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    22ec:	e0 e5       	ldi	r30, 0x50	; 80
    22ee:	f3 e2       	ldi	r31, 0x23	; 35
    22f0:	02 e0       	ldi	r16, 0x02	; 2
    22f2:	06 93       	lac	Z, r16
    22f4:	47 c0       	rjmp	.+142    	; 0x2384 <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    22f6:	83 30       	cpi	r24, 0x03	; 3
    22f8:	09 f0       	breq	.+2      	; 0x22fc <__vector_125+0xca>
    22fa:	44 c0       	rjmp	.+136    	; 0x2384 <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    22fc:	e9 e5       	ldi	r30, 0x59	; 89
    22fe:	f3 e2       	ldi	r31, 0x23	; 35
    2300:	04 e0       	ldi	r16, 0x04	; 4
    2302:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2304:	e1 e5       	ldi	r30, 0x51	; 81
    2306:	f3 e2       	ldi	r31, 0x23	; 35
    2308:	04 e0       	ldi	r16, 0x04	; 4
    230a:	05 93       	las	Z, r16
    230c:	3b c0       	rjmp	.+118    	; 0x2384 <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    230e:	80 e1       	ldi	r24, 0x10	; 16
    2310:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2314:	c1 e0       	ldi	r28, 0x01	; 1
    2316:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    2318:	04 df       	rcall	.-504    	; 0x2122 <udd_ep_abort>
    231a:	8c 2f       	mov	r24, r28
    231c:	80 68       	ori	r24, 0x80	; 128
    231e:	01 df       	rcall	.-510    	; 0x2122 <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    2320:	cf 5f       	subi	r28, 0xFF	; 255
    2322:	c5 30       	cpi	r28, 0x05	; 5
    2324:	c1 f7       	brne	.-16     	; 0x2316 <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    2326:	0e 94 fc 07 	call	0xff8	; 0xff8 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    232a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    232e:	ec e3       	ldi	r30, 0x3C	; 60
    2330:	f3 e2       	ldi	r31, 0x23	; 35
    2332:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    2334:	96 e0       	ldi	r25, 0x06	; 6
    2336:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2338:	80 e4       	ldi	r24, 0x40	; 64
    233a:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    233c:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    233e:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2340:	85 8f       	std	Z+29, r24	; 0x1d
    2342:	8f e2       	ldi	r24, 0x2F	; 47
    2344:	93 e2       	ldi	r25, 0x23	; 35
    2346:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    2348:	91 8f       	std	Z+25, r25	; 0x19
    234a:	96 d9       	rcall	.-3284   	; 0x1678 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    234c:	1b c0       	rjmp	.+54     	; 0x2384 <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    234e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    2352:	86 ff       	sbrs	r24, 6
    2354:	07 c0       	rjmp	.+14     	; 0x2364 <__vector_125+0x132>
    2356:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2358:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    235c:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    235e:	54 d9       	rcall	.-3416   	; 0x1608 <udd_sleep_mode>
    2360:	34 d1       	rcall	.+616    	; 0x25ca <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    2362:	10 c0       	rjmp	.+32     	; 0x2384 <__vector_125+0x152>
    2364:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    2368:	85 ff       	sbrs	r24, 5
    236a:	0c c0       	rjmp	.+24     	; 0x2384 <__vector_125+0x152>
    236c:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    236e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2372:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2374:	49 d9       	rcall	.-3438   	; 0x1608 <udd_sleep_mode>
    2376:	2a d1       	rcall	.+596    	; 0x25cc <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    2378:	05 c0       	rjmp	.+10     	; 0x2384 <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    237a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    237e:	84 fd       	sbrc	r24, 4
    2380:	c6 cf       	rjmp	.-116    	; 0x230e <__vector_125+0xdc>
    2382:	e5 cf       	rjmp	.-54     	; 0x234e <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2384:	ff 91       	pop	r31
    2386:	ef 91       	pop	r30
    2388:	cf 91       	pop	r28
    238a:	bf 91       	pop	r27
    238c:	af 91       	pop	r26
    238e:	9f 91       	pop	r25
    2390:	8f 91       	pop	r24
    2392:	7f 91       	pop	r23
    2394:	6f 91       	pop	r22
    2396:	5f 91       	pop	r21
    2398:	4f 91       	pop	r20
    239a:	3f 91       	pop	r19
    239c:	2f 91       	pop	r18
    239e:	0f 91       	pop	r16
    23a0:	0f 90       	pop	r0
    23a2:	0b be       	out	0x3b, r0	; 59
    23a4:	0f 90       	pop	r0
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	0f 90       	pop	r0
    23aa:	1f 90       	pop	r1
    23ac:	18 95       	reti

000023ae <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    23ae:	1f 92       	push	r1
    23b0:	0f 92       	push	r0
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	0f 92       	push	r0
    23b6:	11 24       	eor	r1, r1
    23b8:	0b b6       	in	r0, 0x3b	; 59
    23ba:	0f 92       	push	r0
    23bc:	0f 93       	push	r16
    23be:	1f 93       	push	r17
    23c0:	2f 93       	push	r18
    23c2:	3f 93       	push	r19
    23c4:	4f 93       	push	r20
    23c6:	5f 93       	push	r21
    23c8:	6f 93       	push	r22
    23ca:	7f 93       	push	r23
    23cc:	8f 93       	push	r24
    23ce:	9f 93       	push	r25
    23d0:	af 93       	push	r26
    23d2:	bf 93       	push	r27
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	ef 93       	push	r30
    23da:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    23dc:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    23e0:	81 fd       	sbrc	r24, 1
    23e2:	03 c0       	rjmp	.+6      	; 0x23ea <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    23e4:	41 da       	rcall	.-2942   	; 0x1868 <udd_ctrl_interrupt_tc_setup>
    23e6:	81 11       	cpse	r24, r1
    23e8:	c3 c0       	rjmp	.+390    	; 0x2570 <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    23ea:	82 e0       	ldi	r24, 0x02	; 2
    23ec:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    23f0:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    23f4:	81 95       	neg	r24
    23f6:	88 0f       	add	r24, r24
    23f8:	e0 e5       	ldi	r30, 0x50	; 80
    23fa:	f3 e2       	ldi	r31, 0x23	; 35
    23fc:	e8 1b       	sub	r30, r24
    23fe:	f1 09       	sbc	r31, r1
    2400:	20 81       	ld	r18, Z
    2402:	31 81       	ldd	r19, Z+1	; 0x01
    2404:	20 55       	subi	r18, 0x50	; 80
    2406:	33 42       	sbci	r19, 0x23	; 35
    2408:	36 95       	lsr	r19
    240a:	27 95       	ror	r18
    240c:	36 95       	lsr	r19
    240e:	27 95       	ror	r18
    2410:	36 95       	lsr	r19
    2412:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2414:	82 2f       	mov	r24, r18
    2416:	86 95       	lsr	r24
    2418:	20 fd       	sbrc	r18, 0
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <__vector_126+0x72>
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	01 c0       	rjmp	.+2      	; 0x2422 <__vector_126+0x74>
    2420:	90 e8       	ldi	r25, 0x80	; 128
    2422:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2424:	e8 2f       	mov	r30, r24
    2426:	ef 70       	andi	r30, 0x0F	; 15
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	ee 0f       	add	r30, r30
    242c:	ff 1f       	adc	r31, r31
    242e:	28 2f       	mov	r18, r24
    2430:	08 2e       	mov	r0, r24
    2432:	00 0c       	add	r0, r0
    2434:	33 0b       	sbc	r19, r19
    2436:	22 27       	eor	r18, r18
    2438:	33 0f       	add	r19, r19
    243a:	22 1f       	adc	r18, r18
    243c:	33 27       	eor	r19, r19
    243e:	e2 0f       	add	r30, r18
    2440:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2442:	df 01       	movw	r26, r30
    2444:	aa 0f       	add	r26, r26
    2446:	bb 1f       	adc	r27, r27
    2448:	aa 0f       	add	r26, r26
    244a:	bb 1f       	adc	r27, r27
    244c:	aa 0f       	add	r26, r26
    244e:	bb 1f       	adc	r27, r27
    2450:	a4 5c       	subi	r26, 0xC4	; 196
    2452:	bc 4d       	sbci	r27, 0xDC	; 220
    2454:	54 96       	adiw	r26, 0x14	; 20
    2456:	9c 91       	ld	r25, X
    2458:	95 ff       	sbrs	r25, 5
    245a:	8a c0       	rjmp	.+276    	; 0x2570 <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    245c:	ee 0f       	add	r30, r30
    245e:	ff 1f       	adc	r31, r31
    2460:	ee 0f       	add	r30, r30
    2462:	ff 1f       	adc	r31, r31
    2464:	ee 0f       	add	r30, r30
    2466:	ff 1f       	adc	r31, r31
    2468:	e0 5b       	subi	r30, 0xB0	; 176
    246a:	fc 4d       	sbci	r31, 0xDC	; 220
    246c:	00 e2       	ldi	r16, 0x20	; 32
    246e:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2470:	81 11       	cpse	r24, r1
    2472:	79 c0       	rjmp	.+242    	; 0x2566 <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2474:	80 91 3b 23 	lds	r24, 0x233B	; 0x80233b <udd_ep_control_state>
    2478:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    247a:	19 f4       	brne	.+6      	; 0x2482 <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    247c:	3e d9       	rcall	.-3460   	; 0x16fa <udd_ctrl_endofrequest>
    247e:	fc d8       	rcall	.-3592   	; 0x1678 <udd_ctrl_init>
    2480:	77 c0       	rjmp	.+238    	; 0x2570 <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2482:	00 91 52 23 	lds	r16, 0x2352	; 0x802352 <udd_sram+0x16>
    2486:	10 91 53 23 	lds	r17, 0x2353	; 0x802353 <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    248a:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0xa>
    248e:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0xb>
    2492:	c0 91 37 23 	lds	r28, 0x2337	; 0x802337 <udd_ctrl_payload_nb_trans>
    2496:	d0 91 38 23 	lds	r29, 0x2338	; 0x802338 <udd_ctrl_payload_nb_trans+0x1>
    249a:	98 01       	movw	r18, r16
    249c:	2c 0f       	add	r18, r28
    249e:	3d 1f       	adc	r19, r29
    24a0:	82 17       	cp	r24, r18
    24a2:	93 07       	cpc	r25, r19
    24a4:	18 f4       	brcc	.+6      	; 0x24ac <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    24a6:	8c 01       	movw	r16, r24
    24a8:	0c 1b       	sub	r16, r28
    24aa:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    24ac:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udd_g_ctrlreq+0x8>
    24b0:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x9>
    24b4:	a8 01       	movw	r20, r16
    24b6:	6f e2       	ldi	r22, 0x2F	; 47
    24b8:	73 e2       	ldi	r23, 0x23	; 35
    24ba:	8c 0f       	add	r24, r28
    24bc:	9d 1f       	adc	r25, r29
    24be:	cb d0       	rcall	.+406    	; 0x2656 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    24c0:	c0 0f       	add	r28, r16
    24c2:	d1 1f       	adc	r29, r17
    24c4:	c0 93 37 23 	sts	0x2337, r28	; 0x802337 <udd_ctrl_payload_nb_trans>
    24c8:	d0 93 38 23 	sts	0x2338, r29	; 0x802338 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    24cc:	08 30       	cpi	r16, 0x08	; 8
    24ce:	11 05       	cpc	r17, r1
    24d0:	69 f4       	brne	.+26     	; 0x24ec <__vector_126+0x13e>
    24d2:	80 91 39 23 	lds	r24, 0x2339	; 0x802339 <udd_ctrl_prev_payload_nb_trans>
    24d6:	90 91 3a 23 	lds	r25, 0x233A	; 0x80233a <udd_ctrl_prev_payload_nb_trans+0x1>
    24da:	8c 0f       	add	r24, r28
    24dc:	9d 1f       	adc	r25, r29
    24de:	20 91 b7 23 	lds	r18, 0x23B7	; 0x8023b7 <udd_g_ctrlreq+0x6>
    24e2:	30 91 b8 23 	lds	r19, 0x23B8	; 0x8023b8 <udd_g_ctrlreq+0x7>
    24e6:	82 17       	cp	r24, r18
    24e8:	93 07       	cpc	r25, r19
    24ea:	80 f0       	brcs	.+32     	; 0x250c <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    24ec:	e1 eb       	ldi	r30, 0xB1	; 177
    24ee:	f3 e2       	ldi	r31, 0x23	; 35
    24f0:	c2 87       	std	Z+10, r28	; 0x0a
    24f2:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    24f4:	06 84       	ldd	r0, Z+14	; 0x0e
    24f6:	f7 85       	ldd	r31, Z+15	; 0x0f
    24f8:	e0 2d       	mov	r30, r0
    24fa:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    24fc:	29 f0       	breq	.+10     	; 0x2508 <__vector_126+0x15a>
    24fe:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    2500:	81 11       	cpse	r24, r1
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <__vector_126+0x15a>
    2504:	de d8       	rcall	.-3652   	; 0x16c2 <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2506:	34 c0       	rjmp	.+104    	; 0x2570 <__vector_126+0x1c2>
    2508:	ea d8       	rcall	.-3628   	; 0x16de <udd_ctrl_send_zlp_in>
    250a:	32 c0       	rjmp	.+100    	; 0x2570 <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    250c:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0xa>
    2510:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0xb>
    2514:	c8 17       	cp	r28, r24
    2516:	d9 07       	cpc	r29, r25
    2518:	f9 f4       	brne	.+62     	; 0x2558 <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    251a:	e0 91 bf 23 	lds	r30, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0xe>
    251e:	f0 91 c0 23 	lds	r31, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0xf>
    2522:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2524:	11 f4       	brne	.+4      	; 0x252a <__vector_126+0x17c>
    2526:	cd d8       	rcall	.-3686   	; 0x16c2 <udd_ctrl_stall_data>
    2528:	23 c0       	rjmp	.+70     	; 0x2570 <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    252a:	19 95       	eicall
    252c:	81 11       	cpse	r24, r1
    252e:	02 c0       	rjmp	.+4      	; 0x2534 <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2530:	c8 d8       	rcall	.-3696   	; 0x16c2 <udd_ctrl_stall_data>
    2532:	1e c0       	rjmp	.+60     	; 0x2570 <__vector_126+0x1c2>
    2534:	20 91 39 23 	lds	r18, 0x2339	; 0x802339 <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2538:	30 91 3a 23 	lds	r19, 0x233A	; 0x80233a <udd_ctrl_prev_payload_nb_trans+0x1>
    253c:	80 91 37 23 	lds	r24, 0x2337	; 0x802337 <udd_ctrl_payload_nb_trans>
    2540:	90 91 38 23 	lds	r25, 0x2338	; 0x802338 <udd_ctrl_payload_nb_trans+0x1>
    2544:	82 0f       	add	r24, r18
    2546:	93 1f       	adc	r25, r19
    2548:	80 93 39 23 	sts	0x2339, r24	; 0x802339 <udd_ctrl_prev_payload_nb_trans>
    254c:	90 93 3a 23 	sts	0x233A, r25	; 0x80233a <udd_ctrl_prev_payload_nb_trans+0x1>
    2550:	10 92 37 23 	sts	0x2337, r1	; 0x802337 <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2554:	10 92 38 23 	sts	0x2338, r1	; 0x802338 <udd_ctrl_payload_nb_trans+0x1>
    2558:	e0 e5       	ldi	r30, 0x50	; 80
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    255a:	f3 e2       	ldi	r31, 0x23	; 35
    255c:	02 e0       	ldi	r16, 0x02	; 2
    255e:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2560:	00 e2       	ldi	r16, 0x20	; 32
    2562:	06 93       	lac	Z, r16
    2564:	05 c0       	rjmp	.+10     	; 0x2570 <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2566:	80 38       	cpi	r24, 0x80	; 128
    2568:	11 f4       	brne	.+4      	; 0x256e <__vector_126+0x1c0>
		udd_ctrl_in_sent();
    256a:	cf d8       	rcall	.-3682   	; 0x170a <udd_ctrl_in_sent>
    256c:	01 c0       	rjmp	.+2      	; 0x2570 <__vector_126+0x1c2>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    256e:	ed d9       	rcall	.-3110   	; 0x194a <udd_ep_trans_complet>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2570:	ff 91       	pop	r31
    2572:	ef 91       	pop	r30
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	bf 91       	pop	r27
    257a:	af 91       	pop	r26
    257c:	9f 91       	pop	r25
    257e:	8f 91       	pop	r24
    2580:	7f 91       	pop	r23
    2582:	6f 91       	pop	r22
    2584:	5f 91       	pop	r21
    2586:	4f 91       	pop	r20
    2588:	3f 91       	pop	r19
    258a:	2f 91       	pop	r18
    258c:	1f 91       	pop	r17
    258e:	0f 91       	pop	r16
    2590:	0f 90       	pop	r0
    2592:	0b be       	out	0x3b, r0	; 59
    2594:	0f 90       	pop	r0
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	0f 90       	pop	r0
    259a:	1f 90       	pop	r1
    259c:	18 95       	reti

0000259e <main>:

/* --------------------------------------------------------------------- */

int main (void)
{
	irq_initialize_vectors();  // initializes vector table
    259e:	87 e0       	ldi	r24, 0x07	; 7
    25a0:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();          // enables CPU interrupts
    25a4:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    25a6:	eb ea       	ldi	r30, 0xAB	; 171
    25a8:	f3 e2       	ldi	r31, 0x23	; 35
    25aa:	10 82       	st	Z, r1
    25ac:	11 82       	std	Z+1, r1	; 0x01
    25ae:	12 82       	std	Z+2, r1	; 0x02
    25b0:	13 82       	std	Z+3, r1	; 0x03
    25b2:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();           // initialize sleep manager
	sysclk_init();             // initialize clock
    25b8:	0e 94 68 04 	call	0x8d0	; 0x8d0 <sysclk_init>

	io_init();                 // initializes board i/o pins
    25bc:	0e 94 8c 01 	call	0x318	; 0x318 <io_init>
	keypad_init();             // initializes keypad matrix
    25c0:	0e 94 de 02 	call	0x5bc	; 0x5bc <keypad_init>

	udc_start();               // starts USB device controller
    25c4:	0e 94 fa 07 	call	0xff4	; 0xff4 <udc_start>
    25c8:	ff cf       	rjmp	.-2      	; 0x25c8 <main+0x2a>

000025ca <main_suspend_action>:
	while (true) { }
}

/* --------------------------------------------------------------------- */

void main_suspend_action(void) { }
    25ca:	08 95       	ret

000025cc <main_resume_action>:
void main_resume_action(void) { }
    25cc:	08 95       	ret

000025ce <main_sof_action>:

void main_sof_action(void) {	// called each Start of Frame event (1 ms)
	if (!main_b_kbd_enable)
    25ce:	80 91 a7 23 	lds	r24, 0x23A7	; 0x8023a7 <main_b_kbd_enable>
    25d2:	88 23       	and	r24, r24
    25d4:	39 f0       	breq	.+14     	; 0x25e4 <main_sof_action+0x16>
	return;
	kbd_ui_process();
    25d6:	0e 94 66 04 	call	0x8cc	; 0x8cc <kbd_ui_process>

	if (!main_b_generic_enable)
    25da:	80 91 a6 23 	lds	r24, 0x23A6	; 0x8023a6 <main_b_generic_enable>
    25de:	81 11       	cpse	r24, r1
		return;
	jstk_ui_process();
    25e0:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <jstk_ui_process>
    25e4:	08 95       	ret

000025e6 <main_remotewakeup_enable>:
	// if(!main_b_led_enable)
	// 	return;
	// led_ui_process();
}

void main_remotewakeup_enable(void) { }
    25e6:	08 95       	ret

000025e8 <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    25e8:	08 95       	ret

000025ea <main_kbd_enable>:

bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	80 93 a7 23 	sts	0x23A7, r24	; 0x8023a7 <main_b_kbd_enable>
	return true;
}
    25f0:	08 95       	ret

000025f2 <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    25f2:	10 92 a7 23 	sts	0x23A7, r1	; 0x8023a7 <main_b_kbd_enable>
    25f6:	08 95       	ret

000025f8 <main_generic_enable>:
}

/* --------------------------------------------------------------------- */

bool main_generic_enable(void) {
	main_b_generic_enable = true;
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	80 93 a6 23 	sts	0x23A6, r24	; 0x8023a6 <main_b_generic_enable>
	return true;
}
    25fe:	08 95       	ret

00002600 <main_generic_disable>:

void main_generic_disable(void) {
	main_b_generic_enable = false;
    2600:	10 92 a6 23 	sts	0x23A6, r1	; 0x8023a6 <main_b_generic_enable>
    2604:	08 95       	ret

00002606 <main_led_enable>:
}

/* --------------------------------------------------------------------- */

bool main_led_enable(void) {
	main_b_led_enable = true;
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	80 93 a5 23 	sts	0x23A5, r24	; 0x8023a5 <main_b_led_enable>
	return true;
}
    260c:	08 95       	ret

0000260e <main_led_disable>:

void main_led_disable(void) {
	main_b_led_enable = false;
    260e:	10 92 a5 23 	sts	0x23A5, r1	; 0x8023a5 <main_b_led_enable>
    2612:	08 95       	ret

00002614 <main_led_report_out>:
}

void main_led_report_out(uint8_t const *report) {
	led_setStatus(report[0]);
    2614:	fc 01       	movw	r30, r24
    2616:	80 81       	ld	r24, Z
    2618:	0c 94 45 04 	jmp	0x88a	; 0x88a <led_setStatus>
    261c:	08 95       	ret

0000261e <__udivmodhi4>:
    261e:	aa 1b       	sub	r26, r26
    2620:	bb 1b       	sub	r27, r27
    2622:	51 e1       	ldi	r21, 0x11	; 17
    2624:	07 c0       	rjmp	.+14     	; 0x2634 <__udivmodhi4_ep>

00002626 <__udivmodhi4_loop>:
    2626:	aa 1f       	adc	r26, r26
    2628:	bb 1f       	adc	r27, r27
    262a:	a6 17       	cp	r26, r22
    262c:	b7 07       	cpc	r27, r23
    262e:	10 f0       	brcs	.+4      	; 0x2634 <__udivmodhi4_ep>
    2630:	a6 1b       	sub	r26, r22
    2632:	b7 0b       	sbc	r27, r23

00002634 <__udivmodhi4_ep>:
    2634:	88 1f       	adc	r24, r24
    2636:	99 1f       	adc	r25, r25
    2638:	5a 95       	dec	r21
    263a:	a9 f7       	brne	.-22     	; 0x2626 <__udivmodhi4_loop>
    263c:	80 95       	com	r24
    263e:	90 95       	com	r25
    2640:	bc 01       	movw	r22, r24
    2642:	cd 01       	movw	r24, r26
    2644:	08 95       	ret

00002646 <__tablejump2__>:
    2646:	ee 0f       	add	r30, r30
    2648:	ff 1f       	adc	r31, r31
    264a:	88 1f       	adc	r24, r24
    264c:	8b bf       	out	0x3b, r24	; 59
    264e:	07 90       	elpm	r0, Z+
    2650:	f6 91       	elpm	r31, Z
    2652:	e0 2d       	mov	r30, r0
    2654:	19 94       	eijmp

00002656 <memcpy>:
    2656:	fb 01       	movw	r30, r22
    2658:	dc 01       	movw	r26, r24
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <memcpy+0xa>
    265c:	01 90       	ld	r0, Z+
    265e:	0d 92       	st	X+, r0
    2660:	41 50       	subi	r20, 0x01	; 1
    2662:	50 40       	sbci	r21, 0x00	; 0
    2664:	d8 f7       	brcc	.-10     	; 0x265c <memcpy+0x6>
    2666:	08 95       	ret

00002668 <_exit>:
    2668:	f8 94       	cli

0000266a <__stop_program>:
    266a:	ff cf       	rjmp	.-2      	; 0x266a <__stop_program>
