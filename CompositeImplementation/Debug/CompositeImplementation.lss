
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014e  00802000  000026ea  0000277e  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000166  0080214e  0080214e  000028ce  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e8  00000000  00000000  00002940  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a453  00000000  00000000  00002e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004e89  00000000  00000000  0000d27b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008ab3  00000000  00000000  00012104  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ad4  00000000  00000000  0001abb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00035fd0  00000000  00000000  0001b68c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027b7  00000000  00000000  0005165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004c0  00000000  00000000  00053e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cbb7  00000000  00000000  000542d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	2c c1       	rjmp	.+600    	; 0x25e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c1       	rjmp	.+596    	; 0x25e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c1       	rjmp	.+592    	; 0x25e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c1       	rjmp	.+588    	; 0x25e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c1       	rjmp	.+584    	; 0x25e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c1       	rjmp	.+580    	; 0x25e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c1       	rjmp	.+576    	; 0x25e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c1       	rjmp	.+572    	; 0x25e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c1       	rjmp	.+568    	; 0x25e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c1       	rjmp	.+564    	; 0x25e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	18 c1       	rjmp	.+560    	; 0x25e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c1       	rjmp	.+556    	; 0x25e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c1       	rjmp	.+552    	; 0x25e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c1       	rjmp	.+548    	; 0x25e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c1       	rjmp	.+544    	; 0x25e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c1       	rjmp	.+540    	; 0x25e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c1       	rjmp	.+536    	; 0x25e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c1       	rjmp	.+532    	; 0x25e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c1       	rjmp	.+528    	; 0x25e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c1       	rjmp	.+524    	; 0x25e <__bad_interrupt>
      52:	00 00       	nop
      54:	04 c1       	rjmp	.+520    	; 0x25e <__bad_interrupt>
      56:	00 00       	nop
      58:	02 c1       	rjmp	.+516    	; 0x25e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	00 c1       	rjmp	.+512    	; 0x25e <__bad_interrupt>
      5e:	00 00       	nop
      60:	fe c0       	rjmp	.+508    	; 0x25e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c0       	rjmp	.+504    	; 0x25e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c0       	rjmp	.+500    	; 0x25e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c0       	rjmp	.+496    	; 0x25e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c0       	rjmp	.+492    	; 0x25e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c0       	rjmp	.+488    	; 0x25e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c0       	rjmp	.+484    	; 0x25e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c0       	rjmp	.+480    	; 0x25e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c0       	rjmp	.+476    	; 0x25e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c0       	rjmp	.+472    	; 0x25e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c0       	rjmp	.+468    	; 0x25e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c0       	rjmp	.+464    	; 0x25e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c0       	rjmp	.+460    	; 0x25e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c0       	rjmp	.+456    	; 0x25e <__bad_interrupt>
      96:	00 00       	nop
      98:	e2 c0       	rjmp	.+452    	; 0x25e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e0 c0       	rjmp	.+448    	; 0x25e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	de c0       	rjmp	.+444    	; 0x25e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dc c0       	rjmp	.+440    	; 0x25e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	da c0       	rjmp	.+436    	; 0x25e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d8 c0       	rjmp	.+432    	; 0x25e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d6 c0       	rjmp	.+428    	; 0x25e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d4 c0       	rjmp	.+424    	; 0x25e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d2 c0       	rjmp	.+420    	; 0x25e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d0 c0       	rjmp	.+416    	; 0x25e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ce c0       	rjmp	.+412    	; 0x25e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cc c0       	rjmp	.+408    	; 0x25e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ca c0       	rjmp	.+404    	; 0x25e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c8 c0       	rjmp	.+400    	; 0x25e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c6 c0       	rjmp	.+396    	; 0x25e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c4 c0       	rjmp	.+392    	; 0x25e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c2 c0       	rjmp	.+388    	; 0x25e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <__bad_interrupt>
      de:	00 00       	nop
      e0:	be c0       	rjmp	.+380    	; 0x25e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bc c0       	rjmp	.+376    	; 0x25e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ba c0       	rjmp	.+372    	; 0x25e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b8 c0       	rjmp	.+368    	; 0x25e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b6 c0       	rjmp	.+364    	; 0x25e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b4 c0       	rjmp	.+360    	; 0x25e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b2 c0       	rjmp	.+356    	; 0x25e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b0 c0       	rjmp	.+352    	; 0x25e <__bad_interrupt>
      fe:	00 00       	nop
     100:	ae c0       	rjmp	.+348    	; 0x25e <__bad_interrupt>
     102:	00 00       	nop
     104:	ac c0       	rjmp	.+344    	; 0x25e <__bad_interrupt>
     106:	00 00       	nop
     108:	aa c0       	rjmp	.+340    	; 0x25e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a8 c0       	rjmp	.+336    	; 0x25e <__bad_interrupt>
     10e:	00 00       	nop
     110:	a6 c0       	rjmp	.+332    	; 0x25e <__bad_interrupt>
     112:	00 00       	nop
     114:	a4 c0       	rjmp	.+328    	; 0x25e <__bad_interrupt>
     116:	00 00       	nop
     118:	a2 c0       	rjmp	.+324    	; 0x25e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c0       	rjmp	.+320    	; 0x25e <__bad_interrupt>
     11e:	00 00       	nop
     120:	9e c0       	rjmp	.+316    	; 0x25e <__bad_interrupt>
     122:	00 00       	nop
     124:	9c c0       	rjmp	.+312    	; 0x25e <__bad_interrupt>
     126:	00 00       	nop
     128:	9a c0       	rjmp	.+308    	; 0x25e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	98 c0       	rjmp	.+304    	; 0x25e <__bad_interrupt>
     12e:	00 00       	nop
     130:	96 c0       	rjmp	.+300    	; 0x25e <__bad_interrupt>
     132:	00 00       	nop
     134:	94 c0       	rjmp	.+296    	; 0x25e <__bad_interrupt>
     136:	00 00       	nop
     138:	92 c0       	rjmp	.+292    	; 0x25e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	90 c0       	rjmp	.+288    	; 0x25e <__bad_interrupt>
     13e:	00 00       	nop
     140:	8e c0       	rjmp	.+284    	; 0x25e <__bad_interrupt>
     142:	00 00       	nop
     144:	8c c0       	rjmp	.+280    	; 0x25e <__bad_interrupt>
     146:	00 00       	nop
     148:	8a c0       	rjmp	.+276    	; 0x25e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	88 c0       	rjmp	.+272    	; 0x25e <__bad_interrupt>
     14e:	00 00       	nop
     150:	86 c0       	rjmp	.+268    	; 0x25e <__bad_interrupt>
     152:	00 00       	nop
     154:	84 c0       	rjmp	.+264    	; 0x25e <__bad_interrupt>
     156:	00 00       	nop
     158:	82 c0       	rjmp	.+260    	; 0x25e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	80 c0       	rjmp	.+256    	; 0x25e <__bad_interrupt>
     15e:	00 00       	nop
     160:	7e c0       	rjmp	.+252    	; 0x25e <__bad_interrupt>
     162:	00 00       	nop
     164:	7c c0       	rjmp	.+248    	; 0x25e <__bad_interrupt>
     166:	00 00       	nop
     168:	7a c0       	rjmp	.+244    	; 0x25e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	78 c0       	rjmp	.+240    	; 0x25e <__bad_interrupt>
     16e:	00 00       	nop
     170:	76 c0       	rjmp	.+236    	; 0x25e <__bad_interrupt>
     172:	00 00       	nop
     174:	74 c0       	rjmp	.+232    	; 0x25e <__bad_interrupt>
     176:	00 00       	nop
     178:	72 c0       	rjmp	.+228    	; 0x25e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	70 c0       	rjmp	.+224    	; 0x25e <__bad_interrupt>
     17e:	00 00       	nop
     180:	6e c0       	rjmp	.+220    	; 0x25e <__bad_interrupt>
     182:	00 00       	nop
     184:	6c c0       	rjmp	.+216    	; 0x25e <__bad_interrupt>
     186:	00 00       	nop
     188:	6a c0       	rjmp	.+212    	; 0x25e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	68 c0       	rjmp	.+208    	; 0x25e <__bad_interrupt>
     18e:	00 00       	nop
     190:	66 c0       	rjmp	.+204    	; 0x25e <__bad_interrupt>
     192:	00 00       	nop
     194:	64 c0       	rjmp	.+200    	; 0x25e <__bad_interrupt>
     196:	00 00       	nop
     198:	62 c0       	rjmp	.+196    	; 0x25e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	60 c0       	rjmp	.+192    	; 0x25e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5c c0       	rjmp	.+184    	; 0x25e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5a c0       	rjmp	.+180    	; 0x25e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	58 c0       	rjmp	.+176    	; 0x25e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	56 c0       	rjmp	.+172    	; 0x25e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	54 c0       	rjmp	.+168    	; 0x25e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	52 c0       	rjmp	.+164    	; 0x25e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	50 c0       	rjmp	.+160    	; 0x25e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4e c0       	rjmp	.+156    	; 0x25e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4c c0       	rjmp	.+152    	; 0x25e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4a c0       	rjmp	.+148    	; 0x25e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	48 c0       	rjmp	.+144    	; 0x25e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	46 c0       	rjmp	.+140    	; 0x25e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	44 c0       	rjmp	.+136    	; 0x25e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	40 c0       	rjmp	.+128    	; 0x25e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3e c0       	rjmp	.+124    	; 0x25e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3c c0       	rjmp	.+120    	; 0x25e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3a c0       	rjmp	.+116    	; 0x25e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	38 c0       	rjmp	.+112    	; 0x25e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	36 c0       	rjmp	.+108    	; 0x25e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__vector_125>
     1f8:	0c 94 22 12 	jmp	0x2444	; 0x2444 <__vector_126>
     1fc:	86 03       	fmuls	r16, r22
     1fe:	cf 03       	fmulsu	r20, r23
     200:	7c 03       	fmul	r23, r20
     202:	d1 03       	fmuls	r21, r17
     204:	7e 03       	fmul	r23, r22
     206:	80 03       	fmuls	r16, r16
     208:	82 03       	fmuls	r16, r18
     20a:	84 03       	fmuls	r16, r20
     20c:	86 03       	fmuls	r16, r22
     20e:	57 0c       	add	r5, r7
     210:	5a 0c       	add	r5, r10
     212:	5d 0c       	add	r5, r13
     214:	60 0c       	add	r6, r0
     216:	63 0c       	add	r6, r3
     218:	66 0c       	add	r6, r6
     21a:	69 0c       	add	r6, r9

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df e5       	ldi	r29, 0x5F	; 95
     226:	de bf       	out	0x3e, r29	; 62
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	11 e2       	ldi	r17, 0x21	; 33
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	ea ee       	ldi	r30, 0xEA	; 234
     234:	f6 e2       	ldi	r31, 0x26	; 38
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	ae 34       	cpi	r26, 0x4E	; 78
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	22 e2       	ldi	r18, 0x22	; 34
     248:	ae e4       	ldi	r26, 0x4E	; 78
     24a:	b1 e2       	ldi	r27, 0x21	; 33
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	a4 3b       	cpi	r26, 0xB4	; 180
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 1a 13 	call	0x2634	; 0x2634 <main>
     25a:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <_exit>

0000025e <__bad_interrupt>:
     25e:	d0 ce       	rjmp	.-608    	; 0x0 <__vectors>

00000260 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     260:	e0 e0       	ldi	r30, 0x00	; 0
     262:	f6 e0       	ldi	r31, 0x06	; 6
     264:	9f ef       	ldi	r25, 0xFF	; 255
     266:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     268:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     26a:	e0 e2       	ldi	r30, 0x20	; 32
     26c:	f6 e0       	ldi	r31, 0x06	; 6
     26e:	3f e3       	ldi	r19, 0x3F	; 63
     270:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     272:	88 e1       	ldi	r24, 0x18	; 24
     274:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     276:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     278:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     27a:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     27c:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     27e:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     280:	20 ec       	ldi	r18, 0xC0	; 192
     282:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     284:	40 e4       	ldi	r20, 0x40	; 64
     286:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     288:	40 e8       	ldi	r20, 0x80	; 128
     28a:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     28c:	e0 e4       	ldi	r30, 0x40	; 64
     28e:	f6 e0       	ldi	r31, 0x06	; 6
     290:	4c ef       	ldi	r20, 0xFC	; 252
     292:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     294:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     296:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     298:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     29a:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     29c:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     29e:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     2a0:	43 e0       	ldi	r20, 0x03	; 3
     2a2:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     2a4:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     2a6:	e0 e6       	ldi	r30, 0x60	; 96
     2a8:	f6 e0       	ldi	r31, 0x06	; 6
     2aa:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2ac:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2ae:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2b0:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2b2:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2b4:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2b6:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     2b8:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     2ba:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     2bc:	e0 e8       	ldi	r30, 0x80	; 128
     2be:	f6 e0       	ldi	r31, 0x06	; 6
     2c0:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2c2:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2c4:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2c6:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2c8:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2ca:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2cc:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2ce:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2d0:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     2d2:	e0 ea       	ldi	r30, 0xA0	; 160
     2d4:	f6 e0       	ldi	r31, 0x06	; 6
     2d6:	90 ef       	ldi	r25, 0xF0	; 240
     2d8:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2da:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2dc:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2de:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2e0:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     2e2:	8f e0       	ldi	r24, 0x0F	; 15
     2e4:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     2e6:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     2e8:	64 c2       	rjmp	.+1224   	; 0x7b2 <led_init>
     2ea:	08 95       	ret

000002ec <jstk_readVertIndex>:

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     2ec:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>
     2f0:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	92 2b       	or	r25, r18
     2f8:	96 95       	lsr	r25
     2fa:	87 95       	ror	r24
     2fc:	96 95       	lsr	r25
     2fe:	87 95       	ror	r24
     300:	bc 01       	movw	r22, r24
     302:	7f 70       	andi	r23, 0x0F	; 15
     304:	80 ff       	sbrs	r24, 0
     306:	17 c0       	rjmp	.+46     	; 0x336 <jstk_readVertIndex+0x4a>
     308:	21 e0       	ldi	r18, 0x01	; 1
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	e1 e0       	ldi	r30, 0x01	; 1
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	82 2f       	mov	r24, r18
     312:	af 01       	movw	r20, r30
     314:	02 2e       	mov	r0, r18
     316:	02 c0       	rjmp	.+4      	; 0x31c <jstk_readVertIndex+0x30>
     318:	44 0f       	add	r20, r20
     31a:	55 1f       	adc	r21, r21
     31c:	0a 94       	dec	r0
     31e:	e2 f7       	brpl	.-8      	; 0x318 <jstk_readVertIndex+0x2c>
     320:	46 23       	and	r20, r22
     322:	57 23       	and	r21, r23
     324:	45 2b       	or	r20, r21
     326:	41 f0       	breq	.+16     	; 0x338 <jstk_readVertIndex+0x4c>
     328:	2f 5f       	subi	r18, 0xFF	; 255
     32a:	3f 4f       	sbci	r19, 0xFF	; 255
     32c:	2c 30       	cpi	r18, 0x0C	; 12
     32e:	31 05       	cpc	r19, r1
     330:	79 f7       	brne	.-34     	; 0x310 <jstk_readVertIndex+0x24>
     332:	8f ef       	ldi	r24, 0xFF	; 255
     334:	08 95       	ret
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	08 95       	ret

0000033a <jstk_readHoriIndex>:
     33a:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     33e:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	92 2b       	or	r25, r18
     346:	bc 01       	movw	r22, r24
     348:	7f 70       	andi	r23, 0x0F	; 15
     34a:	80 ff       	sbrs	r24, 0
     34c:	17 c0       	rjmp	.+46     	; 0x37c <jstk_readHoriIndex+0x42>
     34e:	21 e0       	ldi	r18, 0x01	; 1
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	e1 e0       	ldi	r30, 0x01	; 1
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	82 2f       	mov	r24, r18
     358:	af 01       	movw	r20, r30
     35a:	02 2e       	mov	r0, r18
     35c:	02 c0       	rjmp	.+4      	; 0x362 <jstk_readHoriIndex+0x28>
     35e:	44 0f       	add	r20, r20
     360:	55 1f       	adc	r21, r21
     362:	0a 94       	dec	r0
     364:	e2 f7       	brpl	.-8      	; 0x35e <jstk_readHoriIndex+0x24>
     366:	46 23       	and	r20, r22
     368:	57 23       	and	r21, r23
     36a:	45 2b       	or	r20, r21
     36c:	41 f0       	breq	.+16     	; 0x37e <jstk_readHoriIndex+0x44>
     36e:	2f 5f       	subi	r18, 0xFF	; 255
     370:	3f 4f       	sbci	r19, 0xFF	; 255
     372:	2c 30       	cpi	r18, 0x0C	; 12
     374:	31 05       	cpc	r19, r1
     376:	79 f7       	brne	.-34     	; 0x356 <jstk_readHoriIndex+0x1c>
     378:	8f ef       	ldi	r24, 0xFF	; 255
     37a:	08 95       	ret
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	08 95       	ret

00000380 <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     380:	88 23       	and	r24, r24
     382:	f4 f1       	brlt	.+124    	; 0x400 <__LOCK_REGION_LENGTH__>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     384:	9b ef       	ldi	r25, 0xFB	; 251
     386:	98 0f       	add	r25, r24
     388:	92 30       	cpi	r25, 0x02	; 2
     38a:	e0 f1       	brcs	.+120    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     38c:	85 30       	cpi	r24, 0x05	; 5
     38e:	34 f4       	brge	.+12     	; 0x39c <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     390:	95 e0       	ldi	r25, 0x05	; 5
     392:	98 1b       	sub	r25, r24
     394:	92 30       	cpi	r25, 0x02	; 2
     396:	08 f0       	brcs	.+2      	; 0x39a <jstk_ledMask+0x1a>
     398:	42 c0       	rjmp	.+132    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     39a:	36 c0       	rjmp	.+108    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     39c:	9a ef       	ldi	r25, 0xFA	; 250
     39e:	98 0f       	add	r25, r24
     3a0:	92 30       	cpi	r25, 0x02	; 2
     3a2:	b0 f5       	brcc	.+108    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3a4:	31 c0       	rjmp	.+98     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     3a6:	62 e0       	ldi	r22, 0x02	; 2
     3a8:	23 e0       	ldi	r18, 0x03	; 3
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     3b0:	e1 e0       	ldi	r30, 0x01	; 1
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	af 01       	movw	r20, r30
     3b6:	02 2e       	mov	r0, r18
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <jstk_ledMask+0x3e>
     3ba:	44 0f       	add	r20, r20
     3bc:	55 1f       	adc	r21, r21
     3be:	0a 94       	dec	r0
     3c0:	e2 f7       	brpl	.-8      	; 0x3ba <jstk_ledMask+0x3a>
     3c2:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     3c4:	9f 5f       	subi	r25, 0xFF	; 255
     3c6:	21 50       	subi	r18, 0x01	; 1
     3c8:	31 09       	sbc	r19, r1
     3ca:	96 17       	cp	r25, r22
     3cc:	98 f3       	brcs	.-26     	; 0x3b4 <jstk_ledMask+0x34>
     3ce:	08 95       	ret
     3d0:	81 50       	subi	r24, 0x01	; 1
     3d2:	48 2f       	mov	r20, r24
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	4b 5f       	subi	r20, 0xFB	; 251
     3d8:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     3da:	24 e0       	ldi	r18, 0x04	; 4
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     3e0:	e1 e0       	ldi	r30, 0x01	; 1
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	bf 01       	movw	r22, r30
     3e6:	02 2e       	mov	r0, r18
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <jstk_ledMask+0x6e>
     3ea:	66 0f       	add	r22, r22
     3ec:	77 1f       	adc	r23, r23
     3ee:	0a 94       	dec	r0
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <jstk_ledMask+0x6a>
     3f2:	86 2b       	or	r24, r22
     3f4:	2f 5f       	subi	r18, 0xFF	; 255
     3f6:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     3f8:	24 17       	cp	r18, r20
     3fa:	35 07       	cpc	r19, r21
     3fc:	99 f7       	brne	.-26     	; 0x3e4 <jstk_ledMask+0x64>
     3fe:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     404:	88 e1       	ldi	r24, 0x18	; 24
     406:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     408:	85 30       	cpi	r24, 0x05	; 5
     40a:	6c f2       	brlt	.-102    	; 0x3a6 <jstk_ledMask+0x26>
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	e0 cf       	rjmp	.-64     	; 0x3d0 <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     410:	85 50       	subi	r24, 0x05	; 5
     412:	85 30       	cpi	r24, 0x05	; 5
     414:	08 f0       	brcs	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     416:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     418:	81 11       	cpse	r24, r1
     41a:	da cf       	rjmp	.-76     	; 0x3d0 <jstk_ledMask+0x50>
     41c:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     41e:	66 e0       	ldi	r22, 0x06	; 6
     420:	68 1b       	sub	r22, r24
     422:	65 30       	cpi	r22, 0x05	; 5
     424:	08 f0       	brcs	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     426:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     428:	61 11       	cpse	r22, r1
     42a:	be cf       	rjmp	.-132    	; 0x3a8 <jstk_ledMask+0x28>
     42c:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     42e:	08 95       	ret

00000430 <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     430:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     432:	5c df       	rcall	.-328    	; 0x2ec <jstk_readVertIndex>
     434:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     436:	81 df       	rcall	.-254    	; 0x33a <jstk_readHoriIndex>
     438:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     43a:	24 f4       	brge	.+8      	; 0x444 <jstk_readMask+0x14>
     43c:	88 23       	and	r24, r24
     43e:	c4 f0       	brlt	.+48     	; 0x470 <jstk_readMask+0x40>
     440:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     442:	09 c0       	rjmp	.+18     	; 0x456 <jstk_readMask+0x26>
     444:	c6 30       	cpi	r28, 0x06	; 6
     446:	1c f0       	brlt	.+6      	; 0x44e <jstk_readMask+0x1e>
     448:	9b ef       	ldi	r25, 0xFB	; 251
     44a:	9c 0f       	add	r25, r28
     44c:	02 c0       	rjmp	.+4      	; 0x452 <jstk_readMask+0x22>
     44e:	95 e0       	ldi	r25, 0x05	; 5
     450:	9c 1b       	sub	r25, r28
     452:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     454:	54 f0       	brlt	.+20     	; 0x46a <jstk_readMask+0x3a>
     456:	86 30       	cpi	r24, 0x06	; 6
     458:	1c f0       	brlt	.+6      	; 0x460 <jstk_readMask+0x30>
     45a:	2b ef       	ldi	r18, 0xFB	; 251
     45c:	28 0f       	add	r18, r24
     45e:	02 c0       	rjmp	.+4      	; 0x464 <jstk_readMask+0x34>
     460:	25 e0       	ldi	r18, 0x05	; 5
     462:	28 1b       	sub	r18, r24
     464:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     466:	08 f4       	brcc	.+2      	; 0x46a <jstk_readMask+0x3a>
     468:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     46a:	8c 2f       	mov	r24, r28
     46c:	89 df       	rcall	.-238    	; 0x380 <jstk_ledMask>
     46e:	01 c0       	rjmp	.+2      	; 0x472 <jstk_readMask+0x42>
     470:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     472:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     474:	08 95       	ret

00000476 <jstk_usbTask>:
     476:	61 df       	rcall	.-318    	; 0x33a <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     478:	88 23       	and	r24, r24
     47a:	3c f0       	brlt	.+14     	; 0x48a <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     47c:	e8 2f       	mov	r30, r24
     47e:	88 0f       	add	r24, r24
     480:	ff 0b       	sbc	r31, r31
     482:	ee 5b       	subi	r30, 0xBE	; 190
     484:	fe 4d       	sbci	r31, 0xDE	; 222
     486:	80 81       	ld	r24, Z
     488:	01 c0       	rjmp	.+2      	; 0x48c <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     48a:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     48c:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <__data_end>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     490:	2d df       	rcall	.-422    	; 0x2ec <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     492:	88 23       	and	r24, r24
     494:	3c f0       	brlt	.+14     	; 0x4a4 <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     496:	e8 2f       	mov	r30, r24
     498:	88 0f       	add	r24, r24
     49a:	ff 0b       	sbc	r31, r31
     49c:	ee 5b       	subi	r30, 0xBE	; 190
     49e:	fe 4d       	sbci	r31, 0xDE	; 222
     4a0:	80 81       	ld	r24, Z
     4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     4a4:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     4a6:	ee e4       	ldi	r30, 0x4E	; 78
     4a8:	f1 e2       	ldi	r31, 0x21	; 33
     4aa:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     4ac:	20 81       	ld	r18, Z
     4ae:	90 91 00 20 	lds	r25, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     4b2:	29 13       	cpse	r18, r25
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <jstk_usbTask+0x48>
     4b6:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     4ba:	98 17       	cp	r25, r24
     4bc:	71 f0       	breq	.+28     	; 0x4da <jstk_usbTask+0x64>
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     4be:	8e e4       	ldi	r24, 0x4E	; 78
     4c0:	91 e2       	ldi	r25, 0x21	; 33
     4c2:	14 d3       	rcall	.+1576   	; 0xaec <udi_hid_generic_send_report_in>
     4c4:	88 23       	and	r24, r24
     4c6:	49 f0       	breq	.+18     	; 0x4da <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     4c8:	e0 e0       	ldi	r30, 0x00	; 0
     4ca:	f0 e2       	ldi	r31, 0x20	; 32
     4cc:	ae e4       	ldi	r26, 0x4E	; 78
     4ce:	b1 e2       	ldi	r27, 0x21	; 33
     4d0:	8c 91       	ld	r24, X
     4d2:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     4d4:	11 96       	adiw	r26, 0x01	; 1
     4d6:	8c 91       	ld	r24, X
     4d8:	81 83       	std	Z+1, r24	; 0x01
     4da:	08 95       	ret

000004dc <joystick>:
    }
}

void joystick(void) 
{
    jstk_mask = jstk_readMask();            // pick LED's
     4dc:	a9 df       	rcall	.-174    	; 0x430 <jstk_readMask>
     4de:	80 93 9b 22 	sts	0x229B, r24	; 0x80229b <jstk_mask>
    jstk_testMode = PORTB.IN;               // checks switch for testing mode
     4e2:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     4e6:	90 93 9c 22 	sts	0x229C, r25	; 0x80229c <jstk_testMode>

    if ((jstk_testMode & PIN4_bm) == 0) {   // test mode
     4ea:	90 91 9c 22 	lds	r25, 0x229C	; 0x80229c <jstk_testMode>
     4ee:	94 fd       	sbrc	r25, 4
     4f0:	07 c0       	rjmp	.+14     	; 0x500 <joystick+0x24>
        if (jstk_mask) {
     4f2:	88 23       	and	r24, r24
            led_allOff();
     4f4:	31 f0       	breq	.+12     	; 0x502 <joystick+0x26>
     4f6:	63 d1       	rcall	.+710    	; 0x7be <led_allOff>
            led_on(jstk_mask);
     4f8:	80 91 9b 22 	lds	r24, 0x229B	; 0x80229b <jstk_mask>
     4fc:	64 c1       	rjmp	.+712    	; 0x7c6 <led_on>
        }
    } else {                                // normal mode
        // led_allOff();                       // for testing
        jstk_usbTask();                     // send to USB
     4fe:	08 95       	ret
     500:	ba cf       	rjmp	.-140    	; 0x476 <jstk_usbTask>
     502:	08 95       	ret

00000504 <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     504:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <kpd_keyPressed>
     508:	10 92 53 21 	sts	0x2153, r1	; 0x802153 <kpd_currState>
     50c:	10 92 54 21 	sts	0x2154, r1	; 0x802154 <kpd_prevState>
     510:	10 92 51 21 	sts	0x2151, r1	; 0x802151 <kpd_exitTestMode>
     514:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <kpd_rowVal>
     518:	10 92 55 21 	sts	0x2155, r1	; 0x802155 <kpd_code>
     51c:	ef e5       	ldi	r30, 0x5F	; 95
     51e:	f1 e2       	ldi	r31, 0x21	; 33
     520:	81 e6       	ldi	r24, 0x61	; 97
     522:	80 83       	st	Z, r24
     524:	80 e6       	ldi	r24, 0x60	; 96
     526:	81 83       	std	Z+1, r24	; 0x01
     528:	12 82       	std	Z+2, r1	; 0x02
     52a:	13 82       	std	Z+3, r1	; 0x03
     52c:	8f e5       	ldi	r24, 0x5F	; 95
     52e:	84 83       	std	Z+4, r24	; 0x04
     530:	8e e5       	ldi	r24, 0x5E	; 94
     532:	85 83       	std	Z+5, r24	; 0x05
     534:	16 82       	std	Z+6, r1	; 0x06
     536:	17 82       	std	Z+7, r1	; 0x07
     538:	8d e5       	ldi	r24, 0x5D	; 93
     53a:	80 87       	std	Z+8, r24	; 0x08
     53c:	11 86       	std	Z+9, r1	; 0x09
     53e:	12 86       	std	Z+10, r1	; 0x0a
     540:	13 86       	std	Z+11, r1	; 0x0b
     542:	14 86       	std	Z+12, r1	; 0x0c
     544:	15 86       	std	Z+13, r1	; 0x0d
     546:	89 e5       	ldi	r24, 0x59	; 89
     548:	86 87       	std	Z+14, r24	; 0x0e
     54a:	8b e5       	ldi	r24, 0x5B	; 91
     54c:	87 87       	std	Z+15, r24	; 0x0f
     54e:	10 8a       	std	Z+16, r1	; 0x10
     550:	11 8a       	std	Z+17, r1	; 0x11
     552:	8a e5       	ldi	r24, 0x5A	; 90
     554:	82 8b       	std	Z+18, r24	; 0x12
     556:	8c e5       	ldi	r24, 0x5C	; 92
     558:	83 8b       	std	Z+19, r24	; 0x13
     55a:	ea e5       	ldi	r30, 0x5A	; 90
     55c:	f1 e2       	ldi	r31, 0x21	; 33
     55e:	8e e0       	ldi	r24, 0x0E	; 14
     560:	80 83       	st	Z, r24
     562:	8d e0       	ldi	r24, 0x0D	; 13
     564:	81 83       	std	Z+1, r24	; 0x01
     566:	8b e0       	ldi	r24, 0x0B	; 11
     568:	82 83       	std	Z+2, r24	; 0x02
     56a:	87 e0       	ldi	r24, 0x07	; 7
     56c:	83 83       	std	Z+3, r24	; 0x03
     56e:	8f ef       	ldi	r24, 0xFF	; 255
     570:	84 83       	std	Z+4, r24	; 0x04
     572:	08 95       	ret

00000574 <keypad_poll>:
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	10 92 57 21 	sts	0x2157, r1	; 0x802157 <kpd_detectedCol>
     57c:	10 92 50 21 	sts	0x2150, r1	; 0x802150 <kpd_count.5292>
     580:	a0 ea       	ldi	r26, 0xA0	; 160
     582:	b6 e0       	ldi	r27, 0x06	; 6
     584:	c0 e2       	ldi	r28, 0x20	; 32
     586:	d6 e0       	ldi	r29, 0x06	; 6
     588:	90 e8       	ldi	r25, 0x80	; 128
     58a:	62 e0       	ldi	r22, 0x02	; 2
     58c:	25 e0       	ldi	r18, 0x05	; 5
     58e:	54 e0       	ldi	r21, 0x04	; 4
     590:	41 e0       	ldi	r20, 0x01	; 1
     592:	33 e0       	ldi	r19, 0x03	; 3
     594:	57 c0       	rjmp	.+174    	; 0x644 <keypad_poll+0xd0>
     596:	e0 91 50 21 	lds	r30, 0x2150	; 0x802150 <kpd_count.5292>
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	e6 5a       	subi	r30, 0xA6	; 166
     59e:	fe 4d       	sbci	r31, 0xDE	; 222
     5a0:	80 81       	ld	r24, Z
     5a2:	14 96       	adiw	r26, 0x04	; 4
     5a4:	8c 93       	st	X, r24
     5a6:	14 97       	sbiw	r26, 0x04	; 4
     5a8:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5292>
     5ac:	84 30       	cpi	r24, 0x04	; 4
     5ae:	11 f4       	brne	.+4      	; 0x5b4 <keypad_poll+0x40>
     5b0:	9e 83       	std	Y+6, r25	; 0x06
     5b2:	01 c0       	rjmp	.+2      	; 0x5b6 <keypad_poll+0x42>
     5b4:	9d 83       	std	Y+5, r25	; 0x05
     5b6:	18 96       	adiw	r26, 0x08	; 8
     5b8:	8c 91       	ld	r24, X
     5ba:	18 97       	sbiw	r26, 0x08	; 8
     5bc:	80 7f       	andi	r24, 0xF0	; 240
     5be:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <kpd_rowVal>
     5c2:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <kpd_rowVal>
     5c6:	80 3b       	cpi	r24, 0xB0	; 176
     5c8:	d1 f0       	breq	.+52     	; 0x5fe <keypad_poll+0x8a>
     5ca:	18 f4       	brcc	.+6      	; 0x5d2 <keypad_poll+0x5e>
     5cc:	80 37       	cpi	r24, 0x70	; 112
     5ce:	01 f1       	breq	.+64     	; 0x610 <keypad_poll+0x9c>
     5d0:	28 c0       	rjmp	.+80     	; 0x622 <keypad_poll+0xae>
     5d2:	80 3d       	cpi	r24, 0xD0	; 208
     5d4:	59 f0       	breq	.+22     	; 0x5ec <keypad_poll+0x78>
     5d6:	80 3e       	cpi	r24, 0xE0	; 224
     5d8:	21 f5       	brne	.+72     	; 0x622 <keypad_poll+0xae>
     5da:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <kpd_detectedRow>
     5de:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5292>
     5e2:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <kpd_detectedCol>
     5e6:	20 93 50 21 	sts	0x2150, r18	; 0x802150 <kpd_count.5292>
     5ea:	2c c0       	rjmp	.+88     	; 0x644 <keypad_poll+0xd0>
     5ec:	40 93 58 21 	sts	0x2158, r20	; 0x802158 <kpd_detectedRow>
     5f0:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5292>
     5f4:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <kpd_detectedCol>
     5f8:	20 93 50 21 	sts	0x2150, r18	; 0x802150 <kpd_count.5292>
     5fc:	23 c0       	rjmp	.+70     	; 0x644 <keypad_poll+0xd0>
     5fe:	60 93 58 21 	sts	0x2158, r22	; 0x802158 <kpd_detectedRow>
     602:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5292>
     606:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <kpd_detectedCol>
     60a:	20 93 50 21 	sts	0x2150, r18	; 0x802150 <kpd_count.5292>
     60e:	1a c0       	rjmp	.+52     	; 0x644 <keypad_poll+0xd0>
     610:	30 93 58 21 	sts	0x2158, r19	; 0x802158 <kpd_detectedRow>
     614:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5292>
     618:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <kpd_detectedCol>
     61c:	20 93 50 21 	sts	0x2150, r18	; 0x802150 <kpd_count.5292>
     620:	11 c0       	rjmp	.+34     	; 0x644 <keypad_poll+0xd0>
     622:	50 93 58 21 	sts	0x2158, r21	; 0x802158 <kpd_detectedRow>
     626:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5292>
     62a:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <kpd_detectedCol>
     62e:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5292>
     632:	85 30       	cpi	r24, 0x05	; 5
     634:	10 f0       	brcs	.+4      	; 0x63a <keypad_poll+0xc6>
     636:	20 93 57 21 	sts	0x2157, r18	; 0x802157 <kpd_detectedCol>
     63a:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5292>
     63e:	8f 5f       	subi	r24, 0xFF	; 255
     640:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <kpd_count.5292>
     644:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5292>
     648:	85 30       	cpi	r24, 0x05	; 5
     64a:	08 f4       	brcc	.+2      	; 0x64e <keypad_poll+0xda>
     64c:	a4 cf       	rjmp	.-184    	; 0x596 <keypad_poll+0x22>
     64e:	80 e8       	ldi	r24, 0x80	; 128
     650:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     654:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <kpd_detectedRow>
     658:	84 30       	cpi	r24, 0x04	; 4
     65a:	e0 f4       	brcc	.+56     	; 0x694 <keypad_poll+0x120>
     65c:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <kpd_detectedCol>
     660:	85 30       	cpi	r24, 0x05	; 5
     662:	c0 f4       	brcc	.+48     	; 0x694 <keypad_poll+0x120>
     664:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <kpd_keyPressed>
     668:	81 11       	cpse	r24, r1
     66a:	1a c0       	rjmp	.+52     	; 0x6a0 <keypad_poll+0x12c>
     66c:	e0 91 57 21 	lds	r30, 0x2157	; 0x802157 <kpd_detectedCol>
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <kpd_detectedRow>
     676:	ee 0f       	add	r30, r30
     678:	ff 1f       	adc	r31, r31
     67a:	ee 0f       	add	r30, r30
     67c:	ff 1f       	adc	r31, r31
     67e:	e1 5a       	subi	r30, 0xA1	; 161
     680:	fe 4d       	sbci	r31, 0xDE	; 222
     682:	e8 0f       	add	r30, r24
     684:	f1 1d       	adc	r31, r1
     686:	80 81       	ld	r24, Z
     688:	80 93 55 21 	sts	0x2155, r24	; 0x802155 <kpd_code>
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <kpd_keyPressed>
     692:	06 c0       	rjmp	.+12     	; 0x6a0 <keypad_poll+0x12c>
     694:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <kpd_keyPressed>
     698:	81 30       	cpi	r24, 0x01	; 1
     69a:	11 f4       	brne	.+4      	; 0x6a0 <keypad_poll+0x12c>
     69c:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <kpd_keyPressed>
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <keypad_report>:

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     6a6:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     6aa:	80 93 9d 22 	sts	0x229D, r24	; 0x80229d <kpd_testMode>
	}
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     6ae:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     6b2:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     6b6:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_codeOut = keypad_getCode();    // current code to be outputed
     6ba:	80 93 52 21 	sts	0x2152, r24	; 0x802152 <kpd_codeOut>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     6be:	80 91 9d 22 	lds	r24, 0x229D	; 0x80229d <kpd_testMode>
     6c2:	84 fd       	sbrc	r24, 4
     6c4:	29 c0       	rjmp	.+82     	; 0x718 <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     6c6:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <kpd_currState>
     6ca:	81 30       	cpi	r24, 0x01	; 1
     6cc:	09 f0       	breq	.+2      	; 0x6d0 <keypad_report+0x2a>
     6ce:	57 c0       	rjmp	.+174    	; 0x77e <keypad_report+0xd8>
     6d0:	80 91 54 21 	lds	r24, 0x2154	; 0x802154 <kpd_prevState>
     6d4:	81 11       	cpse	r24, r1
     6d6:	53 c0       	rjmp	.+166    	; 0x77e <keypad_report+0xd8>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
     6d8:	e0 91 52 21 	lds	r30, 0x2152	; 0x802152 <kpd_codeOut>
     6dc:	8e 2f       	mov	r24, r30
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	fc 01       	movw	r30, r24
     6e2:	e9 55       	subi	r30, 0x59	; 89
     6e4:	f1 09       	sbc	r31, r1
     6e6:	e9 30       	cpi	r30, 0x09	; 9
     6e8:	f1 05       	cpc	r31, r1
     6ea:	90 f4       	brcc	.+36     	; 0x710 <keypad_report+0x6a>
     6ec:	88 27       	eor	r24, r24
     6ee:	e2 50       	subi	r30, 0x02	; 2
     6f0:	ff 4f       	sbci	r31, 0xFF	; 255
     6f2:	8f 4f       	sbci	r24, 0xFF	; 255
     6f4:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     6f8:	84 e0       	ldi	r24, 0x04	; 4
     6fa:	09 c0       	rjmp	.+18     	; 0x70e <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     6fc:	80 e1       	ldi	r24, 0x10	; 16
     6fe:	07 c0       	rjmp	.+14     	; 0x70e <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     700:	80 e2       	ldi	r24, 0x20	; 32
     702:	05 c0       	rjmp	.+10     	; 0x70e <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     704:	80 e4       	ldi	r24, 0x40	; 64
     706:	03 c0       	rjmp	.+6      	; 0x70e <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     708:	80 e8       	ldi	r24, 0x80	; 128
     70a:	01 c0       	rjmp	.+2      	; 0x70e <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     70c:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     70e:	5e d0       	rcall	.+188    	; 0x7cc <led_toggle>
			kpd_exitTestMode = 1;	// flag for exiting test mode
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <kpd_exitTestMode>
     716:	33 c0       	rjmp	.+102    	; 0x77e <keypad_report+0xd8>
		}
	}
	else // normal mode
	{
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
     718:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <kpd_currState>
     71c:	81 30       	cpi	r24, 0x01	; 1
     71e:	81 f4       	brne	.+32     	; 0x740 <keypad_report+0x9a>
     720:	80 91 54 21 	lds	r24, 0x2154	; 0x802154 <kpd_prevState>
     724:	81 11       	cpse	r24, r1
     726:	0c c0       	rjmp	.+24     	; 0x740 <keypad_report+0x9a>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     728:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <kpd_code>
		}
	}
	else // normal mode
	{
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
			kpd_codeOut = keypad_getCode();
     72c:	80 93 52 21 	sts	0x2152, r24	; 0x802152 <kpd_codeOut>
			BD76319_KeyToReport(kpd_currState, kpd_codeOut);
     730:	60 91 52 21 	lds	r22, 0x2152	; 0x802152 <kpd_codeOut>
     734:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <kpd_currState>
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	4a d0       	rcall	.+148    	; 0x7d2 <BD76319_KeyToReport>
     73e:	13 c0       	rjmp	.+38     	; 0x766 <keypad_report+0xc0>
		} else if (kpd_currState == KEYPAD_RELEASED && kpd_prevState == KEYPAD_PRESSED) {
     740:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <kpd_currState>
     744:	81 11       	cpse	r24, r1
     746:	0f c0       	rjmp	.+30     	; 0x766 <keypad_report+0xc0>
     748:	80 91 54 21 	lds	r24, 0x2154	; 0x802154 <kpd_prevState>
     74c:	81 30       	cpi	r24, 0x01	; 1
     74e:	59 f4       	brne	.+22     	; 0x766 <keypad_report+0xc0>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     750:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <kpd_code>
	{
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
			kpd_codeOut = keypad_getCode();
			BD76319_KeyToReport(kpd_currState, kpd_codeOut);
		} else if (kpd_currState == KEYPAD_RELEASED && kpd_prevState == KEYPAD_PRESSED) {
			kpd_codeOut = keypad_getCode();
     754:	80 93 52 21 	sts	0x2152, r24	; 0x802152 <kpd_codeOut>
			BD76319_KeyToReport(kpd_currState, kpd_codeOut);
     758:	60 91 52 21 	lds	r22, 0x2152	; 0x802152 <kpd_codeOut>
     75c:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <kpd_currState>
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	36 d0       	rcall	.+108    	; 0x7d2 <BD76319_KeyToReport>
		}
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
     766:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <kpd_currState>
     76a:	81 30       	cpi	r24, 0x01	; 1
     76c:	41 f4       	brne	.+16     	; 0x77e <keypad_report+0xd8>
     76e:	80 91 54 21 	lds	r24, 0x2154	; 0x802154 <kpd_prevState>
     772:	81 11       	cpse	r24, r1
     774:	04 c0       	rjmp	.+8      	; 0x77e <keypad_report+0xd8>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     776:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <kpd_code>
		} else if (kpd_currState == KEYPAD_RELEASED && kpd_prevState == KEYPAD_PRESSED) {
			kpd_codeOut = keypad_getCode();
			BD76319_KeyToReport(kpd_currState, kpd_codeOut);
		}
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
			kpd_codeOut = keypad_getCode();
     77a:	80 93 52 21 	sts	0x2152, r24	; 0x802152 <kpd_codeOut>
		}
	}
	
	// clears LEDs when exiting test mode
	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     77e:	80 91 9d 22 	lds	r24, 0x229D	; 0x80229d <kpd_testMode>
     782:	84 ff       	sbrs	r24, 4
     784:	07 c0       	rjmp	.+14     	; 0x794 <keypad_report+0xee>
     786:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <kpd_exitTestMode>
     78a:	81 30       	cpi	r24, 0x01	; 1
		led_allOff();
     78c:	19 f4       	brne	.+6      	; 0x794 <keypad_report+0xee>
     78e:	17 d0       	rcall	.+46     	; 0x7be <led_allOff>
		kpd_exitTestMode = 0;
     790:	10 92 51 21 	sts	0x2151, r1	; 0x802151 <kpd_exitTestMode>
	}
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
     794:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <kpd_currState>
     798:	80 93 54 21 	sts	0x2154, r24	; 0x802154 <kpd_prevState>
}
     79c:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     79e:	82 e0       	ldi	r24, 0x02	; 2
     7a0:	b6 cf       	rjmp	.-148    	; 0x70e <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     7a2:	88 e0       	ldi	r24, 0x08	; 8
     7a4:	b4 cf       	rjmp	.-152    	; 0x70e <keypad_report+0x68>

000007a6 <keypad>:
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
}

void keypad(void) {
	keypad_poll();
     7a6:	e6 de       	rcall	.-564    	; 0x574 <keypad_poll>
	keypad_report();
     7a8:	7e df       	rcall	.-260    	; 0x6a6 <keypad_report>
     7aa:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <udd_get_frame_number>
	BD76319_ui_process(udd_get_frame_number());
     7ae:	16 c0       	rjmp	.+44     	; 0x7dc <BD76319_ui_process>
     7b0:	08 95       	ret

000007b2 <led_init>:
     7b2:	e0 e0       	ldi	r30, 0x00	; 0
void led_on(uint8_t mask) {		// LED on
    LED_PORT.OUTCLR = mask;		// drive low (on)
}

void led_off(uint8_t mask) {	// LED off
    LED_PORT.OUTSET = mask;		// drive high (off)
     7b4:	f6 e0       	ldi	r31, 0x06	; 6
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	81 83       	std	Z+1, r24	; 0x01
     7ba:	85 83       	std	Z+5, r24	; 0x05
     7bc:	08 95       	ret

000007be <led_allOff>:
     7be:	8f ef       	ldi	r24, 0xFF	; 255
     7c0:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     7c4:	08 95       	ret

000007c6 <led_on>:
     7c6:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     7ca:	08 95       	ret

000007cc <led_toggle>:
}

void led_toggle(uint8_t mask) {	// toggle LED
    LED_PORT.OUTTGL = mask;
     7cc:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     7d0:	08 95       	ret

000007d2 <BD76319_KeyToReport>:
}

void BD76319_KeyToReport(uint16_t pui_KeyStatus, uint16_t pui_KeyValue)
{

	ui_KeyStatusToReport = pui_KeyStatus;
     7d2:	80 93 79 21 	sts	0x2179, r24	; 0x802179 <ui_KeyStatusToReport>
	ui_KeyToReport = pui_KeyValue;
     7d6:	60 93 78 21 	sts	0x2178, r22	; 0x802178 <ui_KeyToReport>
     7da:	08 95       	ret

000007dc <BD76319_ui_process>:
	static uint8_t lui_u8_sequence_pos = 0;
			uint8_t lui_u8_value;
	static uint16_t lui_cpt_sof = 0;

	// Scan process running each 2ms
	lui_cpt_sof++;
     7dc:	80 91 76 21 	lds	r24, 0x2176	; 0x802176 <lui_cpt_sof.5300>
     7e0:	90 91 77 21 	lds	r25, 0x2177	; 0x802177 <lui_cpt_sof.5300+0x1>
     7e4:	01 96       	adiw	r24, 0x01	; 1
     7e6:	80 93 76 21 	sts	0x2176, r24	; 0x802176 <lui_cpt_sof.5300>
     7ea:	90 93 77 21 	sts	0x2177, r25	; 0x802177 <lui_cpt_sof.5300+0x1>
	if ((lui_cpt_sof % 2) == 0)
     7ee:	80 ff       	sbrs	r24, 0
     7f0:	60 c0       	rjmp	.+192    	; 0x8b2 <BD76319_ui_process+0xd6>
	{
		return;
	}

	// Scan buttons on switch 0 to send keys sequence
	if(ui_KeyStatusToReport != lui_btn_last_state)
     7f2:	20 91 79 21 	lds	r18, 0x2179	; 0x802179 <ui_KeyStatusToReport>
     7f6:	30 91 75 21 	lds	r19, 0x2175	; 0x802175 <lui_btn_last_state.5296>
     7fa:	32 17       	cp	r19, r18
     7fc:	49 f0       	breq	.+18     	; 0x810 <BD76319_ui_process+0x34>
	{
		lui_btn_last_state = (bool) ui_KeyStatusToReport;
     7fe:	31 e0       	ldi	r19, 0x01	; 1
     800:	21 11       	cpse	r18, r1
     802:	01 c0       	rjmp	.+2      	; 0x806 <BD76319_ui_process+0x2a>
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	30 93 75 21 	sts	0x2175, r19	; 0x802175 <lui_btn_last_state.5296>
		lui_sequence_running = true;
     80a:	21 e0       	ldi	r18, 0x01	; 1
     80c:	20 93 74 21 	sts	0x2174, r18	; 0x802174 <lui_sequence_running.5297>
	}

	// Sequence process running each period
	if (SEQUENCE_PERIOD > lui_cpt_sof)
     810:	86 39       	cpi	r24, 0x96	; 150
     812:	91 05       	cpc	r25, r1
     814:	08 f4       	brcc	.+2      	; 0x818 <BD76319_ui_process+0x3c>
     816:	4d c0       	rjmp	.+154    	; 0x8b2 <BD76319_ui_process+0xd6>
	{
		return;
	}
	lui_cpt_sof = 0;
     818:	10 92 76 21 	sts	0x2176, r1	; 0x802176 <lui_cpt_sof.5300>
     81c:	10 92 77 21 	sts	0x2177, r1	; 0x802177 <lui_cpt_sof.5300+0x1>

	if (lui_sequence_running)
     820:	80 91 74 21 	lds	r24, 0x2174	; 0x802174 <lui_sequence_running.5297>
     824:	88 23       	and	r24, r24
     826:	09 f4       	brne	.+2      	; 0x82a <BD76319_ui_process+0x4e>
     828:	44 c0       	rjmp	.+136    	; 0x8b2 <BD76319_ui_process+0xd6>
	{
		// Send next key
		Bd76319_ui_sequence[lui_u8_sequence_pos].u8_value = ui_KeyToReport;
     82a:	20 91 73 21 	lds	r18, 0x2173	; 0x802173 <lui_u8_sequence_pos.5298>
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	80 91 78 21 	lds	r24, 0x2178	; 0x802178 <ui_KeyToReport>
     834:	f9 01       	movw	r30, r18
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	e2 0f       	add	r30, r18
     83c:	f3 1f       	adc	r31, r19
     83e:	ee 5f       	subi	r30, 0xFE	; 254
     840:	ff 4d       	sbci	r31, 0xDF	; 223
     842:	82 83       	std	Z+2, r24	; 0x02
		lui_u8_value = Bd76319_ui_sequence[lui_u8_sequence_pos].u8_value;
		if (lui_u8_value!=0)
     844:	88 23       	and	r24, r24
     846:	49 f1       	breq	.+82     	; 0x89a <BD76319_ui_process+0xbe>
		{
			if (Bd76319_ui_sequence[lui_u8_sequence_pos].b_modifier)
     848:	f9 01       	movw	r30, r18
     84a:	ee 0f       	add	r30, r30
     84c:	ff 1f       	adc	r31, r31
     84e:	e2 0f       	add	r30, r18
     850:	f3 1f       	adc	r31, r19
     852:	ee 5f       	subi	r30, 0xFE	; 254
     854:	ff 4d       	sbci	r31, 0xDF	; 223
     856:	90 81       	ld	r25, Z
     858:	99 23       	and	r25, r25
     85a:	79 f0       	breq	.+30     	; 0x87a <BD76319_ui_process+0x9e>
			{
				if (Bd76319_ui_sequence[lui_u8_sequence_pos].b_down)
     85c:	f9 01       	movw	r30, r18
     85e:	ee 0f       	add	r30, r30
     860:	ff 1f       	adc	r31, r31
     862:	2e 0f       	add	r18, r30
     864:	3f 1f       	adc	r19, r31
     866:	f9 01       	movw	r30, r18
     868:	ee 5f       	subi	r30, 0xFE	; 254
     86a:	ff 4d       	sbci	r31, 0xDF	; 223
     86c:	91 81       	ldd	r25, Z+1	; 0x01
     86e:	99 23       	and	r25, r25
     870:	11 f0       	breq	.+4      	; 0x876 <BD76319_ui_process+0x9a>
				{
					lui_sucess = udi_hid_kbd_modifier_down(lui_u8_value);
     872:	ff d1       	rcall	.+1022   	; 0xc72 <udi_hid_kbd_modifier_down>
     874:	10 c0       	rjmp	.+32     	; 0x896 <BD76319_ui_process+0xba>
				}
				else
				{
					lui_sucess = udi_hid_kbd_modifier_up(lui_u8_value);
     876:	e2 d1       	rcall	.+964    	; 0xc3c <udi_hid_kbd_modifier_up>
     878:	0e c0       	rjmp	.+28     	; 0x896 <BD76319_ui_process+0xba>
     87a:	f9 01       	movw	r30, r18
				}
			}
			else
			{
				if (Bd76319_ui_sequence[lui_u8_sequence_pos].b_down)
     87c:	ee 0f       	add	r30, r30
     87e:	ff 1f       	adc	r31, r31
     880:	2e 0f       	add	r18, r30
     882:	3f 1f       	adc	r19, r31
     884:	f9 01       	movw	r30, r18
     886:	ee 5f       	subi	r30, 0xFE	; 254
     888:	ff 4d       	sbci	r31, 0xDF	; 223
     88a:	91 81       	ldd	r25, Z+1	; 0x01
     88c:	99 23       	and	r25, r25
     88e:	11 f0       	breq	.+4      	; 0x894 <BD76319_ui_process+0xb8>
				{
					lui_sucess = udi_hid_kbd_down(lui_u8_value);
     890:	46 d2       	rcall	.+1164   	; 0xd1e <udi_hid_kbd_down>
     892:	01 c0       	rjmp	.+2      	; 0x896 <BD76319_ui_process+0xba>
				} else
				{
					lui_sucess = udi_hid_kbd_up(lui_u8_value);
     894:	08 d2       	rcall	.+1040   	; 0xca6 <udi_hid_kbd_up>
     896:	88 23       	and	r24, r24
				}
			}
			if (!lui_sucess)
     898:	61 f0       	breq	.+24     	; 0x8b2 <BD76319_ui_process+0xd6>
     89a:	80 91 73 21 	lds	r24, 0x2173	; 0x802173 <lui_u8_sequence_pos.5298>
				return; // Retry it on next schedule
			}
		}

		// Valid sequence position
		lui_u8_sequence_pos++;
     89e:	8f 5f       	subi	r24, 0xFF	; 255
     8a0:	82 30       	cpi	r24, 0x02	; 2
		if (lui_u8_sequence_pos >= sizeof(Bd76319_ui_sequence) / sizeof(Bd76319_ui_sequence[0]))
     8a2:	18 f4       	brcc	.+6      	; 0x8aa <BD76319_ui_process+0xce>
     8a4:	80 93 73 21 	sts	0x2173, r24	; 0x802173 <lui_u8_sequence_pos.5298>
				return; // Retry it on next schedule
			}
		}

		// Valid sequence position
		lui_u8_sequence_pos++;
     8a8:	08 95       	ret
     8aa:	10 92 73 21 	sts	0x2173, r1	; 0x802173 <lui_u8_sequence_pos.5298>
		if (lui_u8_sequence_pos >= sizeof(Bd76319_ui_sequence) / sizeof(Bd76319_ui_sequence[0]))
		{
			lui_u8_sequence_pos = 0;
     8ae:	10 92 74 21 	sts	0x2174, r1	; 0x802174 <lui_sequence_running.5297>
			lui_sequence_running = false;
     8b2:	08 95       	ret

000008b4 <BD76319_ui_kbd_led>:
     8b4:	80 95       	com	r24

// Procedure for Keyboard USB Class
void BD76319_ui_kbd_led(uint8_t value)
{
	// Write Alarm information to Alarm LEDs
	PORTA.OUT = ~value;
     8b6:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x7be604>
     8ba:	08 95       	ret

000008bc <jstk_ui_process>:
}

void jstk_ui_process(void) {
	joystick();
     8bc:	0f ce       	rjmp	.-994    	; 0x4dc <joystick>
     8be:	08 95       	ret

000008c0 <kbd_ui_process>:
}

void kbd_ui_process(void) {
	keypad();
     8c0:	72 cf       	rjmp	.-284    	; 0x7a6 <keypad>
     8c2:	08 95       	ret

000008c4 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
     8d0:	27 97       	sbiw	r28, 0x07	; 7
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     8dc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     8e0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     8e4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     8e8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     8ec:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     8f0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     8f4:	65 e0       	ldi	r22, 0x05	; 5
     8f6:	81 e4       	ldi	r24, 0x41	; 65
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	d6 d6       	rcall	.+3500   	; 0x16a8 <ccp_write_io>
     8fc:	6c e1       	ldi	r22, 0x1C	; 28
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	c8 d6       	rcall	.+3472   	; 0x1694 <nvm_read_byte>
     904:	8a 83       	std	Y+2, r24	; 0x02
     906:	6d e1       	ldi	r22, 0x1D	; 29
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	82 e0       	ldi	r24, 0x02	; 2
     90c:	c3 d6       	rcall	.+3462   	; 0x1694 <nvm_read_byte>
     90e:	89 83       	std	Y+1, r24	; 0x01
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	9a 81       	ldd	r25, Y+2	; 0x02
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	21 f4       	brne	.+8      	; 0x920 <sysclk_init+0x5c>
     918:	80 e4       	ldi	r24, 0x40	; 64
     91a:	93 e2       	ldi	r25, 0x23	; 35
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	9a 83       	std	Y+2, r25	; 0x02
     920:	89 81       	ldd	r24, Y+1	; 0x01
     922:	9a 81       	ldd	r25, Y+2	; 0x02
     924:	8b 83       	std	Y+3, r24	; 0x03
     926:	9c 83       	std	Y+4, r25	; 0x04
     928:	e0 e6       	ldi	r30, 0x60	; 96
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	82 83       	std	Z+2, r24	; 0x02
     92e:	8c 81       	ldd	r24, Y+4	; 0x04
     930:	83 83       	std	Z+3, r24	; 0x03
     932:	8f b7       	in	r24, 0x3f	; 63
     934:	8e 83       	std	Y+6, r24	; 0x06
     936:	f8 94       	cli
     938:	9e 81       	ldd	r25, Y+6	; 0x06
     93a:	e0 e5       	ldi	r30, 0x50	; 80
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	82 60       	ori	r24, 0x02	; 2
     942:	80 83       	st	Z, r24
     944:	9f bf       	out	0x3f, r25	; 63
     946:	81 81       	ldd	r24, Z+1	; 0x01
     948:	81 ff       	sbrs	r24, 1
     94a:	fd cf       	rjmp	.-6      	; 0x946 <sysclk_init+0x82>
     94c:	8f b7       	in	r24, 0x3f	; 63
     94e:	8f 83       	std	Y+7, r24	; 0x07
     950:	f8 94       	cli
     952:	9f 81       	ldd	r25, Y+7	; 0x07
     954:	00 e5       	ldi	r16, 0x50	; 80
     956:	10 e0       	ldi	r17, 0x00	; 0
     958:	d8 01       	movw	r26, r16
     95a:	16 96       	adiw	r26, 0x06	; 6
     95c:	8c 91       	ld	r24, X
     95e:	16 97       	sbiw	r26, 0x06	; 6
     960:	89 7f       	andi	r24, 0xF9	; 249
     962:	16 96       	adiw	r26, 0x06	; 6
     964:	8c 93       	st	X, r24
     966:	16 97       	sbiw	r26, 0x06	; 6
     968:	e0 e6       	ldi	r30, 0x60	; 96
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 e8       	ldi	r24, 0x80	; 128
     96e:	85 83       	std	Z+5, r24	; 0x05
     970:	8b eb       	ldi	r24, 0xBB	; 187
     972:	86 83       	std	Z+6, r24	; 0x06
     974:	16 96       	adiw	r26, 0x06	; 6
     976:	8c 91       	ld	r24, X
     978:	16 97       	sbiw	r26, 0x06	; 6
     97a:	84 60       	ori	r24, 0x04	; 4
     97c:	16 96       	adiw	r26, 0x06	; 6
     97e:	8c 93       	st	X, r24
     980:	80 81       	ld	r24, Z
     982:	81 60       	ori	r24, 0x01	; 1
     984:	80 83       	st	Z, r24
     986:	9f bf       	out	0x3f, r25	; 63
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	80 e4       	ldi	r24, 0x40	; 64
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	8c d6       	rcall	.+3352   	; 0x16a8 <ccp_write_io>
     990:	8f b7       	in	r24, 0x3f	; 63
     992:	8d 83       	std	Y+5, r24	; 0x05
     994:	f8 94       	cli
     996:	9d 81       	ldd	r25, Y+5	; 0x05
     998:	f8 01       	movw	r30, r16
     99a:	80 81       	ld	r24, Z
     99c:	8e 7f       	andi	r24, 0xFE	; 254
     99e:	80 83       	st	Z, r24
     9a0:	9f bf       	out	0x3f, r25	; 63
     9a2:	27 96       	adiw	r28, 0x07	; 7
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	08 95       	ret

000009b2 <sysclk_enable_module>:
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	1f 92       	push	r1
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
     9bc:	9f b7       	in	r25, 0x3f	; 63
     9be:	99 83       	std	Y+1, r25	; 0x01
     9c0:	f8 94       	cli
     9c2:	99 81       	ldd	r25, Y+1	; 0x01
     9c4:	e8 2f       	mov	r30, r24
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	e0 59       	subi	r30, 0x90	; 144
     9ca:	ff 4f       	sbci	r31, 0xFF	; 255
     9cc:	60 95       	com	r22
     9ce:	80 81       	ld	r24, Z
     9d0:	68 23       	and	r22, r24
     9d2:	60 83       	st	Z, r22
     9d4:	9f bf       	out	0x3f, r25	; 63
     9d6:	0f 90       	pop	r0
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	1f 92       	push	r1
     9e4:	1f 92       	push	r1
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     9ea:	86 30       	cpi	r24, 0x06	; 6
     9ec:	11 f0       	breq	.+4      	; 0x9f2 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	01 c0       	rjmp	.+2      	; 0x9f4 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     9f2:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     9f4:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     9f8:	81 fd       	sbrc	r24, 1
     9fa:	2a c0       	rjmp	.+84     	; 0xa50 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     9fc:	8f b7       	in	r24, 0x3f	; 63
     9fe:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     a00:	f8 94       	cli
	return flags;
     a02:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     a04:	e0 e5       	ldi	r30, 0x50	; 80
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 81       	ld	r24, Z
     a0a:	82 60       	ori	r24, 0x02	; 2
     a0c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a0e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     a10:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     a12:	81 ff       	sbrs	r24, 1
     a14:	fd cf       	rjmp	.-6      	; 0xa10 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a16:	8f b7       	in	r24, 0x3f	; 63
     a18:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     a1a:	f8 94       	cli
	return flags;
     a1c:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     a1e:	a0 e5       	ldi	r26, 0x50	; 80
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	16 96       	adiw	r26, 0x06	; 6
     a24:	8c 91       	ld	r24, X
     a26:	16 97       	sbiw	r26, 0x06	; 6
     a28:	89 7f       	andi	r24, 0xF9	; 249
     a2a:	16 96       	adiw	r26, 0x06	; 6
     a2c:	8c 93       	st	X, r24
     a2e:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     a30:	e0 e6       	ldi	r30, 0x60	; 96
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 e8       	ldi	r24, 0x80	; 128
     a36:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     a38:	8b eb       	ldi	r24, 0xBB	; 187
     a3a:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     a3c:	16 96       	adiw	r26, 0x06	; 6
     a3e:	8c 91       	ld	r24, X
     a40:	16 97       	sbiw	r26, 0x06	; 6
     a42:	84 60       	ori	r24, 0x04	; 4
     a44:	16 96       	adiw	r26, 0x06	; 6
     a46:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     a48:	80 81       	ld	r24, Z
     a4a:	81 60       	ori	r24, 0x01	; 1
     a4c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a4e:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     a50:	63 60       	ori	r22, 0x03	; 3
     a52:	84 e4       	ldi	r24, 0x44	; 68
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	28 d6       	rcall	.+3152   	; 0x16a8 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     a58:	60 e4       	ldi	r22, 0x40	; 64
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	aa df       	rcall	.-172    	; 0x9b2 <sysclk_enable_module>
}
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	08 95       	ret

00000a6c <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     a6c:	30 91 a6 22 	lds	r19, 0x22A6	; 0x8022a6 <udd_g_ctrlreq+0x2>
     a70:	20 91 a7 22 	lds	r18, 0x22A7	; 0x8022a7 <udd_g_ctrlreq+0x3>
     a74:	82 2f       	mov	r24, r18
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	03 97       	sbiw	r24, 0x03	; 3
     a7a:	b1 f4       	brne	.+44     	; 0xaa8 <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     a7c:	31 11       	cpse	r19, r1
     a7e:	16 c0       	rjmp	.+44     	; 0xaac <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
     a80:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <udd_g_ctrlreq+0x6>
     a84:	90 91 ab 22 	lds	r25, 0x22AB	; 0x8022ab <udd_g_ctrlreq+0x7>
     a88:	89 2b       	or	r24, r25
     a8a:	91 f4       	brne	.+36     	; 0xab0 <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     a8c:	e4 ea       	ldi	r30, 0xA4	; 164
     a8e:	f2 e2       	ldi	r31, 0x22	; 34
     a90:	8a e7       	ldi	r24, 0x7A	; 122
     a92:	91 e2       	ldi	r25, 0x21	; 33
     a94:	80 87       	std	Z+8, r24	; 0x08
     a96:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     a98:	8a e5       	ldi	r24, 0x5A	; 90
     a9a:	95 e0       	ldi	r25, 0x05	; 5
     a9c:	84 87       	std	Z+12, r24	; 0x0c
     a9e:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
     aa0:	12 86       	std	Z+10, r1	; 0x0a
     aa2:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	08 95       	ret
	}
	return false;
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	08 95       	ret
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	08 95       	ret
     ab0:	80 e0       	ldi	r24, 0x00	; 0
}
     ab2:	08 95       	ret

00000ab4 <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
     ab4:	08 95       	ret

00000ab6 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <udi_hid_generic_b_report_in_free>
     abc:	08 95       	ret

00000abe <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
     abe:	10 92 80 21 	sts	0x2180, r1	; 0x802180 <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
     ac2:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
     acc:	0c 94 47 13 	jmp	0x268e	; 0x268e <main_generic_enable>
}
     ad0:	08 95       	ret

00000ad2 <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
     ad2:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <main_generic_disable>
     ad6:	08 95       	ret

00000ad8 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
     ad8:	26 e3       	ldi	r18, 0x36	; 54
     ada:	35 e0       	ldi	r19, 0x05	; 5
     adc:	44 e6       	ldi	r20, 0x64	; 100
     ade:	50 e2       	ldi	r21, 0x20	; 32
     ae0:	6e e7       	ldi	r22, 0x7E	; 126
     ae2:	71 e2       	ldi	r23, 0x21	; 33
     ae4:	80 e8       	ldi	r24, 0x80	; 128
     ae6:	91 e2       	ldi	r25, 0x21	; 33
     ae8:	4e c1       	rjmp	.+668    	; 0xd86 <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
     aea:	08 95       	ret

00000aec <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	1f 92       	push	r1
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
     afe:	80 91 7c 21 	lds	r24, 0x217C	; 0x80217c <udi_hid_generic_b_report_in_free>
     b02:	88 23       	and	r24, r24
     b04:	09 f1       	breq	.+66     	; 0xb48 <udi_hid_generic_send_report_in+0x5c>
     b06:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b08:	8f b7       	in	r24, 0x3f	; 63
     b0a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b0c:	f8 94       	cli
	return flags;
     b0e:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
     b10:	10 92 7a 21 	sts	0x217A, r1	; 0x80217a <udi_hid_generic_report_feature>
     b14:	10 92 7b 21 	sts	0x217B, r1	; 0x80217b <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
     b18:	80 81       	ld	r24, Z
     b1a:	91 81       	ldd	r25, Z+1	; 0x01
     b1c:	80 93 7a 21 	sts	0x217A, r24	; 0x80217a <udi_hid_generic_report_feature>
     b20:	90 93 7b 21 	sts	0x217B, r25	; 0x80217b <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     b24:	0b e5       	ldi	r16, 0x5B	; 91
     b26:	15 e0       	ldi	r17, 0x05	; 5
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	4a e7       	ldi	r20, 0x7A	; 122
     b2e:	51 e2       	ldi	r21, 0x21	; 33
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	82 e8       	ldi	r24, 0x82	; 130
     b34:	0e 94 15 10 	call	0x202a	; 0x202a <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	89 27       	eor	r24, r25
     b3c:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b40:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
     b42:	80 91 7c 21 	lds	r24, 0x217C	; 0x80217c <udi_hid_generic_b_report_in_free>
     b46:	89 27       	eor	r24, r25

}
     b48:	0f 90       	pop	r0
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	08 95       	ret

00000b56 <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
	return 0;
}
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	08 95       	ret

00000b5a <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
     b5a:	30 91 a6 22 	lds	r19, 0x22A6	; 0x8022a6 <udd_g_ctrlreq+0x2>
     b5e:	20 91 a7 22 	lds	r18, 0x22A7	; 0x8022a7 <udd_g_ctrlreq+0x3>
     b62:	82 2f       	mov	r24, r18
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	02 97       	sbiw	r24, 0x02	; 2
     b68:	b9 f4       	brne	.+46     	; 0xb98 <udi_hid_kbd_setreport+0x3e>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     b6a:	31 11       	cpse	r19, r1
     b6c:	17 c0       	rjmp	.+46     	; 0xb9c <udi_hid_kbd_setreport+0x42>
			&& (1 == udd_g_ctrlreq.req.wLength)) {
     b6e:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <udd_g_ctrlreq+0x6>
     b72:	90 91 ab 22 	lds	r25, 0x22AB	; 0x8022ab <udd_g_ctrlreq+0x7>
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	99 f4       	brne	.+38     	; 0xba0 <udi_hid_kbd_setreport+0x46>
		// Report OUT type on report ID 0 from USB Host
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
     b7a:	e4 ea       	ldi	r30, 0xA4	; 164
     b7c:	f2 e2       	ldi	r31, 0x22	; 34
     b7e:	84 e9       	ldi	r24, 0x94	; 148
     b80:	91 e2       	ldi	r25, 0x21	; 33
     b82:	80 87       	std	Z+8, r24	; 0x08
     b84:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
     b86:	81 ef       	ldi	r24, 0xF1	; 241
     b88:	95 e0       	ldi	r25, 0x05	; 5
     b8a:	84 87       	std	Z+12, r24	; 0x0c
     b8c:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size = 1;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	82 87       	std	Z+10, r24	; 0x0a
     b94:	93 87       	std	Z+11, r25	; 0x0b
		return true;
     b96:	08 95       	ret
	}
	return false;
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	08 95       	ret
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	08 95       	ret
     ba0:	80 e0       	ldi	r24, 0x00	; 0
}
     ba2:	08 95       	ret

00000ba4 <udi_hid_kbd_enable>:
//------ Interface for UDI HID level

bool udi_hid_kbd_enable(void)
{
	// Initialize internal values
	udi_hid_kbd_rate = 0;
     ba4:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <udi_hid_kbd_rate>
	udi_hid_kbd_protocol = 0;
     ba8:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <udi_hid_kbd_protocol>
	udi_hid_kbd_b_report_trans_ongoing = false;
     bac:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <udi_hid_kbd_b_report_trans_ongoing>
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
     bb0:	88 e0       	ldi	r24, 0x08	; 8
     bb2:	eb e8       	ldi	r30, 0x8B	; 139
     bb4:	f1 e2       	ldi	r31, 0x21	; 33
     bb6:	df 01       	movw	r26, r30
     bb8:	1d 92       	st	X+, r1
     bba:	8a 95       	dec	r24
     bbc:	e9 f7       	brne	.-6      	; 0xbb8 <udi_hid_kbd_enable+0x14>
	udi_hid_kbd_b_report_valid = false;
     bbe:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <udi_hid_kbd_b_report_valid>
	return UDI_HID_KBD_ENABLE_EXT();
     bc2:	0c 94 40 13 	jmp	0x2680	; 0x2680 <main_kbd_enable>
}
     bc6:	08 95       	ret

00000bc8 <udi_hid_kbd_disable>:


void udi_hid_kbd_disable(void)
{
	UDI_HID_KBD_DISABLE_EXT();
     bc8:	0c 94 44 13 	jmp	0x2688	; 0x2688 <main_kbd_disable>
     bcc:	08 95       	ret

00000bce <udi_hid_kbd_setup>:
}


bool udi_hid_kbd_setup(void)
{
	return udi_hid_setup(&udi_hid_kbd_rate,
     bce:	2d ea       	ldi	r18, 0xAD	; 173
     bd0:	35 e0       	ldi	r19, 0x05	; 5
     bd2:	49 e8       	ldi	r20, 0x89	; 137
     bd4:	50 e2       	ldi	r21, 0x20	; 32
     bd6:	66 e9       	ldi	r22, 0x96	; 150
     bd8:	71 e2       	ldi	r23, 0x21	; 33
     bda:	88 e9       	ldi	r24, 0x98	; 152
     bdc:	91 e2       	ldi	r25, 0x21	; 33
     bde:	d3 c0       	rjmp	.+422    	; 0xd86 <udi_hid_setup>
								&udi_hid_kbd_protocol,
								(uint8_t *) &udi_hid_kbd_report_desc,
								udi_hid_kbd_setreport);
}
     be0:	08 95       	ret

00000be2 <udi_hid_kbd_setreport_valid>:
	}
}

static void udi_hid_kbd_setreport_valid(void)
{
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
     be2:	80 91 94 21 	lds	r24, 0x2194	; 0x802194 <udi_hid_kbd_report_set>
     be6:	66 ce       	rjmp	.-820    	; 0x8b4 <BD76319_ui_kbd_led>
     be8:	08 95       	ret

00000bea <udi_hid_kbd_send_report>:

//--------------------------------------------
//------ Internal routines

static bool udi_hid_kbd_send_report(void)
{
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
	if (udi_hid_kbd_b_report_trans_ongoing)
     bee:	80 91 8a 21 	lds	r24, 0x218A	; 0x80218a <udi_hid_kbd_b_report_trans_ongoing>
     bf2:	81 11       	cpse	r24, r1
     bf4:	18 c0       	rjmp	.+48     	; 0xc26 <udi_hid_kbd_send_report+0x3c>
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
     bf6:	88 e0       	ldi	r24, 0x08	; 8
     bf8:	eb e8       	ldi	r30, 0x8B	; 139
     bfa:	f1 e2       	ldi	r31, 0x21	; 33
     bfc:	a2 e8       	ldi	r26, 0x82	; 130
     bfe:	b1 e2       	ldi	r27, 0x21	; 33
     c00:	01 90       	ld	r0, Z+
     c02:	0d 92       	st	X+, r0
     c04:	8a 95       	dec	r24
     c06:	e1 f7       	brne	.-8      	; 0xc00 <udi_hid_kbd_send_report+0x16>
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
     c08:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <udi_hid_kbd_b_report_valid>
	udi_hid_kbd_b_report_trans_ongoing =
			udd_ep_run(	UDI_HID_KBD_EP_IN,
     c0c:	07 e1       	ldi	r16, 0x17	; 23
     c0e:	16 e0       	ldi	r17, 0x06	; 6
     c10:	28 e0       	ldi	r18, 0x08	; 8
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	42 e8       	ldi	r20, 0x82	; 130
     c16:	51 e2       	ldi	r21, 0x21	; 33
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	81 e8       	ldi	r24, 0x81	; 129
     c1c:	0e 94 15 10 	call	0x202a	; 0x202a <udd_ep_run>
	if (udi_hid_kbd_b_report_trans_ongoing)
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
	udi_hid_kbd_b_report_trans_ongoing =
     c20:	80 93 8a 21 	sts	0x218A, r24	; 0x80218a <udi_hid_kbd_b_report_trans_ongoing>
			udd_ep_run(	UDI_HID_KBD_EP_IN,
							false,
							udi_hid_kbd_report_trans,
							UDI_HID_KBD_REPORT_SIZE,
							udi_hid_kbd_report_sent);
	return udi_hid_kbd_b_report_trans_ongoing;
     c24:	01 c0       	rjmp	.+2      	; 0xc28 <udi_hid_kbd_send_report+0x3e>
//------ Internal routines

static bool udi_hid_kbd_send_report(void)
{
	if (udi_hid_kbd_b_report_trans_ongoing)
		return false;
     c26:	80 e0       	ldi	r24, 0x00	; 0
							false,
							udi_hid_kbd_report_trans,
							UDI_HID_KBD_REPORT_SIZE,
							udi_hid_kbd_report_sent);
	return udi_hid_kbd_b_report_trans_ongoing;
}
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	08 95       	ret

00000c2e <udi_hid_kbd_report_sent>:
		udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_kbd_b_report_trans_ongoing = false;
     c2e:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <udi_hid_kbd_b_report_trans_ongoing>
	if (udi_hid_kbd_b_report_valid) {
     c32:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <udi_hid_kbd_b_report_valid>
     c36:	81 11       	cpse	r24, r1
		udi_hid_kbd_send_report();
     c38:	d8 cf       	rjmp	.-80     	; 0xbea <udi_hid_kbd_send_report>
     c3a:	08 95       	ret

00000c3c <udi_hid_kbd_modifier_up>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_kbd_modifier_up(uint8_t modifier_id)
{
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	1f 92       	push	r1
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c48:	9f b7       	in	r25, 0x3f	; 63
     c4a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     c4c:	f8 94       	cli
	return flags;
     c4e:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	// Fill report
	udi_hid_kbd_report[0] &= ~(unsigned)modifier_id;
     c50:	eb e8       	ldi	r30, 0x8B	; 139
     c52:	f1 e2       	ldi	r31, 0x21	; 33
     c54:	80 95       	com	r24
     c56:	90 81       	ld	r25, Z
     c58:	89 23       	and	r24, r25
     c5a:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
     c62:	c3 df       	rcall	.-122    	; 0xbea <udi_hid_kbd_send_report>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c64:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	0f 90       	pop	r0
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	08 95       	ret

00000c72 <udi_hid_kbd_modifier_down>:


bool udi_hid_kbd_modifier_down(uint8_t modifier_id)
{
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	1f 92       	push	r1
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c7e:	9f b7       	in	r25, 0x3f	; 63
     c80:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     c82:	f8 94       	cli
	return flags;
     c84:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	// Fill report
	udi_hid_kbd_report[0] |= modifier_id;
     c86:	eb e8       	ldi	r30, 0x8B	; 139
     c88:	f1 e2       	ldi	r31, 0x21	; 33
     c8a:	90 81       	ld	r25, Z
     c8c:	89 2b       	or	r24, r25
     c8e:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
     c96:	a9 df       	rcall	.-174    	; 0xbea <udi_hid_kbd_send_report>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c98:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	0f 90       	pop	r0
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	08 95       	ret

00000ca6 <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	1f 92       	push	r1
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     cb2:	9f b7       	in	r25, 0x3f	; 63
     cb4:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     cb6:	f8 94       	cli
	return flags;
     cb8:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
     cba:	90 91 8d 21 	lds	r25, 0x218D	; 0x80218d <udi_hid_kbd_report+0x2>
     cbe:	99 23       	and	r25, r25
     cc0:	41 f0       	breq	.+16     	; 0xcd2 <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
     cc2:	89 17       	cp	r24, r25
     cc4:	a9 f0       	breq	.+42     	; 0xcf0 <udi_hid_kbd_up+0x4a>
     cc6:	ee e8       	ldi	r30, 0x8E	; 142
     cc8:	f1 e2       	ldi	r31, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     cca:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
     ccc:	21 91       	ld	r18, Z+
     cce:	21 11       	cpse	r18, r1
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cd2:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
     cd4:	1e c0       	rjmp	.+60     	; 0xd12 <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
     cd6:	28 17       	cp	r18, r24
     cd8:	21 f0       	breq	.+8      	; 0xce2 <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     cda:	9f 5f       	subi	r25, 0xFF	; 255
     cdc:	98 30       	cpi	r25, 0x08	; 8
     cde:	b1 f7       	brne	.-20     	; 0xccc <udi_hid_kbd_up+0x26>
     ce0:	05 c0       	rjmp	.+10     	; 0xcec <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
     ce2:	98 30       	cpi	r25, 0x08	; 8
     ce4:	19 f0       	breq	.+6      	; 0xcec <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
     ce6:	97 30       	cpi	r25, 0x07	; 7
     ce8:	20 f0       	brcs	.+8      	; 0xcf2 <udi_hid_kbd_up+0x4c>
     cea:	0c c0       	rjmp	.+24     	; 0xd04 <udi_hid_kbd_up+0x5e>
     cec:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
     cee:	11 c0       	rjmp	.+34     	; 0xd12 <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     cf0:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
     cf2:	e9 2f       	mov	r30, r25
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	e5 57       	subi	r30, 0x75	; 117
     cf8:	fe 4d       	sbci	r31, 0xDE	; 222
     cfa:	81 81       	ldd	r24, Z+1	; 0x01
     cfc:	80 83       	st	Z, r24
		i++;
     cfe:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
     d00:	97 30       	cpi	r25, 0x07	; 7
     d02:	b9 f7       	brne	.-18     	; 0xcf2 <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
     d04:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
     d0e:	6d df       	rcall	.-294    	; 0xbea <udi_hid_kbd_send_report>
     d10:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	0f 90       	pop	r0
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	08 95       	ret

00000d1e <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	1f 92       	push	r1
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     d2a:	9f b7       	in	r25, 0x3f	; 63
     d2c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     d2e:	f8 94       	cli
	return flags;
     d30:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
     d32:	90 91 8d 21 	lds	r25, 0x218D	; 0x80218d <udi_hid_kbd_report+0x2>
     d36:	99 23       	and	r25, r25
     d38:	b1 f0       	breq	.+44     	; 0xd66 <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
     d3a:	89 17       	cp	r24, r25
     d3c:	41 f0       	breq	.+16     	; 0xd4e <udi_hid_kbd_down+0x30>
     d3e:	ae e8       	ldi	r26, 0x8E	; 142
     d40:	b1 e2       	ldi	r27, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     d42:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
     d44:	9d 91       	ld	r25, X+
     d46:	99 23       	and	r25, r25
     d48:	49 f0       	breq	.+18     	; 0xd5c <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
     d4a:	98 13       	cpse	r25, r24
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d4e:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	14 c0       	rjmp	.+40     	; 0xd7c <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     d54:	ef 5f       	subi	r30, 0xFF	; 255
     d56:	e8 30       	cpi	r30, 0x08	; 8
     d58:	a9 f7       	brne	.-22     	; 0xd44 <udi_hid_kbd_down+0x26>
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
     d5c:	e8 30       	cpi	r30, 0x08	; 8
     d5e:	21 f4       	brne	.+8      	; 0xd68 <udi_hid_kbd_down+0x4a>
     d60:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	0b c0       	rjmp	.+22     	; 0xd7c <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     d66:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	e5 57       	subi	r30, 0x75	; 117
     d6c:	fe 4d       	sbci	r31, 0xDE	; 222
     d6e:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
     d76:	39 df       	rcall	.-398    	; 0xbea <udi_hid_kbd_send_report>
     d78:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
     d7a:	81 e0       	ldi	r24, 0x01	; 1
}
     d7c:	0f 90       	pop	r0
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	08 95       	ret

00000d86 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	dc 01       	movw	r26, r24
     d8c:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
     d8e:	90 91 a4 22 	lds	r25, 0x22A4	; 0x8022a4 <udd_g_ctrlreq>
     d92:	99 23       	and	r25, r25
     d94:	0c f0       	brlt	.+2      	; 0xd98 <udi_hid_setup+0x12>
     d96:	68 c0       	rjmp	.+208    	; 0xe68 <udi_hid_setup+0xe2>
     d98:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     d9a:	09 f0       	breq	.+2      	; 0xd9e <udi_hid_setup+0x18>
     d9c:	45 c0       	rjmp	.+138    	; 0xe28 <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     d9e:	80 91 a5 22 	lds	r24, 0x22A5	; 0x8022a5 <udd_g_ctrlreq+0x1>
     da2:	86 30       	cpi	r24, 0x06	; 6
     da4:	09 f0       	breq	.+2      	; 0xda8 <udi_hid_setup+0x22>
     da6:	40 c0       	rjmp	.+128    	; 0xe28 <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
     da8:	76 d1       	rcall	.+748    	; 0x1096 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     daa:	dc 01       	movw	r26, r24
     dac:	1a 96       	adiw	r26, 0x0a	; 10
     dae:	2c 91       	ld	r18, X
     db0:	1a 97       	sbiw	r26, 0x0a	; 10
     db2:	21 32       	cpi	r18, 0x21	; 33
     db4:	09 f0       	breq	.+2      	; 0xdb8 <udi_hid_setup+0x32>
     db6:	77 c0       	rjmp	.+238    	; 0xea6 <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     db8:	20 91 a7 22 	lds	r18, 0x22A7	; 0x8022a7 <udd_g_ctrlreq+0x3>
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	21 32       	cpi	r18, 0x21	; 33
     dc0:	31 05       	cpc	r19, r1
     dc2:	b1 f4       	brne	.+44     	; 0xdf0 <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     dc4:	9c 01       	movw	r18, r24
     dc6:	27 5f       	subi	r18, 0xF7	; 247
     dc8:	3f 4f       	sbci	r19, 0xFF	; 255
     dca:	20 93 ac 22 	sts	0x22AC, r18	; 0x8022ac <udd_g_ctrlreq+0x8>
     dce:	30 93 ad 22 	sts	0x22AD, r19	; 0x8022ad <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
     dd2:	e4 ea       	ldi	r30, 0xA4	; 164
     dd4:	f2 e2       	ldi	r31, 0x22	; 34
     dd6:	19 96       	adiw	r26, 0x09	; 9
     dd8:	8c 91       	ld	r24, X
     dda:	26 81       	ldd	r18, Z+6	; 0x06
     ddc:	37 81       	ldd	r19, Z+7	; 0x07
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	08 f4       	brcc	.+2      	; 0xde8 <udi_hid_setup+0x62>
     de6:	c9 01       	movw	r24, r18
     de8:	82 87       	std	Z+10, r24	; 0x0a
     dea:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	68 c0       	rjmp	.+208    	; 0xec0 <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     df0:	fc 01       	movw	r30, r24
     df2:	47 85       	ldd	r20, Z+15	; 0x0f
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	42 17       	cp	r20, r18
     df8:	53 07       	cpc	r21, r19
     dfa:	09 f0       	breq	.+2      	; 0xdfe <udi_hid_setup+0x78>
     dfc:	56 c0       	rjmp	.+172    	; 0xeaa <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
     dfe:	c0 93 ac 22 	sts	0x22AC, r28	; 0x8022ac <udd_g_ctrlreq+0x8>
     e02:	d0 93 ad 22 	sts	0x22AD, r29	; 0x8022ad <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
     e06:	e4 ea       	ldi	r30, 0xA4	; 164
     e08:	f2 e2       	ldi	r31, 0x22	; 34
     e0a:	26 81       	ldd	r18, Z+6	; 0x06
     e0c:	37 81       	ldd	r19, Z+7	; 0x07
     e0e:	dc 01       	movw	r26, r24
     e10:	50 96       	adiw	r26, 0x10	; 16
     e12:	8d 91       	ld	r24, X+
     e14:	9c 91       	ld	r25, X
     e16:	51 97       	sbiw	r26, 0x11	; 17
     e18:	28 17       	cp	r18, r24
     e1a:	39 07       	cpc	r19, r25
     e1c:	08 f4       	brcc	.+2      	; 0xe20 <udi_hid_setup+0x9a>
     e1e:	c9 01       	movw	r24, r18
     e20:	82 87       	std	Z+10, r24	; 0x0a
     e22:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	4c c0       	rjmp	.+152    	; 0xec0 <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     e28:	90 32       	cpi	r25, 0x20	; 32
     e2a:	09 f0       	breq	.+2      	; 0xe2e <udi_hid_setup+0xa8>
     e2c:	40 c0       	rjmp	.+128    	; 0xeae <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     e2e:	80 91 a5 22 	lds	r24, 0x22A5	; 0x8022a5 <udd_g_ctrlreq+0x1>
     e32:	82 30       	cpi	r24, 0x02	; 2
     e34:	39 f0       	breq	.+14     	; 0xe44 <udi_hid_setup+0xbe>
     e36:	83 30       	cpi	r24, 0x03	; 3
     e38:	71 f0       	breq	.+28     	; 0xe56 <udi_hid_setup+0xd0>
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	d1 f5       	brne	.+116    	; 0xeb2 <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
     e3e:	f9 01       	movw	r30, r18
     e40:	19 95       	eicall
     e42:	3e c0       	rjmp	.+124    	; 0xec0 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
     e44:	e4 ea       	ldi	r30, 0xA4	; 164
     e46:	f2 e2       	ldi	r31, 0x22	; 34
     e48:	a0 87       	std	Z+8, r26	; 0x08
     e4a:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	82 87       	std	Z+10, r24	; 0x0a
     e52:	93 87       	std	Z+11, r25	; 0x0b
				return true;
     e54:	35 c0       	rjmp	.+106    	; 0xec0 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
     e56:	e4 ea       	ldi	r30, 0xA4	; 164
     e58:	f2 e2       	ldi	r31, 0x22	; 34
     e5a:	60 87       	std	Z+8, r22	; 0x08
     e5c:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	82 87       	std	Z+10, r24	; 0x0a
     e64:	93 87       	std	Z+11, r25	; 0x0b
				return true;
     e66:	2c c0       	rjmp	.+88     	; 0xec0 <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     e68:	90 76       	andi	r25, 0x60	; 96
     e6a:	90 32       	cpi	r25, 0x20	; 32
     e6c:	21 f5       	brne	.+72     	; 0xeb6 <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     e6e:	80 91 a5 22 	lds	r24, 0x22A5	; 0x8022a5 <udd_g_ctrlreq+0x1>
     e72:	8a 30       	cpi	r24, 0x0A	; 10
     e74:	39 f0       	breq	.+14     	; 0xe84 <udi_hid_setup+0xfe>
     e76:	8b 30       	cpi	r24, 0x0B	; 11
     e78:	51 f0       	breq	.+20     	; 0xe8e <udi_hid_setup+0x108>
     e7a:	89 30       	cpi	r24, 0x09	; 9
     e7c:	f1 f4       	brne	.+60     	; 0xeba <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
     e7e:	f9 01       	movw	r30, r18
     e80:	19 95       	eicall
     e82:	1e c0       	rjmp	.+60     	; 0xec0 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
     e84:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <udd_g_ctrlreq+0x3>
     e88:	8c 93       	st	X, r24
				return true;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	19 c0       	rjmp	.+50     	; 0xec0 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
     e8e:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <udd_g_ctrlreq+0x6>
     e92:	90 91 ab 22 	lds	r25, 0x22AB	; 0x8022ab <udd_g_ctrlreq+0x7>
     e96:	89 2b       	or	r24, r25
     e98:	91 f4       	brne	.+36     	; 0xebe <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
     e9a:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <udd_g_ctrlreq+0x2>
     e9e:	db 01       	movw	r26, r22
     ea0:	8c 93       	st	X, r24
				return true;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	0d c0       	rjmp	.+26     	; 0xec0 <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	0b c0       	rjmp	.+22     	; 0xec0 <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	09 c0       	rjmp	.+18     	; 0xec0 <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	07 c0       	rjmp	.+14     	; 0xec0 <udi_hid_setup+0x13a>
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	05 c0       	rjmp	.+10     	; 0xec0 <udi_hid_setup+0x13a>
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	03 c0       	rjmp	.+6      	; 0xec0 <udi_hid_setup+0x13a>
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	01 c0       	rjmp	.+2      	; 0xec0 <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
     ebe:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	08 95       	ret

00000ec6 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     ec6:	e0 91 9e 21 	lds	r30, 0x219E	; 0x80219e <udc_ptr_conf>
     eca:	f0 91 9f 21 	lds	r31, 0x219F	; 0x80219f <udc_ptr_conf+0x1>
     ece:	01 90       	ld	r0, Z+
     ed0:	f0 81       	ld	r31, Z
     ed2:	e0 2d       	mov	r30, r0
     ed4:	22 81       	ldd	r18, Z+2	; 0x02
     ed6:	33 81       	ldd	r19, Z+3	; 0x03
     ed8:	2e 0f       	add	r18, r30
     eda:	3f 1f       	adc	r19, r31
     edc:	fc 01       	movw	r30, r24
     ede:	40 81       	ld	r20, Z
     ee0:	e4 0f       	add	r30, r20
     ee2:	f1 1d       	adc	r31, r1
     ee4:	e2 17       	cp	r30, r18
     ee6:	f3 07       	cpc	r31, r19
     ee8:	a0 f4       	brcc	.+40     	; 0xf12 <udc_next_desc_in_iface+0x4c>
     eea:	81 81       	ldd	r24, Z+1	; 0x01
     eec:	84 30       	cpi	r24, 0x04	; 4
     eee:	a1 f0       	breq	.+40     	; 0xf18 <udc_next_desc_in_iface+0x52>
     ef0:	86 13       	cpse	r24, r22
     ef2:	06 c0       	rjmp	.+12     	; 0xf00 <udc_next_desc_in_iface+0x3a>
     ef4:	14 c0       	rjmp	.+40     	; 0xf1e <udc_next_desc_in_iface+0x58>
     ef6:	81 81       	ldd	r24, Z+1	; 0x01
     ef8:	84 30       	cpi	r24, 0x04	; 4
     efa:	a1 f0       	breq	.+40     	; 0xf24 <udc_next_desc_in_iface+0x5e>
     efc:	86 17       	cp	r24, r22
     efe:	a9 f0       	breq	.+42     	; 0xf2a <udc_next_desc_in_iface+0x64>
     f00:	80 81       	ld	r24, Z
     f02:	e8 0f       	add	r30, r24
     f04:	f1 1d       	adc	r31, r1
     f06:	e2 17       	cp	r30, r18
     f08:	f3 07       	cpc	r31, r19
     f0a:	a8 f3       	brcs	.-22     	; 0xef6 <udc_next_desc_in_iface+0x30>
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	08 95       	ret
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	08 95       	ret
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	08 95       	ret
     f1e:	8e 2f       	mov	r24, r30
     f20:	9f 2f       	mov	r25, r31
     f22:	08 95       	ret
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	08 95       	ret
     f2a:	8e 2f       	mov	r24, r30
     f2c:	9f 2f       	mov	r25, r31
     f2e:	08 95       	ret

00000f30 <udc_valid_address>:
     f30:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <udd_g_ctrlreq+0x2>
     f34:	8f 77       	andi	r24, 0x7F	; 127
     f36:	8d c7       	rjmp	.+3866   	; 0x1e52 <udd_set_address>
     f38:	08 95       	ret

00000f3a <udc_update_iface_desc>:
     f3a:	90 91 a0 21 	lds	r25, 0x21A0	; 0x8021a0 <udc_num_configuration>
     f3e:	99 23       	and	r25, r25
     f40:	81 f1       	breq	.+96     	; 0xfa2 <udc_update_iface_desc+0x68>
     f42:	e0 91 9e 21 	lds	r30, 0x219E	; 0x80219e <udc_ptr_conf>
     f46:	f0 91 9f 21 	lds	r31, 0x219F	; 0x80219f <udc_ptr_conf+0x1>
     f4a:	01 90       	ld	r0, Z+
     f4c:	f0 81       	ld	r31, Z
     f4e:	e0 2d       	mov	r30, r0
     f50:	94 81       	ldd	r25, Z+4	; 0x04
     f52:	89 17       	cp	r24, r25
     f54:	40 f5       	brcc	.+80     	; 0xfa6 <udc_update_iface_desc+0x6c>
     f56:	e0 93 9c 21 	sts	0x219C, r30	; 0x80219c <udc_ptr_iface>
     f5a:	f0 93 9d 21 	sts	0x219D, r31	; 0x80219d <udc_ptr_iface+0x1>
     f5e:	22 81       	ldd	r18, Z+2	; 0x02
     f60:	33 81       	ldd	r19, Z+3	; 0x03
     f62:	2e 0f       	add	r18, r30
     f64:	3f 1f       	adc	r19, r31
     f66:	e2 17       	cp	r30, r18
     f68:	f3 07       	cpc	r31, r19
     f6a:	f8 f4       	brcc	.+62     	; 0xfaa <udc_update_iface_desc+0x70>
     f6c:	91 81       	ldd	r25, Z+1	; 0x01
     f6e:	94 30       	cpi	r25, 0x04	; 4
     f70:	61 f4       	brne	.+24     	; 0xf8a <udc_update_iface_desc+0x50>
     f72:	92 81       	ldd	r25, Z+2	; 0x02
     f74:	89 13       	cpse	r24, r25
     f76:	09 c0       	rjmp	.+18     	; 0xf8a <udc_update_iface_desc+0x50>
     f78:	93 81       	ldd	r25, Z+3	; 0x03
     f7a:	96 13       	cpse	r25, r22
     f7c:	06 c0       	rjmp	.+12     	; 0xf8a <udc_update_iface_desc+0x50>
     f7e:	e0 93 9c 21 	sts	0x219C, r30	; 0x80219c <udc_ptr_iface>
     f82:	f0 93 9d 21 	sts	0x219D, r31	; 0x80219d <udc_ptr_iface+0x1>
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	08 95       	ret
     f8a:	90 81       	ld	r25, Z
     f8c:	e9 0f       	add	r30, r25
     f8e:	f1 1d       	adc	r31, r1
     f90:	e2 17       	cp	r30, r18
     f92:	f3 07       	cpc	r31, r19
     f94:	58 f3       	brcs	.-42     	; 0xf6c <udc_update_iface_desc+0x32>
     f96:	e0 93 9c 21 	sts	0x219C, r30	; 0x80219c <udc_ptr_iface>
     f9a:	f0 93 9d 21 	sts	0x219D, r31	; 0x80219d <udc_ptr_iface+0x1>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	08 95       	ret
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	08 95       	ret
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	08 95       	ret
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	08 95       	ret

00000fae <udc_iface_disable>:
     fae:	ef 92       	push	r14
     fb0:	ff 92       	push	r15
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	c8 2f       	mov	r28, r24
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	be df       	rcall	.-132    	; 0xf3a <udc_update_iface_desc>
     fbe:	18 2f       	mov	r17, r24
     fc0:	88 23       	and	r24, r24
     fc2:	81 f1       	breq	.+96     	; 0x1024 <__EEPROM_REGION_LENGTH__+0x24>
     fc4:	a0 91 9e 21 	lds	r26, 0x219E	; 0x80219e <udc_ptr_conf>
     fc8:	b0 91 9f 21 	lds	r27, 0x219F	; 0x80219f <udc_ptr_conf+0x1>
     fcc:	ec 2f       	mov	r30, r28
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	ee 0f       	add	r30, r30
     fd2:	ff 1f       	adc	r31, r31
     fd4:	12 96       	adiw	r26, 0x02	; 2
     fd6:	8d 91       	ld	r24, X+
     fd8:	9c 91       	ld	r25, X
     fda:	13 97       	sbiw	r26, 0x03	; 3
     fdc:	e8 0f       	add	r30, r24
     fde:	f9 1f       	adc	r31, r25
     fe0:	e0 80       	ld	r14, Z
     fe2:	f1 80       	ldd	r15, Z+1	; 0x01
     fe4:	d7 01       	movw	r26, r14
     fe6:	16 96       	adiw	r26, 0x06	; 6
     fe8:	ed 91       	ld	r30, X+
     fea:	fc 91       	ld	r31, X
     fec:	17 97       	sbiw	r26, 0x07	; 7
     fee:	19 95       	eicall
     ff0:	68 2f       	mov	r22, r24
     ff2:	8c 2f       	mov	r24, r28
     ff4:	a2 df       	rcall	.-188    	; 0xf3a <udc_update_iface_desc>
     ff6:	18 2f       	mov	r17, r24
     ff8:	88 23       	and	r24, r24
     ffa:	a1 f0       	breq	.+40     	; 0x1024 <__EEPROM_REGION_LENGTH__+0x24>
     ffc:	c0 91 9c 21 	lds	r28, 0x219C	; 0x80219c <udc_ptr_iface>
    1000:	d0 91 9d 21 	lds	r29, 0x219D	; 0x80219d <udc_ptr_iface+0x1>
    1004:	65 e0       	ldi	r22, 0x05	; 5
    1006:	ce 01       	movw	r24, r28
    1008:	5e df       	rcall	.-324    	; 0xec6 <udc_next_desc_in_iface>
    100a:	ec 01       	movw	r28, r24
    100c:	89 2b       	or	r24, r25
    100e:	21 f0       	breq	.+8      	; 0x1018 <__EEPROM_REGION_LENGTH__+0x18>
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	0e 94 2e 11 	call	0x225c	; 0x225c <udd_ep_free>
    1016:	f6 cf       	rjmp	.-20     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
    1018:	d7 01       	movw	r26, r14
    101a:	12 96       	adiw	r26, 0x02	; 2
    101c:	ed 91       	ld	r30, X+
    101e:	fc 91       	ld	r31, X
    1020:	13 97       	sbiw	r26, 0x03	; 3
    1022:	19 95       	eicall
    1024:	81 2f       	mov	r24, r17
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	08 95       	ret

00001032 <udc_iface_enable>:
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	18 2f       	mov	r17, r24
    103a:	7f df       	rcall	.-258    	; 0xf3a <udc_update_iface_desc>
    103c:	88 23       	and	r24, r24
    103e:	39 f1       	breq	.+78     	; 0x108e <udc_iface_enable+0x5c>
    1040:	c0 91 9c 21 	lds	r28, 0x219C	; 0x80219c <udc_ptr_iface>
    1044:	d0 91 9d 21 	lds	r29, 0x219D	; 0x80219d <udc_ptr_iface+0x1>
    1048:	65 e0       	ldi	r22, 0x05	; 5
    104a:	ce 01       	movw	r24, r28
    104c:	3c df       	rcall	.-392    	; 0xec6 <udc_next_desc_in_iface>
    104e:	ec 01       	movw	r28, r24
    1050:	89 2b       	or	r24, r25
    1052:	41 f0       	breq	.+16     	; 0x1064 <udc_iface_enable+0x32>
    1054:	4c 81       	ldd	r20, Y+4	; 0x04
    1056:	5d 81       	ldd	r21, Y+5	; 0x05
    1058:	6b 81       	ldd	r22, Y+3	; 0x03
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	0c d7       	rcall	.+3608   	; 0x1e76 <udd_ep_alloc>
    105e:	81 11       	cpse	r24, r1
    1060:	f3 cf       	rjmp	.-26     	; 0x1048 <udc_iface_enable+0x16>
    1062:	15 c0       	rjmp	.+42     	; 0x108e <udc_iface_enable+0x5c>
    1064:	a0 91 9e 21 	lds	r26, 0x219E	; 0x80219e <udc_ptr_conf>
    1068:	b0 91 9f 21 	lds	r27, 0x219F	; 0x80219f <udc_ptr_conf+0x1>
    106c:	e1 2f       	mov	r30, r17
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	ee 0f       	add	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	12 96       	adiw	r26, 0x02	; 2
    1076:	8d 91       	ld	r24, X+
    1078:	9c 91       	ld	r25, X
    107a:	13 97       	sbiw	r26, 0x03	; 3
    107c:	e8 0f       	add	r30, r24
    107e:	f9 1f       	adc	r31, r25
    1080:	01 90       	ld	r0, Z+
    1082:	f0 81       	ld	r31, Z
    1084:	e0 2d       	mov	r30, r0
    1086:	01 90       	ld	r0, Z+
    1088:	f0 81       	ld	r31, Z
    108a:	e0 2d       	mov	r30, r0
    108c:	19 95       	eicall
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	1f 91       	pop	r17
    1094:	08 95       	ret

00001096 <udc_get_interface_desc>:
    1096:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <udc_ptr_iface>
    109a:	90 91 9d 21 	lds	r25, 0x219D	; 0x80219d <udc_ptr_iface+0x1>
    109e:	08 95       	ret

000010a0 <udc_start>:
    10a0:	55 c6       	rjmp	.+3242   	; 0x1d4c <udd_enable>
    10a2:	08 95       	ret

000010a4 <udc_reset>:
    10a4:	cf 93       	push	r28
    10a6:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <udc_num_configuration>
    10aa:	88 23       	and	r24, r24
    10ac:	c1 f0       	breq	.+48     	; 0x10de <udc_reset+0x3a>
    10ae:	e0 91 9e 21 	lds	r30, 0x219E	; 0x80219e <udc_ptr_conf>
    10b2:	f0 91 9f 21 	lds	r31, 0x219F	; 0x80219f <udc_ptr_conf+0x1>
    10b6:	01 90       	ld	r0, Z+
    10b8:	f0 81       	ld	r31, Z
    10ba:	e0 2d       	mov	r30, r0
    10bc:	84 81       	ldd	r24, Z+4	; 0x04
    10be:	88 23       	and	r24, r24
    10c0:	71 f0       	breq	.+28     	; 0x10de <udc_reset+0x3a>
    10c2:	c0 e0       	ldi	r28, 0x00	; 0
    10c4:	8c 2f       	mov	r24, r28
    10c6:	73 df       	rcall	.-282    	; 0xfae <udc_iface_disable>
    10c8:	cf 5f       	subi	r28, 0xFF	; 255
    10ca:	e0 91 9e 21 	lds	r30, 0x219E	; 0x80219e <udc_ptr_conf>
    10ce:	f0 91 9f 21 	lds	r31, 0x219F	; 0x80219f <udc_ptr_conf+0x1>
    10d2:	01 90       	ld	r0, Z+
    10d4:	f0 81       	ld	r31, Z
    10d6:	e0 2d       	mov	r30, r0
    10d8:	84 81       	ldd	r24, Z+4	; 0x04
    10da:	c8 17       	cp	r28, r24
    10dc:	98 f3       	brcs	.-26     	; 0x10c4 <udc_reset+0x20>
    10de:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <udc_num_configuration>
    10e2:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <udc_device_status>
    10e6:	81 fd       	sbrc	r24, 1
    10e8:	0e 94 3f 13 	call	0x267e	; 0x267e <main_remotewakeup_disable>
    10ec:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <udc_device_status>
    10f0:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <udc_device_status+0x1>
    10f4:	cf 91       	pop	r28
    10f6:	08 95       	ret

000010f8 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    10f8:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    10fa:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <udc_num_configuration>
    10fe:	88 23       	and	r24, r24
    1100:	49 f1       	breq	.+82     	; 0x1154 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1102:	a0 91 9e 21 	lds	r26, 0x219E	; 0x80219e <udc_ptr_conf>
    1106:	b0 91 9f 21 	lds	r27, 0x219F	; 0x80219f <udc_ptr_conf+0x1>
    110a:	ed 91       	ld	r30, X+
    110c:	fc 91       	ld	r31, X
    110e:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1110:	84 81       	ldd	r24, Z+4	; 0x04
    1112:	88 23       	and	r24, r24
    1114:	f9 f0       	breq	.+62     	; 0x1154 <udc_sof_notify+0x5c>
    1116:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1118:	ec 2f       	mov	r30, r28
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	12 96       	adiw	r26, 0x02	; 2
    1122:	8d 91       	ld	r24, X+
    1124:	9c 91       	ld	r25, X
    1126:	13 97       	sbiw	r26, 0x03	; 3
    1128:	e8 0f       	add	r30, r24
    112a:	f9 1f       	adc	r31, r25
    112c:	01 90       	ld	r0, Z+
    112e:	f0 81       	ld	r31, Z
    1130:	e0 2d       	mov	r30, r0
    1132:	00 84       	ldd	r0, Z+8	; 0x08
    1134:	f1 85       	ldd	r31, Z+9	; 0x09
    1136:	e0 2d       	mov	r30, r0
    1138:	30 97       	sbiw	r30, 0x00	; 0
    113a:	09 f0       	breq	.+2      	; 0x113e <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    113c:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    113e:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1140:	a0 91 9e 21 	lds	r26, 0x219E	; 0x80219e <udc_ptr_conf>
    1144:	b0 91 9f 21 	lds	r27, 0x219F	; 0x80219f <udc_ptr_conf+0x1>
    1148:	ed 91       	ld	r30, X+
    114a:	fc 91       	ld	r31, X
    114c:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    114e:	84 81       	ldd	r24, Z+4	; 0x04
    1150:	c8 17       	cp	r28, r24
    1152:	10 f3       	brcs	.-60     	; 0x1118 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1154:	cf 91       	pop	r28
    1156:	08 95       	ret

00001158 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1160:	e4 ea       	ldi	r30, 0xA4	; 164
    1162:	f2 e2       	ldi	r31, 0x22	; 34
    1164:	12 86       	std	Z+10, r1	; 0x0a
    1166:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1168:	14 86       	std	Z+12, r1	; 0x0c
    116a:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    116c:	16 86       	std	Z+14, r1	; 0x0e
    116e:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1170:	80 81       	ld	r24, Z
    1172:	88 23       	and	r24, r24
    1174:	0c f0       	brlt	.+2      	; 0x1178 <udc_process_setup+0x20>
    1176:	7e c2       	rjmp	.+1276   	; 0x1674 <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1178:	20 91 aa 22 	lds	r18, 0x22AA	; 0x8022aa <udd_g_ctrlreq+0x6>
    117c:	30 91 ab 22 	lds	r19, 0x22AB	; 0x8022ab <udd_g_ctrlreq+0x7>
    1180:	21 15       	cp	r18, r1
    1182:	31 05       	cpc	r19, r1
    1184:	09 f0       	breq	.+2      	; 0x1188 <udc_process_setup+0x30>
    1186:	7b c2       	rjmp	.+1270   	; 0x167e <udc_process_setup+0x526>
    1188:	6d c2       	rjmp	.+1242   	; 0x1664 <udc_process_setup+0x50c>
    118a:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    118c:	09 f0       	breq	.+2      	; 0x1190 <udc_process_setup+0x38>
    118e:	a0 c0       	rjmp	.+320    	; 0x12d0 <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1190:	90 91 a5 22 	lds	r25, 0x22A5	; 0x8022a5 <udd_g_ctrlreq+0x1>
    1194:	96 30       	cpi	r25, 0x06	; 6
    1196:	79 f0       	breq	.+30     	; 0x11b6 <udc_process_setup+0x5e>
    1198:	98 30       	cpi	r25, 0x08	; 8
    119a:	09 f4       	brne	.+2      	; 0x119e <udc_process_setup+0x46>
    119c:	8f c0       	rjmp	.+286    	; 0x12bc <udc_process_setup+0x164>
    119e:	91 11       	cpse	r25, r1
    11a0:	97 c0       	rjmp	.+302    	; 0x12d0 <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    11a2:	22 30       	cpi	r18, 0x02	; 2
    11a4:	31 05       	cpc	r19, r1
    11a6:	09 f0       	breq	.+2      	; 0x11aa <udc_process_setup+0x52>
    11a8:	19 c2       	rjmp	.+1074   	; 0x15dc <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    11aa:	62 e0       	ldi	r22, 0x02	; 2
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	84 ea       	ldi	r24, 0xA4	; 164
    11b0:	91 e2       	ldi	r25, 0x21	; 33
    11b2:	5a d6       	rcall	.+3252   	; 0x1e68 <udd_set_setup_payload>
    11b4:	69 c2       	rjmp	.+1234   	; 0x1688 <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    11b6:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <udd_g_ctrlreq+0x2>
    11ba:	90 91 a7 22 	lds	r25, 0x22A7	; 0x8022a7 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    11be:	29 2f       	mov	r18, r25
    11c0:	33 27       	eor	r19, r19
    11c2:	22 30       	cpi	r18, 0x02	; 2
    11c4:	31 05       	cpc	r19, r1
    11c6:	a9 f0       	breq	.+42     	; 0x11f2 <udc_process_setup+0x9a>
    11c8:	20 f4       	brcc	.+8      	; 0x11d2 <udc_process_setup+0x7a>
    11ca:	21 30       	cpi	r18, 0x01	; 1
    11cc:	31 05       	cpc	r19, r1
    11ce:	41 f0       	breq	.+16     	; 0x11e0 <udc_process_setup+0x88>
    11d0:	c7 c1       	rjmp	.+910    	; 0x1560 <udc_process_setup+0x408>
    11d2:	23 30       	cpi	r18, 0x03	; 3
    11d4:	31 05       	cpc	r19, r1
    11d6:	d9 f1       	breq	.+118    	; 0x124e <udc_process_setup+0xf6>
    11d8:	2f 30       	cpi	r18, 0x0F	; 15
    11da:	31 05       	cpc	r19, r1
    11dc:	51 f1       	breq	.+84     	; 0x1232 <udc_process_setup+0xda>
    11de:	c0 c1       	rjmp	.+896    	; 0x1560 <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    11e0:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <udc_config>
    11e4:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    11e8:	dc 01       	movw	r26, r24
    11ea:	6c 91       	ld	r22, X
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	3c d6       	rcall	.+3192   	; 0x1e68 <udd_set_setup_payload>
    11f0:	56 c0       	rjmp	.+172    	; 0x129e <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    11f2:	e0 91 08 20 	lds	r30, 0x2008	; 0x802008 <udc_config>
    11f6:	f0 91 09 20 	lds	r31, 0x2009	; 0x802009 <udc_config+0x1>
    11fa:	21 89       	ldd	r18, Z+17	; 0x11
    11fc:	82 17       	cp	r24, r18
    11fe:	08 f0       	brcs	.+2      	; 0x1202 <udc_process_setup+0xaa>
    1200:	ed c1       	rjmp	.+986    	; 0x15dc <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1202:	99 27       	eor	r25, r25
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	e0 91 0a 20 	lds	r30, 0x200A	; 0x80200a <udc_config+0x2>
    1210:	f0 91 0b 20 	lds	r31, 0x200B	; 0x80200b <udc_config+0x3>
    1214:	e8 0f       	add	r30, r24
    1216:	f9 1f       	adc	r31, r25
    1218:	80 81       	ld	r24, Z
    121a:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    121c:	fc 01       	movw	r30, r24
    121e:	62 81       	ldd	r22, Z+2	; 0x02
    1220:	73 81       	ldd	r23, Z+3	; 0x03
    1222:	22 d6       	rcall	.+3140   	; 0x1e68 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1224:	e0 91 ac 22 	lds	r30, 0x22AC	; 0x8022ac <udd_g_ctrlreq+0x8>
    1228:	f0 91 ad 22 	lds	r31, 0x22AD	; 0x8022ad <udd_g_ctrlreq+0x9>
    122c:	82 e0       	ldi	r24, 0x02	; 2
    122e:	81 83       	std	Z+1, r24	; 0x01
    1230:	36 c0       	rjmp	.+108    	; 0x129e <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1232:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <udc_config+0x4>
    1236:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <udc_config+0x5>
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	09 f4       	brne	.+2      	; 0x1240 <udc_process_setup+0xe8>
    123e:	ce c1       	rjmp	.+924    	; 0x15dc <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1240:	dc 01       	movw	r26, r24
    1242:	12 96       	adiw	r26, 0x02	; 2
    1244:	6d 91       	ld	r22, X+
    1246:	7c 91       	ld	r23, X
    1248:	13 97       	sbiw	r26, 0x03	; 3
    124a:	0e d6       	rcall	.+3100   	; 0x1e68 <udd_set_setup_payload>
    124c:	28 c0       	rjmp	.+80     	; 0x129e <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    124e:	99 27       	eor	r25, r25
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	91 05       	cpc	r25, r1
    1254:	71 f0       	breq	.+28     	; 0x1272 <udc_process_setup+0x11a>
    1256:	38 f0       	brcs	.+14     	; 0x1266 <udc_process_setup+0x10e>
    1258:	02 97       	sbiw	r24, 0x02	; 2
    125a:	09 f0       	breq	.+2      	; 0x125e <udc_process_setup+0x106>
    125c:	8a c1       	rjmp	.+788    	; 0x1572 <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    125e:	e2 e1       	ldi	r30, 0x12	; 18
    1260:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1262:	31 e2       	ldi	r19, 0x21	; 33
    1264:	09 c0       	rjmp	.+18     	; 0x1278 <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1266:	64 e0       	ldi	r22, 0x04	; 4
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	8e e3       	ldi	r24, 0x3E	; 62
    126c:	91 e2       	ldi	r25, 0x21	; 33
    126e:	fc d5       	rcall	.+3064   	; 0x1e68 <udd_set_setup_payload>
    1270:	16 c0       	rjmp	.+44     	; 0x129e <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1272:	e4 e3       	ldi	r30, 0x34	; 52
    1274:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1276:	39 e0       	ldi	r19, 0x09	; 9
    1278:	a0 ed       	ldi	r26, 0xD0	; 208
    127a:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    127c:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    127e:	81 91       	ld	r24, Z+
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	8d 93       	st	X+, r24
    1284:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1286:	2f 5f       	subi	r18, 0xFF	; 255
    1288:	23 17       	cp	r18, r19
    128a:	c8 f3       	brcs	.-14     	; 0x127e <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    128c:	63 2f       	mov	r22, r19
    128e:	66 0f       	add	r22, r22
    1290:	6e 5f       	subi	r22, 0xFE	; 254
    1292:	60 93 ce 20 	sts	0x20CE, r22	; 0x8020ce <udc_string_desc>
		udd_set_setup_payload(
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	8e ec       	ldi	r24, 0xCE	; 206
    129a:	90 e2       	ldi	r25, 0x20	; 32
    129c:	e5 d5       	rcall	.+3018   	; 0x1e68 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    129e:	e4 ea       	ldi	r30, 0xA4	; 164
    12a0:	f2 e2       	ldi	r31, 0x22	; 34
    12a2:	86 81       	ldd	r24, Z+6	; 0x06
    12a4:	97 81       	ldd	r25, Z+7	; 0x07
    12a6:	22 85       	ldd	r18, Z+10	; 0x0a
    12a8:	33 85       	ldd	r19, Z+11	; 0x0b
    12aa:	82 17       	cp	r24, r18
    12ac:	93 07       	cpc	r25, r19
    12ae:	08 f0       	brcs	.+2      	; 0x12b2 <udc_process_setup+0x15a>
    12b0:	eb c1       	rjmp	.+982    	; 0x1688 <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    12b2:	80 93 ae 22 	sts	0x22AE, r24	; 0x8022ae <udd_g_ctrlreq+0xa>
    12b6:	90 93 af 22 	sts	0x22AF, r25	; 0x8022af <udd_g_ctrlreq+0xb>
    12ba:	e6 c1       	rjmp	.+972    	; 0x1688 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    12bc:	21 30       	cpi	r18, 0x01	; 1
    12be:	31 05       	cpc	r19, r1
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    12c2:	8c c1       	rjmp	.+792    	; 0x15dc <udc_process_setup+0x484>
    12c4:	61 e0       	ldi	r22, 0x01	; 1
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	80 ea       	ldi	r24, 0xA0	; 160
    12ca:	91 e2       	ldi	r25, 0x21	; 33
    12cc:	cd d5       	rcall	.+2970   	; 0x1e68 <udd_set_setup_payload>
    12ce:	dc c1       	rjmp	.+952    	; 0x1688 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	e1 f5       	brne	.+120    	; 0x134c <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    12d4:	90 91 a5 22 	lds	r25, 0x22A5	; 0x8022a5 <udd_g_ctrlreq+0x1>
    12d8:	9a 30       	cpi	r25, 0x0A	; 10
    12da:	c1 f5       	brne	.+112    	; 0x134c <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    12dc:	21 30       	cpi	r18, 0x01	; 1
    12de:	31 05       	cpc	r19, r1
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <udc_process_setup+0x18c>
    12e2:	4c c1       	rjmp	.+664    	; 0x157c <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    12e4:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <udc_num_configuration>
    12e8:	88 23       	and	r24, r24
    12ea:	09 f4       	brne	.+2      	; 0x12ee <udc_process_setup+0x196>
    12ec:	47 c1       	rjmp	.+654    	; 0x157c <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    12ee:	c0 91 a8 22 	lds	r28, 0x22A8	; 0x8022a8 <udd_g_ctrlreq+0x4>
    12f2:	d0 91 a9 22 	lds	r29, 0x22A9	; 0x8022a9 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    12f6:	00 91 9e 21 	lds	r16, 0x219E	; 0x80219e <udc_ptr_conf>
    12fa:	10 91 9f 21 	lds	r17, 0x219F	; 0x80219f <udc_ptr_conf+0x1>
    12fe:	d8 01       	movw	r26, r16
    1300:	ed 91       	ld	r30, X+
    1302:	fc 91       	ld	r31, X
    1304:	84 81       	ldd	r24, Z+4	; 0x04
    1306:	c8 17       	cp	r28, r24
    1308:	08 f0       	brcs	.+2      	; 0x130c <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    130a:	38 c1       	rjmp	.+624    	; 0x157c <udc_process_setup+0x424>
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	8c 2f       	mov	r24, r28
    1310:	14 de       	rcall	.-984    	; 0xf3a <udc_update_iface_desc>
    1312:	88 23       	and	r24, r24
    1314:	09 f4       	brne	.+2      	; 0x1318 <udc_process_setup+0x1c0>
    1316:	2d c1       	rjmp	.+602    	; 0x1572 <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1318:	ce 01       	movw	r24, r28
    131a:	99 27       	eor	r25, r25
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	d8 01       	movw	r26, r16
    1322:	12 96       	adiw	r26, 0x02	; 2
    1324:	ed 91       	ld	r30, X+
    1326:	fc 91       	ld	r31, X
    1328:	13 97       	sbiw	r26, 0x03	; 3
    132a:	e8 0f       	add	r30, r24
    132c:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    132e:	01 90       	ld	r0, Z+
    1330:	f0 81       	ld	r31, Z
    1332:	e0 2d       	mov	r30, r0
    1334:	86 81       	ldd	r24, Z+6	; 0x06
    1336:	97 81       	ldd	r25, Z+7	; 0x07
    1338:	fc 01       	movw	r30, r24
    133a:	19 95       	eicall
    133c:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1340:	61 e0       	ldi	r22, 0x01	; 1
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	82 ea       	ldi	r24, 0xA2	; 162
    1346:	91 e2       	ldi	r25, 0x21	; 33
    1348:	8f d5       	rcall	.+2846   	; 0x1e68 <udd_set_setup_payload>
    134a:	9e c1       	rjmp	.+828    	; 0x1688 <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    134c:	82 30       	cpi	r24, 0x02	; 2
    134e:	09 f0       	breq	.+2      	; 0x1352 <udc_process_setup+0x1fa>
    1350:	10 c1       	rjmp	.+544    	; 0x1572 <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1352:	80 91 a5 22 	lds	r24, 0x22A5	; 0x8022a5 <udd_g_ctrlreq+0x1>
    1356:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1358:	05 c1       	rjmp	.+522    	; 0x1564 <udc_process_setup+0x40c>
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	09 f0       	breq	.+2      	; 0x1362 <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1360:	3d c1       	rjmp	.+634    	; 0x15dc <udc_process_setup+0x484>
    1362:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <udd_g_ctrlreq+0x4>
    1366:	0f d6       	rcall	.+3102   	; 0x1f86 <udd_ep_is_halted>
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <udc_ep_status.4558>
    136e:	90 93 9b 21 	sts	0x219B, r25	; 0x80219b <udc_ep_status.4558+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1372:	62 e0       	ldi	r22, 0x02	; 2
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	8a e9       	ldi	r24, 0x9A	; 154
    1378:	91 e2       	ldi	r25, 0x21	; 33
    137a:	76 d5       	rcall	.+2796   	; 0x1e68 <udd_set_setup_payload>
    137c:	85 c1       	rjmp	.+778    	; 0x1688 <udc_process_setup+0x530>
    137e:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1380:	09 f0       	breq	.+2      	; 0x1384 <udc_process_setup+0x22c>
    1382:	9f c0       	rjmp	.+318    	; 0x14c2 <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1384:	90 91 a5 22 	lds	r25, 0x22A5	; 0x8022a5 <udd_g_ctrlreq+0x1>
    1388:	93 30       	cpi	r25, 0x03	; 3
    138a:	91 f1       	breq	.+100    	; 0x13f0 <udc_process_setup+0x298>
    138c:	18 f4       	brcc	.+6      	; 0x1394 <udc_process_setup+0x23c>
    138e:	91 30       	cpi	r25, 0x01	; 1
    1390:	a9 f0       	breq	.+42     	; 0x13bc <udc_process_setup+0x264>
    1392:	97 c0       	rjmp	.+302    	; 0x14c2 <udc_process_setup+0x36a>
    1394:	95 30       	cpi	r25, 0x05	; 5
    1396:	21 f0       	breq	.+8      	; 0x13a0 <udc_process_setup+0x248>
    1398:	99 30       	cpi	r25, 0x09	; 9
    139a:	09 f4       	brne	.+2      	; 0x139e <udc_process_setup+0x246>
    139c:	43 c0       	rjmp	.+134    	; 0x1424 <udc_process_setup+0x2cc>
    139e:	91 c0       	rjmp	.+290    	; 0x14c2 <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    13a0:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <udd_g_ctrlreq+0x6>
    13a4:	90 91 ab 22 	lds	r25, 0x22AB	; 0x8022ab <udd_g_ctrlreq+0x7>
    13a8:	89 2b       	or	r24, r25
    13aa:	09 f0       	breq	.+2      	; 0x13ae <udc_process_setup+0x256>
    13ac:	17 c1       	rjmp	.+558    	; 0x15dc <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    13ae:	88 e9       	ldi	r24, 0x98	; 152
    13b0:	97 e0       	ldi	r25, 0x07	; 7
    13b2:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <udd_g_ctrlreq+0xc>
    13b6:	90 93 b1 22 	sts	0x22B1, r25	; 0x8022b1 <udd_g_ctrlreq+0xd>
    13ba:	66 c1       	rjmp	.+716    	; 0x1688 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    13bc:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <udd_g_ctrlreq+0x6>
    13c0:	90 91 ab 22 	lds	r25, 0x22AB	; 0x8022ab <udd_g_ctrlreq+0x7>
    13c4:	89 2b       	or	r24, r25
    13c6:	09 f0       	breq	.+2      	; 0x13ca <udc_process_setup+0x272>
    13c8:	09 c1       	rjmp	.+530    	; 0x15dc <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    13ca:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <udd_g_ctrlreq+0x2>
    13ce:	90 91 a7 22 	lds	r25, 0x22A7	; 0x8022a7 <udd_g_ctrlreq+0x3>
    13d2:	01 97       	sbiw	r24, 0x01	; 1
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <udc_process_setup+0x280>
    13d6:	02 c1       	rjmp	.+516    	; 0x15dc <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    13d8:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <udc_device_status>
    13dc:	90 91 a5 21 	lds	r25, 0x21A5	; 0x8021a5 <udc_device_status+0x1>
    13e0:	8d 7f       	andi	r24, 0xFD	; 253
    13e2:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <udc_device_status>
    13e6:	90 93 a5 21 	sts	0x21A5, r25	; 0x8021a5 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    13ea:	0e 94 3f 13 	call	0x267e	; 0x267e <main_remotewakeup_disable>
    13ee:	4c c1       	rjmp	.+664    	; 0x1688 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    13f0:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <udd_g_ctrlreq+0x6>
    13f4:	90 91 ab 22 	lds	r25, 0x22AB	; 0x8022ab <udd_g_ctrlreq+0x7>
    13f8:	89 2b       	or	r24, r25
    13fa:	09 f0       	breq	.+2      	; 0x13fe <udc_process_setup+0x2a6>
    13fc:	ef c0       	rjmp	.+478    	; 0x15dc <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    13fe:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <udd_g_ctrlreq+0x2>
    1402:	90 91 a7 22 	lds	r25, 0x22A7	; 0x8022a7 <udd_g_ctrlreq+0x3>
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	09 f0       	breq	.+2      	; 0x140c <udc_process_setup+0x2b4>
    140a:	ae c0       	rjmp	.+348    	; 0x1568 <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    140c:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <udc_device_status>
    1410:	90 91 a5 21 	lds	r25, 0x21A5	; 0x8021a5 <udc_device_status+0x1>
    1414:	82 60       	ori	r24, 0x02	; 2
    1416:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <udc_device_status>
    141a:	90 93 a5 21 	sts	0x21A5, r25	; 0x8021a5 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    141e:	0e 94 3e 13 	call	0x267c	; 0x267c <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1422:	32 c1       	rjmp	.+612    	; 0x1688 <udc_process_setup+0x530>
    1424:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <udd_g_ctrlreq+0x6>
    1428:	90 91 ab 22 	lds	r25, 0x22AB	; 0x8022ab <udd_g_ctrlreq+0x7>
    142c:	89 2b       	or	r24, r25
    142e:	09 f0       	breq	.+2      	; 0x1432 <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1430:	d5 c0       	rjmp	.+426    	; 0x15dc <udc_process_setup+0x484>
    1432:	12 d5       	rcall	.+2596   	; 0x1e58 <udd_getaddress>
    1434:	88 23       	and	r24, r24
    1436:	09 f4       	brne	.+2      	; 0x143a <udc_process_setup+0x2e2>
    1438:	9c c0       	rjmp	.+312    	; 0x1572 <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    143a:	20 91 a6 22 	lds	r18, 0x22A6	; 0x8022a6 <udd_g_ctrlreq+0x2>
    143e:	30 91 a7 22 	lds	r19, 0x22A7	; 0x8022a7 <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    1442:	33 27       	eor	r19, r19
    1444:	e0 91 08 20 	lds	r30, 0x2008	; 0x802008 <udc_config>
    1448:	f0 91 09 20 	lds	r31, 0x2009	; 0x802009 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    144c:	81 89       	ldd	r24, Z+17	; 0x11
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	82 17       	cp	r24, r18
    1452:	93 07       	cpc	r25, r19
    1454:	08 f4       	brcc	.+2      	; 0x1458 <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1456:	8d c0       	rjmp	.+282    	; 0x1572 <udc_process_setup+0x41a>
    1458:	25 de       	rcall	.-950    	; 0x10a4 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    145a:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <udd_g_ctrlreq+0x2>
    145e:	90 91 a7 22 	lds	r25, 0x22A7	; 0x8022a7 <udd_g_ctrlreq+0x3>
    1462:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1466:	88 23       	and	r24, r24
    1468:	09 f4       	brne	.+2      	; 0x146c <udc_process_setup+0x314>
    146a:	0e c1       	rjmp	.+540    	; 0x1688 <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    146c:	99 27       	eor	r25, r25
    146e:	81 50       	subi	r24, 0x01	; 1
    1470:	90 4c       	sbci	r25, 0xC0	; 192
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	e0 91 0a 20 	lds	r30, 0x200A	; 0x80200a <udc_config+0x2>
    147e:	f0 91 0b 20 	lds	r31, 0x200B	; 0x80200b <udc_config+0x3>
    1482:	e8 0f       	add	r30, r24
    1484:	f9 1f       	adc	r31, r25
    1486:	e0 93 9e 21 	sts	0x219E, r30	; 0x80219e <udc_ptr_conf>
    148a:	f0 93 9f 21 	sts	0x219F, r31	; 0x80219f <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    148e:	01 90       	ld	r0, Z+
    1490:	f0 81       	ld	r31, Z
    1492:	e0 2d       	mov	r30, r0
    1494:	84 81       	ldd	r24, Z+4	; 0x04
    1496:	88 23       	and	r24, r24
    1498:	09 f4       	brne	.+2      	; 0x149c <udc_process_setup+0x344>
    149a:	f6 c0       	rjmp	.+492    	; 0x1688 <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    149c:	c0 e0       	ldi	r28, 0x00	; 0
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	8c 2f       	mov	r24, r28
    14a2:	c7 dd       	rcall	.-1138   	; 0x1032 <udc_iface_enable>
    14a4:	88 23       	and	r24, r24
    14a6:	09 f4       	brne	.+2      	; 0x14aa <udc_process_setup+0x352>
    14a8:	64 c0       	rjmp	.+200    	; 0x1572 <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    14aa:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14ac:	e0 91 9e 21 	lds	r30, 0x219E	; 0x80219e <udc_ptr_conf>
    14b0:	f0 91 9f 21 	lds	r31, 0x219F	; 0x80219f <udc_ptr_conf+0x1>
    14b4:	01 90       	ld	r0, Z+
    14b6:	f0 81       	ld	r31, Z
    14b8:	e0 2d       	mov	r30, r0
    14ba:	84 81       	ldd	r24, Z+4	; 0x04
    14bc:	c8 17       	cp	r28, r24
    14be:	78 f3       	brcs	.-34     	; 0x149e <udc_process_setup+0x346>
    14c0:	e3 c0       	rjmp	.+454    	; 0x1688 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	e9 f4       	brne	.+58     	; 0x1500 <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    14c6:	90 91 a5 22 	lds	r25, 0x22A5	; 0x8022a5 <udd_g_ctrlreq+0x1>
    14ca:	9b 30       	cpi	r25, 0x0B	; 11
    14cc:	c9 f4       	brne	.+50     	; 0x1500 <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    14ce:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <udd_g_ctrlreq+0x6>
    14d2:	90 91 ab 22 	lds	r25, 0x22AB	; 0x8022ab <udd_g_ctrlreq+0x7>
    14d6:	89 2b       	or	r24, r25
    14d8:	09 f0       	breq	.+2      	; 0x14dc <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    14da:	50 c0       	rjmp	.+160    	; 0x157c <udc_process_setup+0x424>
    14dc:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <udc_num_configuration>
    14e0:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <udc_process_setup+0x38e>
    14e4:	4b c0       	rjmp	.+150    	; 0x157c <udc_process_setup+0x424>
    14e6:	e4 ea       	ldi	r30, 0xA4	; 164
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    14e8:	f2 e2       	ldi	r31, 0x22	; 34

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    14ea:	c4 81       	ldd	r28, Z+4	; 0x04
    14ec:	d2 81       	ldd	r29, Z+2	; 0x02
    14ee:	8c 2f       	mov	r24, r28
    14f0:	5e dd       	rcall	.-1348   	; 0xfae <udc_iface_disable>
    14f2:	88 23       	and	r24, r24
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    14f6:	3d c0       	rjmp	.+122    	; 0x1572 <udc_process_setup+0x41a>
    14f8:	6d 2f       	mov	r22, r29
    14fa:	8c 2f       	mov	r24, r28
    14fc:	9a dd       	rcall	.-1228   	; 0x1032 <udc_iface_enable>
    14fe:	37 c0       	rjmp	.+110    	; 0x156e <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	b9 f5       	brne	.+110    	; 0x1572 <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1504:	80 91 a5 22 	lds	r24, 0x22A5	; 0x8022a5 <udd_g_ctrlreq+0x1>
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	19 f0       	breq	.+6      	; 0x1512 <udc_process_setup+0x3ba>
    150c:	83 30       	cpi	r24, 0x03	; 3
    150e:	99 f0       	breq	.+38     	; 0x1536 <udc_process_setup+0x3de>
    1510:	2d c0       	rjmp	.+90     	; 0x156c <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1512:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <udd_g_ctrlreq+0x6>
    1516:	90 91 ab 22 	lds	r25, 0x22AB	; 0x8022ab <udd_g_ctrlreq+0x7>
    151a:	89 2b       	or	r24, r25
    151c:	09 f0       	breq	.+2      	; 0x1520 <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    151e:	5e c0       	rjmp	.+188    	; 0x15dc <udc_process_setup+0x484>
    1520:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <udd_g_ctrlreq+0x2>
    1524:	90 91 a7 22 	lds	r25, 0x22A7	; 0x8022a7 <udd_g_ctrlreq+0x3>
    1528:	89 2b       	or	r24, r25
    152a:	09 f0       	breq	.+2      	; 0x152e <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    152c:	57 c0       	rjmp	.+174    	; 0x15dc <udc_process_setup+0x484>
    152e:	80 91 a8 22 	lds	r24, 0x22A8	; 0x8022a8 <udd_g_ctrlreq+0x4>
    1532:	44 d5       	rcall	.+2696   	; 0x1fbc <udd_ep_clear_halt>
    1534:	1c c0       	rjmp	.+56     	; 0x156e <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1536:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <udd_g_ctrlreq+0x6>
    153a:	90 91 ab 22 	lds	r25, 0x22AB	; 0x8022ab <udd_g_ctrlreq+0x7>
    153e:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1540:	09 f0       	breq	.+2      	; 0x1544 <udc_process_setup+0x3ec>
    1542:	4c c0       	rjmp	.+152    	; 0x15dc <udc_process_setup+0x484>
    1544:	80 91 a6 22 	lds	r24, 0x22A6	; 0x8022a6 <udd_g_ctrlreq+0x2>
    1548:	90 91 a7 22 	lds	r25, 0x22A7	; 0x8022a7 <udd_g_ctrlreq+0x3>
    154c:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    154e:	09 f0       	breq	.+2      	; 0x1552 <udc_process_setup+0x3fa>
    1550:	45 c0       	rjmp	.+138    	; 0x15dc <udc_process_setup+0x484>
    1552:	c4 ea       	ldi	r28, 0xA4	; 164
    1554:	d2 e2       	ldi	r29, 0x22	; 34
    1556:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1558:	32 d6       	rcall	.+3172   	; 0x21be <udd_ep_abort>
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	9b d6       	rcall	.+3382   	; 0x2294 <udd_ep_set_halt>
    155e:	07 c0       	rjmp	.+14     	; 0x156e <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	05 c0       	rjmp	.+10     	; 0x156e <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	03 c0       	rjmp	.+6      	; 0x156e <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	01 c0       	rjmp	.+2      	; 0x156e <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    156c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    156e:	81 11       	cpse	r24, r1
    1570:	8c c0       	rjmp	.+280    	; 0x168a <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1572:	80 91 a4 22 	lds	r24, 0x22A4	; 0x8022a4 <udd_g_ctrlreq>
    1576:	8f 71       	andi	r24, 0x1F	; 31
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	81 f5       	brne	.+96     	; 0x15dc <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    157c:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <udc_num_configuration>
    1580:	88 23       	and	r24, r24
    1582:	09 f4       	brne	.+2      	; 0x1586 <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1584:	71 c0       	rjmp	.+226    	; 0x1668 <udc_process_setup+0x510>
    1586:	00 91 a8 22 	lds	r16, 0x22A8	; 0x8022a8 <udd_g_ctrlreq+0x4>
    158a:	10 91 a9 22 	lds	r17, 0x22A9	; 0x8022a9 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    158e:	c0 91 9e 21 	lds	r28, 0x219E	; 0x80219e <udc_ptr_conf>
    1592:	d0 91 9f 21 	lds	r29, 0x219F	; 0x80219f <udc_ptr_conf+0x1>
    1596:	e8 81       	ld	r30, Y
    1598:	f9 81       	ldd	r31, Y+1	; 0x01
    159a:	84 81       	ldd	r24, Z+4	; 0x04
    159c:	08 17       	cp	r16, r24
    159e:	08 f0       	brcs	.+2      	; 0x15a2 <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    15a0:	65 c0       	rjmp	.+202    	; 0x166c <udc_process_setup+0x514>
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	80 2f       	mov	r24, r16
    15a6:	c9 dc       	rcall	.-1646   	; 0xf3a <udc_update_iface_desc>
    15a8:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    15aa:	c1 f0       	breq	.+48     	; 0x15dc <udc_process_setup+0x484>
    15ac:	f8 01       	movw	r30, r16
    15ae:	ff 27       	eor	r31, r31
    15b0:	cf 01       	movw	r24, r30
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	ea 81       	ldd	r30, Y+2	; 0x02
    15b8:	fb 81       	ldd	r31, Y+3	; 0x03
    15ba:	e8 0f       	add	r30, r24
    15bc:	f9 1f       	adc	r31, r25
    15be:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    15c0:	d1 81       	ldd	r29, Z+1	; 0x01
    15c2:	ee 81       	ldd	r30, Y+6	; 0x06
    15c4:	ff 81       	ldd	r31, Y+7	; 0x07
    15c6:	19 95       	eicall
    15c8:	68 2f       	mov	r22, r24
    15ca:	80 2f       	mov	r24, r16
    15cc:	b6 dc       	rcall	.-1684   	; 0xf3a <udc_update_iface_desc>
    15ce:	88 23       	and	r24, r24
    15d0:	29 f0       	breq	.+10     	; 0x15dc <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    15d2:	ec 81       	ldd	r30, Y+4	; 0x04
    15d4:	fd 81       	ldd	r31, Y+5	; 0x05
    15d6:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    15d8:	81 11       	cpse	r24, r1
    15da:	57 c0       	rjmp	.+174    	; 0x168a <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    15dc:	80 91 a4 22 	lds	r24, 0x22A4	; 0x8022a4 <udd_g_ctrlreq>
    15e0:	8f 71       	andi	r24, 0x1F	; 31
    15e2:	82 30       	cpi	r24, 0x02	; 2
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <udc_process_setup+0x490>
    15e6:	44 c0       	rjmp	.+136    	; 0x1670 <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    15e8:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <udc_num_configuration>
    15ec:	88 23       	and	r24, r24
    15ee:	b1 f1       	breq	.+108    	; 0x165c <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    15f0:	a0 91 9e 21 	lds	r26, 0x219E	; 0x80219e <udc_ptr_conf>
    15f4:	b0 91 9f 21 	lds	r27, 0x219F	; 0x80219f <udc_ptr_conf+0x1>
    15f8:	ed 91       	ld	r30, X+
    15fa:	fc 91       	ld	r31, X
    15fc:	11 97       	sbiw	r26, 0x01	; 1
    15fe:	84 81       	ldd	r24, Z+4	; 0x04
    1600:	88 23       	and	r24, r24
    1602:	71 f1       	breq	.+92     	; 0x1660 <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1604:	c0 e0       	ldi	r28, 0x00	; 0
    1606:	ec 2f       	mov	r30, r28
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	ee 0f       	add	r30, r30
    160c:	ff 1f       	adc	r31, r31
    160e:	12 96       	adiw	r26, 0x02	; 2
    1610:	8d 91       	ld	r24, X+
    1612:	9c 91       	ld	r25, X
    1614:	13 97       	sbiw	r26, 0x03	; 3
    1616:	e8 0f       	add	r30, r24
    1618:	f9 1f       	adc	r31, r25
    161a:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    161c:	11 81       	ldd	r17, Z+1	; 0x01
    161e:	d8 01       	movw	r26, r16
    1620:	16 96       	adiw	r26, 0x06	; 6
    1622:	ed 91       	ld	r30, X+
    1624:	fc 91       	ld	r31, X
    1626:	17 97       	sbiw	r26, 0x07	; 7
    1628:	19 95       	eicall
    162a:	68 2f       	mov	r22, r24
    162c:	8c 2f       	mov	r24, r28
    162e:	85 dc       	rcall	.-1782   	; 0xf3a <udc_update_iface_desc>
    1630:	88 23       	and	r24, r24
    1632:	59 f1       	breq	.+86     	; 0x168a <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1634:	d8 01       	movw	r26, r16
    1636:	14 96       	adiw	r26, 0x04	; 4
    1638:	ed 91       	ld	r30, X+
    163a:	fc 91       	ld	r31, X
    163c:	15 97       	sbiw	r26, 0x05	; 5
    163e:	19 95       	eicall
    1640:	81 11       	cpse	r24, r1
    1642:	23 c0       	rjmp	.+70     	; 0x168a <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1644:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1646:	a0 91 9e 21 	lds	r26, 0x219E	; 0x80219e <udc_ptr_conf>
    164a:	b0 91 9f 21 	lds	r27, 0x219F	; 0x80219f <udc_ptr_conf+0x1>
    164e:	ed 91       	ld	r30, X+
    1650:	fc 91       	ld	r31, X
    1652:	11 97       	sbiw	r26, 0x01	; 1
    1654:	94 81       	ldd	r25, Z+4	; 0x04
    1656:	c9 17       	cp	r28, r25
    1658:	b0 f2       	brcs	.-84     	; 0x1606 <udc_process_setup+0x4ae>
    165a:	17 c0       	rjmp	.+46     	; 0x168a <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	15 c0       	rjmp	.+42     	; 0x168a <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	13 c0       	rjmp	.+38     	; 0x168a <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	11 c0       	rjmp	.+34     	; 0x168a <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	0f c0       	rjmp	.+30     	; 0x168a <udc_process_setup+0x532>
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	0d c0       	rjmp	.+26     	; 0x168a <udc_process_setup+0x532>
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	0b c0       	rjmp	.+22     	; 0x168a <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1674:	98 2f       	mov	r25, r24
    1676:	90 76       	andi	r25, 0x60	; 96
    1678:	09 f0       	breq	.+2      	; 0x167c <udc_process_setup+0x524>
    167a:	7b cf       	rjmp	.-266    	; 0x1572 <udc_process_setup+0x41a>
    167c:	80 ce       	rjmp	.-768    	; 0x137e <udc_process_setup+0x226>
    167e:	98 2f       	mov	r25, r24
    1680:	90 76       	andi	r25, 0x60	; 96
    1682:	09 f0       	breq	.+2      	; 0x1686 <udc_process_setup+0x52e>
    1684:	76 cf       	rjmp	.-276    	; 0x1572 <udc_process_setup+0x41a>
    1686:	81 cd       	rjmp	.-1278   	; 0x118a <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    1688:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	08 95       	ret

00001694 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1694:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1698:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    169a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    169c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    16a0:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    16a2:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    16a6:	08 95       	ret

000016a8 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    16a8:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    16aa:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    16ac:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    16ae:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    16b0:	60 83       	st	Z, r22
	ret                             // Return to caller
    16b2:	08 95       	ret

000016b4 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	1f 92       	push	r1
    16ba:	1f 92       	push	r1
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	81 11       	cpse	r24, r1
    16c2:	26 c0       	rjmp	.+76     	; 0x1710 <udd_sleep_mode+0x5c>
    16c4:	90 91 98 22 	lds	r25, 0x2298	; 0x802298 <udd_b_idle>
    16c8:	99 23       	and	r25, r25
    16ca:	f9 f0       	breq	.+62     	; 0x170a <udd_sleep_mode+0x56>
    16cc:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <sleepmgr_locks+0x1>
    16d0:	91 11       	cpse	r25, r1
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <udd_sleep_mode+0x22>
    16d4:	ff cf       	rjmp	.-2      	; 0x16d4 <udd_sleep_mode+0x20>
    16d6:	9f b7       	in	r25, 0x3f	; 63
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	f8 94       	cli
    16dc:	2a 81       	ldd	r18, Y+2	; 0x02
    16de:	ee e9       	ldi	r30, 0x9E	; 158
    16e0:	f2 e2       	ldi	r31, 0x22	; 34
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	91 50       	subi	r25, 0x01	; 1
    16e6:	91 83       	std	Z+1, r25	; 0x01
    16e8:	2f bf       	out	0x3f, r18	; 63
    16ea:	0f c0       	rjmp	.+30     	; 0x170a <udd_sleep_mode+0x56>
    16ec:	90 91 9f 22 	lds	r25, 0x229F	; 0x80229f <sleepmgr_locks+0x1>
    16f0:	9f 3f       	cpi	r25, 0xFF	; 255
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <udd_sleep_mode+0x42>
    16f4:	ff cf       	rjmp	.-2      	; 0x16f4 <udd_sleep_mode+0x40>
    16f6:	9f b7       	in	r25, 0x3f	; 63
    16f8:	99 83       	std	Y+1, r25	; 0x01
    16fa:	f8 94       	cli
    16fc:	29 81       	ldd	r18, Y+1	; 0x01
    16fe:	ee e9       	ldi	r30, 0x9E	; 158
    1700:	f2 e2       	ldi	r31, 0x22	; 34
    1702:	91 81       	ldd	r25, Z+1	; 0x01
    1704:	9f 5f       	subi	r25, 0xFF	; 255
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	2f bf       	out	0x3f, r18	; 63
    170a:	80 93 98 22 	sts	0x2298, r24	; 0x802298 <udd_b_idle>
    170e:	05 c0       	rjmp	.+10     	; 0x171a <udd_sleep_mode+0x66>
    1710:	90 91 98 22 	lds	r25, 0x2298	; 0x802298 <udd_b_idle>
    1714:	99 23       	and	r25, r25
    1716:	51 f3       	breq	.-44     	; 0x16ec <udd_sleep_mode+0x38>
    1718:	f8 cf       	rjmp	.-16     	; 0x170a <udd_sleep_mode+0x56>
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	08 95       	ret

00001724 <udd_ctrl_init>:
    1724:	0f 93       	push	r16
    1726:	e8 ec       	ldi	r30, 0xC8	; 200
    1728:	f4 e0       	ldi	r31, 0x04	; 4
    172a:	80 81       	ld	r24, Z
    172c:	8f 7d       	andi	r24, 0xDF	; 223
    172e:	80 83       	st	Z, r24
    1730:	80 81       	ld	r24, Z
    1732:	8f 7d       	andi	r24, 0xDF	; 223
    1734:	80 83       	st	Z, r24
    1736:	ec e6       	ldi	r30, 0x6C	; 108
    1738:	f2 e2       	ldi	r31, 0x22	; 34
    173a:	02 e0       	ldi	r16, 0x02	; 2
    173c:	05 93       	las	Z, r16
    173e:	10 92 6e 22 	sts	0x226E, r1	; 0x80226e <udd_sram+0x16>
    1742:	10 92 6f 22 	sts	0x226F, r1	; 0x80226f <udd_sram+0x17>
    1746:	00 e2       	ldi	r16, 0x20	; 32
    1748:	06 93       	lac	Z, r16
    174a:	00 e4       	ldi	r16, 0x40	; 64
    174c:	06 93       	lac	Z, r16
    174e:	e4 e6       	ldi	r30, 0x64	; 100
    1750:	f2 e2       	ldi	r31, 0x22	; 34
    1752:	00 e4       	ldi	r16, 0x40	; 64
    1754:	06 93       	lac	Z, r16
    1756:	e4 ea       	ldi	r30, 0xA4	; 164
    1758:	f2 e2       	ldi	r31, 0x22	; 34
    175a:	14 86       	std	Z+12, r1	; 0x0c
    175c:	15 86       	std	Z+13, r1	; 0x0d
    175e:	16 86       	std	Z+14, r1	; 0x0e
    1760:	17 86       	std	Z+15, r1	; 0x0f
    1762:	12 86       	std	Z+10, r1	; 0x0a
    1764:	13 86       	std	Z+11, r1	; 0x0b
    1766:	10 92 57 22 	sts	0x2257, r1	; 0x802257 <udd_ep_control_state>
    176a:	0f 91       	pop	r16
    176c:	08 95       	ret

0000176e <udd_ctrl_stall_data>:
    176e:	0f 93       	push	r16
    1770:	85 e0       	ldi	r24, 0x05	; 5
    1772:	80 93 57 22 	sts	0x2257, r24	; 0x802257 <udd_ep_control_state>
    1776:	ed e6       	ldi	r30, 0x6D	; 109
    1778:	f2 e2       	ldi	r31, 0x22	; 34
    177a:	04 e0       	ldi	r16, 0x04	; 4
    177c:	05 93       	las	Z, r16
    177e:	e5 e6       	ldi	r30, 0x65	; 101
    1780:	f2 e2       	ldi	r31, 0x22	; 34
    1782:	04 e0       	ldi	r16, 0x04	; 4
    1784:	05 93       	las	Z, r16
    1786:	0f 91       	pop	r16
    1788:	08 95       	ret

0000178a <udd_ctrl_send_zlp_in>:
    178a:	0f 93       	push	r16
    178c:	83 e0       	ldi	r24, 0x03	; 3
    178e:	80 93 57 22 	sts	0x2257, r24	; 0x802257 <udd_ep_control_state>
    1792:	10 92 6e 22 	sts	0x226E, r1	; 0x80226e <udd_sram+0x16>
    1796:	10 92 6f 22 	sts	0x226F, r1	; 0x80226f <udd_sram+0x17>
    179a:	ec e6       	ldi	r30, 0x6C	; 108
    179c:	f2 e2       	ldi	r31, 0x22	; 34
    179e:	02 e0       	ldi	r16, 0x02	; 2
    17a0:	06 93       	lac	Z, r16
    17a2:	0f 91       	pop	r16
    17a4:	08 95       	ret

000017a6 <udd_ctrl_endofrequest>:
    17a6:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <udd_g_ctrlreq+0xc>
    17aa:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <udd_g_ctrlreq+0xd>
    17ae:	30 97       	sbiw	r30, 0x00	; 0
    17b0:	09 f0       	breq	.+2      	; 0x17b4 <udd_ctrl_endofrequest+0xe>
    17b2:	19 95       	eicall
    17b4:	08 95       	ret

000017b6 <udd_ctrl_in_sent>:
    17b6:	0f 93       	push	r16
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	80 91 57 22 	lds	r24, 0x2257	; 0x802257 <udd_ep_control_state>
    17c0:	83 30       	cpi	r24, 0x03	; 3
    17c2:	19 f4       	brne	.+6      	; 0x17ca <udd_ctrl_in_sent+0x14>
    17c4:	f0 df       	rcall	.-32     	; 0x17a6 <udd_ctrl_endofrequest>
    17c6:	ae df       	rcall	.-164    	; 0x1724 <udd_ctrl_init>
    17c8:	5e c0       	rjmp	.+188    	; 0x1886 <udd_ctrl_in_sent+0xd0>
    17ca:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <udd_ctrl_payload_nb_trans>
    17ce:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <udd_ctrl_payload_nb_trans+0x1>
    17d2:	c0 91 ae 22 	lds	r28, 0x22AE	; 0x8022ae <udd_g_ctrlreq+0xa>
    17d6:	d0 91 af 22 	lds	r29, 0x22AF	; 0x8022af <udd_g_ctrlreq+0xb>
    17da:	c8 1b       	sub	r28, r24
    17dc:	d9 0b       	sbc	r29, r25
    17de:	71 f5       	brne	.+92     	; 0x183c <udd_ctrl_in_sent+0x86>
    17e0:	20 91 55 22 	lds	r18, 0x2255	; 0x802255 <udd_ctrl_prev_payload_nb_trans>
    17e4:	30 91 56 22 	lds	r19, 0x2256	; 0x802256 <udd_ctrl_prev_payload_nb_trans+0x1>
    17e8:	82 0f       	add	r24, r18
    17ea:	93 1f       	adc	r25, r19
    17ec:	80 93 55 22 	sts	0x2255, r24	; 0x802255 <udd_ctrl_prev_payload_nb_trans>
    17f0:	90 93 56 22 	sts	0x2256, r25	; 0x802256 <udd_ctrl_prev_payload_nb_trans+0x1>
    17f4:	20 91 aa 22 	lds	r18, 0x22AA	; 0x8022aa <udd_g_ctrlreq+0x6>
    17f8:	30 91 ab 22 	lds	r19, 0x22AB	; 0x8022ab <udd_g_ctrlreq+0x7>
    17fc:	82 17       	cp	r24, r18
    17fe:	93 07       	cpc	r25, r19
    1800:	21 f0       	breq	.+8      	; 0x180a <udd_ctrl_in_sent+0x54>
    1802:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <b_shortpacket.5274>
    1806:	88 23       	and	r24, r24
    1808:	41 f0       	breq	.+16     	; 0x181a <udd_ctrl_in_sent+0x64>
    180a:	84 e0       	ldi	r24, 0x04	; 4
    180c:	80 93 57 22 	sts	0x2257, r24	; 0x802257 <udd_ep_control_state>
    1810:	e4 e6       	ldi	r30, 0x64	; 100
    1812:	f2 e2       	ldi	r31, 0x22	; 34
    1814:	02 e0       	ldi	r16, 0x02	; 2
    1816:	06 93       	lac	Z, r16
    1818:	36 c0       	rjmp	.+108    	; 0x1886 <udd_ctrl_in_sent+0xd0>
    181a:	e0 91 b2 22 	lds	r30, 0x22B2	; 0x8022b2 <udd_g_ctrlreq+0xe>
    181e:	f0 91 b3 22 	lds	r31, 0x22B3	; 0x8022b3 <udd_g_ctrlreq+0xf>
    1822:	30 97       	sbiw	r30, 0x00	; 0
    1824:	99 f0       	breq	.+38     	; 0x184c <udd_ctrl_in_sent+0x96>
    1826:	19 95       	eicall
    1828:	88 23       	and	r24, r24
    182a:	81 f0       	breq	.+32     	; 0x184c <udd_ctrl_in_sent+0x96>
    182c:	10 92 53 22 	sts	0x2253, r1	; 0x802253 <udd_ctrl_payload_nb_trans>
    1830:	10 92 54 22 	sts	0x2254, r1	; 0x802254 <udd_ctrl_payload_nb_trans+0x1>
    1834:	c0 91 ae 22 	lds	r28, 0x22AE	; 0x8022ae <udd_g_ctrlreq+0xa>
    1838:	d0 91 af 22 	lds	r29, 0x22AF	; 0x8022af <udd_g_ctrlreq+0xb>
    183c:	c8 30       	cpi	r28, 0x08	; 8
    183e:	d1 05       	cpc	r29, r1
    1840:	28 f0       	brcs	.+10     	; 0x184c <udd_ctrl_in_sent+0x96>
    1842:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <b_shortpacket.5274>
    1846:	c8 e0       	ldi	r28, 0x08	; 8
    1848:	d0 e0       	ldi	r29, 0x00	; 0
    184a:	03 c0       	rjmp	.+6      	; 0x1852 <udd_ctrl_in_sent+0x9c>
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <b_shortpacket.5274>
    1852:	e8 e5       	ldi	r30, 0x58	; 88
    1854:	f2 e2       	ldi	r31, 0x22	; 34
    1856:	c6 8b       	std	Z+22, r28	; 0x16
    1858:	d7 8b       	std	Z+23, r29	; 0x17
    185a:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <udd_ctrl_payload_nb_trans>
    185e:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <udd_ctrl_payload_nb_trans+0x1>
    1862:	20 91 ac 22 	lds	r18, 0x22AC	; 0x8022ac <udd_g_ctrlreq+0x8>
    1866:	30 91 ad 22 	lds	r19, 0x22AD	; 0x8022ad <udd_g_ctrlreq+0x9>
    186a:	28 0f       	add	r18, r24
    186c:	39 1f       	adc	r19, r25
    186e:	20 8f       	std	Z+24, r18	; 0x18
    1870:	31 8f       	std	Z+25, r19	; 0x19
    1872:	c8 0f       	add	r28, r24
    1874:	d9 1f       	adc	r29, r25
    1876:	c0 93 53 22 	sts	0x2253, r28	; 0x802253 <udd_ctrl_payload_nb_trans>
    187a:	d0 93 54 22 	sts	0x2254, r29	; 0x802254 <udd_ctrl_payload_nb_trans+0x1>
    187e:	ec e6       	ldi	r30, 0x6C	; 108
    1880:	f2 e2       	ldi	r31, 0x22	; 34
    1882:	02 e0       	ldi	r16, 0x02	; 2
    1884:	06 93       	lac	Z, r16
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	0f 91       	pop	r16
    188c:	08 95       	ret

0000188e <udd_ep_get_size>:
    188e:	fc 01       	movw	r30, r24
    1890:	81 81       	ldd	r24, Z+1	; 0x01
    1892:	e8 2f       	mov	r30, r24
    1894:	e7 70       	andi	r30, 0x07	; 7
    1896:	8e 2f       	mov	r24, r30
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	fc 01       	movw	r30, r24
    189c:	31 97       	sbiw	r30, 0x01	; 1
    189e:	e7 30       	cpi	r30, 0x07	; 7
    18a0:	f1 05       	cpc	r31, r1
    18a2:	d0 f4       	brcc	.+52     	; 0x18d8 <udd_ep_get_size+0x4a>
    18a4:	88 27       	eor	r24, r24
    18a6:	e9 5f       	subi	r30, 0xF9	; 249
    18a8:	fe 4f       	sbci	r31, 0xFE	; 254
    18aa:	8f 4f       	sbci	r24, 0xFF	; 255
    18ac:	0b c7       	rjmp	.+3606   	; 0x26c4 <__tablejump2__>
    18ae:	80 e1       	ldi	r24, 0x10	; 16
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	08 95       	ret
    18b4:	80 e2       	ldi	r24, 0x20	; 32
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	08 95       	ret
    18ba:	80 e4       	ldi	r24, 0x40	; 64
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	08 95       	ret
    18c0:	80 e8       	ldi	r24, 0x80	; 128
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	08 95       	ret
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	08 95       	ret
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	92 e0       	ldi	r25, 0x02	; 2
    18d0:	08 95       	ret
    18d2:	8f ef       	ldi	r24, 0xFF	; 255
    18d4:	93 e0       	ldi	r25, 0x03	; 3
    18d6:	08 95       	ret
    18d8:	88 e0       	ldi	r24, 0x08	; 8
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	08 95       	ret

000018de <udd_ep_get_job>:
    18de:	28 2f       	mov	r18, r24
    18e0:	2f 70       	andi	r18, 0x0F	; 15
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	22 0f       	add	r18, r18
    18e6:	33 1f       	adc	r19, r19
    18e8:	08 2e       	mov	r0, r24
    18ea:	00 0c       	add	r0, r0
    18ec:	99 0b       	sbc	r25, r25
    18ee:	88 27       	eor	r24, r24
    18f0:	99 0f       	add	r25, r25
    18f2:	88 1f       	adc	r24, r24
    18f4:	99 27       	eor	r25, r25
    18f6:	82 0f       	add	r24, r18
    18f8:	93 1f       	adc	r25, r19
    18fa:	02 97       	sbiw	r24, 0x02	; 2
    18fc:	9c 01       	movw	r18, r24
    18fe:	22 0f       	add	r18, r18
    1900:	33 1f       	adc	r19, r19
    1902:	22 0f       	add	r18, r18
    1904:	33 1f       	adc	r19, r19
    1906:	22 0f       	add	r18, r18
    1908:	33 1f       	adc	r19, r19
    190a:	82 0f       	add	r24, r18
    190c:	93 1f       	adc	r25, r19
    190e:	89 5d       	subi	r24, 0xD9	; 217
    1910:	9d 4d       	sbci	r25, 0xDD	; 221
    1912:	08 95       	ret

00001914 <udd_ctrl_interrupt_tc_setup>:
    1914:	0f 93       	push	r16
    1916:	cf 93       	push	r28
    1918:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    191c:	80 ff       	sbrs	r24, 0
    191e:	64 c0       	rjmp	.+200    	; 0x19e8 <udd_ctrl_interrupt_tc_setup+0xd4>
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1926:	e4 e6       	ldi	r30, 0x64	; 100
    1928:	f2 e2       	ldi	r31, 0x22	; 34
    192a:	00 e8       	ldi	r16, 0x80	; 128
    192c:	06 93       	lac	Z, r16
    192e:	ec e6       	ldi	r30, 0x6C	; 108
    1930:	f2 e2       	ldi	r31, 0x22	; 34
    1932:	00 e8       	ldi	r16, 0x80	; 128
    1934:	06 93       	lac	Z, r16
    1936:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    193a:	e4 e6       	ldi	r30, 0x64	; 100
    193c:	f2 e2       	ldi	r31, 0x22	; 34
    193e:	00 e1       	ldi	r16, 0x10	; 16
    1940:	06 93       	lac	Z, r16
    1942:	80 91 57 22 	lds	r24, 0x2257	; 0x802257 <udd_ep_control_state>
    1946:	88 23       	and	r24, r24
    1948:	29 f0       	breq	.+10     	; 0x1954 <udd_ctrl_interrupt_tc_setup+0x40>
    194a:	83 50       	subi	r24, 0x03	; 3
    194c:	82 30       	cpi	r24, 0x02	; 2
    194e:	08 f4       	brcc	.+2      	; 0x1952 <udd_ctrl_interrupt_tc_setup+0x3e>
    1950:	2a df       	rcall	.-428    	; 0x17a6 <udd_ctrl_endofrequest>
    1952:	e8 de       	rcall	.-560    	; 0x1724 <udd_ctrl_init>
    1954:	80 91 66 22 	lds	r24, 0x2266	; 0x802266 <udd_sram+0xe>
    1958:	90 91 67 22 	lds	r25, 0x2267	; 0x802267 <udd_sram+0xf>
    195c:	08 97       	sbiw	r24, 0x08	; 8
    195e:	09 f0       	breq	.+2      	; 0x1962 <udd_ctrl_interrupt_tc_setup+0x4e>
    1960:	45 c0       	rjmp	.+138    	; 0x19ec <udd_ctrl_interrupt_tc_setup+0xd8>
    1962:	88 e0       	ldi	r24, 0x08	; 8
    1964:	eb e4       	ldi	r30, 0x4B	; 75
    1966:	f2 e2       	ldi	r31, 0x22	; 34
    1968:	a4 ea       	ldi	r26, 0xA4	; 164
    196a:	b2 e2       	ldi	r27, 0x22	; 34
    196c:	01 90       	ld	r0, Z+
    196e:	0d 92       	st	X+, r0
    1970:	8a 95       	dec	r24
    1972:	e1 f7       	brne	.-8      	; 0x196c <udd_ctrl_interrupt_tc_setup+0x58>
    1974:	e8 ec       	ldi	r30, 0xC8	; 200
    1976:	f4 e0       	ldi	r31, 0x04	; 4
    1978:	80 81       	ld	r24, Z
    197a:	80 62       	ori	r24, 0x20	; 32
    197c:	80 83       	st	Z, r24
    197e:	80 81       	ld	r24, Z
    1980:	80 62       	ori	r24, 0x20	; 32
    1982:	80 83       	st	Z, r24
    1984:	e9 db       	rcall	.-2094   	; 0x1158 <udc_process_setup>
    1986:	c8 2f       	mov	r28, r24
    1988:	81 11       	cpse	r24, r1
    198a:	03 c0       	rjmp	.+6      	; 0x1992 <udd_ctrl_interrupt_tc_setup+0x7e>
    198c:	f0 de       	rcall	.-544    	; 0x176e <udd_ctrl_stall_data>
    198e:	c1 e0       	ldi	r28, 0x01	; 1
    1990:	2e c0       	rjmp	.+92     	; 0x19ee <udd_ctrl_interrupt_tc_setup+0xda>
    1992:	80 91 a4 22 	lds	r24, 0x22A4	; 0x8022a4 <udd_g_ctrlreq>
    1996:	88 23       	and	r24, r24
    1998:	6c f4       	brge	.+26     	; 0x19b4 <udd_ctrl_interrupt_tc_setup+0xa0>
    199a:	10 92 55 22 	sts	0x2255, r1	; 0x802255 <udd_ctrl_prev_payload_nb_trans>
    199e:	10 92 56 22 	sts	0x2256, r1	; 0x802256 <udd_ctrl_prev_payload_nb_trans+0x1>
    19a2:	10 92 53 22 	sts	0x2253, r1	; 0x802253 <udd_ctrl_payload_nb_trans>
    19a6:	10 92 54 22 	sts	0x2254, r1	; 0x802254 <udd_ctrl_payload_nb_trans+0x1>
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	80 93 57 22 	sts	0x2257, r24	; 0x802257 <udd_ep_control_state>
    19b0:	02 df       	rcall	.-508    	; 0x17b6 <udd_ctrl_in_sent>
    19b2:	1d c0       	rjmp	.+58     	; 0x19ee <udd_ctrl_interrupt_tc_setup+0xda>
    19b4:	80 91 aa 22 	lds	r24, 0x22AA	; 0x8022aa <udd_g_ctrlreq+0x6>
    19b8:	90 91 ab 22 	lds	r25, 0x22AB	; 0x8022ab <udd_g_ctrlreq+0x7>
    19bc:	89 2b       	or	r24, r25
    19be:	11 f4       	brne	.+4      	; 0x19c4 <udd_ctrl_interrupt_tc_setup+0xb0>
    19c0:	e4 de       	rcall	.-568    	; 0x178a <udd_ctrl_send_zlp_in>
    19c2:	15 c0       	rjmp	.+42     	; 0x19ee <udd_ctrl_interrupt_tc_setup+0xda>
    19c4:	10 92 55 22 	sts	0x2255, r1	; 0x802255 <udd_ctrl_prev_payload_nb_trans>
    19c8:	10 92 56 22 	sts	0x2256, r1	; 0x802256 <udd_ctrl_prev_payload_nb_trans+0x1>
    19cc:	10 92 53 22 	sts	0x2253, r1	; 0x802253 <udd_ctrl_payload_nb_trans>
    19d0:	10 92 54 22 	sts	0x2254, r1	; 0x802254 <udd_ctrl_payload_nb_trans+0x1>
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	80 93 57 22 	sts	0x2257, r24	; 0x802257 <udd_ep_control_state>
    19da:	e4 e6       	ldi	r30, 0x64	; 100
    19dc:	f2 e2       	ldi	r31, 0x22	; 34
    19de:	02 e0       	ldi	r16, 0x02	; 2
    19e0:	06 93       	lac	Z, r16
    19e2:	00 e2       	ldi	r16, 0x20	; 32
    19e4:	06 93       	lac	Z, r16
    19e6:	03 c0       	rjmp	.+6      	; 0x19ee <udd_ctrl_interrupt_tc_setup+0xda>
    19e8:	c0 e0       	ldi	r28, 0x00	; 0
    19ea:	01 c0       	rjmp	.+2      	; 0x19ee <udd_ctrl_interrupt_tc_setup+0xda>
    19ec:	c1 e0       	ldi	r28, 0x01	; 1
    19ee:	8c 2f       	mov	r24, r28
    19f0:	cf 91       	pop	r28
    19f2:	0f 91       	pop	r16
    19f4:	08 95       	ret

000019f6 <udd_ep_trans_complet>:
    19f6:	8f 92       	push	r8
    19f8:	9f 92       	push	r9
    19fa:	af 92       	push	r10
    19fc:	bf 92       	push	r11
    19fe:	df 92       	push	r13
    1a00:	ef 92       	push	r14
    1a02:	ff 92       	push	r15
    1a04:	0f 93       	push	r16
    1a06:	1f 93       	push	r17
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	d8 2e       	mov	r13, r24
    1a0e:	67 df       	rcall	.-306    	; 0x18de <udd_ep_get_job>
    1a10:	8c 01       	movw	r16, r24
    1a12:	cd 2d       	mov	r28, r13
    1a14:	cf 70       	andi	r28, 0x0F	; 15
    1a16:	d0 e0       	ldi	r29, 0x00	; 0
    1a18:	ce 01       	movw	r24, r28
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	cd 2d       	mov	r28, r13
    1a20:	0d 2c       	mov	r0, r13
    1a22:	00 0c       	add	r0, r0
    1a24:	dd 0b       	sbc	r29, r29
    1a26:	cc 27       	eor	r28, r28
    1a28:	dd 0f       	add	r29, r29
    1a2a:	cc 1f       	adc	r28, r28
    1a2c:	dd 27       	eor	r29, r29
    1a2e:	c8 0f       	add	r28, r24
    1a30:	d9 1f       	adc	r29, r25
    1a32:	ce 01       	movw	r24, r28
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	9c 01       	movw	r18, r24
    1a42:	2c 59       	subi	r18, 0x9C	; 156
    1a44:	3d 4d       	sbci	r19, 0xDD	; 221
    1a46:	79 01       	movw	r14, r18
    1a48:	c9 01       	movw	r24, r18
    1a4a:	21 df       	rcall	.-446    	; 0x188e <udd_ep_get_size>
    1a4c:	4c 01       	movw	r8, r24
    1a4e:	dd 20       	and	r13, r13
    1a50:	0c f0       	brlt	.+2      	; 0x1a54 <udd_ep_trans_complet+0x5e>
    1a52:	79 c0       	rjmp	.+242    	; 0x1b46 <udd_ep_trans_complet+0x150>
    1a54:	fe 01       	movw	r30, r28
    1a56:	ee 0f       	add	r30, r30
    1a58:	ff 1f       	adc	r31, r31
    1a5a:	ee 0f       	add	r30, r30
    1a5c:	ff 1f       	adc	r31, r31
    1a5e:	ee 0f       	add	r30, r30
    1a60:	ff 1f       	adc	r31, r31
    1a62:	e8 5a       	subi	r30, 0xA8	; 168
    1a64:	fd 4d       	sbci	r31, 0xDD	; 221
    1a66:	22 89       	ldd	r18, Z+18	; 0x12
    1a68:	33 89       	ldd	r19, Z+19	; 0x13
    1a6a:	d8 01       	movw	r26, r16
    1a6c:	15 96       	adiw	r26, 0x05	; 5
    1a6e:	8d 91       	ld	r24, X+
    1a70:	9c 91       	ld	r25, X
    1a72:	16 97       	sbiw	r26, 0x06	; 6
    1a74:	82 0f       	add	r24, r18
    1a76:	93 1f       	adc	r25, r19
    1a78:	15 96       	adiw	r26, 0x05	; 5
    1a7a:	8d 93       	st	X+, r24
    1a7c:	9c 93       	st	X, r25
    1a7e:	16 97       	sbiw	r26, 0x06	; 6
    1a80:	13 96       	adiw	r26, 0x03	; 3
    1a82:	2d 91       	ld	r18, X+
    1a84:	3c 91       	ld	r19, X
    1a86:	14 97       	sbiw	r26, 0x04	; 4
    1a88:	82 17       	cp	r24, r18
    1a8a:	93 07       	cpc	r25, r19
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <udd_ep_trans_complet+0x9a>
    1a8e:	45 c0       	rjmp	.+138    	; 0x1b1a <udd_ep_trans_complet+0x124>
    1a90:	28 1b       	sub	r18, r24
    1a92:	39 0b       	sbc	r19, r25
    1a94:	21 15       	cp	r18, r1
    1a96:	b4 e0       	ldi	r27, 0x04	; 4
    1a98:	3b 07       	cpc	r19, r27
    1a9a:	38 f0       	brcs	.+14     	; 0x1aaa <udd_ep_trans_complet+0xb4>
    1a9c:	2f ef       	ldi	r18, 0xFF	; 255
    1a9e:	33 e0       	ldi	r19, 0x03	; 3
    1aa0:	c9 01       	movw	r24, r18
    1aa2:	b4 01       	movw	r22, r8
    1aa4:	fb d5       	rcall	.+3062   	; 0x269c <__udivmodhi4>
    1aa6:	28 1b       	sub	r18, r24
    1aa8:	39 0b       	sbc	r19, r25
    1aaa:	f8 01       	movw	r30, r16
    1aac:	80 81       	ld	r24, Z
    1aae:	81 ff       	sbrs	r24, 1
    1ab0:	09 c0       	rjmp	.+18     	; 0x1ac4 <udd_ep_trans_complet+0xce>
    1ab2:	c9 01       	movw	r24, r18
    1ab4:	b4 01       	movw	r22, r8
    1ab6:	f2 d5       	rcall	.+3044   	; 0x269c <__udivmodhi4>
    1ab8:	41 e0       	ldi	r20, 0x01	; 1
    1aba:	89 2b       	or	r24, r25
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <udd_ep_trans_complet+0xca>
    1abe:	40 e0       	ldi	r20, 0x00	; 0
    1ac0:	84 2f       	mov	r24, r20
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <udd_ep_trans_complet+0xd0>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	d8 01       	movw	r26, r16
    1ac8:	9c 91       	ld	r25, X
    1aca:	80 fb       	bst	r24, 0
    1acc:	91 f9       	bld	r25, 1
    1ace:	9c 93       	st	X, r25
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	ee 0f       	add	r30, r30
    1ad4:	ff 1f       	adc	r31, r31
    1ad6:	ee 0f       	add	r30, r30
    1ad8:	ff 1f       	adc	r31, r31
    1ada:	ee 0f       	add	r30, r30
    1adc:	ff 1f       	adc	r31, r31
    1ade:	e8 5a       	subi	r30, 0xA8	; 168
    1ae0:	fd 4d       	sbci	r31, 0xDD	; 221
    1ae2:	12 8a       	std	Z+18, r1	; 0x12
    1ae4:	13 8a       	std	Z+19, r1	; 0x13
    1ae6:	26 87       	std	Z+14, r18	; 0x0e
    1ae8:	37 87       	std	Z+15, r19	; 0x0f
    1aea:	11 96       	adiw	r26, 0x01	; 1
    1aec:	2d 91       	ld	r18, X+
    1aee:	3c 91       	ld	r19, X
    1af0:	12 97       	sbiw	r26, 0x02	; 2
    1af2:	15 96       	adiw	r26, 0x05	; 5
    1af4:	8d 91       	ld	r24, X+
    1af6:	9c 91       	ld	r25, X
    1af8:	16 97       	sbiw	r26, 0x06	; 6
    1afa:	82 0f       	add	r24, r18
    1afc:	93 1f       	adc	r25, r19
    1afe:	cc 0f       	add	r28, r28
    1b00:	dd 1f       	adc	r29, r29
    1b02:	cc 0f       	add	r28, r28
    1b04:	dd 1f       	adc	r29, r29
    1b06:	cc 0f       	add	r28, r28
    1b08:	dd 1f       	adc	r29, r29
    1b0a:	c8 59       	subi	r28, 0x98	; 152
    1b0c:	dd 4d       	sbci	r29, 0xDD	; 221
    1b0e:	88 83       	st	Y, r24
    1b10:	99 83       	std	Y+1, r25	; 0x01
    1b12:	f7 01       	movw	r30, r14
    1b14:	02 e0       	ldi	r16, 0x02	; 2
    1b16:	06 93       	lac	Z, r16
    1b18:	e0 c0       	rjmp	.+448    	; 0x1cda <udd_ep_trans_complet+0x2e4>
    1b1a:	d8 01       	movw	r26, r16
    1b1c:	8c 91       	ld	r24, X
    1b1e:	81 ff       	sbrs	r24, 1
    1b20:	c9 c0       	rjmp	.+402    	; 0x1cb4 <udd_ep_trans_complet+0x2be>
    1b22:	8d 7f       	andi	r24, 0xFD	; 253
    1b24:	8c 93       	st	X, r24
    1b26:	cc 0f       	add	r28, r28
    1b28:	dd 1f       	adc	r29, r29
    1b2a:	cc 0f       	add	r28, r28
    1b2c:	dd 1f       	adc	r29, r29
    1b2e:	cc 0f       	add	r28, r28
    1b30:	dd 1f       	adc	r29, r29
    1b32:	c8 5a       	subi	r28, 0xA8	; 168
    1b34:	dd 4d       	sbci	r29, 0xDD	; 221
    1b36:	1a 8a       	std	Y+18, r1	; 0x12
    1b38:	1b 8a       	std	Y+19, r1	; 0x13
    1b3a:	1e 86       	std	Y+14, r1	; 0x0e
    1b3c:	1f 86       	std	Y+15, r1	; 0x0f
    1b3e:	f7 01       	movw	r30, r14
    1b40:	02 e0       	ldi	r16, 0x02	; 2
    1b42:	06 93       	lac	Z, r16
    1b44:	ca c0       	rjmp	.+404    	; 0x1cda <udd_ep_trans_complet+0x2e4>
    1b46:	fe 01       	movw	r30, r28
    1b48:	ee 0f       	add	r30, r30
    1b4a:	ff 1f       	adc	r31, r31
    1b4c:	ee 0f       	add	r30, r30
    1b4e:	ff 1f       	adc	r31, r31
    1b50:	ee 0f       	add	r30, r30
    1b52:	ff 1f       	adc	r31, r31
    1b54:	e8 5a       	subi	r30, 0xA8	; 168
    1b56:	fd 4d       	sbci	r31, 0xDD	; 221
    1b58:	a6 84       	ldd	r10, Z+14	; 0x0e
    1b5a:	b7 84       	ldd	r11, Z+15	; 0x0f
    1b5c:	d8 01       	movw	r26, r16
    1b5e:	8c 91       	ld	r24, X
    1b60:	82 ff       	sbrs	r24, 2
    1b62:	19 c0       	rjmp	.+50     	; 0x1b96 <udd_ep_trans_complet+0x1a0>
    1b64:	11 96       	adiw	r26, 0x01	; 1
    1b66:	ed 91       	ld	r30, X+
    1b68:	fc 91       	ld	r31, X
    1b6a:	12 97       	sbiw	r26, 0x02	; 2
    1b6c:	15 96       	adiw	r26, 0x05	; 5
    1b6e:	2d 91       	ld	r18, X+
    1b70:	3c 91       	ld	r19, X
    1b72:	16 97       	sbiw	r26, 0x06	; 6
    1b74:	13 96       	adiw	r26, 0x03	; 3
    1b76:	8d 91       	ld	r24, X+
    1b78:	9c 91       	ld	r25, X
    1b7a:	14 97       	sbiw	r26, 0x04	; 4
    1b7c:	b4 01       	movw	r22, r8
    1b7e:	8e d5       	rcall	.+2844   	; 0x269c <__udivmodhi4>
    1b80:	b0 e4       	ldi	r27, 0x40	; 64
    1b82:	db 9e       	mul	r13, r27
    1b84:	b0 01       	movw	r22, r0
    1b86:	11 24       	eor	r1, r1
    1b88:	69 59       	subi	r22, 0x99	; 153
    1b8a:	7e 4d       	sbci	r23, 0xDE	; 222
    1b8c:	ac 01       	movw	r20, r24
    1b8e:	cf 01       	movw	r24, r30
    1b90:	82 0f       	add	r24, r18
    1b92:	93 1f       	adc	r25, r19
    1b94:	9f d5       	rcall	.+2878   	; 0x26d4 <memcpy>
    1b96:	f8 01       	movw	r30, r16
    1b98:	25 81       	ldd	r18, Z+5	; 0x05
    1b9a:	36 81       	ldd	r19, Z+6	; 0x06
    1b9c:	2a 0d       	add	r18, r10
    1b9e:	3b 1d       	adc	r19, r11
    1ba0:	25 83       	std	Z+5, r18	; 0x05
    1ba2:	36 83       	std	Z+6, r19	; 0x06
    1ba4:	83 81       	ldd	r24, Z+3	; 0x03
    1ba6:	94 81       	ldd	r25, Z+4	; 0x04
    1ba8:	82 17       	cp	r24, r18
    1baa:	93 07       	cpc	r25, r19
    1bac:	68 f4       	brcc	.+26     	; 0x1bc8 <udd_ep_trans_complet+0x1d2>
    1bae:	85 83       	std	Z+5, r24	; 0x05
    1bb0:	96 83       	std	Z+6, r25	; 0x06
    1bb2:	cc 0f       	add	r28, r28
    1bb4:	dd 1f       	adc	r29, r29
    1bb6:	cc 0f       	add	r28, r28
    1bb8:	dd 1f       	adc	r29, r29
    1bba:	cc 0f       	add	r28, r28
    1bbc:	dd 1f       	adc	r29, r29
    1bbe:	c8 5a       	subi	r28, 0xA8	; 168
    1bc0:	dd 4d       	sbci	r29, 0xDD	; 221
    1bc2:	8a 89       	ldd	r24, Y+18	; 0x12
    1bc4:	9b 89       	ldd	r25, Y+19	; 0x13
    1bc6:	76 c0       	rjmp	.+236    	; 0x1cb4 <udd_ep_trans_complet+0x2be>
    1bc8:	fe 01       	movw	r30, r28
    1bca:	ee 0f       	add	r30, r30
    1bcc:	ff 1f       	adc	r31, r31
    1bce:	ee 0f       	add	r30, r30
    1bd0:	ff 1f       	adc	r31, r31
    1bd2:	ee 0f       	add	r30, r30
    1bd4:	ff 1f       	adc	r31, r31
    1bd6:	e8 5a       	subi	r30, 0xA8	; 168
    1bd8:	fd 4d       	sbci	r31, 0xDD	; 221
    1bda:	42 89       	ldd	r20, Z+18	; 0x12
    1bdc:	53 89       	ldd	r21, Z+19	; 0x13
    1bde:	a4 16       	cp	r10, r20
    1be0:	b5 06       	cpc	r11, r21
    1be2:	09 f0       	breq	.+2      	; 0x1be6 <udd_ep_trans_complet+0x1f0>
    1be4:	67 c0       	rjmp	.+206    	; 0x1cb4 <udd_ep_trans_complet+0x2be>
    1be6:	28 17       	cp	r18, r24
    1be8:	39 07       	cpc	r19, r25
    1bea:	09 f4       	brne	.+2      	; 0x1bee <udd_ep_trans_complet+0x1f8>
    1bec:	63 c0       	rjmp	.+198    	; 0x1cb4 <udd_ep_trans_complet+0x2be>
    1bee:	ac 01       	movw	r20, r24
    1bf0:	42 1b       	sub	r20, r18
    1bf2:	53 0b       	sbc	r21, r19
    1bf4:	9a 01       	movw	r18, r20
    1bf6:	21 15       	cp	r18, r1
    1bf8:	54 e0       	ldi	r21, 0x04	; 4
    1bfa:	35 07       	cpc	r19, r21
    1bfc:	40 f0       	brcs	.+16     	; 0x1c0e <udd_ep_trans_complet+0x218>
    1bfe:	2f ef       	ldi	r18, 0xFF	; 255
    1c00:	33 e0       	ldi	r19, 0x03	; 3
    1c02:	c9 01       	movw	r24, r18
    1c04:	b4 01       	movw	r22, r8
    1c06:	4a d5       	rcall	.+2708   	; 0x269c <__udivmodhi4>
    1c08:	28 1b       	sub	r18, r24
    1c0a:	39 0b       	sbc	r19, r25
    1c0c:	05 c0       	rjmp	.+10     	; 0x1c18 <udd_ep_trans_complet+0x222>
    1c0e:	c9 01       	movw	r24, r18
    1c10:	b4 01       	movw	r22, r8
    1c12:	44 d5       	rcall	.+2696   	; 0x269c <__udivmodhi4>
    1c14:	28 1b       	sub	r18, r24
    1c16:	39 0b       	sbc	r19, r25
    1c18:	fe 01       	movw	r30, r28
    1c1a:	ee 0f       	add	r30, r30
    1c1c:	ff 1f       	adc	r31, r31
    1c1e:	ee 0f       	add	r30, r30
    1c20:	ff 1f       	adc	r31, r31
    1c22:	ee 0f       	add	r30, r30
    1c24:	ff 1f       	adc	r31, r31
    1c26:	e8 5a       	subi	r30, 0xA8	; 168
    1c28:	fd 4d       	sbci	r31, 0xDD	; 221
    1c2a:	16 86       	std	Z+14, r1	; 0x0e
    1c2c:	17 86       	std	Z+15, r1	; 0x0f
    1c2e:	28 15       	cp	r18, r8
    1c30:	39 05       	cpc	r19, r9
    1c32:	00 f5       	brcc	.+64     	; 0x1c74 <udd_ep_trans_complet+0x27e>
    1c34:	d8 01       	movw	r26, r16
    1c36:	8c 91       	ld	r24, X
    1c38:	84 60       	ori	r24, 0x04	; 4
    1c3a:	8c 93       	st	X, r24
    1c3c:	b0 e4       	ldi	r27, 0x40	; 64
    1c3e:	db 9e       	mul	r13, r27
    1c40:	c0 01       	movw	r24, r0
    1c42:	11 24       	eor	r1, r1
    1c44:	89 59       	subi	r24, 0x99	; 153
    1c46:	9e 4d       	sbci	r25, 0xDE	; 222
    1c48:	fe 01       	movw	r30, r28
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	ee 0f       	add	r30, r30
    1c50:	ff 1f       	adc	r31, r31
    1c52:	ee 0f       	add	r30, r30
    1c54:	ff 1f       	adc	r31, r31
    1c56:	e8 59       	subi	r30, 0x98	; 152
    1c58:	fd 4d       	sbci	r31, 0xDD	; 221
    1c5a:	80 83       	st	Z, r24
    1c5c:	91 83       	std	Z+1, r25	; 0x01
    1c5e:	cc 0f       	add	r28, r28
    1c60:	dd 1f       	adc	r29, r29
    1c62:	cc 0f       	add	r28, r28
    1c64:	dd 1f       	adc	r29, r29
    1c66:	cc 0f       	add	r28, r28
    1c68:	dd 1f       	adc	r29, r29
    1c6a:	c8 5a       	subi	r28, 0xA8	; 168
    1c6c:	dd 4d       	sbci	r29, 0xDD	; 221
    1c6e:	8a 8a       	std	Y+18, r8	; 0x12
    1c70:	9b 8a       	std	Y+19, r9	; 0x13
    1c72:	1c c0       	rjmp	.+56     	; 0x1cac <udd_ep_trans_complet+0x2b6>
    1c74:	f8 01       	movw	r30, r16
    1c76:	41 81       	ldd	r20, Z+1	; 0x01
    1c78:	52 81       	ldd	r21, Z+2	; 0x02
    1c7a:	85 81       	ldd	r24, Z+5	; 0x05
    1c7c:	96 81       	ldd	r25, Z+6	; 0x06
    1c7e:	84 0f       	add	r24, r20
    1c80:	95 1f       	adc	r25, r21
    1c82:	fe 01       	movw	r30, r28
    1c84:	ee 0f       	add	r30, r30
    1c86:	ff 1f       	adc	r31, r31
    1c88:	ee 0f       	add	r30, r30
    1c8a:	ff 1f       	adc	r31, r31
    1c8c:	ee 0f       	add	r30, r30
    1c8e:	ff 1f       	adc	r31, r31
    1c90:	e8 59       	subi	r30, 0x98	; 152
    1c92:	fd 4d       	sbci	r31, 0xDD	; 221
    1c94:	80 83       	st	Z, r24
    1c96:	91 83       	std	Z+1, r25	; 0x01
    1c98:	cc 0f       	add	r28, r28
    1c9a:	dd 1f       	adc	r29, r29
    1c9c:	cc 0f       	add	r28, r28
    1c9e:	dd 1f       	adc	r29, r29
    1ca0:	cc 0f       	add	r28, r28
    1ca2:	dd 1f       	adc	r29, r29
    1ca4:	c8 5a       	subi	r28, 0xA8	; 168
    1ca6:	dd 4d       	sbci	r29, 0xDD	; 221
    1ca8:	2a 8b       	std	Y+18, r18	; 0x12
    1caa:	3b 8b       	std	Y+19, r19	; 0x13
    1cac:	f7 01       	movw	r30, r14
    1cae:	02 e0       	ldi	r16, 0x02	; 2
    1cb0:	06 93       	lac	Z, r16
    1cb2:	13 c0       	rjmp	.+38     	; 0x1cda <udd_ep_trans_complet+0x2e4>
    1cb4:	d8 01       	movw	r26, r16
    1cb6:	8c 91       	ld	r24, X
    1cb8:	80 ff       	sbrs	r24, 0
    1cba:	0f c0       	rjmp	.+30     	; 0x1cda <udd_ep_trans_complet+0x2e4>
    1cbc:	8e 7f       	andi	r24, 0xFE	; 254
    1cbe:	8c 93       	st	X, r24
    1cc0:	17 96       	adiw	r26, 0x07	; 7
    1cc2:	ed 91       	ld	r30, X+
    1cc4:	fc 91       	ld	r31, X
    1cc6:	18 97       	sbiw	r26, 0x08	; 8
    1cc8:	30 97       	sbiw	r30, 0x00	; 0
    1cca:	39 f0       	breq	.+14     	; 0x1cda <udd_ep_trans_complet+0x2e4>
    1ccc:	15 96       	adiw	r26, 0x05	; 5
    1cce:	6d 91       	ld	r22, X+
    1cd0:	7c 91       	ld	r23, X
    1cd2:	16 97       	sbiw	r26, 0x06	; 6
    1cd4:	4d 2d       	mov	r20, r13
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	19 95       	eicall
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	1f 91       	pop	r17
    1ce0:	0f 91       	pop	r16
    1ce2:	ff 90       	pop	r15
    1ce4:	ef 90       	pop	r14
    1ce6:	df 90       	pop	r13
    1ce8:	bf 90       	pop	r11
    1cea:	af 90       	pop	r10
    1cec:	9f 90       	pop	r9
    1cee:	8f 90       	pop	r8
    1cf0:	08 95       	ret

00001cf2 <udd_attach>:
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	1f 92       	push	r1
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	8f b7       	in	r24, 0x3f	; 63
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	f8 94       	cli
    1d04:	19 81       	ldd	r17, Y+1	; 0x01
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	d5 dc       	rcall	.-1622   	; 0x16b4 <udd_sleep_mode>
    1d0a:	ea ec       	ldi	r30, 0xCA	; 202
    1d0c:	f4 e0       	ldi	r31, 0x04	; 4
    1d0e:	80 e4       	ldi	r24, 0x40	; 64
    1d10:	80 83       	st	Z, r24
    1d12:	80 e2       	ldi	r24, 0x20	; 32
    1d14:	80 83       	st	Z, r24
    1d16:	e1 ec       	ldi	r30, 0xC1	; 193
    1d18:	f4 e0       	ldi	r31, 0x04	; 4
    1d1a:	80 81       	ld	r24, Z
    1d1c:	81 60       	ori	r24, 0x01	; 1
    1d1e:	80 83       	st	Z, r24
    1d20:	a9 ec       	ldi	r26, 0xC9	; 201
    1d22:	b4 e0       	ldi	r27, 0x04	; 4
    1d24:	8c 91       	ld	r24, X
    1d26:	82 60       	ori	r24, 0x02	; 2
    1d28:	8c 93       	st	X, r24
    1d2a:	e8 ec       	ldi	r30, 0xC8	; 200
    1d2c:	f4 e0       	ldi	r31, 0x04	; 4
    1d2e:	80 81       	ld	r24, Z
    1d30:	80 64       	ori	r24, 0x40	; 64
    1d32:	80 83       	st	Z, r24
    1d34:	8c 91       	ld	r24, X
    1d36:	81 60       	ori	r24, 0x01	; 1
    1d38:	8c 93       	st	X, r24
    1d3a:	80 81       	ld	r24, Z
    1d3c:	80 68       	ori	r24, 0x80	; 128
    1d3e:	80 83       	st	Z, r24
    1d40:	1f bf       	out	0x3f, r17	; 63
    1d42:	0f 90       	pop	r0
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	1f 91       	pop	r17
    1d4a:	08 95       	ret

00001d4c <udd_enable>:
    1d4c:	0f 93       	push	r16
    1d4e:	1f 93       	push	r17
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	1f 92       	push	r1
    1d56:	1f 92       	push	r1
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	00 e6       	ldi	r16, 0x60	; 96
    1d5e:	10 e0       	ldi	r17, 0x00	; 0
    1d60:	f8 01       	movw	r30, r16
    1d62:	10 82       	st	Z, r1
    1d64:	80 e3       	ldi	r24, 0x30	; 48
    1d66:	0e 94 ef 04 	call	0x9de	; 0x9de <sysclk_enable_usb>
    1d6a:	e0 ec       	ldi	r30, 0xC0	; 192
    1d6c:	f4 e0       	ldi	r31, 0x04	; 4
    1d6e:	80 81       	ld	r24, Z
    1d70:	80 64       	ori	r24, 0x40	; 64
    1d72:	80 83       	st	Z, r24
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	f8 01       	movw	r30, r16
    1d78:	80 83       	st	Z, r24
    1d7a:	8f b7       	in	r24, 0x3f	; 63
    1d7c:	8a 83       	std	Y+2, r24	; 0x02
    1d7e:	f8 94       	cli
    1d80:	1a 81       	ldd	r17, Y+2	; 0x02
    1d82:	e8 e5       	ldi	r30, 0x58	; 88
    1d84:	f2 e2       	ldi	r31, 0x22	; 34
    1d86:	15 86       	std	Z+13, r1	; 0x0d
    1d88:	15 8a       	std	Z+21, r1	; 0x15
    1d8a:	15 8e       	std	Z+29, r1	; 0x1d
    1d8c:	15 a2       	std	Z+37, r1	; 0x25
    1d8e:	15 a6       	std	Z+45, r1	; 0x2d
    1d90:	15 aa       	std	Z+53, r1	; 0x35
    1d92:	e7 e2       	ldi	r30, 0x27	; 39
    1d94:	f2 e2       	ldi	r31, 0x22	; 34
    1d96:	80 81       	ld	r24, Z
    1d98:	8e 7f       	andi	r24, 0xFE	; 254
    1d9a:	80 83       	st	Z, r24
    1d9c:	e0 e3       	ldi	r30, 0x30	; 48
    1d9e:	f2 e2       	ldi	r31, 0x22	; 34
    1da0:	80 81       	ld	r24, Z
    1da2:	8e 7f       	andi	r24, 0xFE	; 254
    1da4:	80 83       	st	Z, r24
    1da6:	e9 e3       	ldi	r30, 0x39	; 57
    1da8:	f2 e2       	ldi	r31, 0x22	; 34
    1daa:	80 81       	ld	r24, Z
    1dac:	8e 7f       	andi	r24, 0xFE	; 254
    1dae:	80 83       	st	Z, r24
    1db0:	e2 e4       	ldi	r30, 0x42	; 66
    1db2:	f2 e2       	ldi	r31, 0x22	; 34
    1db4:	80 81       	ld	r24, Z
    1db6:	8e 7f       	andi	r24, 0xFE	; 254
    1db8:	80 83       	st	Z, r24
    1dba:	6a e1       	ldi	r22, 0x1A	; 26
    1dbc:	70 e0       	ldi	r23, 0x00	; 0
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	69 dc       	rcall	.-1838   	; 0x1694 <nvm_read_byte>
    1dc2:	8f 3f       	cpi	r24, 0xFF	; 255
    1dc4:	19 f0       	breq	.+6      	; 0x1dcc <udd_enable+0x80>
    1dc6:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    1dca:	03 c0       	rjmp	.+6      	; 0x1dd2 <udd_enable+0x86>
    1dcc:	8f e1       	ldi	r24, 0x1F	; 31
    1dce:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    1dd2:	6b e1       	ldi	r22, 0x1B	; 27
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	82 e0       	ldi	r24, 0x02	; 2
    1dd8:	5d dc       	rcall	.-1862   	; 0x1694 <nvm_read_byte>
    1dda:	8f 3f       	cpi	r24, 0xFF	; 255
    1ddc:	19 f0       	breq	.+6      	; 0x1de4 <udd_enable+0x98>
    1dde:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    1de2:	03 c0       	rjmp	.+6      	; 0x1dea <udd_enable+0x9e>
    1de4:	8f e1       	ldi	r24, 0x1F	; 31
    1de6:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    1dea:	e0 ec       	ldi	r30, 0xC0	; 192
    1dec:	f4 e0       	ldi	r31, 0x04	; 4
    1dee:	80 81       	ld	r24, Z
    1df0:	82 60       	ori	r24, 0x02	; 2
    1df2:	80 83       	st	Z, r24
    1df4:	80 81       	ld	r24, Z
    1df6:	80 68       	ori	r24, 0x80	; 128
    1df8:	80 83       	st	Z, r24
    1dfa:	80 81       	ld	r24, Z
    1dfc:	80 61       	ori	r24, 0x10	; 16
    1dfe:	80 83       	st	Z, r24
    1e00:	84 e6       	ldi	r24, 0x64	; 100
    1e02:	92 e2       	ldi	r25, 0x22	; 34
    1e04:	86 83       	std	Z+6, r24	; 0x06
    1e06:	97 83       	std	Z+7, r25	; 0x07
    1e08:	80 81       	ld	r24, Z
    1e0a:	80 62       	ori	r24, 0x20	; 32
    1e0c:	80 83       	st	Z, r24
    1e0e:	8f ef       	ldi	r24, 0xFF	; 255
    1e10:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    1e14:	e8 ec       	ldi	r30, 0xC8	; 200
    1e16:	f4 e0       	ldi	r31, 0x04	; 4
    1e18:	80 81       	ld	r24, Z
    1e1a:	81 60       	ori	r24, 0x01	; 1
    1e1c:	80 83       	st	Z, r24
    1e1e:	10 92 98 22 	sts	0x2298, r1	; 0x802298 <udd_b_idle>
    1e22:	80 91 a3 22 	lds	r24, 0x22A3	; 0x8022a3 <sleepmgr_locks+0x5>
    1e26:	8f 3f       	cpi	r24, 0xFF	; 255
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <udd_enable+0xe0>
    1e2a:	ff cf       	rjmp	.-2      	; 0x1e2a <udd_enable+0xde>
    1e2c:	8f b7       	in	r24, 0x3f	; 63
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	f8 94       	cli
    1e32:	99 81       	ldd	r25, Y+1	; 0x01
    1e34:	ee e9       	ldi	r30, 0x9E	; 158
    1e36:	f2 e2       	ldi	r31, 0x22	; 34
    1e38:	85 81       	ldd	r24, Z+5	; 0x05
    1e3a:	8f 5f       	subi	r24, 0xFF	; 255
    1e3c:	85 83       	std	Z+5, r24	; 0x05
    1e3e:	9f bf       	out	0x3f, r25	; 63
    1e40:	58 df       	rcall	.-336    	; 0x1cf2 <udd_attach>
    1e42:	1f bf       	out	0x3f, r17	; 63
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	df 91       	pop	r29
    1e4a:	cf 91       	pop	r28
    1e4c:	1f 91       	pop	r17
    1e4e:	0f 91       	pop	r16
    1e50:	08 95       	ret

00001e52 <udd_set_address>:
    1e52:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    1e56:	08 95       	ret

00001e58 <udd_getaddress>:
    1e58:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    1e5c:	08 95       	ret

00001e5e <udd_get_frame_number>:
    1e5e:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <udd_sram+0x3c>
    1e62:	90 91 95 22 	lds	r25, 0x2295	; 0x802295 <udd_sram+0x3d>
    1e66:	08 95       	ret

00001e68 <udd_set_setup_payload>:
    1e68:	e4 ea       	ldi	r30, 0xA4	; 164
    1e6a:	f2 e2       	ldi	r31, 0x22	; 34
    1e6c:	80 87       	std	Z+8, r24	; 0x08
    1e6e:	91 87       	std	Z+9, r25	; 0x09
    1e70:	62 87       	std	Z+10, r22	; 0x0a
    1e72:	73 87       	std	Z+11, r23	; 0x0b
    1e74:	08 95       	ret

00001e76 <udd_ep_alloc>:
    1e76:	28 2f       	mov	r18, r24
    1e78:	2f 70       	andi	r18, 0x0F	; 15
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	22 0f       	add	r18, r18
    1e7e:	33 1f       	adc	r19, r19
    1e80:	08 2e       	mov	r0, r24
    1e82:	00 0c       	add	r0, r0
    1e84:	99 0b       	sbc	r25, r25
    1e86:	88 27       	eor	r24, r24
    1e88:	99 0f       	add	r25, r25
    1e8a:	88 1f       	adc	r24, r24
    1e8c:	99 27       	eor	r25, r25
    1e8e:	82 0f       	add	r24, r18
    1e90:	93 1f       	adc	r25, r19
    1e92:	fc 01       	movw	r30, r24
    1e94:	ee 0f       	add	r30, r30
    1e96:	ff 1f       	adc	r31, r31
    1e98:	ee 0f       	add	r30, r30
    1e9a:	ff 1f       	adc	r31, r31
    1e9c:	ee 0f       	add	r30, r30
    1e9e:	ff 1f       	adc	r31, r31
    1ea0:	e8 5a       	subi	r30, 0xA8	; 168
    1ea2:	fd 4d       	sbci	r31, 0xDD	; 221
    1ea4:	25 85       	ldd	r18, Z+13	; 0x0d
    1ea6:	20 7c       	andi	r18, 0xC0	; 192
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <udd_ep_alloc+0x36>
    1eaa:	69 c0       	rjmp	.+210    	; 0x1f7e <udd_ep_alloc+0x108>
    1eac:	63 70       	andi	r22, 0x03	; 3
    1eae:	61 30       	cpi	r22, 0x01	; 1
    1eb0:	11 f0       	breq	.+4      	; 0x1eb6 <udd_ep_alloc+0x40>
    1eb2:	18 f4       	brcc	.+6      	; 0x1eba <udd_ep_alloc+0x44>
    1eb4:	04 c0       	rjmp	.+8      	; 0x1ebe <udd_ep_alloc+0x48>
    1eb6:	60 ec       	ldi	r22, 0xC0	; 192
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <udd_ep_alloc+0x4a>
    1eba:	60 e8       	ldi	r22, 0x80	; 128
    1ebc:	01 c0       	rjmp	.+2      	; 0x1ec0 <udd_ep_alloc+0x4a>
    1ebe:	60 e4       	ldi	r22, 0x40	; 64
    1ec0:	40 38       	cpi	r20, 0x80	; 128
    1ec2:	51 05       	cpc	r21, r1
    1ec4:	e9 f0       	breq	.+58     	; 0x1f00 <udd_ep_alloc+0x8a>
    1ec6:	50 f4       	brcc	.+20     	; 0x1edc <udd_ep_alloc+0x66>
    1ec8:	40 32       	cpi	r20, 0x20	; 32
    1eca:	51 05       	cpc	r21, r1
    1ecc:	a9 f0       	breq	.+42     	; 0x1ef8 <udd_ep_alloc+0x82>
    1ece:	40 34       	cpi	r20, 0x40	; 64
    1ed0:	51 05       	cpc	r21, r1
    1ed2:	a1 f0       	breq	.+40     	; 0x1efc <udd_ep_alloc+0x86>
    1ed4:	40 31       	cpi	r20, 0x10	; 16
    1ed6:	51 05       	cpc	r21, r1
    1ed8:	d9 f4       	brne	.+54     	; 0x1f10 <udd_ep_alloc+0x9a>
    1eda:	0c c0       	rjmp	.+24     	; 0x1ef4 <udd_ep_alloc+0x7e>
    1edc:	41 15       	cp	r20, r1
    1ede:	22 e0       	ldi	r18, 0x02	; 2
    1ee0:	52 07       	cpc	r21, r18
    1ee2:	91 f0       	breq	.+36     	; 0x1f08 <udd_ep_alloc+0x92>
    1ee4:	4f 3f       	cpi	r20, 0xFF	; 255
    1ee6:	23 e0       	ldi	r18, 0x03	; 3
    1ee8:	52 07       	cpc	r21, r18
    1eea:	81 f0       	breq	.+32     	; 0x1f0c <udd_ep_alloc+0x96>
    1eec:	41 15       	cp	r20, r1
    1eee:	51 40       	sbci	r21, 0x01	; 1
    1ef0:	79 f4       	brne	.+30     	; 0x1f10 <udd_ep_alloc+0x9a>
    1ef2:	08 c0       	rjmp	.+16     	; 0x1f04 <udd_ep_alloc+0x8e>
    1ef4:	21 e0       	ldi	r18, 0x01	; 1
    1ef6:	0d c0       	rjmp	.+26     	; 0x1f12 <udd_ep_alloc+0x9c>
    1ef8:	22 e0       	ldi	r18, 0x02	; 2
    1efa:	0b c0       	rjmp	.+22     	; 0x1f12 <udd_ep_alloc+0x9c>
    1efc:	23 e0       	ldi	r18, 0x03	; 3
    1efe:	09 c0       	rjmp	.+18     	; 0x1f12 <udd_ep_alloc+0x9c>
    1f00:	24 e0       	ldi	r18, 0x04	; 4
    1f02:	07 c0       	rjmp	.+14     	; 0x1f12 <udd_ep_alloc+0x9c>
    1f04:	25 e0       	ldi	r18, 0x05	; 5
    1f06:	05 c0       	rjmp	.+10     	; 0x1f12 <udd_ep_alloc+0x9c>
    1f08:	26 e0       	ldi	r18, 0x06	; 6
    1f0a:	03 c0       	rjmp	.+6      	; 0x1f12 <udd_ep_alloc+0x9c>
    1f0c:	27 e0       	ldi	r18, 0x07	; 7
    1f0e:	01 c0       	rjmp	.+2      	; 0x1f12 <udd_ep_alloc+0x9c>
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	fc 01       	movw	r30, r24
    1f14:	ee 0f       	add	r30, r30
    1f16:	ff 1f       	adc	r31, r31
    1f18:	ee 0f       	add	r30, r30
    1f1a:	ff 1f       	adc	r31, r31
    1f1c:	ee 0f       	add	r30, r30
    1f1e:	ff 1f       	adc	r31, r31
    1f20:	e8 5a       	subi	r30, 0xA8	; 168
    1f22:	fd 4d       	sbci	r31, 0xDD	; 221
    1f24:	15 86       	std	Z+13, r1	; 0x0d
    1f26:	36 e0       	ldi	r19, 0x06	; 6
    1f28:	34 87       	std	Z+12, r19	; 0x0c
    1f2a:	26 2b       	or	r18, r22
    1f2c:	25 87       	std	Z+13, r18	; 0x0d
    1f2e:	fc 01       	movw	r30, r24
    1f30:	ee 0f       	add	r30, r30
    1f32:	ff 1f       	adc	r31, r31
    1f34:	ee 0f       	add	r30, r30
    1f36:	ff 1f       	adc	r31, r31
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	e8 5a       	subi	r30, 0xA8	; 168
    1f3e:	fd 4d       	sbci	r31, 0xDD	; 221
    1f40:	25 85       	ldd	r18, Z+13	; 0x0d
    1f42:	20 7c       	andi	r18, 0xC0	; 192
    1f44:	20 3c       	cpi	r18, 0xC0	; 192
    1f46:	69 f4       	brne	.+26     	; 0x1f62 <udd_ep_alloc+0xec>
    1f48:	fc 01       	movw	r30, r24
    1f4a:	ee 0f       	add	r30, r30
    1f4c:	ff 1f       	adc	r31, r31
    1f4e:	ee 0f       	add	r30, r30
    1f50:	ff 1f       	adc	r31, r31
    1f52:	ee 0f       	add	r30, r30
    1f54:	ff 1f       	adc	r31, r31
    1f56:	e8 5a       	subi	r30, 0xA8	; 168
    1f58:	fd 4d       	sbci	r31, 0xDD	; 221
    1f5a:	25 85       	ldd	r18, Z+13	; 0x0d
    1f5c:	27 70       	andi	r18, 0x07	; 7
    1f5e:	27 30       	cpi	r18, 0x07	; 7
    1f60:	81 f0       	breq	.+32     	; 0x1f82 <udd_ep_alloc+0x10c>
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	fc 01       	movw	r30, r24
    1f70:	e8 5a       	subi	r30, 0xA8	; 168
    1f72:	fd 4d       	sbci	r31, 0xDD	; 221
    1f74:	85 85       	ldd	r24, Z+13	; 0x0d
    1f76:	80 62       	ori	r24, 0x20	; 32
    1f78:	85 87       	std	Z+13, r24	; 0x0d
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	08 95       	ret
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	08 95       	ret
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	08 95       	ret

00001f86 <udd_ep_is_halted>:
    1f86:	e8 2f       	mov	r30, r24
    1f88:	ef 70       	andi	r30, 0x0F	; 15
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	ee 0f       	add	r30, r30
    1f8e:	ff 1f       	adc	r31, r31
    1f90:	08 2e       	mov	r0, r24
    1f92:	00 0c       	add	r0, r0
    1f94:	99 0b       	sbc	r25, r25
    1f96:	88 27       	eor	r24, r24
    1f98:	99 0f       	add	r25, r25
    1f9a:	88 1f       	adc	r24, r24
    1f9c:	99 27       	eor	r25, r25
    1f9e:	e8 0f       	add	r30, r24
    1fa0:	f9 1f       	adc	r31, r25
    1fa2:	ee 0f       	add	r30, r30
    1fa4:	ff 1f       	adc	r31, r31
    1fa6:	ee 0f       	add	r30, r30
    1fa8:	ff 1f       	adc	r31, r31
    1faa:	ee 0f       	add	r30, r30
    1fac:	ff 1f       	adc	r31, r31
    1fae:	e8 5a       	subi	r30, 0xA8	; 168
    1fb0:	fd 4d       	sbci	r31, 0xDD	; 221
    1fb2:	85 85       	ldd	r24, Z+13	; 0x0d
    1fb4:	82 fb       	bst	r24, 2
    1fb6:	88 27       	eor	r24, r24
    1fb8:	80 f9       	bld	r24, 0
    1fba:	08 95       	ret

00001fbc <udd_ep_clear_halt>:
    1fbc:	0f 93       	push	r16
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	2f 70       	andi	r18, 0x0F	; 15
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	a9 01       	movw	r20, r18
    1fc6:	44 0f       	add	r20, r20
    1fc8:	55 1f       	adc	r21, r21
    1fca:	28 2f       	mov	r18, r24
    1fcc:	08 2e       	mov	r0, r24
    1fce:	00 0c       	add	r0, r0
    1fd0:	33 0b       	sbc	r19, r19
    1fd2:	22 27       	eor	r18, r18
    1fd4:	33 0f       	add	r19, r19
    1fd6:	22 1f       	adc	r18, r18
    1fd8:	33 27       	eor	r19, r19
    1fda:	24 0f       	add	r18, r20
    1fdc:	35 1f       	adc	r19, r21
    1fde:	a9 01       	movw	r20, r18
    1fe0:	44 0f       	add	r20, r20
    1fe2:	55 1f       	adc	r21, r21
    1fe4:	44 0f       	add	r20, r20
    1fe6:	55 1f       	adc	r21, r21
    1fe8:	44 0f       	add	r20, r20
    1fea:	55 1f       	adc	r21, r21
    1fec:	fa 01       	movw	r30, r20
    1fee:	ec 59       	subi	r30, 0x9C	; 156
    1ff0:	fd 4d       	sbci	r31, 0xDD	; 221
    1ff2:	01 e0       	ldi	r16, 0x01	; 1
    1ff4:	06 93       	lac	Z, r16
    1ff6:	fa 01       	movw	r30, r20
    1ff8:	e8 5a       	subi	r30, 0xA8	; 168
    1ffa:	fd 4d       	sbci	r31, 0xDD	; 221
    1ffc:	95 85       	ldd	r25, Z+13	; 0x0d
    1ffe:	92 ff       	sbrs	r25, 2
    2000:	11 c0       	rjmp	.+34     	; 0x2024 <udd_ep_clear_halt+0x68>
    2002:	fa 01       	movw	r30, r20
    2004:	e8 5a       	subi	r30, 0xA8	; 168
    2006:	fd 4d       	sbci	r31, 0xDD	; 221
    2008:	95 85       	ldd	r25, Z+13	; 0x0d
    200a:	9b 7f       	andi	r25, 0xFB	; 251
    200c:	95 87       	std	Z+13, r25	; 0x0d
    200e:	67 dc       	rcall	.-1842   	; 0x18de <udd_ep_get_job>
    2010:	fc 01       	movw	r30, r24
    2012:	80 81       	ld	r24, Z
    2014:	80 ff       	sbrs	r24, 0
    2016:	06 c0       	rjmp	.+12     	; 0x2024 <udd_ep_clear_halt+0x68>
    2018:	8e 7f       	andi	r24, 0xFE	; 254
    201a:	80 83       	st	Z, r24
    201c:	07 80       	ldd	r0, Z+7	; 0x07
    201e:	f0 85       	ldd	r31, Z+8	; 0x08
    2020:	e0 2d       	mov	r30, r0
    2022:	19 95       	eicall
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	0f 91       	pop	r16
    2028:	08 95       	ret

0000202a <udd_ep_run>:
    202a:	6f 92       	push	r6
    202c:	7f 92       	push	r7
    202e:	8f 92       	push	r8
    2030:	9f 92       	push	r9
    2032:	af 92       	push	r10
    2034:	bf 92       	push	r11
    2036:	cf 92       	push	r12
    2038:	df 92       	push	r13
    203a:	ef 92       	push	r14
    203c:	ff 92       	push	r15
    203e:	0f 93       	push	r16
    2040:	1f 93       	push	r17
    2042:	cf 93       	push	r28
    2044:	df 93       	push	r29
    2046:	1f 92       	push	r1
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	78 2e       	mov	r7, r24
    204e:	66 2e       	mov	r6, r22
    2050:	4a 01       	movw	r8, r20
    2052:	59 01       	movw	r10, r18
    2054:	44 dc       	rcall	.-1912   	; 0x18de <udd_ep_get_job>
    2056:	6c 01       	movw	r12, r24
    2058:	27 2d       	mov	r18, r7
    205a:	87 2d       	mov	r24, r7
    205c:	8f 70       	andi	r24, 0x0F	; 15
    205e:	e8 2e       	mov	r14, r24
    2060:	f1 2c       	mov	r15, r1
    2062:	c7 01       	movw	r24, r14
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	e7 2c       	mov	r14, r7
    206a:	07 2c       	mov	r0, r7
    206c:	00 0c       	add	r0, r0
    206e:	ff 08       	sbc	r15, r15
    2070:	ee 24       	eor	r14, r14
    2072:	ff 0c       	add	r15, r15
    2074:	ee 1c       	adc	r14, r14
    2076:	ff 24       	eor	r15, r15
    2078:	e8 0e       	add	r14, r24
    207a:	f9 1e       	adc	r15, r25
    207c:	f7 01       	movw	r30, r14
    207e:	ee 0f       	add	r30, r30
    2080:	ff 1f       	adc	r31, r31
    2082:	ee 0f       	add	r30, r30
    2084:	ff 1f       	adc	r31, r31
    2086:	ee 0f       	add	r30, r30
    2088:	ff 1f       	adc	r31, r31
    208a:	e8 5a       	subi	r30, 0xA8	; 168
    208c:	fd 4d       	sbci	r31, 0xDD	; 221
    208e:	85 85       	ldd	r24, Z+13	; 0x0d
    2090:	80 7c       	andi	r24, 0xC0	; 192
    2092:	09 f4       	brne	.+2      	; 0x2096 <udd_ep_run+0x6c>
    2094:	81 c0       	rjmp	.+258    	; 0x2198 <udd_ep_run+0x16e>
    2096:	f7 01       	movw	r30, r14
    2098:	ee 0f       	add	r30, r30
    209a:	ff 1f       	adc	r31, r31
    209c:	ee 0f       	add	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	ee 0f       	add	r30, r30
    20a2:	ff 1f       	adc	r31, r31
    20a4:	e8 5a       	subi	r30, 0xA8	; 168
    20a6:	fd 4d       	sbci	r31, 0xDD	; 221
    20a8:	85 85       	ldd	r24, Z+13	; 0x0d
    20aa:	80 7c       	andi	r24, 0xC0	; 192
    20ac:	80 3c       	cpi	r24, 0xC0	; 192
    20ae:	61 f0       	breq	.+24     	; 0x20c8 <udd_ep_run+0x9e>
    20b0:	f7 01       	movw	r30, r14
    20b2:	ee 0f       	add	r30, r30
    20b4:	ff 1f       	adc	r31, r31
    20b6:	ee 0f       	add	r30, r30
    20b8:	ff 1f       	adc	r31, r31
    20ba:	ee 0f       	add	r30, r30
    20bc:	ff 1f       	adc	r31, r31
    20be:	e8 5a       	subi	r30, 0xA8	; 168
    20c0:	fd 4d       	sbci	r31, 0xDD	; 221
    20c2:	85 85       	ldd	r24, Z+13	; 0x0d
    20c4:	82 fd       	sbrc	r24, 2
    20c6:	6a c0       	rjmp	.+212    	; 0x219c <udd_ep_run+0x172>
    20c8:	8f b7       	in	r24, 0x3f	; 63
    20ca:	89 83       	std	Y+1, r24	; 0x01
    20cc:	f8 94       	cli
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	f6 01       	movw	r30, r12
    20d2:	90 81       	ld	r25, Z
    20d4:	90 ff       	sbrs	r25, 0
    20d6:	03 c0       	rjmp	.+6      	; 0x20de <udd_ep_run+0xb4>
    20d8:	8f bf       	out	0x3f, r24	; 63
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	60 c0       	rjmp	.+192    	; 0x219e <udd_ep_run+0x174>
    20de:	f6 01       	movw	r30, r12
    20e0:	90 81       	ld	r25, Z
    20e2:	91 60       	ori	r25, 0x01	; 1
    20e4:	90 83       	st	Z, r25
    20e6:	8f bf       	out	0x3f, r24	; 63
    20e8:	81 82       	std	Z+1, r8	; 0x01
    20ea:	92 82       	std	Z+2, r9	; 0x02
    20ec:	a3 82       	std	Z+3, r10	; 0x03
    20ee:	b4 82       	std	Z+4, r11	; 0x04
    20f0:	15 82       	std	Z+5, r1	; 0x05
    20f2:	16 82       	std	Z+6, r1	; 0x06
    20f4:	07 83       	std	Z+7, r16	; 0x07
    20f6:	10 87       	std	Z+8, r17	; 0x08
    20f8:	61 10       	cpse	r6, r1
    20fa:	06 c0       	rjmp	.+12     	; 0x2108 <udd_ep_run+0xde>
    20fc:	91 e0       	ldi	r25, 0x01	; 1
    20fe:	a1 14       	cp	r10, r1
    2100:	b1 04       	cpc	r11, r1
    2102:	19 f0       	breq	.+6      	; 0x210a <udd_ep_run+0xe0>
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	01 c0       	rjmp	.+2      	; 0x210a <udd_ep_run+0xe0>
    2108:	91 e0       	ldi	r25, 0x01	; 1
    210a:	f6 01       	movw	r30, r12
    210c:	80 81       	ld	r24, Z
    210e:	90 fb       	bst	r25, 0
    2110:	81 f9       	bld	r24, 1
    2112:	8b 7f       	andi	r24, 0xFB	; 251
    2114:	80 83       	st	Z, r24
    2116:	22 23       	and	r18, r18
    2118:	64 f4       	brge	.+24     	; 0x2132 <udd_ep_run+0x108>
    211a:	f7 01       	movw	r30, r14
    211c:	ee 0f       	add	r30, r30
    211e:	ff 1f       	adc	r31, r31
    2120:	ee 0f       	add	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	ee 0f       	add	r30, r30
    2126:	ff 1f       	adc	r31, r31
    2128:	e8 5a       	subi	r30, 0xA8	; 168
    212a:	fd 4d       	sbci	r31, 0xDD	; 221
    212c:	12 8a       	std	Z+18, r1	; 0x12
    212e:	13 8a       	std	Z+19, r1	; 0x13
    2130:	2f c0       	rjmp	.+94     	; 0x2190 <udd_ep_run+0x166>
    2132:	f7 01       	movw	r30, r14
    2134:	ee 0f       	add	r30, r30
    2136:	ff 1f       	adc	r31, r31
    2138:	ee 0f       	add	r30, r30
    213a:	ff 1f       	adc	r31, r31
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	e8 5a       	subi	r30, 0xA8	; 168
    2142:	fd 4d       	sbci	r31, 0xDD	; 221
    2144:	85 85       	ldd	r24, Z+13	; 0x0d
    2146:	80 7c       	andi	r24, 0xC0	; 192
    2148:	80 3c       	cpi	r24, 0xC0	; 192
    214a:	a9 f4       	brne	.+42     	; 0x2176 <udd_ep_run+0x14c>
    214c:	c7 01       	movw	r24, r14
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	88 0f       	add	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	8c 59       	subi	r24, 0x9C	; 156
    215c:	9d 4d       	sbci	r25, 0xDD	; 221
    215e:	97 db       	rcall	.-2258   	; 0x188e <udd_ep_get_size>
    2160:	bc 01       	movw	r22, r24
    2162:	c5 01       	movw	r24, r10
    2164:	9b d2       	rcall	.+1334   	; 0x269c <__udivmodhi4>
    2166:	89 2b       	or	r24, r25
    2168:	31 f0       	breq	.+12     	; 0x2176 <udd_ep_run+0x14c>
    216a:	f6 01       	movw	r30, r12
    216c:	80 81       	ld	r24, Z
    216e:	8e 7f       	andi	r24, 0xFE	; 254
    2170:	80 83       	st	Z, r24
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	14 c0       	rjmp	.+40     	; 0x219e <udd_ep_run+0x174>
    2176:	f7 01       	movw	r30, r14
    2178:	ee 0f       	add	r30, r30
    217a:	ff 1f       	adc	r31, r31
    217c:	ee 0f       	add	r30, r30
    217e:	ff 1f       	adc	r31, r31
    2180:	ee 0f       	add	r30, r30
    2182:	ff 1f       	adc	r31, r31
    2184:	e8 5a       	subi	r30, 0xA8	; 168
    2186:	fd 4d       	sbci	r31, 0xDD	; 221
    2188:	16 86       	std	Z+14, r1	; 0x0e
    218a:	17 86       	std	Z+15, r1	; 0x0f
    218c:	12 8a       	std	Z+18, r1	; 0x12
    218e:	13 8a       	std	Z+19, r1	; 0x13
    2190:	87 2d       	mov	r24, r7
    2192:	31 dc       	rcall	.-1950   	; 0x19f6 <udd_ep_trans_complet>
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	03 c0       	rjmp	.+6      	; 0x219e <udd_ep_run+0x174>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	01 c0       	rjmp	.+2      	; 0x219e <udd_ep_run+0x174>
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	0f 90       	pop	r0
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	1f 91       	pop	r17
    21a6:	0f 91       	pop	r16
    21a8:	ff 90       	pop	r15
    21aa:	ef 90       	pop	r14
    21ac:	df 90       	pop	r13
    21ae:	cf 90       	pop	r12
    21b0:	bf 90       	pop	r11
    21b2:	af 90       	pop	r10
    21b4:	9f 90       	pop	r9
    21b6:	8f 90       	pop	r8
    21b8:	7f 90       	pop	r7
    21ba:	6f 90       	pop	r6
    21bc:	08 95       	ret

000021be <udd_ep_abort>:
    21be:	ff 92       	push	r15
    21c0:	0f 93       	push	r16
    21c2:	1f 93       	push	r17
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	18 2f       	mov	r17, r24
    21ca:	c8 2f       	mov	r28, r24
    21cc:	cf 70       	andi	r28, 0x0F	; 15
    21ce:	d0 e0       	ldi	r29, 0x00	; 0
    21d0:	ce 01       	movw	r24, r28
    21d2:	88 0f       	add	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	c1 2f       	mov	r28, r17
    21d8:	01 2e       	mov	r0, r17
    21da:	00 0c       	add	r0, r0
    21dc:	dd 0b       	sbc	r29, r29
    21de:	cc 27       	eor	r28, r28
    21e0:	dd 0f       	add	r29, r29
    21e2:	cc 1f       	adc	r28, r28
    21e4:	dd 27       	eor	r29, r29
    21e6:	c8 0f       	add	r28, r24
    21e8:	d9 1f       	adc	r29, r25
    21ea:	81 2f       	mov	r24, r17
    21ec:	78 db       	rcall	.-2320   	; 0x18de <udd_ep_get_job>
    21ee:	dc 01       	movw	r26, r24
    21f0:	fe 01       	movw	r30, r28
    21f2:	ee 0f       	add	r30, r30
    21f4:	ff 1f       	adc	r31, r31
    21f6:	ee 0f       	add	r30, r30
    21f8:	ff 1f       	adc	r31, r31
    21fa:	ee 0f       	add	r30, r30
    21fc:	ff 1f       	adc	r31, r31
    21fe:	ec 59       	subi	r30, 0x9C	; 156
    2200:	fd 4d       	sbci	r31, 0xDD	; 221
    2202:	02 e0       	ldi	r16, 0x02	; 2
    2204:	05 93       	las	Z, r16
    2206:	8c 91       	ld	r24, X
    2208:	80 ff       	sbrs	r24, 0
    220a:	22 c0       	rjmp	.+68     	; 0x2250 <udd_ep_abort+0x92>
    220c:	8e 7f       	andi	r24, 0xFE	; 254
    220e:	8c 93       	st	X, r24
    2210:	17 96       	adiw	r26, 0x07	; 7
    2212:	ed 91       	ld	r30, X+
    2214:	fc 91       	ld	r31, X
    2216:	18 97       	sbiw	r26, 0x08	; 8
    2218:	30 97       	sbiw	r30, 0x00	; 0
    221a:	d1 f0       	breq	.+52     	; 0x2250 <udd_ep_abort+0x92>
    221c:	11 23       	and	r17, r17
    221e:	5c f4       	brge	.+22     	; 0x2236 <udd_ep_abort+0x78>
    2220:	cc 0f       	add	r28, r28
    2222:	dd 1f       	adc	r29, r29
    2224:	cc 0f       	add	r28, r28
    2226:	dd 1f       	adc	r29, r29
    2228:	cc 0f       	add	r28, r28
    222a:	dd 1f       	adc	r29, r29
    222c:	c8 5a       	subi	r28, 0xA8	; 168
    222e:	dd 4d       	sbci	r29, 0xDD	; 221
    2230:	6a 89       	ldd	r22, Y+18	; 0x12
    2232:	7b 89       	ldd	r23, Y+19	; 0x13
    2234:	0a c0       	rjmp	.+20     	; 0x224a <udd_ep_abort+0x8c>
    2236:	cc 0f       	add	r28, r28
    2238:	dd 1f       	adc	r29, r29
    223a:	cc 0f       	add	r28, r28
    223c:	dd 1f       	adc	r29, r29
    223e:	cc 0f       	add	r28, r28
    2240:	dd 1f       	adc	r29, r29
    2242:	c8 5a       	subi	r28, 0xA8	; 168
    2244:	dd 4d       	sbci	r29, 0xDD	; 221
    2246:	6e 85       	ldd	r22, Y+14	; 0x0e
    2248:	7f 85       	ldd	r23, Y+15	; 0x0f
    224a:	41 2f       	mov	r20, r17
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	19 95       	eicall
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	ff 90       	pop	r15
    225a:	08 95       	ret

0000225c <udd_ep_free>:
    225c:	cf 93       	push	r28
    225e:	c8 2f       	mov	r28, r24
    2260:	ae df       	rcall	.-164    	; 0x21be <udd_ep_abort>
    2262:	ec 2f       	mov	r30, r28
    2264:	ef 70       	andi	r30, 0x0F	; 15
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	ee 0f       	add	r30, r30
    226a:	ff 1f       	adc	r31, r31
    226c:	8c 2f       	mov	r24, r28
    226e:	cc 0f       	add	r28, r28
    2270:	99 0b       	sbc	r25, r25
    2272:	88 27       	eor	r24, r24
    2274:	99 0f       	add	r25, r25
    2276:	88 1f       	adc	r24, r24
    2278:	99 27       	eor	r25, r25
    227a:	e8 0f       	add	r30, r24
    227c:	f9 1f       	adc	r31, r25
    227e:	ee 0f       	add	r30, r30
    2280:	ff 1f       	adc	r31, r31
    2282:	ee 0f       	add	r30, r30
    2284:	ff 1f       	adc	r31, r31
    2286:	ee 0f       	add	r30, r30
    2288:	ff 1f       	adc	r31, r31
    228a:	e8 5a       	subi	r30, 0xA8	; 168
    228c:	fd 4d       	sbci	r31, 0xDD	; 221
    228e:	15 86       	std	Z+13, r1	; 0x0d
    2290:	cf 91       	pop	r28
    2292:	08 95       	ret

00002294 <udd_ep_set_halt>:
    2294:	e8 2f       	mov	r30, r24
    2296:	ef 70       	andi	r30, 0x0F	; 15
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	ee 0f       	add	r30, r30
    229c:	ff 1f       	adc	r31, r31
    229e:	28 2f       	mov	r18, r24
    22a0:	08 2e       	mov	r0, r24
    22a2:	00 0c       	add	r0, r0
    22a4:	33 0b       	sbc	r19, r19
    22a6:	22 27       	eor	r18, r18
    22a8:	33 0f       	add	r19, r19
    22aa:	22 1f       	adc	r18, r18
    22ac:	33 27       	eor	r19, r19
    22ae:	e2 0f       	add	r30, r18
    22b0:	f3 1f       	adc	r31, r19
    22b2:	ee 0f       	add	r30, r30
    22b4:	ff 1f       	adc	r31, r31
    22b6:	ee 0f       	add	r30, r30
    22b8:	ff 1f       	adc	r31, r31
    22ba:	ee 0f       	add	r30, r30
    22bc:	ff 1f       	adc	r31, r31
    22be:	e8 5a       	subi	r30, 0xA8	; 168
    22c0:	fd 4d       	sbci	r31, 0xDD	; 221
    22c2:	95 85       	ldd	r25, Z+13	; 0x0d
    22c4:	94 60       	ori	r25, 0x04	; 4
    22c6:	95 87       	std	Z+13, r25	; 0x0d
    22c8:	7a df       	rcall	.-268    	; 0x21be <udd_ep_abort>
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	08 95       	ret

000022ce <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    22ce:	1f 92       	push	r1
    22d0:	0f 92       	push	r0
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	0f 92       	push	r0
    22d6:	11 24       	eor	r1, r1
    22d8:	0b b6       	in	r0, 0x3b	; 59
    22da:	0f 92       	push	r0
    22dc:	0f 93       	push	r16
    22de:	2f 93       	push	r18
    22e0:	3f 93       	push	r19
    22e2:	4f 93       	push	r20
    22e4:	5f 93       	push	r21
    22e6:	6f 93       	push	r22
    22e8:	7f 93       	push	r23
    22ea:	8f 93       	push	r24
    22ec:	9f 93       	push	r25
    22ee:	af 93       	push	r26
    22f0:	bf 93       	push	r27
    22f2:	ef 93       	push	r30
    22f4:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    22f6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    22fa:	88 23       	and	r24, r24
    22fc:	3c f4       	brge	.+14     	; 0x230c <__vector_125+0x3e>
		udd_ack_start_of_frame_event();
    22fe:	80 e8       	ldi	r24, 0x80	; 128
    2300:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    2304:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2308:	ad d1       	rcall	.+858    	; 0x2664 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    230a:	88 c0       	rjmp	.+272    	; 0x241c <__vector_125+0x14e>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    230c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2310:	82 ff       	sbrs	r24, 2
    2312:	20 c0       	rjmp	.+64     	; 0x2354 <__vector_125+0x86>
		udd_ack_underflow_event();
    2314:	84 e0       	ldi	r24, 0x04	; 4
    2316:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    231a:	80 91 6c 22 	lds	r24, 0x226C	; 0x80226c <udd_sram+0x14>
    231e:	86 ff       	sbrs	r24, 6
    2320:	7d c0       	rjmp	.+250    	; 0x241c <__vector_125+0x14e>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2322:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2326:	81 fd       	sbrc	r24, 1
    2328:	79 c0       	rjmp	.+242    	; 0x241c <__vector_125+0x14e>
    232a:	f4 da       	rcall	.-2584   	; 0x1914 <udd_ctrl_interrupt_tc_setup>
    232c:	81 11       	cpse	r24, r1
    232e:	76 c0       	rjmp	.+236    	; 0x241c <__vector_125+0x14e>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2330:	80 91 57 22 	lds	r24, 0x2257	; 0x802257 <udd_ep_control_state>
    2334:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2336:	11 f4       	brne	.+4      	; 0x233c <__vector_125+0x6e>
    2338:	28 da       	rcall	.-2992   	; 0x178a <udd_ctrl_send_zlp_in>
    233a:	70 c0       	rjmp	.+224    	; 0x241c <__vector_125+0x14e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    233c:	84 30       	cpi	r24, 0x04	; 4
    233e:	09 f0       	breq	.+2      	; 0x2342 <__vector_125+0x74>
    2340:	6d c0       	rjmp	.+218    	; 0x241c <__vector_125+0x14e>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2342:	ed e6       	ldi	r30, 0x6D	; 109
    2344:	f2 e2       	ldi	r31, 0x22	; 34
    2346:	04 e0       	ldi	r16, 0x04	; 4
    2348:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    234a:	e5 e6       	ldi	r30, 0x65	; 101
    234c:	f2 e2       	ldi	r31, 0x22	; 34
    234e:	04 e0       	ldi	r16, 0x04	; 4
    2350:	05 93       	las	Z, r16
    2352:	64 c0       	rjmp	.+200    	; 0x241c <__vector_125+0x14e>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2354:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2358:	81 ff       	sbrs	r24, 1
    235a:	5b c0       	rjmp	.+182    	; 0x2412 <__vector_125+0x144>
		udd_ack_overflow_event();
    235c:	82 e0       	ldi	r24, 0x02	; 2
    235e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    2362:	80 91 64 22 	lds	r24, 0x2264	; 0x802264 <udd_sram+0xc>
    2366:	86 ff       	sbrs	r24, 6
    2368:	59 c0       	rjmp	.+178    	; 0x241c <__vector_125+0x14e>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    236a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    236e:	81 fd       	sbrc	r24, 1
    2370:	55 c0       	rjmp	.+170    	; 0x241c <__vector_125+0x14e>
    2372:	d0 da       	rcall	.-2656   	; 0x1914 <udd_ctrl_interrupt_tc_setup>
    2374:	81 11       	cpse	r24, r1
    2376:	52 c0       	rjmp	.+164    	; 0x241c <__vector_125+0x14e>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2378:	80 91 57 22 	lds	r24, 0x2257	; 0x802257 <udd_ep_control_state>
    237c:	82 30       	cpi	r24, 0x02	; 2
    237e:	41 f4       	brne	.+16     	; 0x2390 <__vector_125+0xc2>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2380:	84 e0       	ldi	r24, 0x04	; 4
    2382:	80 93 57 22 	sts	0x2257, r24	; 0x802257 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2386:	e4 e6       	ldi	r30, 0x64	; 100
    2388:	f2 e2       	ldi	r31, 0x22	; 34
    238a:	02 e0       	ldi	r16, 0x02	; 2
    238c:	06 93       	lac	Z, r16
    238e:	46 c0       	rjmp	.+140    	; 0x241c <__vector_125+0x14e>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2390:	83 30       	cpi	r24, 0x03	; 3
    2392:	09 f0       	breq	.+2      	; 0x2396 <__vector_125+0xc8>
    2394:	43 c0       	rjmp	.+134    	; 0x241c <__vector_125+0x14e>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2396:	ed e6       	ldi	r30, 0x6D	; 109
    2398:	f2 e2       	ldi	r31, 0x22	; 34
    239a:	04 e0       	ldi	r16, 0x04	; 4
    239c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    239e:	e5 e6       	ldi	r30, 0x65	; 101
    23a0:	f2 e2       	ldi	r31, 0x22	; 34
    23a2:	04 e0       	ldi	r16, 0x04	; 4
    23a4:	05 93       	las	Z, r16
    23a6:	3a c0       	rjmp	.+116    	; 0x241c <__vector_125+0x14e>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    23a8:	80 e1       	ldi	r24, 0x10	; 16
    23aa:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    23ae:	81 e0       	ldi	r24, 0x01	; 1
			udd_ep_abort(i | USB_EP_DIR_IN);
    23b0:	06 df       	rcall	.-500    	; 0x21be <udd_ep_abort>
    23b2:	81 e8       	ldi	r24, 0x81	; 129
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    23b4:	04 df       	rcall	.-504    	; 0x21be <udd_ep_abort>
    23b6:	82 e0       	ldi	r24, 0x02	; 2
    23b8:	02 df       	rcall	.-508    	; 0x21be <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    23ba:	82 e8       	ldi	r24, 0x82	; 130
    23bc:	00 df       	rcall	.-512    	; 0x21be <udd_ep_abort>
    23be:	0e 94 52 08 	call	0x10a4	; 0x10a4 <udc_reset>
		}
#endif
		udc_reset();
    23c2:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>

		// Reset USB address to 0
		udd_set_device_address(0);
    23c6:	e8 e5       	ldi	r30, 0x58	; 88
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    23c8:	f2 e2       	ldi	r31, 0x22	; 34
    23ca:	15 86       	std	Z+13, r1	; 0x0d
    23cc:	96 e0       	ldi	r25, 0x06	; 6
	udd_endpoint_clear_status(ep_ctrl);
    23ce:	94 87       	std	Z+12, r25	; 0x0c
    23d0:	80 e4       	ldi	r24, 0x40	; 64
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    23d2:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    23d4:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    23d6:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    23d8:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    23da:	8b e4       	ldi	r24, 0x4B	; 75
    23dc:	92 e2       	ldi	r25, 0x22	; 34
    23de:	80 8b       	std	Z+16, r24	; 0x10
    23e0:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    23e2:	a0 d9       	rcall	.-3264   	; 0x1724 <udd_ctrl_init>
    23e4:	1b c0       	rjmp	.+54     	; 0x241c <__vector_125+0x14e>
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_suspend_event()) {
    23e6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    23ea:	86 ff       	sbrs	r24, 6
		udd_ack_suspend_event();
    23ec:	07 c0       	rjmp	.+14     	; 0x23fc <__vector_125+0x12e>
    23ee:	80 e4       	ldi	r24, 0x40	; 64
    23f0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	5e d9       	rcall	.-3396   	; 0x16b4 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    23f8:	33 d1       	rcall	.+614    	; 0x2660 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    23fa:	10 c0       	rjmp	.+32     	; 0x241c <__vector_125+0x14e>
	}

	if (udd_is_resume_event()) {
    23fc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2400:	85 ff       	sbrs	r24, 5
    2402:	0c c0       	rjmp	.+24     	; 0x241c <__vector_125+0x14e>
		udd_ack_resume_event();
    2404:	80 e2       	ldi	r24, 0x20	; 32
    2406:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	53 d9       	rcall	.-3418   	; 0x16b4 <udd_sleep_mode>
    240e:	29 d1       	rcall	.+594    	; 0x2662 <main_resume_action>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2410:	05 c0       	rjmp	.+10     	; 0x241c <__vector_125+0x14e>
    2412:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2416:	84 fd       	sbrc	r24, 4
    2418:	c7 cf       	rjmp	.-114    	; 0x23a8 <__vector_125+0xda>
    241a:	e5 cf       	rjmp	.-54     	; 0x23e6 <__vector_125+0x118>
    241c:	ff 91       	pop	r31
    241e:	ef 91       	pop	r30
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2420:	bf 91       	pop	r27
    2422:	af 91       	pop	r26
    2424:	9f 91       	pop	r25
    2426:	8f 91       	pop	r24
    2428:	7f 91       	pop	r23
    242a:	6f 91       	pop	r22
    242c:	5f 91       	pop	r21
    242e:	4f 91       	pop	r20
    2430:	3f 91       	pop	r19
    2432:	2f 91       	pop	r18
    2434:	0f 91       	pop	r16
    2436:	0f 90       	pop	r0
    2438:	0b be       	out	0x3b, r0	; 59
    243a:	0f 90       	pop	r0
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	0f 90       	pop	r0
    2440:	1f 90       	pop	r1
    2442:	18 95       	reti

00002444 <__vector_126>:
    2444:	1f 92       	push	r1
    2446:	0f 92       	push	r0
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	0f 92       	push	r0
    244c:	11 24       	eor	r1, r1
    244e:	0b b6       	in	r0, 0x3b	; 59
    2450:	0f 92       	push	r0
    2452:	0f 93       	push	r16
    2454:	1f 93       	push	r17
    2456:	2f 93       	push	r18
    2458:	3f 93       	push	r19
    245a:	4f 93       	push	r20
    245c:	5f 93       	push	r21
    245e:	6f 93       	push	r22
    2460:	7f 93       	push	r23
    2462:	8f 93       	push	r24
    2464:	9f 93       	push	r25
    2466:	af 93       	push	r26
    2468:	bf 93       	push	r27
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	ef 93       	push	r30
    2470:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2472:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2476:	81 fd       	sbrc	r24, 1
    2478:	03 c0       	rjmp	.+6      	; 0x2480 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    247a:	4c da       	rcall	.-2920   	; 0x1914 <udd_ctrl_interrupt_tc_setup>
    247c:	81 11       	cpse	r24, r1
    247e:	c3 c0       	rjmp	.+390    	; 0x2606 <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2480:	82 e0       	ldi	r24, 0x02	; 2
    2482:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2486:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    248a:	81 95       	neg	r24
    248c:	88 0f       	add	r24, r24
    248e:	e4 e6       	ldi	r30, 0x64	; 100
    2490:	f2 e2       	ldi	r31, 0x22	; 34
    2492:	e8 1b       	sub	r30, r24
    2494:	f1 09       	sbc	r31, r1
    2496:	20 81       	ld	r18, Z
    2498:	31 81       	ldd	r19, Z+1	; 0x01
    249a:	24 56       	subi	r18, 0x64	; 100
    249c:	32 42       	sbci	r19, 0x22	; 34
    249e:	36 95       	lsr	r19
    24a0:	27 95       	ror	r18
    24a2:	36 95       	lsr	r19
    24a4:	27 95       	ror	r18
    24a6:	36 95       	lsr	r19
    24a8:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    24aa:	82 2f       	mov	r24, r18
    24ac:	86 95       	lsr	r24
    24ae:	20 fd       	sbrc	r18, 0
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <__vector_126+0x72>
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	01 c0       	rjmp	.+2      	; 0x24b8 <__vector_126+0x74>
    24b6:	90 e8       	ldi	r25, 0x80	; 128
    24b8:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    24ba:	e8 2f       	mov	r30, r24
    24bc:	ef 70       	andi	r30, 0x0F	; 15
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	ee 0f       	add	r30, r30
    24c2:	ff 1f       	adc	r31, r31
    24c4:	28 2f       	mov	r18, r24
    24c6:	08 2e       	mov	r0, r24
    24c8:	00 0c       	add	r0, r0
    24ca:	33 0b       	sbc	r19, r19
    24cc:	22 27       	eor	r18, r18
    24ce:	33 0f       	add	r19, r19
    24d0:	22 1f       	adc	r18, r18
    24d2:	33 27       	eor	r19, r19
    24d4:	e2 0f       	add	r30, r18
    24d6:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    24d8:	df 01       	movw	r26, r30
    24da:	aa 0f       	add	r26, r26
    24dc:	bb 1f       	adc	r27, r27
    24de:	aa 0f       	add	r26, r26
    24e0:	bb 1f       	adc	r27, r27
    24e2:	aa 0f       	add	r26, r26
    24e4:	bb 1f       	adc	r27, r27
    24e6:	a8 5a       	subi	r26, 0xA8	; 168
    24e8:	bd 4d       	sbci	r27, 0xDD	; 221
    24ea:	1c 96       	adiw	r26, 0x0c	; 12
    24ec:	9c 91       	ld	r25, X
    24ee:	95 ff       	sbrs	r25, 5
    24f0:	8a c0       	rjmp	.+276    	; 0x2606 <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    24f2:	ee 0f       	add	r30, r30
    24f4:	ff 1f       	adc	r31, r31
    24f6:	ee 0f       	add	r30, r30
    24f8:	ff 1f       	adc	r31, r31
    24fa:	ee 0f       	add	r30, r30
    24fc:	ff 1f       	adc	r31, r31
    24fe:	ec 59       	subi	r30, 0x9C	; 156
    2500:	fd 4d       	sbci	r31, 0xDD	; 221
    2502:	00 e2       	ldi	r16, 0x20	; 32
    2504:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2506:	81 11       	cpse	r24, r1
    2508:	79 c0       	rjmp	.+242    	; 0x25fc <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    250a:	80 91 57 22 	lds	r24, 0x2257	; 0x802257 <udd_ep_control_state>
    250e:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2510:	19 f4       	brne	.+6      	; 0x2518 <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2512:	49 d9       	rcall	.-3438   	; 0x17a6 <udd_ctrl_endofrequest>
    2514:	07 d9       	rcall	.-3570   	; 0x1724 <udd_ctrl_init>
    2516:	77 c0       	rjmp	.+238    	; 0x2606 <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2518:	00 91 66 22 	lds	r16, 0x2266	; 0x802266 <udd_sram+0xe>
    251c:	10 91 67 22 	lds	r17, 0x2267	; 0x802267 <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2520:	80 91 ae 22 	lds	r24, 0x22AE	; 0x8022ae <udd_g_ctrlreq+0xa>
    2524:	90 91 af 22 	lds	r25, 0x22AF	; 0x8022af <udd_g_ctrlreq+0xb>
    2528:	c0 91 53 22 	lds	r28, 0x2253	; 0x802253 <udd_ctrl_payload_nb_trans>
    252c:	d0 91 54 22 	lds	r29, 0x2254	; 0x802254 <udd_ctrl_payload_nb_trans+0x1>
    2530:	98 01       	movw	r18, r16
    2532:	2c 0f       	add	r18, r28
    2534:	3d 1f       	adc	r19, r29
    2536:	82 17       	cp	r24, r18
    2538:	93 07       	cpc	r25, r19
    253a:	18 f4       	brcc	.+6      	; 0x2542 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    253c:	8c 01       	movw	r16, r24
    253e:	0c 1b       	sub	r16, r28
    2540:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2542:	80 91 ac 22 	lds	r24, 0x22AC	; 0x8022ac <udd_g_ctrlreq+0x8>
    2546:	90 91 ad 22 	lds	r25, 0x22AD	; 0x8022ad <udd_g_ctrlreq+0x9>
    254a:	a8 01       	movw	r20, r16
    254c:	6b e4       	ldi	r22, 0x4B	; 75
    254e:	72 e2       	ldi	r23, 0x22	; 34
    2550:	8c 0f       	add	r24, r28
    2552:	9d 1f       	adc	r25, r29
    2554:	bf d0       	rcall	.+382    	; 0x26d4 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2556:	c0 0f       	add	r28, r16
    2558:	d1 1f       	adc	r29, r17
    255a:	c0 93 53 22 	sts	0x2253, r28	; 0x802253 <udd_ctrl_payload_nb_trans>
    255e:	d0 93 54 22 	sts	0x2254, r29	; 0x802254 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2562:	08 30       	cpi	r16, 0x08	; 8
    2564:	11 05       	cpc	r17, r1
    2566:	69 f4       	brne	.+26     	; 0x2582 <__vector_126+0x13e>
    2568:	80 91 55 22 	lds	r24, 0x2255	; 0x802255 <udd_ctrl_prev_payload_nb_trans>
    256c:	90 91 56 22 	lds	r25, 0x2256	; 0x802256 <udd_ctrl_prev_payload_nb_trans+0x1>
    2570:	8c 0f       	add	r24, r28
    2572:	9d 1f       	adc	r25, r29
    2574:	20 91 aa 22 	lds	r18, 0x22AA	; 0x8022aa <udd_g_ctrlreq+0x6>
    2578:	30 91 ab 22 	lds	r19, 0x22AB	; 0x8022ab <udd_g_ctrlreq+0x7>
    257c:	82 17       	cp	r24, r18
    257e:	93 07       	cpc	r25, r19
    2580:	80 f0       	brcs	.+32     	; 0x25a2 <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2582:	e4 ea       	ldi	r30, 0xA4	; 164
    2584:	f2 e2       	ldi	r31, 0x22	; 34
    2586:	c2 87       	std	Z+10, r28	; 0x0a
    2588:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    258a:	06 84       	ldd	r0, Z+14	; 0x0e
    258c:	f7 85       	ldd	r31, Z+15	; 0x0f
    258e:	e0 2d       	mov	r30, r0
    2590:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    2592:	29 f0       	breq	.+10     	; 0x259e <__vector_126+0x15a>
    2594:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    2596:	81 11       	cpse	r24, r1
    2598:	02 c0       	rjmp	.+4      	; 0x259e <__vector_126+0x15a>
    259a:	e9 d8       	rcall	.-3630   	; 0x176e <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    259c:	34 c0       	rjmp	.+104    	; 0x2606 <__vector_126+0x1c2>
    259e:	f5 d8       	rcall	.-3606   	; 0x178a <udd_ctrl_send_zlp_in>
    25a0:	32 c0       	rjmp	.+100    	; 0x2606 <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    25a2:	80 91 ae 22 	lds	r24, 0x22AE	; 0x8022ae <udd_g_ctrlreq+0xa>
    25a6:	90 91 af 22 	lds	r25, 0x22AF	; 0x8022af <udd_g_ctrlreq+0xb>
    25aa:	c8 17       	cp	r28, r24
    25ac:	d9 07       	cpc	r29, r25
    25ae:	f9 f4       	brne	.+62     	; 0x25ee <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    25b0:	e0 91 b2 22 	lds	r30, 0x22B2	; 0x8022b2 <udd_g_ctrlreq+0xe>
    25b4:	f0 91 b3 22 	lds	r31, 0x22B3	; 0x8022b3 <udd_g_ctrlreq+0xf>
    25b8:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    25ba:	11 f4       	brne	.+4      	; 0x25c0 <__vector_126+0x17c>
    25bc:	d8 d8       	rcall	.-3664   	; 0x176e <udd_ctrl_stall_data>
    25be:	23 c0       	rjmp	.+70     	; 0x2606 <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    25c0:	19 95       	eicall
    25c2:	81 11       	cpse	r24, r1
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    25c6:	d3 d8       	rcall	.-3674   	; 0x176e <udd_ctrl_stall_data>
    25c8:	1e c0       	rjmp	.+60     	; 0x2606 <__vector_126+0x1c2>
    25ca:	20 91 55 22 	lds	r18, 0x2255	; 0x802255 <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    25ce:	30 91 56 22 	lds	r19, 0x2256	; 0x802256 <udd_ctrl_prev_payload_nb_trans+0x1>
    25d2:	80 91 53 22 	lds	r24, 0x2253	; 0x802253 <udd_ctrl_payload_nb_trans>
    25d6:	90 91 54 22 	lds	r25, 0x2254	; 0x802254 <udd_ctrl_payload_nb_trans+0x1>
    25da:	82 0f       	add	r24, r18
    25dc:	93 1f       	adc	r25, r19
    25de:	80 93 55 22 	sts	0x2255, r24	; 0x802255 <udd_ctrl_prev_payload_nb_trans>
    25e2:	90 93 56 22 	sts	0x2256, r25	; 0x802256 <udd_ctrl_prev_payload_nb_trans+0x1>
    25e6:	10 92 53 22 	sts	0x2253, r1	; 0x802253 <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    25ea:	10 92 54 22 	sts	0x2254, r1	; 0x802254 <udd_ctrl_payload_nb_trans+0x1>
    25ee:	e4 e6       	ldi	r30, 0x64	; 100
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    25f0:	f2 e2       	ldi	r31, 0x22	; 34
    25f2:	02 e0       	ldi	r16, 0x02	; 2
    25f4:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    25f6:	00 e2       	ldi	r16, 0x20	; 32
    25f8:	06 93       	lac	Z, r16
    25fa:	05 c0       	rjmp	.+10     	; 0x2606 <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    25fc:	80 38       	cpi	r24, 0x80	; 128
    25fe:	11 f4       	brne	.+4      	; 0x2604 <__vector_126+0x1c0>
		udd_ctrl_in_sent();
    2600:	da d8       	rcall	.-3660   	; 0x17b6 <udd_ctrl_in_sent>
    2602:	01 c0       	rjmp	.+2      	; 0x2606 <__vector_126+0x1c2>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2604:	f8 d9       	rcall	.-3088   	; 0x19f6 <udd_ep_trans_complet>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2606:	ff 91       	pop	r31
    2608:	ef 91       	pop	r30
	}
#endif

udd_interrupt_tc_end:
	return;
}
    260a:	df 91       	pop	r29
    260c:	cf 91       	pop	r28
    260e:	bf 91       	pop	r27
    2610:	af 91       	pop	r26
    2612:	9f 91       	pop	r25
    2614:	8f 91       	pop	r24
    2616:	7f 91       	pop	r23
    2618:	6f 91       	pop	r22
    261a:	5f 91       	pop	r21
    261c:	4f 91       	pop	r20
    261e:	3f 91       	pop	r19
    2620:	2f 91       	pop	r18
    2622:	1f 91       	pop	r17
    2624:	0f 91       	pop	r16
    2626:	0f 90       	pop	r0
    2628:	0b be       	out	0x3b, r0	; 59
    262a:	0f 90       	pop	r0
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	0f 90       	pop	r0
    2630:	1f 90       	pop	r1
    2632:	18 95       	reti

00002634 <main>:

/* --------------------------------------------------------------------- */

int main (void)
{
	irq_initialize_vectors();	// initializes vector table
    2634:	87 e0       	ldi	r24, 0x07	; 7
    2636:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();			// enables CPU interrupts
    263a:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    263c:	ee e9       	ldi	r30, 0x9E	; 158
    263e:	f2 e2       	ldi	r31, 0x22	; 34
    2640:	10 82       	st	Z, r1
    2642:	11 82       	std	Z+1, r1	; 0x01
    2644:	12 82       	std	Z+2, r1	; 0x02
    2646:	13 82       	std	Z+3, r1	; 0x03
    2648:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();			// initialize sleep manager
	sysclk_init();				// initialize clock
    264e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <sysclk_init>

	io_init();					// initializes board i/o pins
    2652:	0e 94 30 01 	call	0x260	; 0x260 <io_init>
	keypad_init();				// initializes keypad driver
    2656:	0e 94 82 02 	call	0x504	; 0x504 <keypad_init>

	udc_start();				// starts USB device controller
    265a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <udc_start>
    265e:	ff cf       	rjmp	.-2      	; 0x265e <main+0x2a>

00002660 <main_suspend_action>:
	while (true) { }
}

/* --------------------------------------------------------------------- */

void main_suspend_action(void) { }
    2660:	08 95       	ret

00002662 <main_resume_action>:
void main_resume_action(void) { }
    2662:	08 95       	ret

00002664 <main_sof_action>:

void main_sof_action(void) {	// called each Start of Frame event (1 ms)
	if (!main_b_kbd_enable)
    2664:	80 91 9a 22 	lds	r24, 0x229A	; 0x80229a <main_b_kbd_enable>
    2668:	88 23       	and	r24, r24
    266a:	39 f0       	breq	.+14     	; 0x267a <main_sof_action+0x16>
	return;
	kbd_ui_process();
    266c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <kbd_ui_process>

	if (!main_b_generic_enable)
    2670:	80 91 99 22 	lds	r24, 0x2299	; 0x802299 <main_b_generic_enable>
    2674:	81 11       	cpse	r24, r1
		return;
	jstk_ui_process();
    2676:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <jstk_ui_process>
    267a:	08 95       	ret

0000267c <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    267c:	08 95       	ret

0000267e <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    267e:	08 95       	ret

00002680 <main_kbd_enable>:

bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	80 93 9a 22 	sts	0x229A, r24	; 0x80229a <main_b_kbd_enable>
	return true;
}
    2686:	08 95       	ret

00002688 <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    2688:	10 92 9a 22 	sts	0x229A, r1	; 0x80229a <main_b_kbd_enable>
    268c:	08 95       	ret

0000268e <main_generic_enable>:
}

/* --------------------------------------------------------------------- */

bool main_generic_enable(void) {
	main_b_generic_enable = true;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	80 93 99 22 	sts	0x2299, r24	; 0x802299 <main_b_generic_enable>
	return true;
}
    2694:	08 95       	ret

00002696 <main_generic_disable>:

void main_generic_disable(void) {
	main_b_generic_enable = false;
    2696:	10 92 99 22 	sts	0x2299, r1	; 0x802299 <main_b_generic_enable>
    269a:	08 95       	ret

0000269c <__udivmodhi4>:
    269c:	aa 1b       	sub	r26, r26
    269e:	bb 1b       	sub	r27, r27
    26a0:	51 e1       	ldi	r21, 0x11	; 17
    26a2:	07 c0       	rjmp	.+14     	; 0x26b2 <__udivmodhi4_ep>

000026a4 <__udivmodhi4_loop>:
    26a4:	aa 1f       	adc	r26, r26
    26a6:	bb 1f       	adc	r27, r27
    26a8:	a6 17       	cp	r26, r22
    26aa:	b7 07       	cpc	r27, r23
    26ac:	10 f0       	brcs	.+4      	; 0x26b2 <__udivmodhi4_ep>
    26ae:	a6 1b       	sub	r26, r22
    26b0:	b7 0b       	sbc	r27, r23

000026b2 <__udivmodhi4_ep>:
    26b2:	88 1f       	adc	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	5a 95       	dec	r21
    26b8:	a9 f7       	brne	.-22     	; 0x26a4 <__udivmodhi4_loop>
    26ba:	80 95       	com	r24
    26bc:	90 95       	com	r25
    26be:	bc 01       	movw	r22, r24
    26c0:	cd 01       	movw	r24, r26
    26c2:	08 95       	ret

000026c4 <__tablejump2__>:
    26c4:	ee 0f       	add	r30, r30
    26c6:	ff 1f       	adc	r31, r31
    26c8:	88 1f       	adc	r24, r24
    26ca:	8b bf       	out	0x3b, r24	; 59
    26cc:	07 90       	elpm	r0, Z+
    26ce:	f6 91       	elpm	r31, Z
    26d0:	e0 2d       	mov	r30, r0
    26d2:	19 94       	eijmp

000026d4 <memcpy>:
    26d4:	fb 01       	movw	r30, r22
    26d6:	dc 01       	movw	r26, r24
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <memcpy+0xa>
    26da:	01 90       	ld	r0, Z+
    26dc:	0d 92       	st	X+, r0
    26de:	41 50       	subi	r20, 0x01	; 1
    26e0:	50 40       	sbci	r21, 0x00	; 0
    26e2:	d8 f7       	brcc	.-10     	; 0x26da <memcpy+0x6>
    26e4:	08 95       	ret

000026e6 <_exit>:
    26e6:	f8 94       	cli

000026e8 <__stop_program>:
    26e8:	ff cf       	rjmp	.-2      	; 0x26e8 <__stop_program>
