
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002712  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014e  00802000  00002712  000027a6  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001ce  0080214e  0080214e  000028f6  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002924  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d8  00000000  00000000  00002968  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a4e1  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004e8e  00000000  00000000  0000d321  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008a8a  00000000  00000000  000121af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ab4  00000000  00000000  0001ac3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036374  00000000  00000000  0001b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000282e  00000000  00000000  00051a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b0  00000000  00000000  00054298  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000cd51  00000000  00000000  00054748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	2c c1       	rjmp	.+600    	; 0x25e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c1       	rjmp	.+596    	; 0x25e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c1       	rjmp	.+592    	; 0x25e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c1       	rjmp	.+588    	; 0x25e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c1       	rjmp	.+584    	; 0x25e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c1       	rjmp	.+580    	; 0x25e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c1       	rjmp	.+576    	; 0x25e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c1       	rjmp	.+572    	; 0x25e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c1       	rjmp	.+568    	; 0x25e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c1       	rjmp	.+564    	; 0x25e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	18 c1       	rjmp	.+560    	; 0x25e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c1       	rjmp	.+556    	; 0x25e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c1       	rjmp	.+552    	; 0x25e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c1       	rjmp	.+548    	; 0x25e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c1       	rjmp	.+544    	; 0x25e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c1       	rjmp	.+540    	; 0x25e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c1       	rjmp	.+536    	; 0x25e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c1       	rjmp	.+532    	; 0x25e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c1       	rjmp	.+528    	; 0x25e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c1       	rjmp	.+524    	; 0x25e <__bad_interrupt>
      52:	00 00       	nop
      54:	04 c1       	rjmp	.+520    	; 0x25e <__bad_interrupt>
      56:	00 00       	nop
      58:	02 c1       	rjmp	.+516    	; 0x25e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	00 c1       	rjmp	.+512    	; 0x25e <__bad_interrupt>
      5e:	00 00       	nop
      60:	fe c0       	rjmp	.+508    	; 0x25e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c0       	rjmp	.+504    	; 0x25e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c0       	rjmp	.+500    	; 0x25e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c0       	rjmp	.+496    	; 0x25e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c0       	rjmp	.+492    	; 0x25e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c0       	rjmp	.+488    	; 0x25e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c0       	rjmp	.+484    	; 0x25e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c0       	rjmp	.+480    	; 0x25e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c0       	rjmp	.+476    	; 0x25e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c0       	rjmp	.+472    	; 0x25e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c0       	rjmp	.+468    	; 0x25e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c0       	rjmp	.+464    	; 0x25e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c0       	rjmp	.+460    	; 0x25e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c0       	rjmp	.+456    	; 0x25e <__bad_interrupt>
      96:	00 00       	nop
      98:	e2 c0       	rjmp	.+452    	; 0x25e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e0 c0       	rjmp	.+448    	; 0x25e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	de c0       	rjmp	.+444    	; 0x25e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dc c0       	rjmp	.+440    	; 0x25e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	da c0       	rjmp	.+436    	; 0x25e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d8 c0       	rjmp	.+432    	; 0x25e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d6 c0       	rjmp	.+428    	; 0x25e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d4 c0       	rjmp	.+424    	; 0x25e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d2 c0       	rjmp	.+420    	; 0x25e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d0 c0       	rjmp	.+416    	; 0x25e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ce c0       	rjmp	.+412    	; 0x25e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cc c0       	rjmp	.+408    	; 0x25e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ca c0       	rjmp	.+404    	; 0x25e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c8 c0       	rjmp	.+400    	; 0x25e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c6 c0       	rjmp	.+396    	; 0x25e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c4 c0       	rjmp	.+392    	; 0x25e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c2 c0       	rjmp	.+388    	; 0x25e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <__bad_interrupt>
      de:	00 00       	nop
      e0:	be c0       	rjmp	.+380    	; 0x25e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bc c0       	rjmp	.+376    	; 0x25e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ba c0       	rjmp	.+372    	; 0x25e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b8 c0       	rjmp	.+368    	; 0x25e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b6 c0       	rjmp	.+364    	; 0x25e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b4 c0       	rjmp	.+360    	; 0x25e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b2 c0       	rjmp	.+356    	; 0x25e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b0 c0       	rjmp	.+352    	; 0x25e <__bad_interrupt>
      fe:	00 00       	nop
     100:	ae c0       	rjmp	.+348    	; 0x25e <__bad_interrupt>
     102:	00 00       	nop
     104:	ac c0       	rjmp	.+344    	; 0x25e <__bad_interrupt>
     106:	00 00       	nop
     108:	aa c0       	rjmp	.+340    	; 0x25e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a8 c0       	rjmp	.+336    	; 0x25e <__bad_interrupt>
     10e:	00 00       	nop
     110:	a6 c0       	rjmp	.+332    	; 0x25e <__bad_interrupt>
     112:	00 00       	nop
     114:	a4 c0       	rjmp	.+328    	; 0x25e <__bad_interrupt>
     116:	00 00       	nop
     118:	a2 c0       	rjmp	.+324    	; 0x25e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c0       	rjmp	.+320    	; 0x25e <__bad_interrupt>
     11e:	00 00       	nop
     120:	9e c0       	rjmp	.+316    	; 0x25e <__bad_interrupt>
     122:	00 00       	nop
     124:	9c c0       	rjmp	.+312    	; 0x25e <__bad_interrupt>
     126:	00 00       	nop
     128:	9a c0       	rjmp	.+308    	; 0x25e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	98 c0       	rjmp	.+304    	; 0x25e <__bad_interrupt>
     12e:	00 00       	nop
     130:	96 c0       	rjmp	.+300    	; 0x25e <__bad_interrupt>
     132:	00 00       	nop
     134:	94 c0       	rjmp	.+296    	; 0x25e <__bad_interrupt>
     136:	00 00       	nop
     138:	92 c0       	rjmp	.+292    	; 0x25e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	90 c0       	rjmp	.+288    	; 0x25e <__bad_interrupt>
     13e:	00 00       	nop
     140:	8e c0       	rjmp	.+284    	; 0x25e <__bad_interrupt>
     142:	00 00       	nop
     144:	8c c0       	rjmp	.+280    	; 0x25e <__bad_interrupt>
     146:	00 00       	nop
     148:	8a c0       	rjmp	.+276    	; 0x25e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	88 c0       	rjmp	.+272    	; 0x25e <__bad_interrupt>
     14e:	00 00       	nop
     150:	86 c0       	rjmp	.+268    	; 0x25e <__bad_interrupt>
     152:	00 00       	nop
     154:	84 c0       	rjmp	.+264    	; 0x25e <__bad_interrupt>
     156:	00 00       	nop
     158:	82 c0       	rjmp	.+260    	; 0x25e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	80 c0       	rjmp	.+256    	; 0x25e <__bad_interrupt>
     15e:	00 00       	nop
     160:	7e c0       	rjmp	.+252    	; 0x25e <__bad_interrupt>
     162:	00 00       	nop
     164:	7c c0       	rjmp	.+248    	; 0x25e <__bad_interrupt>
     166:	00 00       	nop
     168:	7a c0       	rjmp	.+244    	; 0x25e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	78 c0       	rjmp	.+240    	; 0x25e <__bad_interrupt>
     16e:	00 00       	nop
     170:	76 c0       	rjmp	.+236    	; 0x25e <__bad_interrupt>
     172:	00 00       	nop
     174:	74 c0       	rjmp	.+232    	; 0x25e <__bad_interrupt>
     176:	00 00       	nop
     178:	72 c0       	rjmp	.+228    	; 0x25e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	70 c0       	rjmp	.+224    	; 0x25e <__bad_interrupt>
     17e:	00 00       	nop
     180:	6e c0       	rjmp	.+220    	; 0x25e <__bad_interrupt>
     182:	00 00       	nop
     184:	6c c0       	rjmp	.+216    	; 0x25e <__bad_interrupt>
     186:	00 00       	nop
     188:	6a c0       	rjmp	.+212    	; 0x25e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	68 c0       	rjmp	.+208    	; 0x25e <__bad_interrupt>
     18e:	00 00       	nop
     190:	66 c0       	rjmp	.+204    	; 0x25e <__bad_interrupt>
     192:	00 00       	nop
     194:	64 c0       	rjmp	.+200    	; 0x25e <__bad_interrupt>
     196:	00 00       	nop
     198:	62 c0       	rjmp	.+196    	; 0x25e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	60 c0       	rjmp	.+192    	; 0x25e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5c c0       	rjmp	.+184    	; 0x25e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5a c0       	rjmp	.+180    	; 0x25e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	58 c0       	rjmp	.+176    	; 0x25e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	56 c0       	rjmp	.+172    	; 0x25e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	54 c0       	rjmp	.+168    	; 0x25e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	52 c0       	rjmp	.+164    	; 0x25e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	50 c0       	rjmp	.+160    	; 0x25e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4e c0       	rjmp	.+156    	; 0x25e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4c c0       	rjmp	.+152    	; 0x25e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4a c0       	rjmp	.+148    	; 0x25e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	48 c0       	rjmp	.+144    	; 0x25e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	46 c0       	rjmp	.+140    	; 0x25e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	44 c0       	rjmp	.+136    	; 0x25e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	40 c0       	rjmp	.+128    	; 0x25e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3e c0       	rjmp	.+124    	; 0x25e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3c c0       	rjmp	.+120    	; 0x25e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3a c0       	rjmp	.+116    	; 0x25e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	38 c0       	rjmp	.+112    	; 0x25e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	36 c0       	rjmp	.+108    	; 0x25e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__vector_125>
     1f8:	0c 94 35 12 	jmp	0x246a	; 0x246a <__vector_126>
     1fc:	9a 03       	fmulsu	r17, r18
     1fe:	e3 03       	fmuls	r22, r19
     200:	90 03       	fmuls	r17, r16
     202:	e5 03       	fmuls	r22, r21
     204:	92 03       	fmuls	r17, r18
     206:	94 03       	fmuls	r17, r20
     208:	96 03       	fmuls	r17, r22
     20a:	98 03       	fmulsu	r17, r16
     20c:	9a 03       	fmulsu	r17, r18
     20e:	63 0c       	add	r6, r3
     210:	66 0c       	add	r6, r6
     212:	69 0c       	add	r6, r9
     214:	6c 0c       	add	r6, r12
     216:	6f 0c       	add	r6, r15
     218:	72 0c       	add	r7, r2
     21a:	75 0c       	add	r7, r5

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df e5       	ldi	r29, 0x5F	; 95
     226:	de bf       	out	0x3e, r29	; 62
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	11 e2       	ldi	r17, 0x21	; 33
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	e2 e1       	ldi	r30, 0x12	; 18
     234:	f7 e2       	ldi	r31, 0x27	; 39
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	ae 34       	cpi	r26, 0x4E	; 78
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	23 e2       	ldi	r18, 0x23	; 35
     248:	ae e4       	ldi	r26, 0x4E	; 78
     24a:	b1 e2       	ldi	r27, 0x21	; 33
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	ac 31       	cpi	r26, 0x1C	; 28
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 25 13 	call	0x264a	; 0x264a <main>
     25a:	0c 94 87 13 	jmp	0x270e	; 0x270e <_exit>

0000025e <__bad_interrupt>:
     25e:	d0 ce       	rjmp	.-608    	; 0x0 <__vectors>

00000260 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     260:	e0 e0       	ldi	r30, 0x00	; 0
     262:	f6 e0       	ldi	r31, 0x06	; 6
     264:	9f ef       	ldi	r25, 0xFF	; 255
     266:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     268:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     26a:	e0 e2       	ldi	r30, 0x20	; 32
     26c:	f6 e0       	ldi	r31, 0x06	; 6
     26e:	3f e3       	ldi	r19, 0x3F	; 63
     270:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     272:	88 e1       	ldi	r24, 0x18	; 24
     274:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     276:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     278:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     27a:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     27c:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     27e:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     280:	20 ec       	ldi	r18, 0xC0	; 192
     282:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     284:	40 e4       	ldi	r20, 0x40	; 64
     286:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     288:	40 e8       	ldi	r20, 0x80	; 128
     28a:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     28c:	e0 e4       	ldi	r30, 0x40	; 64
     28e:	f6 e0       	ldi	r31, 0x06	; 6
     290:	4c ef       	ldi	r20, 0xFC	; 252
     292:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     294:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     296:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     298:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     29a:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     29c:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     29e:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     2a0:	43 e0       	ldi	r20, 0x03	; 3
     2a2:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     2a4:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     2a6:	e0 e6       	ldi	r30, 0x60	; 96
     2a8:	f6 e0       	ldi	r31, 0x06	; 6
     2aa:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2ac:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2ae:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2b0:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2b2:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2b4:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2b6:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     2b8:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     2ba:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     2bc:	e0 e8       	ldi	r30, 0x80	; 128
     2be:	f6 e0       	ldi	r31, 0x06	; 6
     2c0:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2c2:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2c4:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2c6:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2c8:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2ca:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2cc:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2ce:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2d0:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     2d2:	e0 ea       	ldi	r30, 0xA0	; 160
     2d4:	f6 e0       	ldi	r31, 0x06	; 6
     2d6:	90 ef       	ldi	r25, 0xF0	; 240
     2d8:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2da:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2dc:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2de:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     2e0:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     2e2:	8f e0       	ldi	r24, 0x0F	; 15
     2e4:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     2e6:	85 83       	std	Z+5, r24	; 0x05
     2e8:	08 95       	ret

000002ea <jstk_readVertIndex>:

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     2ea:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>
     2ee:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	92 2b       	or	r25, r18
     2f6:	96 95       	lsr	r25
     2f8:	87 95       	ror	r24
     2fa:	96 95       	lsr	r25
     2fc:	87 95       	ror	r24
     2fe:	bc 01       	movw	r22, r24
     300:	7f 70       	andi	r23, 0x0F	; 15
     302:	80 ff       	sbrs	r24, 0
     304:	17 c0       	rjmp	.+46     	; 0x334 <jstk_readVertIndex+0x4a>
     306:	21 e0       	ldi	r18, 0x01	; 1
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	e1 e0       	ldi	r30, 0x01	; 1
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	82 2f       	mov	r24, r18
     310:	af 01       	movw	r20, r30
     312:	02 2e       	mov	r0, r18
     314:	02 c0       	rjmp	.+4      	; 0x31a <jstk_readVertIndex+0x30>
     316:	44 0f       	add	r20, r20
     318:	55 1f       	adc	r21, r21
     31a:	0a 94       	dec	r0
     31c:	e2 f7       	brpl	.-8      	; 0x316 <jstk_readVertIndex+0x2c>
     31e:	46 23       	and	r20, r22
     320:	57 23       	and	r21, r23
     322:	45 2b       	or	r20, r21
     324:	41 f0       	breq	.+16     	; 0x336 <jstk_readVertIndex+0x4c>
     326:	2f 5f       	subi	r18, 0xFF	; 255
     328:	3f 4f       	sbci	r19, 0xFF	; 255
     32a:	2c 30       	cpi	r18, 0x0C	; 12
     32c:	31 05       	cpc	r19, r1
     32e:	79 f7       	brne	.-34     	; 0x30e <jstk_readVertIndex+0x24>
     330:	8f ef       	ldi	r24, 0xFF	; 255
     332:	08 95       	ret
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	08 95       	ret

00000338 <jstk_readHoriIndex>:
     338:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     33c:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	92 2b       	or	r25, r18
     344:	bc 01       	movw	r22, r24
     346:	7f 70       	andi	r23, 0x0F	; 15
     348:	80 ff       	sbrs	r24, 0
     34a:	17 c0       	rjmp	.+46     	; 0x37a <jstk_readHoriIndex+0x42>
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	e1 e0       	ldi	r30, 0x01	; 1
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	82 2f       	mov	r24, r18
     356:	af 01       	movw	r20, r30
     358:	02 2e       	mov	r0, r18
     35a:	02 c0       	rjmp	.+4      	; 0x360 <jstk_readHoriIndex+0x28>
     35c:	44 0f       	add	r20, r20
     35e:	55 1f       	adc	r21, r21
     360:	0a 94       	dec	r0
     362:	e2 f7       	brpl	.-8      	; 0x35c <jstk_readHoriIndex+0x24>
     364:	46 23       	and	r20, r22
     366:	57 23       	and	r21, r23
     368:	45 2b       	or	r20, r21
     36a:	41 f0       	breq	.+16     	; 0x37c <jstk_readHoriIndex+0x44>
     36c:	2f 5f       	subi	r18, 0xFF	; 255
     36e:	3f 4f       	sbci	r19, 0xFF	; 255
     370:	2c 30       	cpi	r18, 0x0C	; 12
     372:	31 05       	cpc	r19, r1
     374:	79 f7       	brne	.-34     	; 0x354 <jstk_readHoriIndex+0x1c>
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	08 95       	ret
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	08 95       	ret

0000037e <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     37e:	88 23       	and	r24, r24
     380:	f4 f1       	brlt	.+124    	; 0x3fe <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     382:	9b ef       	ldi	r25, 0xFB	; 251
     384:	98 0f       	add	r25, r24
     386:	92 30       	cpi	r25, 0x02	; 2
     388:	e0 f1       	brcs	.+120    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     38a:	85 30       	cpi	r24, 0x05	; 5
     38c:	34 f4       	brge	.+12     	; 0x39a <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     38e:	95 e0       	ldi	r25, 0x05	; 5
     390:	98 1b       	sub	r25, r24
     392:	92 30       	cpi	r25, 0x02	; 2
     394:	08 f0       	brcs	.+2      	; 0x398 <jstk_ledMask+0x1a>
     396:	42 c0       	rjmp	.+132    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     398:	36 c0       	rjmp	.+108    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     39a:	9a ef       	ldi	r25, 0xFA	; 250
     39c:	98 0f       	add	r25, r24
     39e:	92 30       	cpi	r25, 0x02	; 2
     3a0:	b0 f5       	brcc	.+108    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3a2:	31 c0       	rjmp	.+98     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     3a4:	62 e0       	ldi	r22, 0x02	; 2
     3a6:	23 e0       	ldi	r18, 0x03	; 3
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     3ae:	e1 e0       	ldi	r30, 0x01	; 1
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	af 01       	movw	r20, r30
     3b4:	02 2e       	mov	r0, r18
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <jstk_ledMask+0x3e>
     3b8:	44 0f       	add	r20, r20
     3ba:	55 1f       	adc	r21, r21
     3bc:	0a 94       	dec	r0
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <jstk_ledMask+0x3a>
     3c0:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     3c2:	9f 5f       	subi	r25, 0xFF	; 255
     3c4:	21 50       	subi	r18, 0x01	; 1
     3c6:	31 09       	sbc	r19, r1
     3c8:	96 17       	cp	r25, r22
     3ca:	98 f3       	brcs	.-26     	; 0x3b2 <jstk_ledMask+0x34>
     3cc:	08 95       	ret
     3ce:	81 50       	subi	r24, 0x01	; 1
     3d0:	48 2f       	mov	r20, r24
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	4b 5f       	subi	r20, 0xFB	; 251
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     3d8:	24 e0       	ldi	r18, 0x04	; 4
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     3de:	e1 e0       	ldi	r30, 0x01	; 1
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	bf 01       	movw	r22, r30
     3e4:	02 2e       	mov	r0, r18
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <jstk_ledMask+0x6e>
     3e8:	66 0f       	add	r22, r22
     3ea:	77 1f       	adc	r23, r23
     3ec:	0a 94       	dec	r0
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <jstk_ledMask+0x6a>
     3f0:	86 2b       	or	r24, r22
     3f2:	2f 5f       	subi	r18, 0xFF	; 255
     3f4:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     3f6:	24 17       	cp	r18, r20
     3f8:	35 07       	cpc	r19, r21
     3fa:	99 f7       	brne	.-26     	; 0x3e2 <jstk_ledMask+0x64>
     3fc:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     402:	88 e1       	ldi	r24, 0x18	; 24
     404:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     406:	85 30       	cpi	r24, 0x05	; 5
     408:	6c f2       	brlt	.-102    	; 0x3a4 <jstk_ledMask+0x26>
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	e0 cf       	rjmp	.-64     	; 0x3ce <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     40e:	85 50       	subi	r24, 0x05	; 5
     410:	85 30       	cpi	r24, 0x05	; 5
     412:	08 f0       	brcs	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     416:	81 11       	cpse	r24, r1
     418:	da cf       	rjmp	.-76     	; 0x3ce <jstk_ledMask+0x50>
     41a:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     41c:	66 e0       	ldi	r22, 0x06	; 6
     41e:	68 1b       	sub	r22, r24
     420:	65 30       	cpi	r22, 0x05	; 5
     422:	08 f0       	brcs	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     424:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     426:	61 11       	cpse	r22, r1
     428:	be cf       	rjmp	.-132    	; 0x3a6 <jstk_ledMask+0x28>
     42a:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     42c:	08 95       	ret

0000042e <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     42e:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     430:	5c df       	rcall	.-328    	; 0x2ea <jstk_readVertIndex>
     432:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     434:	81 df       	rcall	.-254    	; 0x338 <jstk_readHoriIndex>
     436:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     438:	24 f4       	brge	.+8      	; 0x442 <jstk_readMask+0x14>
     43a:	88 23       	and	r24, r24
     43c:	c4 f0       	brlt	.+48     	; 0x46e <jstk_readMask+0x40>
     43e:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider 'distance'   (dV)
     440:	09 c0       	rjmp	.+18     	; 0x454 <jstk_readMask+0x26>
     442:	c6 30       	cpi	r28, 0x06	; 6
     444:	1c f0       	brlt	.+6      	; 0x44c <jstk_readMask+0x1e>
     446:	9b ef       	ldi	r25, 0xFB	; 251
     448:	9c 0f       	add	r25, r28
     44a:	02 c0       	rjmp	.+4      	; 0x450 <jstk_readMask+0x22>
     44c:	95 e0       	ldi	r25, 0x05	; 5
     44e:	9c 1b       	sub	r25, r28
     450:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider 'distance' (dH)
     452:	54 f0       	brlt	.+20     	; 0x468 <jstk_readMask+0x3a>
     454:	86 30       	cpi	r24, 0x06	; 6
     456:	1c f0       	brlt	.+6      	; 0x45e <jstk_readMask+0x30>
     458:	2b ef       	ldi	r18, 0xFB	; 251
     45a:	28 0f       	add	r18, r24
     45c:	02 c0       	rjmp	.+4      	; 0x462 <jstk_readMask+0x34>
     45e:	25 e0       	ldi	r18, 0x05	; 5
     460:	28 1b       	sub	r18, r24
     462:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     464:	08 f4       	brcc	.+2      	; 0x468 <jstk_readMask+0x3a>
     466:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     468:	8c 2f       	mov	r24, r28
     46a:	89 df       	rcall	.-238    	; 0x37e <jstk_ledMask>
     46c:	01 c0       	rjmp	.+2      	; 0x470 <jstk_readMask+0x42>
     46e:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     470:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider 'distance' (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     472:	08 95       	ret

00000474 <jstk_usbTask>:
     474:	61 df       	rcall	.-318    	; 0x338 <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     476:	88 23       	and	r24, r24
     478:	3c f0       	brlt	.+14     	; 0x488 <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     47a:	e8 2f       	mov	r30, r24
     47c:	88 0f       	add	r24, r24
     47e:	ff 0b       	sbc	r31, r31
     480:	ee 5b       	subi	r30, 0xBE	; 190
     482:	fe 4d       	sbci	r31, 0xDE	; 222
     484:	80 81       	ld	r24, Z
     486:	01 c0       	rjmp	.+2      	; 0x48a <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     488:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     48a:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <__data_end>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     48e:	2d df       	rcall	.-422    	; 0x2ea <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     490:	88 23       	and	r24, r24
     492:	3c f0       	brlt	.+14     	; 0x4a2 <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     494:	e8 2f       	mov	r30, r24
     496:	88 0f       	add	r24, r24
     498:	ff 0b       	sbc	r31, r31
     49a:	ee 5b       	subi	r30, 0xBE	; 190
     49c:	fe 4d       	sbci	r31, 0xDE	; 222
     49e:	80 81       	ld	r24, Z
     4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     4a2:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     4a4:	ee e4       	ldi	r30, 0x4E	; 78
     4a6:	f1 e2       	ldi	r31, 0x21	; 33
     4a8:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     4aa:	20 81       	ld	r18, Z
     4ac:	90 91 00 20 	lds	r25, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
     4b0:	29 13       	cpse	r18, r25
     4b2:	04 c0       	rjmp	.+8      	; 0x4bc <jstk_usbTask+0x48>
     4b4:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
     4b8:	98 17       	cp	r25, r24
     4ba:	71 f0       	breq	.+28     	; 0x4d8 <jstk_usbTask+0x64>
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     4bc:	8e e4       	ldi	r24, 0x4E	; 78
     4be:	91 e2       	ldi	r25, 0x21	; 33
     4c0:	21 d3       	rcall	.+1602   	; 0xb04 <udi_hid_generic_send_report_in>
     4c2:	88 23       	and	r24, r24
     4c4:	49 f0       	breq	.+18     	; 0x4d8 <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     4c6:	e0 e0       	ldi	r30, 0x00	; 0
     4c8:	f0 e2       	ldi	r31, 0x20	; 32
     4ca:	ae e4       	ldi	r26, 0x4E	; 78
     4cc:	b1 e2       	ldi	r27, 0x21	; 33
     4ce:	8c 91       	ld	r24, X
     4d0:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     4d2:	11 96       	adiw	r26, 0x01	; 1
     4d4:	8c 91       	ld	r24, X
     4d6:	81 83       	std	Z+1, r24	; 0x01
     4d8:	08 95       	ret

000004da <joystick>:
    }
}

void joystick(void) 
{
    jstk_mask = jstk_readMask();            // pick LED's
     4da:	a9 df       	rcall	.-174    	; 0x42e <jstk_readMask>
     4dc:	80 93 03 23 	sts	0x2303, r24	; 0x802303 <jstk_mask>
    jstk_testMode = PORTB.IN;               // checks switch for testing mode
     4e0:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     4e4:	90 93 04 23 	sts	0x2304, r25	; 0x802304 <jstk_testMode>

    if ((jstk_testMode & PIN4_bm) == 0) {   // test mode
     4e8:	90 91 04 23 	lds	r25, 0x2304	; 0x802304 <jstk_testMode>
     4ec:	94 fd       	sbrc	r25, 4
     4ee:	0d c0       	rjmp	.+26     	; 0x50a <joystick+0x30>
        if (jstk_mask) {
     4f0:	88 23       	and	r24, r24
            led_allOff();
     4f2:	69 f0       	breq	.+26     	; 0x50e <joystick+0x34>
     4f4:	72 d1       	rcall	.+740    	; 0x7da <led_allOff>
            led_on(jstk_mask);
     4f6:	80 91 03 23 	lds	r24, 0x2303	; 0x802303 <jstk_mask>
     4fa:	73 d1       	rcall	.+742    	; 0x7e2 <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fc:	83 ec       	ldi	r24, 0xC3	; 195
     4fe:	99 e0       	ldi	r25, 0x09	; 9
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	f1 f7       	brne	.-4      	; 0x500 <joystick+0x26>
     504:	00 c0       	rjmp	.+0      	; 0x506 <joystick+0x2c>
            _delay_ms(10);
        }
    } else {                                // normal mode
        led_allOff();                       // !! probably remove this later !!
     506:	00 00       	nop
     508:	08 95       	ret
        jstk_usbTask();                     // send to USB
     50a:	67 d1       	rcall	.+718    	; 0x7da <led_allOff>
     50c:	b3 cf       	rjmp	.-154    	; 0x474 <jstk_usbTask>
     50e:	08 95       	ret

00000510 <keypad_init>:
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     510:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <kpd_keyPressed>
     514:	10 92 53 21 	sts	0x2153, r1	; 0x802153 <kpd_currState>
     518:	10 92 54 21 	sts	0x2154, r1	; 0x802154 <kpd_prevState>
     51c:	10 92 51 21 	sts	0x2151, r1	; 0x802151 <kpd_exitTestMode>
     520:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <kpd_rowVal>
     524:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <kpd_colVal>
     528:	10 92 55 21 	sts	0x2155, r1	; 0x802155 <kpd_code>
     52c:	e0 e6       	ldi	r30, 0x60	; 96
     52e:	f1 e2       	ldi	r31, 0x21	; 33
     530:	81 e6       	ldi	r24, 0x61	; 97
     532:	80 83       	st	Z, r24
     534:	80 e6       	ldi	r24, 0x60	; 96
     536:	81 83       	std	Z+1, r24	; 0x01
     538:	12 82       	std	Z+2, r1	; 0x02
     53a:	13 82       	std	Z+3, r1	; 0x03
     53c:	8f e5       	ldi	r24, 0x5F	; 95
     53e:	84 83       	std	Z+4, r24	; 0x04
     540:	8e e5       	ldi	r24, 0x5E	; 94
     542:	85 83       	std	Z+5, r24	; 0x05
     544:	16 82       	std	Z+6, r1	; 0x06
     546:	17 82       	std	Z+7, r1	; 0x07
     548:	8d e5       	ldi	r24, 0x5D	; 93
     54a:	80 87       	std	Z+8, r24	; 0x08
     54c:	11 86       	std	Z+9, r1	; 0x09
     54e:	12 86       	std	Z+10, r1	; 0x0a
     550:	13 86       	std	Z+11, r1	; 0x0b
     552:	14 86       	std	Z+12, r1	; 0x0c
     554:	15 86       	std	Z+13, r1	; 0x0d
     556:	89 e5       	ldi	r24, 0x59	; 89
     558:	86 87       	std	Z+14, r24	; 0x0e
     55a:	8b e5       	ldi	r24, 0x5B	; 91
     55c:	87 87       	std	Z+15, r24	; 0x0f
     55e:	10 8a       	std	Z+16, r1	; 0x10
     560:	11 8a       	std	Z+17, r1	; 0x11
     562:	8a e5       	ldi	r24, 0x5A	; 90
     564:	82 8b       	std	Z+18, r24	; 0x12
     566:	8c e5       	ldi	r24, 0x5C	; 92
     568:	83 8b       	std	Z+19, r24	; 0x13
     56a:	eb e5       	ldi	r30, 0x5B	; 91
     56c:	f1 e2       	ldi	r31, 0x21	; 33
     56e:	8e e0       	ldi	r24, 0x0E	; 14
     570:	80 83       	st	Z, r24
     572:	8d e0       	ldi	r24, 0x0D	; 13
     574:	81 83       	std	Z+1, r24	; 0x01
     576:	8b e0       	ldi	r24, 0x0B	; 11
     578:	82 83       	std	Z+2, r24	; 0x02
     57a:	87 e0       	ldi	r24, 0x07	; 7
     57c:	83 83       	std	Z+3, r24	; 0x03
     57e:	8f ef       	ldi	r24, 0xFF	; 255
     580:	84 83       	std	Z+4, r24	; 0x04
     582:	08 95       	ret

00000584 <keypad_poll>:
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
     588:	10 92 57 21 	sts	0x2157, r1	; 0x802157 <kpd_detectedCol>
     58c:	10 92 50 21 	sts	0x2150, r1	; 0x802150 <kpd_count.5289>
     590:	a0 ea       	ldi	r26, 0xA0	; 160
     592:	b6 e0       	ldi	r27, 0x06	; 6
     594:	c0 e2       	ldi	r28, 0x20	; 32
     596:	d6 e0       	ldi	r29, 0x06	; 6
     598:	90 e8       	ldi	r25, 0x80	; 128
     59a:	62 e0       	ldi	r22, 0x02	; 2
     59c:	25 e0       	ldi	r18, 0x05	; 5
     59e:	54 e0       	ldi	r21, 0x04	; 4
     5a0:	41 e0       	ldi	r20, 0x01	; 1
     5a2:	33 e0       	ldi	r19, 0x03	; 3
     5a4:	63 c0       	rjmp	.+198    	; 0x66c <keypad_poll+0xe8>
     5a6:	e0 91 50 21 	lds	r30, 0x2150	; 0x802150 <kpd_count.5289>
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	e5 5a       	subi	r30, 0xA5	; 165
     5ae:	fe 4d       	sbci	r31, 0xDE	; 222
     5b0:	80 81       	ld	r24, Z
     5b2:	14 96       	adiw	r26, 0x04	; 4
     5b4:	8c 93       	st	X, r24
     5b6:	14 97       	sbiw	r26, 0x04	; 4
     5b8:	e0 91 50 21 	lds	r30, 0x2150	; 0x802150 <kpd_count.5289>
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	e5 5a       	subi	r30, 0xA5	; 165
     5c0:	fe 4d       	sbci	r31, 0xDE	; 222
     5c2:	80 81       	ld	r24, Z
     5c4:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <kpd_colVal>
     5c8:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5289>
     5cc:	84 30       	cpi	r24, 0x04	; 4
     5ce:	11 f4       	brne	.+4      	; 0x5d4 <keypad_poll+0x50>
     5d0:	9e 83       	std	Y+6, r25	; 0x06
     5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <keypad_poll+0x52>
     5d4:	9d 83       	std	Y+5, r25	; 0x05
     5d6:	18 96       	adiw	r26, 0x08	; 8
     5d8:	8c 91       	ld	r24, X
     5da:	18 97       	sbiw	r26, 0x08	; 8
     5dc:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <kpd_rowVal>
     5e0:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <kpd_rowVal>
     5e4:	80 7f       	andi	r24, 0xF0	; 240
     5e6:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <kpd_rowVal>
     5ea:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <kpd_rowVal>
     5ee:	80 3b       	cpi	r24, 0xB0	; 176
     5f0:	d1 f0       	breq	.+52     	; 0x626 <keypad_poll+0xa2>
     5f2:	18 f4       	brcc	.+6      	; 0x5fa <keypad_poll+0x76>
     5f4:	80 37       	cpi	r24, 0x70	; 112
     5f6:	01 f1       	breq	.+64     	; 0x638 <keypad_poll+0xb4>
     5f8:	28 c0       	rjmp	.+80     	; 0x64a <keypad_poll+0xc6>
     5fa:	80 3d       	cpi	r24, 0xD0	; 208
     5fc:	59 f0       	breq	.+22     	; 0x614 <keypad_poll+0x90>
     5fe:	80 3e       	cpi	r24, 0xE0	; 224
     600:	21 f5       	brne	.+72     	; 0x64a <keypad_poll+0xc6>
     602:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <kpd_detectedRow>
     606:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5289>
     60a:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <kpd_detectedCol>
     60e:	20 93 50 21 	sts	0x2150, r18	; 0x802150 <kpd_count.5289>
     612:	2c c0       	rjmp	.+88     	; 0x66c <keypad_poll+0xe8>
     614:	40 93 58 21 	sts	0x2158, r20	; 0x802158 <kpd_detectedRow>
     618:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5289>
     61c:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <kpd_detectedCol>
     620:	20 93 50 21 	sts	0x2150, r18	; 0x802150 <kpd_count.5289>
     624:	23 c0       	rjmp	.+70     	; 0x66c <keypad_poll+0xe8>
     626:	60 93 58 21 	sts	0x2158, r22	; 0x802158 <kpd_detectedRow>
     62a:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5289>
     62e:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <kpd_detectedCol>
     632:	20 93 50 21 	sts	0x2150, r18	; 0x802150 <kpd_count.5289>
     636:	1a c0       	rjmp	.+52     	; 0x66c <keypad_poll+0xe8>
     638:	30 93 58 21 	sts	0x2158, r19	; 0x802158 <kpd_detectedRow>
     63c:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5289>
     640:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <kpd_detectedCol>
     644:	20 93 50 21 	sts	0x2150, r18	; 0x802150 <kpd_count.5289>
     648:	11 c0       	rjmp	.+34     	; 0x66c <keypad_poll+0xe8>
     64a:	50 93 58 21 	sts	0x2158, r21	; 0x802158 <kpd_detectedRow>
     64e:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5289>
     652:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <kpd_detectedCol>
     656:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5289>
     65a:	85 30       	cpi	r24, 0x05	; 5
     65c:	10 f0       	brcs	.+4      	; 0x662 <keypad_poll+0xde>
     65e:	20 93 57 21 	sts	0x2157, r18	; 0x802157 <kpd_detectedCol>
     662:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5289>
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <kpd_count.5289>
     66c:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <kpd_count.5289>
     670:	85 30       	cpi	r24, 0x05	; 5
     672:	08 f4       	brcc	.+2      	; 0x676 <keypad_poll+0xf2>
     674:	98 cf       	rjmp	.-208    	; 0x5a6 <keypad_poll+0x22>
     676:	80 e8       	ldi	r24, 0x80	; 128
     678:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     67c:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <kpd_detectedRow>
     680:	84 30       	cpi	r24, 0x04	; 4
     682:	e0 f4       	brcc	.+56     	; 0x6bc <keypad_poll+0x138>
     684:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <kpd_detectedCol>
     688:	85 30       	cpi	r24, 0x05	; 5
     68a:	c0 f4       	brcc	.+48     	; 0x6bc <keypad_poll+0x138>
     68c:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <kpd_keyPressed>
     690:	81 11       	cpse	r24, r1
     692:	1a c0       	rjmp	.+52     	; 0x6c8 <keypad_poll+0x144>
     694:	e0 91 57 21 	lds	r30, 0x2157	; 0x802157 <kpd_detectedCol>
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <kpd_detectedRow>
     69e:	ee 0f       	add	r30, r30
     6a0:	ff 1f       	adc	r31, r31
     6a2:	ee 0f       	add	r30, r30
     6a4:	ff 1f       	adc	r31, r31
     6a6:	e0 5a       	subi	r30, 0xA0	; 160
     6a8:	fe 4d       	sbci	r31, 0xDE	; 222
     6aa:	e8 0f       	add	r30, r24
     6ac:	f1 1d       	adc	r31, r1
     6ae:	80 81       	ld	r24, Z
     6b0:	80 93 55 21 	sts	0x2155, r24	; 0x802155 <kpd_code>
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <kpd_keyPressed>
     6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <keypad_poll+0x144>
     6bc:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <kpd_keyPressed>
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	11 f4       	brne	.+4      	; 0x6c8 <keypad_poll+0x144>
     6c4:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <kpd_keyPressed>
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <keypad_report>:

void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;
     6ce:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     6d2:	80 93 05 23 	sts	0x2305, r24	; 0x802305 <kpd_testMode>
		}
	}
}

uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     6d6:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <kpd_keyPressed>
}

void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;
	kpd_currState = keypad_getState();
     6da:	80 93 53 21 	sts	0x2153, r24	; 0x802153 <kpd_currState>

uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
uint8_t keypad_getCode(void) {
	return(kpd_code);
     6de:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <kpd_code>

void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;
	kpd_currState = keypad_getState();
	kpd_codeOut = keypad_getCode();
     6e2:	80 93 52 21 	sts	0x2152, r24	; 0x802152 <kpd_codeOut>

	if ((kpd_testMode & 0x010) == 0) 
     6e6:	80 91 05 23 	lds	r24, 0x2305	; 0x802305 <kpd_testMode>
     6ea:	84 fd       	sbrc	r24, 4
     6ec:	29 c0       	rjmp	.+82     	; 0x740 <keypad_report+0x72>
	{
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     6ee:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <kpd_currState>
     6f2:	81 30       	cpi	r24, 0x01	; 1
     6f4:	09 f0       	breq	.+2      	; 0x6f8 <keypad_report+0x2a>
     6f6:	57 c0       	rjmp	.+174    	; 0x7a6 <keypad_report+0xd8>
     6f8:	80 91 54 21 	lds	r24, 0x2154	; 0x802154 <kpd_prevState>
     6fc:	81 11       	cpse	r24, r1
     6fe:	53 c0       	rjmp	.+166    	; 0x7a6 <keypad_report+0xd8>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
     700:	e0 91 52 21 	lds	r30, 0x2152	; 0x802152 <kpd_codeOut>
     704:	8e 2f       	mov	r24, r30
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	fc 01       	movw	r30, r24
     70a:	e9 55       	subi	r30, 0x59	; 89
     70c:	f1 09       	sbc	r31, r1
     70e:	e9 30       	cpi	r30, 0x09	; 9
     710:	f1 05       	cpc	r31, r1
     712:	90 f4       	brcc	.+36     	; 0x738 <keypad_report+0x6a>
     714:	88 27       	eor	r24, r24
     716:	e2 50       	subi	r30, 0x02	; 2
     718:	ff 4f       	sbci	r31, 0xFF	; 255
     71a:	8f 4f       	sbci	r24, 0xFF	; 255
     71c:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     720:	84 e0       	ldi	r24, 0x04	; 4
     722:	09 c0       	rjmp	.+18     	; 0x736 <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
			
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     724:	80 e1       	ldi	r24, 0x10	; 16
     726:	07 c0       	rjmp	.+14     	; 0x736 <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     728:	80 e2       	ldi	r24, 0x20	; 32
     72a:	05 c0       	rjmp	.+10     	; 0x736 <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     72c:	80 e4       	ldi	r24, 0x40	; 64
     72e:	03 c0       	rjmp	.+6      	; 0x736 <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     730:	80 e8       	ldi	r24, 0x80	; 128
     732:	01 c0       	rjmp	.+2      	; 0x736 <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     734:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     736:	58 d0       	rcall	.+176    	; 0x7e8 <led_toggle>
			kpd_exitTestMode = 1;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <kpd_exitTestMode>
     73e:	33 c0       	rjmp	.+102    	; 0x7a6 <keypad_report+0xd8>
		}
	}
	else
	{
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
     740:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <kpd_currState>
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	81 f4       	brne	.+32     	; 0x768 <keypad_report+0x9a>
     748:	80 91 54 21 	lds	r24, 0x2154	; 0x802154 <kpd_prevState>
     74c:	81 11       	cpse	r24, r1
     74e:	0c c0       	rjmp	.+24     	; 0x768 <keypad_report+0x9a>

uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
uint8_t keypad_getCode(void) {
	return(kpd_code);
     750:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <kpd_code>
		}
	}
	else
	{
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
			kpd_codeOut = keypad_getCode();
     754:	80 93 52 21 	sts	0x2152, r24	; 0x802152 <kpd_codeOut>
			BD76319_KeyToReport(kpd_currState, kpd_codeOut);
     758:	60 91 52 21 	lds	r22, 0x2152	; 0x802152 <kpd_codeOut>
     75c:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <kpd_currState>
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	44 d0       	rcall	.+136    	; 0x7ee <BD76319_KeyToReport>
     766:	13 c0       	rjmp	.+38     	; 0x78e <keypad_report+0xc0>
		} else if (kpd_currState == KEYPAD_RELEASED && kpd_prevState == KEYPAD_PRESSED) {
     768:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <kpd_currState>
     76c:	81 11       	cpse	r24, r1
     76e:	0f c0       	rjmp	.+30     	; 0x78e <keypad_report+0xc0>
     770:	80 91 54 21 	lds	r24, 0x2154	; 0x802154 <kpd_prevState>
     774:	81 30       	cpi	r24, 0x01	; 1
     776:	59 f4       	brne	.+22     	; 0x78e <keypad_report+0xc0>

uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
uint8_t keypad_getCode(void) {
	return(kpd_code);
     778:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <kpd_code>
	{
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
			kpd_codeOut = keypad_getCode();
			BD76319_KeyToReport(kpd_currState, kpd_codeOut);
		} else if (kpd_currState == KEYPAD_RELEASED && kpd_prevState == KEYPAD_PRESSED) {
			kpd_codeOut = keypad_getCode();
     77c:	80 93 52 21 	sts	0x2152, r24	; 0x802152 <kpd_codeOut>
			BD76319_KeyToReport(kpd_currState, kpd_codeOut);
     780:	60 91 52 21 	lds	r22, 0x2152	; 0x802152 <kpd_codeOut>
     784:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <kpd_currState>
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	30 d0       	rcall	.+96     	; 0x7ee <BD76319_KeyToReport>
		}
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
     78e:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <kpd_currState>
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	41 f4       	brne	.+16     	; 0x7a6 <keypad_report+0xd8>
     796:	80 91 54 21 	lds	r24, 0x2154	; 0x802154 <kpd_prevState>
     79a:	81 11       	cpse	r24, r1
     79c:	04 c0       	rjmp	.+8      	; 0x7a6 <keypad_report+0xd8>

uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
uint8_t keypad_getCode(void) {
	return(kpd_code);
     79e:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <kpd_code>
		} else if (kpd_currState == KEYPAD_RELEASED && kpd_prevState == KEYPAD_PRESSED) {
			kpd_codeOut = keypad_getCode();
			BD76319_KeyToReport(kpd_currState, kpd_codeOut);
		}
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
			kpd_codeOut = keypad_getCode();
     7a2:	80 93 52 21 	sts	0x2152, r24	; 0x802152 <kpd_codeOut>
			// BD76319_KeyToReport(kpd_currState, kpd_codeOut);
		}
	}
	
	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     7a6:	80 91 05 23 	lds	r24, 0x2305	; 0x802305 <kpd_testMode>
     7aa:	84 ff       	sbrs	r24, 4
     7ac:	07 c0       	rjmp	.+14     	; 0x7bc <keypad_report+0xee>
     7ae:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <kpd_exitTestMode>
     7b2:	81 30       	cpi	r24, 0x01	; 1
		led_allOff();
     7b4:	19 f4       	brne	.+6      	; 0x7bc <keypad_report+0xee>
     7b6:	11 d0       	rcall	.+34     	; 0x7da <led_allOff>
		kpd_exitTestMode = 0;
     7b8:	10 92 51 21 	sts	0x2151, r1	; 0x802151 <kpd_exitTestMode>
	}
	kpd_prevState = kpd_currState;
     7bc:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <kpd_currState>
     7c0:	80 93 54 21 	sts	0x2154, r24	; 0x802154 <kpd_prevState>
     7c4:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	b6 cf       	rjmp	.-148    	; 0x736 <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     7ca:	88 e0       	ldi	r24, 0x08	; 8
     7cc:	b4 cf       	rjmp	.-152    	; 0x736 <keypad_report+0x68>

000007ce <led_init>:
void led_on(uint8_t mask) {		// LED on
    LED_PORT.OUTCLR = mask;		// drive low (on)
}

void led_off(uint8_t mask) {	// LED off
    LED_PORT.OUTSET = mask;		// drive high (off)
     7ce:	e0 e0       	ldi	r30, 0x00	; 0
     7d0:	f6 e0       	ldi	r31, 0x06	; 6
     7d2:	8f ef       	ldi	r24, 0xFF	; 255
     7d4:	81 83       	std	Z+1, r24	; 0x01
     7d6:	85 83       	std	Z+5, r24	; 0x05
     7d8:	08 95       	ret

000007da <led_allOff>:
     7da:	8f ef       	ldi	r24, 0xFF	; 255
     7dc:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     7e0:	08 95       	ret

000007e2 <led_on>:
     7e2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     7e6:	08 95       	ret

000007e8 <led_toggle>:
}

void led_toggle(uint8_t mask) {	// toggle LED
    LED_PORT.OUTTGL = mask;
     7e8:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     7ec:	08 95       	ret

000007ee <BD76319_KeyToReport>:


void BD76319_KeyToReport(uint16_t pui_KeyStatus, uint16_t pui_KeyValue)
{

	ui_KeyStatusToReport = pui_KeyStatus;
     7ee:	80 93 7a 21 	sts	0x217A, r24	; 0x80217a <ui_KeyStatusToReport>
	ui_KeyToReport = pui_KeyValue;
     7f2:	60 93 79 21 	sts	0x2179, r22	; 0x802179 <ui_KeyToReport>
     7f6:	08 95       	ret

000007f8 <BD76319_ui_process>:
			uint8_t lui_u8_value;
	static uint16_t lui_cpt_sof = 0;

	// Scan process running each 2ms

	lui_cpt_sof++;
     7f8:	80 91 77 21 	lds	r24, 0x2177	; 0x802177 <lui_cpt_sof.5286>
     7fc:	90 91 78 21 	lds	r25, 0x2178	; 0x802178 <lui_cpt_sof.5286+0x1>
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	80 93 77 21 	sts	0x2177, r24	; 0x802177 <lui_cpt_sof.5286>
     806:	90 93 78 21 	sts	0x2178, r25	; 0x802178 <lui_cpt_sof.5286+0x1>
	if ((lui_cpt_sof % 2) == 0)
     80a:	80 ff       	sbrs	r24, 0
     80c:	60 c0       	rjmp	.+192    	; 0x8ce <BD76319_ui_process+0xd6>
	{
		return;
	}

	// Scan buttons on switch 0 to send keys sequence
	if(ui_KeyStatusToReport != lui_btn_last_state)
     80e:	20 91 7a 21 	lds	r18, 0x217A	; 0x80217a <ui_KeyStatusToReport>
     812:	30 91 76 21 	lds	r19, 0x2176	; 0x802176 <lui_btn_last_state.5282>
     816:	32 17       	cp	r19, r18
     818:	49 f0       	breq	.+18     	; 0x82c <BD76319_ui_process+0x34>
	{
		lui_btn_last_state = (bool) ui_KeyStatusToReport;
     81a:	31 e0       	ldi	r19, 0x01	; 1
     81c:	21 11       	cpse	r18, r1
     81e:	01 c0       	rjmp	.+2      	; 0x822 <BD76319_ui_process+0x2a>
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	30 93 76 21 	sts	0x2176, r19	; 0x802176 <lui_btn_last_state.5282>
		lui_sequence_running = true;
     826:	21 e0       	ldi	r18, 0x01	; 1
     828:	20 93 75 21 	sts	0x2175, r18	; 0x802175 <lui_sequence_running.5283>
	}

	// Sequence process running each period
	if (SEQUENCE_PERIOD > lui_cpt_sof)
     82c:	86 39       	cpi	r24, 0x96	; 150
     82e:	91 05       	cpc	r25, r1
     830:	08 f4       	brcc	.+2      	; 0x834 <BD76319_ui_process+0x3c>
     832:	4d c0       	rjmp	.+154    	; 0x8ce <BD76319_ui_process+0xd6>
	{
		return;
	}
	lui_cpt_sof = 0;
     834:	10 92 77 21 	sts	0x2177, r1	; 0x802177 <lui_cpt_sof.5286>
     838:	10 92 78 21 	sts	0x2178, r1	; 0x802178 <lui_cpt_sof.5286+0x1>

	if (lui_sequence_running)
     83c:	80 91 75 21 	lds	r24, 0x2175	; 0x802175 <lui_sequence_running.5283>
     840:	88 23       	and	r24, r24
     842:	09 f4       	brne	.+2      	; 0x846 <BD76319_ui_process+0x4e>
     844:	44 c0       	rjmp	.+136    	; 0x8ce <BD76319_ui_process+0xd6>
	{
		// Send next key
		Bd76319_ui_sequence[lui_u8_sequence_pos].u8_value = ui_KeyToReport;
     846:	20 91 74 21 	lds	r18, 0x2174	; 0x802174 <lui_u8_sequence_pos.5284>
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	80 91 79 21 	lds	r24, 0x2179	; 0x802179 <ui_KeyToReport>
     850:	f9 01       	movw	r30, r18
     852:	ee 0f       	add	r30, r30
     854:	ff 1f       	adc	r31, r31
     856:	e2 0f       	add	r30, r18
     858:	f3 1f       	adc	r31, r19
     85a:	ee 5f       	subi	r30, 0xFE	; 254
     85c:	ff 4d       	sbci	r31, 0xDF	; 223
     85e:	82 83       	std	Z+2, r24	; 0x02
		lui_u8_value = Bd76319_ui_sequence[lui_u8_sequence_pos].u8_value;
		if (lui_u8_value!=0)
     860:	88 23       	and	r24, r24
     862:	49 f1       	breq	.+82     	; 0x8b6 <BD76319_ui_process+0xbe>
		{
			if (Bd76319_ui_sequence[lui_u8_sequence_pos].b_modifier)
     864:	f9 01       	movw	r30, r18
     866:	ee 0f       	add	r30, r30
     868:	ff 1f       	adc	r31, r31
     86a:	e2 0f       	add	r30, r18
     86c:	f3 1f       	adc	r31, r19
     86e:	ee 5f       	subi	r30, 0xFE	; 254
     870:	ff 4d       	sbci	r31, 0xDF	; 223
     872:	90 81       	ld	r25, Z
     874:	99 23       	and	r25, r25
     876:	79 f0       	breq	.+30     	; 0x896 <BD76319_ui_process+0x9e>
			{
				if (Bd76319_ui_sequence[lui_u8_sequence_pos].b_down)
     878:	f9 01       	movw	r30, r18
     87a:	ee 0f       	add	r30, r30
     87c:	ff 1f       	adc	r31, r31
     87e:	2e 0f       	add	r18, r30
     880:	3f 1f       	adc	r19, r31
     882:	f9 01       	movw	r30, r18
     884:	ee 5f       	subi	r30, 0xFE	; 254
     886:	ff 4d       	sbci	r31, 0xDF	; 223
     888:	91 81       	ldd	r25, Z+1	; 0x01
     88a:	99 23       	and	r25, r25
     88c:	11 f0       	breq	.+4      	; 0x892 <BD76319_ui_process+0x9a>
				{
					lui_sucess = udi_hid_kbd_modifier_down(lui_u8_value);
     88e:	fd d1       	rcall	.+1018   	; 0xc8a <udi_hid_kbd_modifier_down>
     890:	10 c0       	rjmp	.+32     	; 0x8b2 <BD76319_ui_process+0xba>
				}
				else
				{
					lui_sucess = udi_hid_kbd_modifier_up(lui_u8_value);
     892:	e0 d1       	rcall	.+960    	; 0xc54 <udi_hid_kbd_modifier_up>
     894:	0e c0       	rjmp	.+28     	; 0x8b2 <BD76319_ui_process+0xba>
     896:	f9 01       	movw	r30, r18
				// ui_KeyStatusToReport = false;
				// ui_KeyToReport = false;
			}
			else
			{
				if (Bd76319_ui_sequence[lui_u8_sequence_pos].b_down)
     898:	ee 0f       	add	r30, r30
     89a:	ff 1f       	adc	r31, r31
     89c:	2e 0f       	add	r18, r30
     89e:	3f 1f       	adc	r19, r31
     8a0:	f9 01       	movw	r30, r18
     8a2:	ee 5f       	subi	r30, 0xFE	; 254
     8a4:	ff 4d       	sbci	r31, 0xDF	; 223
     8a6:	91 81       	ldd	r25, Z+1	; 0x01
     8a8:	99 23       	and	r25, r25
     8aa:	11 f0       	breq	.+4      	; 0x8b0 <BD76319_ui_process+0xb8>
				{
					lui_sucess = udi_hid_kbd_down(lui_u8_value);
     8ac:	44 d2       	rcall	.+1160   	; 0xd36 <udi_hid_kbd_down>
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <BD76319_ui_process+0xba>
				} else
				{
					lui_sucess = udi_hid_kbd_up(lui_u8_value);
     8b0:	06 d2       	rcall	.+1036   	; 0xcbe <udi_hid_kbd_up>
     8b2:	88 23       	and	r24, r24
				}
				// ui_KeyStatusToReport = false;
				// ui_KeyToReport = false;
			}
			if (!lui_sucess)
     8b4:	61 f0       	breq	.+24     	; 0x8ce <BD76319_ui_process+0xd6>
     8b6:	80 91 74 21 	lds	r24, 0x2174	; 0x802174 <lui_u8_sequence_pos.5284>
				return; // Retry it on next schedule
			}
		}

		// Valid sequence position
		lui_u8_sequence_pos++;
     8ba:	8f 5f       	subi	r24, 0xFF	; 255
     8bc:	82 30       	cpi	r24, 0x02	; 2
		if (lui_u8_sequence_pos >= sizeof(Bd76319_ui_sequence) / sizeof(Bd76319_ui_sequence[0]))
     8be:	18 f4       	brcc	.+6      	; 0x8c6 <BD76319_ui_process+0xce>
     8c0:	80 93 74 21 	sts	0x2174, r24	; 0x802174 <lui_u8_sequence_pos.5284>
				return; // Retry it on next schedule
			}
		}

		// Valid sequence position
		lui_u8_sequence_pos++;
     8c4:	08 95       	ret
     8c6:	10 92 74 21 	sts	0x2174, r1	; 0x802174 <lui_u8_sequence_pos.5284>
		if (lui_u8_sequence_pos >= sizeof(Bd76319_ui_sequence) / sizeof(Bd76319_ui_sequence[0]))
		{
			lui_u8_sequence_pos = 0;
     8ca:	10 92 75 21 	sts	0x2175, r1	; 0x802175 <lui_sequence_running.5283>
			// ui_KeyStatusToReport = false;
			// ui_KeyToReport = false;
			lui_sequence_running = false;
     8ce:	08 95       	ret

000008d0 <BD76319_ui_kbd_led>:
     8d0:	80 95       	com	r24

// Procedure for Keyboard USB Class - Slightly modified - Refer to Mircrochip example project --> KEYBOARD_EXAMPLE1
void BD76319_ui_kbd_led(uint8_t value)
{
	// Write Alarm information to Alarm LEDs
	PORTA.OUT = ~value;
     8d2:	80 93 04 06 	sts	0x0604, r24	; 0x800604 <__TEXT_REGION_LENGTH__+0x7be604>
     8d6:	08 95       	ret

000008d8 <ui_process>:
}

void ui_process(uint16_t framenumber) {
    joystick();
     8d8:	00 ce       	rjmp	.-1024   	; 0x4da <joystick>
     8da:	08 95       	ret

000008dc <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	27 97       	sbiw	r28, 0x07	; 7
     8ea:	cd bf       	out	0x3d, r28	; 61
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     8f4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     8f8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     8fc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     900:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     904:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     908:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     90c:	65 e0       	ldi	r22, 0x05	; 5
     90e:	81 e4       	ldi	r24, 0x41	; 65
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	d6 d6       	rcall	.+3500   	; 0x16c0 <ccp_write_io>
     914:	6c e1       	ldi	r22, 0x1C	; 28
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	c8 d6       	rcall	.+3472   	; 0x16ac <nvm_read_byte>
     91c:	8a 83       	std	Y+2, r24	; 0x02
     91e:	6d e1       	ldi	r22, 0x1D	; 29
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	82 e0       	ldi	r24, 0x02	; 2
     924:	c3 d6       	rcall	.+3462   	; 0x16ac <nvm_read_byte>
     926:	89 83       	std	Y+1, r24	; 0x01
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	9a 81       	ldd	r25, Y+2	; 0x02
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	21 f4       	brne	.+8      	; 0x938 <sysclk_init+0x5c>
     930:	80 e4       	ldi	r24, 0x40	; 64
     932:	93 e2       	ldi	r25, 0x23	; 35
     934:	89 83       	std	Y+1, r24	; 0x01
     936:	9a 83       	std	Y+2, r25	; 0x02
     938:	89 81       	ldd	r24, Y+1	; 0x01
     93a:	9a 81       	ldd	r25, Y+2	; 0x02
     93c:	8b 83       	std	Y+3, r24	; 0x03
     93e:	9c 83       	std	Y+4, r25	; 0x04
     940:	e0 e6       	ldi	r30, 0x60	; 96
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	82 83       	std	Z+2, r24	; 0x02
     946:	8c 81       	ldd	r24, Y+4	; 0x04
     948:	83 83       	std	Z+3, r24	; 0x03
     94a:	8f b7       	in	r24, 0x3f	; 63
     94c:	8e 83       	std	Y+6, r24	; 0x06
     94e:	f8 94       	cli
     950:	9e 81       	ldd	r25, Y+6	; 0x06
     952:	e0 e5       	ldi	r30, 0x50	; 80
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	80 81       	ld	r24, Z
     958:	82 60       	ori	r24, 0x02	; 2
     95a:	80 83       	st	Z, r24
     95c:	9f bf       	out	0x3f, r25	; 63
     95e:	81 81       	ldd	r24, Z+1	; 0x01
     960:	81 ff       	sbrs	r24, 1
     962:	fd cf       	rjmp	.-6      	; 0x95e <sysclk_init+0x82>
     964:	8f b7       	in	r24, 0x3f	; 63
     966:	8f 83       	std	Y+7, r24	; 0x07
     968:	f8 94       	cli
     96a:	9f 81       	ldd	r25, Y+7	; 0x07
     96c:	00 e5       	ldi	r16, 0x50	; 80
     96e:	10 e0       	ldi	r17, 0x00	; 0
     970:	d8 01       	movw	r26, r16
     972:	16 96       	adiw	r26, 0x06	; 6
     974:	8c 91       	ld	r24, X
     976:	16 97       	sbiw	r26, 0x06	; 6
     978:	89 7f       	andi	r24, 0xF9	; 249
     97a:	16 96       	adiw	r26, 0x06	; 6
     97c:	8c 93       	st	X, r24
     97e:	16 97       	sbiw	r26, 0x06	; 6
     980:	e0 e6       	ldi	r30, 0x60	; 96
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 e8       	ldi	r24, 0x80	; 128
     986:	85 83       	std	Z+5, r24	; 0x05
     988:	8b eb       	ldi	r24, 0xBB	; 187
     98a:	86 83       	std	Z+6, r24	; 0x06
     98c:	16 96       	adiw	r26, 0x06	; 6
     98e:	8c 91       	ld	r24, X
     990:	16 97       	sbiw	r26, 0x06	; 6
     992:	84 60       	ori	r24, 0x04	; 4
     994:	16 96       	adiw	r26, 0x06	; 6
     996:	8c 93       	st	X, r24
     998:	80 81       	ld	r24, Z
     99a:	81 60       	ori	r24, 0x01	; 1
     99c:	80 83       	st	Z, r24
     99e:	9f bf       	out	0x3f, r25	; 63
     9a0:	61 e0       	ldi	r22, 0x01	; 1
     9a2:	80 e4       	ldi	r24, 0x40	; 64
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	8c d6       	rcall	.+3352   	; 0x16c0 <ccp_write_io>
     9a8:	8f b7       	in	r24, 0x3f	; 63
     9aa:	8d 83       	std	Y+5, r24	; 0x05
     9ac:	f8 94       	cli
     9ae:	9d 81       	ldd	r25, Y+5	; 0x05
     9b0:	f8 01       	movw	r30, r16
     9b2:	80 81       	ld	r24, Z
     9b4:	8e 7f       	andi	r24, 0xFE	; 254
     9b6:	80 83       	st	Z, r24
     9b8:	9f bf       	out	0x3f, r25	; 63
     9ba:	27 96       	adiw	r28, 0x07	; 7
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	de bf       	out	0x3e, r29	; 62
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	08 95       	ret

000009ca <sysclk_enable_module>:
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	1f 92       	push	r1
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	9f b7       	in	r25, 0x3f	; 63
     9d6:	99 83       	std	Y+1, r25	; 0x01
     9d8:	f8 94       	cli
     9da:	99 81       	ldd	r25, Y+1	; 0x01
     9dc:	e8 2f       	mov	r30, r24
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	e0 59       	subi	r30, 0x90	; 144
     9e2:	ff 4f       	sbci	r31, 0xFF	; 255
     9e4:	60 95       	com	r22
     9e6:	80 81       	ld	r24, Z
     9e8:	68 23       	and	r22, r24
     9ea:	60 83       	st	Z, r22
     9ec:	9f bf       	out	0x3f, r25	; 63
     9ee:	0f 90       	pop	r0
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	1f 92       	push	r1
     9fc:	1f 92       	push	r1
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     a02:	86 30       	cpi	r24, 0x06	; 6
     a04:	11 f0       	breq	.+4      	; 0xa0a <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	01 c0       	rjmp	.+2      	; 0xa0c <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     a0a:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     a0c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     a10:	81 fd       	sbrc	r24, 1
     a12:	2a c0       	rjmp	.+84     	; 0xa68 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a14:	8f b7       	in	r24, 0x3f	; 63
     a16:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     a18:	f8 94       	cli
	return flags;
     a1a:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     a1c:	e0 e5       	ldi	r30, 0x50	; 80
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	82 60       	ori	r24, 0x02	; 2
     a24:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a26:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     a28:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     a2a:	81 ff       	sbrs	r24, 1
     a2c:	fd cf       	rjmp	.-6      	; 0xa28 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a2e:	8f b7       	in	r24, 0x3f	; 63
     a30:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     a32:	f8 94       	cli
	return flags;
     a34:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     a36:	a0 e5       	ldi	r26, 0x50	; 80
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	16 96       	adiw	r26, 0x06	; 6
     a3c:	8c 91       	ld	r24, X
     a3e:	16 97       	sbiw	r26, 0x06	; 6
     a40:	89 7f       	andi	r24, 0xF9	; 249
     a42:	16 96       	adiw	r26, 0x06	; 6
     a44:	8c 93       	st	X, r24
     a46:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     a48:	e0 e6       	ldi	r30, 0x60	; 96
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 e8       	ldi	r24, 0x80	; 128
     a4e:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     a50:	8b eb       	ldi	r24, 0xBB	; 187
     a52:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     a54:	16 96       	adiw	r26, 0x06	; 6
     a56:	8c 91       	ld	r24, X
     a58:	16 97       	sbiw	r26, 0x06	; 6
     a5a:	84 60       	ori	r24, 0x04	; 4
     a5c:	16 96       	adiw	r26, 0x06	; 6
     a5e:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     a60:	80 81       	ld	r24, Z
     a62:	81 60       	ori	r24, 0x01	; 1
     a64:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a66:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     a68:	63 60       	ori	r22, 0x03	; 3
     a6a:	84 e4       	ldi	r24, 0x44	; 68
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	28 d6       	rcall	.+3152   	; 0x16c0 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     a70:	60 e4       	ldi	r22, 0x40	; 64
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	aa df       	rcall	.-172    	; 0x9ca <sysclk_enable_module>
}
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	08 95       	ret

00000a84 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     a84:	30 91 0e 23 	lds	r19, 0x230E	; 0x80230e <udd_g_ctrlreq+0x2>
     a88:	20 91 0f 23 	lds	r18, 0x230F	; 0x80230f <udd_g_ctrlreq+0x3>
     a8c:	82 2f       	mov	r24, r18
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	03 97       	sbiw	r24, 0x03	; 3
     a92:	b1 f4       	brne	.+44     	; 0xac0 <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     a94:	31 11       	cpse	r19, r1
     a96:	16 c0       	rjmp	.+44     	; 0xac4 <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
     a98:	80 91 12 23 	lds	r24, 0x2312	; 0x802312 <udd_g_ctrlreq+0x6>
     a9c:	90 91 13 23 	lds	r25, 0x2313	; 0x802313 <udd_g_ctrlreq+0x7>
     aa0:	89 2b       	or	r24, r25
     aa2:	91 f4       	brne	.+36     	; 0xac8 <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     aa4:	ec e0       	ldi	r30, 0x0C	; 12
     aa6:	f3 e2       	ldi	r31, 0x23	; 35
     aa8:	8c e7       	ldi	r24, 0x7C	; 124
     aaa:	91 e2       	ldi	r25, 0x21	; 33
     aac:	80 87       	std	Z+8, r24	; 0x08
     aae:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     ab0:	86 e6       	ldi	r24, 0x66	; 102
     ab2:	95 e0       	ldi	r25, 0x05	; 5
     ab4:	84 87       	std	Z+12, r24	; 0x0c
     ab6:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
     ab8:	12 86       	std	Z+10, r1	; 0x0a
     aba:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	08 95       	ret
	}
	return false;
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	08 95       	ret
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	08 95       	ret
     ac8:	80 e0       	ldi	r24, 0x00	; 0
}
     aca:	08 95       	ret

00000acc <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
     acc:	08 95       	ret

00000ace <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <udi_hid_generic_b_report_in_free>
     ad4:	08 95       	ret

00000ad6 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
     ad6:	10 92 82 21 	sts	0x2182, r1	; 0x802182 <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
     ada:	10 92 80 21 	sts	0x2180, r1	; 0x802180 <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
     ae4:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <main_generic_enable>
}
     ae8:	08 95       	ret

00000aea <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
     aea:	0c 94 5f 13 	jmp	0x26be	; 0x26be <main_generic_disable>
     aee:	08 95       	ret

00000af0 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
     af0:	22 e4       	ldi	r18, 0x42	; 66
     af2:	35 e0       	ldi	r19, 0x05	; 5
     af4:	44 e6       	ldi	r20, 0x64	; 100
     af6:	50 e2       	ldi	r21, 0x20	; 32
     af8:	60 e8       	ldi	r22, 0x80	; 128
     afa:	71 e2       	ldi	r23, 0x21	; 33
     afc:	82 e8       	ldi	r24, 0x82	; 130
     afe:	91 e2       	ldi	r25, 0x21	; 33
     b00:	4e c1       	rjmp	.+668    	; 0xd9e <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
     b02:	08 95       	ret

00000b04 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
     b04:	ff 92       	push	r15
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	1f 92       	push	r1
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
     b16:	80 91 7e 21 	lds	r24, 0x217E	; 0x80217e <udi_hid_generic_b_report_in_free>
     b1a:	88 23       	and	r24, r24
     b1c:	09 f1       	breq	.+66     	; 0xb60 <udi_hid_generic_send_report_in+0x5c>
     b1e:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b20:	8f b7       	in	r24, 0x3f	; 63
     b22:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b24:	f8 94       	cli
	return flags;
     b26:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
     b28:	10 92 7c 21 	sts	0x217C, r1	; 0x80217c <udi_hid_generic_report_feature>
     b2c:	10 92 7d 21 	sts	0x217D, r1	; 0x80217d <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
     b30:	80 81       	ld	r24, Z
     b32:	91 81       	ldd	r25, Z+1	; 0x01
     b34:	80 93 7c 21 	sts	0x217C, r24	; 0x80217c <udi_hid_generic_report_feature>
     b38:	90 93 7d 21 	sts	0x217D, r25	; 0x80217d <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     b3c:	07 e6       	ldi	r16, 0x67	; 103
     b3e:	15 e0       	ldi	r17, 0x05	; 5
     b40:	22 e0       	ldi	r18, 0x02	; 2
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	4c e7       	ldi	r20, 0x7C	; 124
     b46:	51 e2       	ldi	r21, 0x21	; 33
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	82 e8       	ldi	r24, 0x82	; 130
     b4c:	0e 94 24 10 	call	0x2048	; 0x2048 <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	89 27       	eor	r24, r25
     b54:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b58:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
     b5a:	80 91 7e 21 	lds	r24, 0x217E	; 0x80217e <udi_hid_generic_b_report_in_free>
     b5e:	89 27       	eor	r24, r25

}
     b60:	0f 90       	pop	r0
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	08 95       	ret

00000b6e <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
	return 0;
}
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	08 95       	ret

00000b72 <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
     b72:	30 91 0e 23 	lds	r19, 0x230E	; 0x80230e <udd_g_ctrlreq+0x2>
     b76:	20 91 0f 23 	lds	r18, 0x230F	; 0x80230f <udd_g_ctrlreq+0x3>
     b7a:	82 2f       	mov	r24, r18
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	02 97       	sbiw	r24, 0x02	; 2
     b80:	b9 f4       	brne	.+46     	; 0xbb0 <udi_hid_kbd_setreport+0x3e>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     b82:	31 11       	cpse	r19, r1
     b84:	17 c0       	rjmp	.+46     	; 0xbb4 <udi_hid_kbd_setreport+0x42>
			&& (1 == udd_g_ctrlreq.req.wLength)) {
     b86:	80 91 12 23 	lds	r24, 0x2312	; 0x802312 <udd_g_ctrlreq+0x6>
     b8a:	90 91 13 23 	lds	r25, 0x2313	; 0x802313 <udd_g_ctrlreq+0x7>
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	99 f4       	brne	.+38     	; 0xbb8 <udi_hid_kbd_setreport+0x46>
		// Report OUT type on report ID 0 from USB Host
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
     b92:	ec e0       	ldi	r30, 0x0C	; 12
     b94:	f3 e2       	ldi	r31, 0x23	; 35
     b96:	86 e9       	ldi	r24, 0x96	; 150
     b98:	91 e2       	ldi	r25, 0x21	; 33
     b9a:	80 87       	std	Z+8, r24	; 0x08
     b9c:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
     b9e:	8d ef       	ldi	r24, 0xFD	; 253
     ba0:	95 e0       	ldi	r25, 0x05	; 5
     ba2:	84 87       	std	Z+12, r24	; 0x0c
     ba4:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size = 1;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	82 87       	std	Z+10, r24	; 0x0a
     bac:	93 87       	std	Z+11, r25	; 0x0b
		return true;
     bae:	08 95       	ret
	}
	return false;
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	08 95       	ret
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	08 95       	ret
     bb8:	80 e0       	ldi	r24, 0x00	; 0
}
     bba:	08 95       	ret

00000bbc <udi_hid_kbd_enable>:
//------ Interface for UDI HID level

bool udi_hid_kbd_enable(void)
{
	// Initialize internal values
	udi_hid_kbd_rate = 0;
     bbc:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <udi_hid_kbd_rate>
	udi_hid_kbd_protocol = 0;
     bc0:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <udi_hid_kbd_protocol>
	udi_hid_kbd_b_report_trans_ongoing = false;
     bc4:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <udi_hid_kbd_b_report_trans_ongoing>
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
     bc8:	88 e0       	ldi	r24, 0x08	; 8
     bca:	ed e8       	ldi	r30, 0x8D	; 141
     bcc:	f1 e2       	ldi	r31, 0x21	; 33
     bce:	df 01       	movw	r26, r30
     bd0:	1d 92       	st	X+, r1
     bd2:	8a 95       	dec	r24
     bd4:	e9 f7       	brne	.-6      	; 0xbd0 <udi_hid_kbd_enable+0x14>
	udi_hid_kbd_b_report_valid = false;
     bd6:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <udi_hid_kbd_b_report_valid>
	return UDI_HID_KBD_ENABLE_EXT();
     bda:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <main_kbd_enable>
}
     bde:	08 95       	ret

00000be0 <udi_hid_kbd_disable>:


void udi_hid_kbd_disable(void)
{
	UDI_HID_KBD_DISABLE_EXT();
     be0:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <main_kbd_disable>
     be4:	08 95       	ret

00000be6 <udi_hid_kbd_setup>:
}


bool udi_hid_kbd_setup(void)
{
	return udi_hid_setup(&udi_hid_kbd_rate,
     be6:	29 eb       	ldi	r18, 0xB9	; 185
     be8:	35 e0       	ldi	r19, 0x05	; 5
     bea:	49 e8       	ldi	r20, 0x89	; 137
     bec:	50 e2       	ldi	r21, 0x20	; 32
     bee:	68 e9       	ldi	r22, 0x98	; 152
     bf0:	71 e2       	ldi	r23, 0x21	; 33
     bf2:	8a e9       	ldi	r24, 0x9A	; 154
     bf4:	91 e2       	ldi	r25, 0x21	; 33
     bf6:	d3 c0       	rjmp	.+422    	; 0xd9e <udi_hid_setup>
								&udi_hid_kbd_protocol,
								(uint8_t *) &udi_hid_kbd_report_desc,
								udi_hid_kbd_setreport);
}
     bf8:	08 95       	ret

00000bfa <udi_hid_kbd_setreport_valid>:
	}
}

static void udi_hid_kbd_setreport_valid(void)
{
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
     bfa:	80 91 96 21 	lds	r24, 0x2196	; 0x802196 <udi_hid_kbd_report_set>
     bfe:	68 ce       	rjmp	.-816    	; 0x8d0 <BD76319_ui_kbd_led>
     c00:	08 95       	ret

00000c02 <udi_hid_kbd_send_report>:

//--------------------------------------------
//------ Internal routines

static bool udi_hid_kbd_send_report(void)
{
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
	if (udi_hid_kbd_b_report_trans_ongoing)
     c06:	80 91 8c 21 	lds	r24, 0x218C	; 0x80218c <udi_hid_kbd_b_report_trans_ongoing>
     c0a:	81 11       	cpse	r24, r1
     c0c:	18 c0       	rjmp	.+48     	; 0xc3e <udi_hid_kbd_send_report+0x3c>
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
     c0e:	88 e0       	ldi	r24, 0x08	; 8
     c10:	ed e8       	ldi	r30, 0x8D	; 141
     c12:	f1 e2       	ldi	r31, 0x21	; 33
     c14:	a4 e8       	ldi	r26, 0x84	; 132
     c16:	b1 e2       	ldi	r27, 0x21	; 33
     c18:	01 90       	ld	r0, Z+
     c1a:	0d 92       	st	X+, r0
     c1c:	8a 95       	dec	r24
     c1e:	e1 f7       	brne	.-8      	; 0xc18 <udi_hid_kbd_send_report+0x16>
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
     c20:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <udi_hid_kbd_b_report_valid>
	udi_hid_kbd_b_report_trans_ongoing =
			udd_ep_run(	UDI_HID_KBD_EP_IN,
     c24:	03 e2       	ldi	r16, 0x23	; 35
     c26:	16 e0       	ldi	r17, 0x06	; 6
     c28:	28 e0       	ldi	r18, 0x08	; 8
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	44 e8       	ldi	r20, 0x84	; 132
     c2e:	51 e2       	ldi	r21, 0x21	; 33
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	81 e8       	ldi	r24, 0x81	; 129
     c34:	0e 94 24 10 	call	0x2048	; 0x2048 <udd_ep_run>
	if (udi_hid_kbd_b_report_trans_ongoing)
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
	udi_hid_kbd_b_report_trans_ongoing =
     c38:	80 93 8c 21 	sts	0x218C, r24	; 0x80218c <udi_hid_kbd_b_report_trans_ongoing>
			udd_ep_run(	UDI_HID_KBD_EP_IN,
							false,
							udi_hid_kbd_report_trans,
							UDI_HID_KBD_REPORT_SIZE,
							udi_hid_kbd_report_sent);
	return udi_hid_kbd_b_report_trans_ongoing;
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <udi_hid_kbd_send_report+0x3e>
//------ Internal routines

static bool udi_hid_kbd_send_report(void)
{
	if (udi_hid_kbd_b_report_trans_ongoing)
		return false;
     c3e:	80 e0       	ldi	r24, 0x00	; 0
							false,
							udi_hid_kbd_report_trans,
							UDI_HID_KBD_REPORT_SIZE,
							udi_hid_kbd_report_sent);
	return udi_hid_kbd_b_report_trans_ongoing;
}
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	08 95       	ret

00000c46 <udi_hid_kbd_report_sent>:
		udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_kbd_b_report_trans_ongoing = false;
     c46:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <udi_hid_kbd_b_report_trans_ongoing>
	if (udi_hid_kbd_b_report_valid) {
     c4a:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <udi_hid_kbd_b_report_valid>
     c4e:	81 11       	cpse	r24, r1
		udi_hid_kbd_send_report();
     c50:	d8 cf       	rjmp	.-80     	; 0xc02 <udi_hid_kbd_send_report>
     c52:	08 95       	ret

00000c54 <udi_hid_kbd_modifier_up>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_kbd_modifier_up(uint8_t modifier_id)
{
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	1f 92       	push	r1
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c60:	9f b7       	in	r25, 0x3f	; 63
     c62:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     c64:	f8 94       	cli
	return flags;
     c66:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	// Fill report
	udi_hid_kbd_report[0] &= ~(unsigned)modifier_id;
     c68:	ed e8       	ldi	r30, 0x8D	; 141
     c6a:	f1 e2       	ldi	r31, 0x21	; 33
     c6c:	80 95       	com	r24
     c6e:	90 81       	ld	r25, Z
     c70:	89 23       	and	r24, r25
     c72:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
     c7a:	c3 df       	rcall	.-122    	; 0xc02 <udi_hid_kbd_send_report>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c7c:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	0f 90       	pop	r0
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	08 95       	ret

00000c8a <udi_hid_kbd_modifier_down>:


bool udi_hid_kbd_modifier_down(uint8_t modifier_id)
{
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	1f 92       	push	r1
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c96:	9f b7       	in	r25, 0x3f	; 63
     c98:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     c9a:	f8 94       	cli
	return flags;
     c9c:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	// Fill report
	udi_hid_kbd_report[0] |= modifier_id;
     c9e:	ed e8       	ldi	r30, 0x8D	; 141
     ca0:	f1 e2       	ldi	r31, 0x21	; 33
     ca2:	90 81       	ld	r25, Z
     ca4:	89 2b       	or	r24, r25
     ca6:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
     cae:	a9 df       	rcall	.-174    	; 0xc02 <udi_hid_kbd_send_report>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cb0:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	0f 90       	pop	r0
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	08 95       	ret

00000cbe <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	1f 92       	push	r1
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     cca:	9f b7       	in	r25, 0x3f	; 63
     ccc:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     cce:	f8 94       	cli
	return flags;
     cd0:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
     cd2:	90 91 8f 21 	lds	r25, 0x218F	; 0x80218f <udi_hid_kbd_report+0x2>
     cd6:	99 23       	and	r25, r25
     cd8:	41 f0       	breq	.+16     	; 0xcea <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
     cda:	89 17       	cp	r24, r25
     cdc:	a9 f0       	breq	.+42     	; 0xd08 <udi_hid_kbd_up+0x4a>
     cde:	e0 e9       	ldi	r30, 0x90	; 144
     ce0:	f1 e2       	ldi	r31, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     ce2:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
     ce4:	21 91       	ld	r18, Z+
     ce6:	21 11       	cpse	r18, r1
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     cea:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
     cec:	1e c0       	rjmp	.+60     	; 0xd2a <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
     cee:	28 17       	cp	r18, r24
     cf0:	21 f0       	breq	.+8      	; 0xcfa <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     cf2:	9f 5f       	subi	r25, 0xFF	; 255
     cf4:	98 30       	cpi	r25, 0x08	; 8
     cf6:	b1 f7       	brne	.-20     	; 0xce4 <udi_hid_kbd_up+0x26>
     cf8:	05 c0       	rjmp	.+10     	; 0xd04 <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
     cfa:	98 30       	cpi	r25, 0x08	; 8
     cfc:	19 f0       	breq	.+6      	; 0xd04 <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
     cfe:	97 30       	cpi	r25, 0x07	; 7
     d00:	20 f0       	brcs	.+8      	; 0xd0a <udi_hid_kbd_up+0x4c>
     d02:	0c c0       	rjmp	.+24     	; 0xd1c <udi_hid_kbd_up+0x5e>
     d04:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
     d06:	11 c0       	rjmp	.+34     	; 0xd2a <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     d08:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
     d0a:	e9 2f       	mov	r30, r25
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	e3 57       	subi	r30, 0x73	; 115
     d10:	fe 4d       	sbci	r31, 0xDE	; 222
     d12:	81 81       	ldd	r24, Z+1	; 0x01
     d14:	80 83       	st	Z, r24
		i++;
     d16:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
     d18:	97 30       	cpi	r25, 0x07	; 7
     d1a:	b9 f7       	brne	.-18     	; 0xd0a <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
     d1c:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
     d26:	6d df       	rcall	.-294    	; 0xc02 <udi_hid_kbd_send_report>
     d28:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	0f 90       	pop	r0
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	1f 92       	push	r1
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     d42:	9f b7       	in	r25, 0x3f	; 63
     d44:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     d46:	f8 94       	cli
	return flags;
     d48:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
     d4a:	90 91 8f 21 	lds	r25, 0x218F	; 0x80218f <udi_hid_kbd_report+0x2>
     d4e:	99 23       	and	r25, r25
     d50:	b1 f0       	breq	.+44     	; 0xd7e <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
     d52:	89 17       	cp	r24, r25
     d54:	41 f0       	breq	.+16     	; 0xd66 <udi_hid_kbd_down+0x30>
     d56:	a0 e9       	ldi	r26, 0x90	; 144
     d58:	b1 e2       	ldi	r27, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     d5a:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
     d5c:	9d 91       	ld	r25, X+
     d5e:	99 23       	and	r25, r25
     d60:	49 f0       	breq	.+18     	; 0xd74 <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
     d62:	98 13       	cpse	r25, r24
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d66:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	14 c0       	rjmp	.+40     	; 0xd94 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     d6c:	ef 5f       	subi	r30, 0xFF	; 255
     d6e:	e8 30       	cpi	r30, 0x08	; 8
     d70:	a9 f7       	brne	.-22     	; 0xd5c <udi_hid_kbd_down+0x26>
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
     d74:	e8 30       	cpi	r30, 0x08	; 8
     d76:	21 f4       	brne	.+8      	; 0xd80 <udi_hid_kbd_down+0x4a>
     d78:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	0b c0       	rjmp	.+22     	; 0xd94 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
     d7e:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	e3 57       	subi	r30, 0x73	; 115
     d84:	fe 4d       	sbci	r31, 0xDE	; 222
     d86:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	80 93 95 21 	sts	0x2195, r24	; 0x802195 <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
     d8e:	39 df       	rcall	.-398    	; 0xc02 <udi_hid_kbd_send_report>
     d90:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
     d92:	81 e0       	ldi	r24, 0x01	; 1
}
     d94:	0f 90       	pop	r0
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	08 95       	ret

00000d9e <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	dc 01       	movw	r26, r24
     da4:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
     da6:	90 91 0c 23 	lds	r25, 0x230C	; 0x80230c <udd_g_ctrlreq>
     daa:	99 23       	and	r25, r25
     dac:	0c f0       	brlt	.+2      	; 0xdb0 <udi_hid_setup+0x12>
     dae:	68 c0       	rjmp	.+208    	; 0xe80 <udi_hid_setup+0xe2>
     db0:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     db2:	09 f0       	breq	.+2      	; 0xdb6 <udi_hid_setup+0x18>
     db4:	45 c0       	rjmp	.+138    	; 0xe40 <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     db6:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <udd_g_ctrlreq+0x1>
     dba:	86 30       	cpi	r24, 0x06	; 6
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <udi_hid_setup+0x22>
     dbe:	40 c0       	rjmp	.+128    	; 0xe40 <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
     dc0:	76 d1       	rcall	.+748    	; 0x10ae <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     dc2:	dc 01       	movw	r26, r24
     dc4:	1a 96       	adiw	r26, 0x0a	; 10
     dc6:	2c 91       	ld	r18, X
     dc8:	1a 97       	sbiw	r26, 0x0a	; 10
     dca:	21 32       	cpi	r18, 0x21	; 33
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <udi_hid_setup+0x32>
     dce:	77 c0       	rjmp	.+238    	; 0xebe <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     dd0:	20 91 0f 23 	lds	r18, 0x230F	; 0x80230f <udd_g_ctrlreq+0x3>
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	21 32       	cpi	r18, 0x21	; 33
     dd8:	31 05       	cpc	r19, r1
     dda:	b1 f4       	brne	.+44     	; 0xe08 <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     ddc:	9c 01       	movw	r18, r24
     dde:	27 5f       	subi	r18, 0xF7	; 247
     de0:	3f 4f       	sbci	r19, 0xFF	; 255
     de2:	20 93 14 23 	sts	0x2314, r18	; 0x802314 <udd_g_ctrlreq+0x8>
     de6:	30 93 15 23 	sts	0x2315, r19	; 0x802315 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
     dea:	ec e0       	ldi	r30, 0x0C	; 12
     dec:	f3 e2       	ldi	r31, 0x23	; 35
     dee:	19 96       	adiw	r26, 0x09	; 9
     df0:	8c 91       	ld	r24, X
     df2:	26 81       	ldd	r18, Z+6	; 0x06
     df4:	37 81       	ldd	r19, Z+7	; 0x07
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	28 17       	cp	r18, r24
     dfa:	39 07       	cpc	r19, r25
     dfc:	08 f4       	brcc	.+2      	; 0xe00 <udi_hid_setup+0x62>
     dfe:	c9 01       	movw	r24, r18
     e00:	82 87       	std	Z+10, r24	; 0x0a
     e02:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	68 c0       	rjmp	.+208    	; 0xed8 <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     e08:	fc 01       	movw	r30, r24
     e0a:	47 85       	ldd	r20, Z+15	; 0x0f
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	42 17       	cp	r20, r18
     e10:	53 07       	cpc	r21, r19
     e12:	09 f0       	breq	.+2      	; 0xe16 <udi_hid_setup+0x78>
     e14:	56 c0       	rjmp	.+172    	; 0xec2 <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
     e16:	c0 93 14 23 	sts	0x2314, r28	; 0x802314 <udd_g_ctrlreq+0x8>
     e1a:	d0 93 15 23 	sts	0x2315, r29	; 0x802315 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
     e1e:	ec e0       	ldi	r30, 0x0C	; 12
     e20:	f3 e2       	ldi	r31, 0x23	; 35
     e22:	26 81       	ldd	r18, Z+6	; 0x06
     e24:	37 81       	ldd	r19, Z+7	; 0x07
     e26:	dc 01       	movw	r26, r24
     e28:	50 96       	adiw	r26, 0x10	; 16
     e2a:	8d 91       	ld	r24, X+
     e2c:	9c 91       	ld	r25, X
     e2e:	51 97       	sbiw	r26, 0x11	; 17
     e30:	28 17       	cp	r18, r24
     e32:	39 07       	cpc	r19, r25
     e34:	08 f4       	brcc	.+2      	; 0xe38 <udi_hid_setup+0x9a>
     e36:	c9 01       	movw	r24, r18
     e38:	82 87       	std	Z+10, r24	; 0x0a
     e3a:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	4c c0       	rjmp	.+152    	; 0xed8 <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     e40:	90 32       	cpi	r25, 0x20	; 32
     e42:	09 f0       	breq	.+2      	; 0xe46 <udi_hid_setup+0xa8>
     e44:	40 c0       	rjmp	.+128    	; 0xec6 <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     e46:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <udd_g_ctrlreq+0x1>
     e4a:	82 30       	cpi	r24, 0x02	; 2
     e4c:	39 f0       	breq	.+14     	; 0xe5c <udi_hid_setup+0xbe>
     e4e:	83 30       	cpi	r24, 0x03	; 3
     e50:	71 f0       	breq	.+28     	; 0xe6e <udi_hid_setup+0xd0>
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	d1 f5       	brne	.+116    	; 0xeca <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
     e56:	f9 01       	movw	r30, r18
     e58:	19 95       	eicall
     e5a:	3e c0       	rjmp	.+124    	; 0xed8 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
     e5c:	ec e0       	ldi	r30, 0x0C	; 12
     e5e:	f3 e2       	ldi	r31, 0x23	; 35
     e60:	a0 87       	std	Z+8, r26	; 0x08
     e62:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	82 87       	std	Z+10, r24	; 0x0a
     e6a:	93 87       	std	Z+11, r25	; 0x0b
				return true;
     e6c:	35 c0       	rjmp	.+106    	; 0xed8 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
     e6e:	ec e0       	ldi	r30, 0x0C	; 12
     e70:	f3 e2       	ldi	r31, 0x23	; 35
     e72:	60 87       	std	Z+8, r22	; 0x08
     e74:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	82 87       	std	Z+10, r24	; 0x0a
     e7c:	93 87       	std	Z+11, r25	; 0x0b
				return true;
     e7e:	2c c0       	rjmp	.+88     	; 0xed8 <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     e80:	90 76       	andi	r25, 0x60	; 96
     e82:	90 32       	cpi	r25, 0x20	; 32
     e84:	21 f5       	brne	.+72     	; 0xece <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     e86:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <udd_g_ctrlreq+0x1>
     e8a:	8a 30       	cpi	r24, 0x0A	; 10
     e8c:	39 f0       	breq	.+14     	; 0xe9c <udi_hid_setup+0xfe>
     e8e:	8b 30       	cpi	r24, 0x0B	; 11
     e90:	51 f0       	breq	.+20     	; 0xea6 <udi_hid_setup+0x108>
     e92:	89 30       	cpi	r24, 0x09	; 9
     e94:	f1 f4       	brne	.+60     	; 0xed2 <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
     e96:	f9 01       	movw	r30, r18
     e98:	19 95       	eicall
     e9a:	1e c0       	rjmp	.+60     	; 0xed8 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
     e9c:	80 91 0f 23 	lds	r24, 0x230F	; 0x80230f <udd_g_ctrlreq+0x3>
     ea0:	8c 93       	st	X, r24
				return true;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	19 c0       	rjmp	.+50     	; 0xed8 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
     ea6:	80 91 12 23 	lds	r24, 0x2312	; 0x802312 <udd_g_ctrlreq+0x6>
     eaa:	90 91 13 23 	lds	r25, 0x2313	; 0x802313 <udd_g_ctrlreq+0x7>
     eae:	89 2b       	or	r24, r25
     eb0:	91 f4       	brne	.+36     	; 0xed6 <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
     eb2:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <udd_g_ctrlreq+0x2>
     eb6:	db 01       	movw	r26, r22
     eb8:	8c 93       	st	X, r24
				return true;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	0d c0       	rjmp	.+26     	; 0xed8 <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	0b c0       	rjmp	.+22     	; 0xed8 <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	09 c0       	rjmp	.+18     	; 0xed8 <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	07 c0       	rjmp	.+14     	; 0xed8 <udi_hid_setup+0x13a>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	05 c0       	rjmp	.+10     	; 0xed8 <udi_hid_setup+0x13a>
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	03 c0       	rjmp	.+6      	; 0xed8 <udi_hid_setup+0x13a>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
     ed6:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     ede:	e0 91 a0 21 	lds	r30, 0x21A0	; 0x8021a0 <udc_ptr_conf>
     ee2:	f0 91 a1 21 	lds	r31, 0x21A1	; 0x8021a1 <udc_ptr_conf+0x1>
     ee6:	01 90       	ld	r0, Z+
     ee8:	f0 81       	ld	r31, Z
     eea:	e0 2d       	mov	r30, r0
     eec:	22 81       	ldd	r18, Z+2	; 0x02
     eee:	33 81       	ldd	r19, Z+3	; 0x03
     ef0:	2e 0f       	add	r18, r30
     ef2:	3f 1f       	adc	r19, r31
     ef4:	fc 01       	movw	r30, r24
     ef6:	40 81       	ld	r20, Z
     ef8:	e4 0f       	add	r30, r20
     efa:	f1 1d       	adc	r31, r1
     efc:	e2 17       	cp	r30, r18
     efe:	f3 07       	cpc	r31, r19
     f00:	a0 f4       	brcc	.+40     	; 0xf2a <udc_next_desc_in_iface+0x4c>
     f02:	81 81       	ldd	r24, Z+1	; 0x01
     f04:	84 30       	cpi	r24, 0x04	; 4
     f06:	a1 f0       	breq	.+40     	; 0xf30 <udc_next_desc_in_iface+0x52>
     f08:	86 13       	cpse	r24, r22
     f0a:	06 c0       	rjmp	.+12     	; 0xf18 <udc_next_desc_in_iface+0x3a>
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <udc_next_desc_in_iface+0x58>
     f0e:	81 81       	ldd	r24, Z+1	; 0x01
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	a1 f0       	breq	.+40     	; 0xf3c <udc_next_desc_in_iface+0x5e>
     f14:	86 17       	cp	r24, r22
     f16:	a9 f0       	breq	.+42     	; 0xf42 <udc_next_desc_in_iface+0x64>
     f18:	80 81       	ld	r24, Z
     f1a:	e8 0f       	add	r30, r24
     f1c:	f1 1d       	adc	r31, r1
     f1e:	e2 17       	cp	r30, r18
     f20:	f3 07       	cpc	r31, r19
     f22:	a8 f3       	brcs	.-22     	; 0xf0e <udc_next_desc_in_iface+0x30>
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	08 95       	ret
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	08 95       	ret
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	08 95       	ret
     f36:	8e 2f       	mov	r24, r30
     f38:	9f 2f       	mov	r25, r31
     f3a:	08 95       	ret
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	08 95       	ret
     f42:	8e 2f       	mov	r24, r30
     f44:	9f 2f       	mov	r25, r31
     f46:	08 95       	ret

00000f48 <udc_valid_address>:
     f48:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <udd_g_ctrlreq+0x2>
     f4c:	8f 77       	andi	r24, 0x7F	; 127
     f4e:	7c c7       	rjmp	.+3832   	; 0x1e48 <udd_set_address>
     f50:	08 95       	ret

00000f52 <udc_update_iface_desc>:
     f52:	90 91 a2 21 	lds	r25, 0x21A2	; 0x8021a2 <udc_num_configuration>
     f56:	99 23       	and	r25, r25
     f58:	81 f1       	breq	.+96     	; 0xfba <udc_update_iface_desc+0x68>
     f5a:	e0 91 a0 21 	lds	r30, 0x21A0	; 0x8021a0 <udc_ptr_conf>
     f5e:	f0 91 a1 21 	lds	r31, 0x21A1	; 0x8021a1 <udc_ptr_conf+0x1>
     f62:	01 90       	ld	r0, Z+
     f64:	f0 81       	ld	r31, Z
     f66:	e0 2d       	mov	r30, r0
     f68:	94 81       	ldd	r25, Z+4	; 0x04
     f6a:	89 17       	cp	r24, r25
     f6c:	40 f5       	brcc	.+80     	; 0xfbe <udc_update_iface_desc+0x6c>
     f6e:	e0 93 9e 21 	sts	0x219E, r30	; 0x80219e <udc_ptr_iface>
     f72:	f0 93 9f 21 	sts	0x219F, r31	; 0x80219f <udc_ptr_iface+0x1>
     f76:	22 81       	ldd	r18, Z+2	; 0x02
     f78:	33 81       	ldd	r19, Z+3	; 0x03
     f7a:	2e 0f       	add	r18, r30
     f7c:	3f 1f       	adc	r19, r31
     f7e:	e2 17       	cp	r30, r18
     f80:	f3 07       	cpc	r31, r19
     f82:	f8 f4       	brcc	.+62     	; 0xfc2 <udc_update_iface_desc+0x70>
     f84:	91 81       	ldd	r25, Z+1	; 0x01
     f86:	94 30       	cpi	r25, 0x04	; 4
     f88:	61 f4       	brne	.+24     	; 0xfa2 <udc_update_iface_desc+0x50>
     f8a:	92 81       	ldd	r25, Z+2	; 0x02
     f8c:	89 13       	cpse	r24, r25
     f8e:	09 c0       	rjmp	.+18     	; 0xfa2 <udc_update_iface_desc+0x50>
     f90:	93 81       	ldd	r25, Z+3	; 0x03
     f92:	96 13       	cpse	r25, r22
     f94:	06 c0       	rjmp	.+12     	; 0xfa2 <udc_update_iface_desc+0x50>
     f96:	e0 93 9e 21 	sts	0x219E, r30	; 0x80219e <udc_ptr_iface>
     f9a:	f0 93 9f 21 	sts	0x219F, r31	; 0x80219f <udc_ptr_iface+0x1>
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	08 95       	ret
     fa2:	90 81       	ld	r25, Z
     fa4:	e9 0f       	add	r30, r25
     fa6:	f1 1d       	adc	r31, r1
     fa8:	e2 17       	cp	r30, r18
     faa:	f3 07       	cpc	r31, r19
     fac:	58 f3       	brcs	.-42     	; 0xf84 <udc_update_iface_desc+0x32>
     fae:	e0 93 9e 21 	sts	0x219E, r30	; 0x80219e <udc_ptr_iface>
     fb2:	f0 93 9f 21 	sts	0x219F, r31	; 0x80219f <udc_ptr_iface+0x1>
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	08 95       	ret
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	08 95       	ret
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	08 95       	ret
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	08 95       	ret

00000fc6 <udc_iface_disable>:
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	c8 2f       	mov	r28, r24
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	be df       	rcall	.-132    	; 0xf52 <udc_update_iface_desc>
     fd6:	18 2f       	mov	r17, r24
     fd8:	88 23       	and	r24, r24
     fda:	81 f1       	breq	.+96     	; 0x103c <__EEPROM_REGION_LENGTH__+0x3c>
     fdc:	a0 91 a0 21 	lds	r26, 0x21A0	; 0x8021a0 <udc_ptr_conf>
     fe0:	b0 91 a1 21 	lds	r27, 0x21A1	; 0x8021a1 <udc_ptr_conf+0x1>
     fe4:	ec 2f       	mov	r30, r28
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	ee 0f       	add	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	12 96       	adiw	r26, 0x02	; 2
     fee:	8d 91       	ld	r24, X+
     ff0:	9c 91       	ld	r25, X
     ff2:	13 97       	sbiw	r26, 0x03	; 3
     ff4:	e8 0f       	add	r30, r24
     ff6:	f9 1f       	adc	r31, r25
     ff8:	e0 80       	ld	r14, Z
     ffa:	f1 80       	ldd	r15, Z+1	; 0x01
     ffc:	d7 01       	movw	r26, r14
     ffe:	16 96       	adiw	r26, 0x06	; 6
    1000:	ed 91       	ld	r30, X+
    1002:	fc 91       	ld	r31, X
    1004:	17 97       	sbiw	r26, 0x07	; 7
    1006:	19 95       	eicall
    1008:	68 2f       	mov	r22, r24
    100a:	8c 2f       	mov	r24, r28
    100c:	a2 df       	rcall	.-188    	; 0xf52 <udc_update_iface_desc>
    100e:	18 2f       	mov	r17, r24
    1010:	88 23       	and	r24, r24
    1012:	a1 f0       	breq	.+40     	; 0x103c <__EEPROM_REGION_LENGTH__+0x3c>
    1014:	c0 91 9e 21 	lds	r28, 0x219E	; 0x80219e <udc_ptr_iface>
    1018:	d0 91 9f 21 	lds	r29, 0x219F	; 0x80219f <udc_ptr_iface+0x1>
    101c:	65 e0       	ldi	r22, 0x05	; 5
    101e:	ce 01       	movw	r24, r28
    1020:	5e df       	rcall	.-324    	; 0xede <udc_next_desc_in_iface>
    1022:	ec 01       	movw	r28, r24
    1024:	89 2b       	or	r24, r25
    1026:	21 f0       	breq	.+8      	; 0x1030 <__EEPROM_REGION_LENGTH__+0x30>
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	0e 94 3d 11 	call	0x227a	; 0x227a <udd_ep_free>
    102e:	f6 cf       	rjmp	.-20     	; 0x101c <__EEPROM_REGION_LENGTH__+0x1c>
    1030:	d7 01       	movw	r26, r14
    1032:	12 96       	adiw	r26, 0x02	; 2
    1034:	ed 91       	ld	r30, X+
    1036:	fc 91       	ld	r31, X
    1038:	13 97       	sbiw	r26, 0x03	; 3
    103a:	19 95       	eicall
    103c:	81 2f       	mov	r24, r17
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	08 95       	ret

0000104a <udc_iface_enable>:
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	18 2f       	mov	r17, r24
    1052:	7f df       	rcall	.-258    	; 0xf52 <udc_update_iface_desc>
    1054:	88 23       	and	r24, r24
    1056:	39 f1       	breq	.+78     	; 0x10a6 <udc_iface_enable+0x5c>
    1058:	c0 91 9e 21 	lds	r28, 0x219E	; 0x80219e <udc_ptr_iface>
    105c:	d0 91 9f 21 	lds	r29, 0x219F	; 0x80219f <udc_ptr_iface+0x1>
    1060:	65 e0       	ldi	r22, 0x05	; 5
    1062:	ce 01       	movw	r24, r28
    1064:	3c df       	rcall	.-392    	; 0xede <udc_next_desc_in_iface>
    1066:	ec 01       	movw	r28, r24
    1068:	89 2b       	or	r24, r25
    106a:	41 f0       	breq	.+16     	; 0x107c <udc_iface_enable+0x32>
    106c:	4c 81       	ldd	r20, Y+4	; 0x04
    106e:	5d 81       	ldd	r21, Y+5	; 0x05
    1070:	6b 81       	ldd	r22, Y+3	; 0x03
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	fb d6       	rcall	.+3574   	; 0x1e6c <udd_ep_alloc>
    1076:	81 11       	cpse	r24, r1
    1078:	f3 cf       	rjmp	.-26     	; 0x1060 <udc_iface_enable+0x16>
    107a:	15 c0       	rjmp	.+42     	; 0x10a6 <udc_iface_enable+0x5c>
    107c:	a0 91 a0 21 	lds	r26, 0x21A0	; 0x8021a0 <udc_ptr_conf>
    1080:	b0 91 a1 21 	lds	r27, 0x21A1	; 0x8021a1 <udc_ptr_conf+0x1>
    1084:	e1 2f       	mov	r30, r17
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	ee 0f       	add	r30, r30
    108a:	ff 1f       	adc	r31, r31
    108c:	12 96       	adiw	r26, 0x02	; 2
    108e:	8d 91       	ld	r24, X+
    1090:	9c 91       	ld	r25, X
    1092:	13 97       	sbiw	r26, 0x03	; 3
    1094:	e8 0f       	add	r30, r24
    1096:	f9 1f       	adc	r31, r25
    1098:	01 90       	ld	r0, Z+
    109a:	f0 81       	ld	r31, Z
    109c:	e0 2d       	mov	r30, r0
    109e:	01 90       	ld	r0, Z+
    10a0:	f0 81       	ld	r31, Z
    10a2:	e0 2d       	mov	r30, r0
    10a4:	19 95       	eicall
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	08 95       	ret

000010ae <udc_get_interface_desc>:
    10ae:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <udc_ptr_iface>
    10b2:	90 91 9f 21 	lds	r25, 0x219F	; 0x80219f <udc_ptr_iface+0x1>
    10b6:	08 95       	ret

000010b8 <udc_start>:
    10b8:	32 c6       	rjmp	.+3172   	; 0x1d1e <udd_enable>
    10ba:	08 95       	ret

000010bc <udc_reset>:
    10bc:	cf 93       	push	r28
    10be:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <udc_num_configuration>
    10c2:	88 23       	and	r24, r24
    10c4:	c1 f0       	breq	.+48     	; 0x10f6 <udc_reset+0x3a>
    10c6:	e0 91 a0 21 	lds	r30, 0x21A0	; 0x8021a0 <udc_ptr_conf>
    10ca:	f0 91 a1 21 	lds	r31, 0x21A1	; 0x8021a1 <udc_ptr_conf+0x1>
    10ce:	01 90       	ld	r0, Z+
    10d0:	f0 81       	ld	r31, Z
    10d2:	e0 2d       	mov	r30, r0
    10d4:	84 81       	ldd	r24, Z+4	; 0x04
    10d6:	88 23       	and	r24, r24
    10d8:	71 f0       	breq	.+28     	; 0x10f6 <udc_reset+0x3a>
    10da:	c0 e0       	ldi	r28, 0x00	; 0
    10dc:	8c 2f       	mov	r24, r28
    10de:	73 df       	rcall	.-282    	; 0xfc6 <udc_iface_disable>
    10e0:	cf 5f       	subi	r28, 0xFF	; 255
    10e2:	e0 91 a0 21 	lds	r30, 0x21A0	; 0x8021a0 <udc_ptr_conf>
    10e6:	f0 91 a1 21 	lds	r31, 0x21A1	; 0x8021a1 <udc_ptr_conf+0x1>
    10ea:	01 90       	ld	r0, Z+
    10ec:	f0 81       	ld	r31, Z
    10ee:	e0 2d       	mov	r30, r0
    10f0:	84 81       	ldd	r24, Z+4	; 0x04
    10f2:	c8 17       	cp	r28, r24
    10f4:	98 f3       	brcs	.-26     	; 0x10dc <udc_reset+0x20>
    10f6:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <udc_num_configuration>
    10fa:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <udc_device_status>
    10fe:	81 fd       	sbrc	r24, 1
    1100:	0e 94 53 13 	call	0x26a6	; 0x26a6 <main_remotewakeup_disable>
    1104:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <udc_device_status>
    1108:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <udc_device_status+0x1>
    110c:	cf 91       	pop	r28
    110e:	08 95       	ret

00001110 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1110:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1112:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <udc_num_configuration>
    1116:	88 23       	and	r24, r24
    1118:	49 f1       	breq	.+82     	; 0x116c <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    111a:	a0 91 a0 21 	lds	r26, 0x21A0	; 0x8021a0 <udc_ptr_conf>
    111e:	b0 91 a1 21 	lds	r27, 0x21A1	; 0x8021a1 <udc_ptr_conf+0x1>
    1122:	ed 91       	ld	r30, X+
    1124:	fc 91       	ld	r31, X
    1126:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1128:	84 81       	ldd	r24, Z+4	; 0x04
    112a:	88 23       	and	r24, r24
    112c:	f9 f0       	breq	.+62     	; 0x116c <udc_sof_notify+0x5c>
    112e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1130:	ec 2f       	mov	r30, r28
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	ee 0f       	add	r30, r30
    1136:	ff 1f       	adc	r31, r31
    1138:	12 96       	adiw	r26, 0x02	; 2
    113a:	8d 91       	ld	r24, X+
    113c:	9c 91       	ld	r25, X
    113e:	13 97       	sbiw	r26, 0x03	; 3
    1140:	e8 0f       	add	r30, r24
    1142:	f9 1f       	adc	r31, r25
    1144:	01 90       	ld	r0, Z+
    1146:	f0 81       	ld	r31, Z
    1148:	e0 2d       	mov	r30, r0
    114a:	00 84       	ldd	r0, Z+8	; 0x08
    114c:	f1 85       	ldd	r31, Z+9	; 0x09
    114e:	e0 2d       	mov	r30, r0
    1150:	30 97       	sbiw	r30, 0x00	; 0
    1152:	09 f0       	breq	.+2      	; 0x1156 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1154:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1156:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1158:	a0 91 a0 21 	lds	r26, 0x21A0	; 0x8021a0 <udc_ptr_conf>
    115c:	b0 91 a1 21 	lds	r27, 0x21A1	; 0x8021a1 <udc_ptr_conf+0x1>
    1160:	ed 91       	ld	r30, X+
    1162:	fc 91       	ld	r31, X
    1164:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1166:	84 81       	ldd	r24, Z+4	; 0x04
    1168:	c8 17       	cp	r28, r24
    116a:	10 f3       	brcs	.-60     	; 0x1130 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    116c:	cf 91       	pop	r28
    116e:	08 95       	ret

00001170 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1170:	0f 93       	push	r16
    1172:	1f 93       	push	r17
    1174:	cf 93       	push	r28
    1176:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1178:	ec e0       	ldi	r30, 0x0C	; 12
    117a:	f3 e2       	ldi	r31, 0x23	; 35
    117c:	12 86       	std	Z+10, r1	; 0x0a
    117e:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1180:	14 86       	std	Z+12, r1	; 0x0c
    1182:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    1184:	16 86       	std	Z+14, r1	; 0x0e
    1186:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    1188:	80 81       	ld	r24, Z
    118a:	88 23       	and	r24, r24
    118c:	0c f0       	brlt	.+2      	; 0x1190 <udc_process_setup+0x20>
    118e:	7e c2       	rjmp	.+1276   	; 0x168c <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1190:	20 91 12 23 	lds	r18, 0x2312	; 0x802312 <udd_g_ctrlreq+0x6>
    1194:	30 91 13 23 	lds	r19, 0x2313	; 0x802313 <udd_g_ctrlreq+0x7>
    1198:	21 15       	cp	r18, r1
    119a:	31 05       	cpc	r19, r1
    119c:	09 f0       	breq	.+2      	; 0x11a0 <udc_process_setup+0x30>
    119e:	7b c2       	rjmp	.+1270   	; 0x1696 <udc_process_setup+0x526>
    11a0:	6d c2       	rjmp	.+1242   	; 0x167c <udc_process_setup+0x50c>
    11a2:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <udc_process_setup+0x38>
    11a6:	a0 c0       	rjmp	.+320    	; 0x12e8 <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    11a8:	90 91 0d 23 	lds	r25, 0x230D	; 0x80230d <udd_g_ctrlreq+0x1>
    11ac:	96 30       	cpi	r25, 0x06	; 6
    11ae:	79 f0       	breq	.+30     	; 0x11ce <udc_process_setup+0x5e>
    11b0:	98 30       	cpi	r25, 0x08	; 8
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <udc_process_setup+0x46>
    11b4:	8f c0       	rjmp	.+286    	; 0x12d4 <udc_process_setup+0x164>
    11b6:	91 11       	cpse	r25, r1
    11b8:	97 c0       	rjmp	.+302    	; 0x12e8 <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    11ba:	22 30       	cpi	r18, 0x02	; 2
    11bc:	31 05       	cpc	r19, r1
    11be:	09 f0       	breq	.+2      	; 0x11c2 <udc_process_setup+0x52>
    11c0:	19 c2       	rjmp	.+1074   	; 0x15f4 <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    11c2:	62 e0       	ldi	r22, 0x02	; 2
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	86 ea       	ldi	r24, 0xA6	; 166
    11c8:	91 e2       	ldi	r25, 0x21	; 33
    11ca:	49 d6       	rcall	.+3218   	; 0x1e5e <udd_set_setup_payload>
    11cc:	69 c2       	rjmp	.+1234   	; 0x16a0 <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    11ce:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <udd_g_ctrlreq+0x2>
    11d2:	90 91 0f 23 	lds	r25, 0x230F	; 0x80230f <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    11d6:	29 2f       	mov	r18, r25
    11d8:	33 27       	eor	r19, r19
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	a9 f0       	breq	.+42     	; 0x120a <udc_process_setup+0x9a>
    11e0:	20 f4       	brcc	.+8      	; 0x11ea <udc_process_setup+0x7a>
    11e2:	21 30       	cpi	r18, 0x01	; 1
    11e4:	31 05       	cpc	r19, r1
    11e6:	41 f0       	breq	.+16     	; 0x11f8 <udc_process_setup+0x88>
    11e8:	c7 c1       	rjmp	.+910    	; 0x1578 <udc_process_setup+0x408>
    11ea:	23 30       	cpi	r18, 0x03	; 3
    11ec:	31 05       	cpc	r19, r1
    11ee:	d9 f1       	breq	.+118    	; 0x1266 <udc_process_setup+0xf6>
    11f0:	2f 30       	cpi	r18, 0x0F	; 15
    11f2:	31 05       	cpc	r19, r1
    11f4:	51 f1       	breq	.+84     	; 0x124a <udc_process_setup+0xda>
    11f6:	c0 c1       	rjmp	.+896    	; 0x1578 <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    11f8:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <udc_config>
    11fc:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1200:	dc 01       	movw	r26, r24
    1202:	6c 91       	ld	r22, X
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	2b d6       	rcall	.+3158   	; 0x1e5e <udd_set_setup_payload>
    1208:	56 c0       	rjmp	.+172    	; 0x12b6 <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    120a:	e0 91 08 20 	lds	r30, 0x2008	; 0x802008 <udc_config>
    120e:	f0 91 09 20 	lds	r31, 0x2009	; 0x802009 <udc_config+0x1>
    1212:	21 89       	ldd	r18, Z+17	; 0x11
    1214:	82 17       	cp	r24, r18
    1216:	08 f0       	brcs	.+2      	; 0x121a <udc_process_setup+0xaa>
    1218:	ed c1       	rjmp	.+986    	; 0x15f4 <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    121a:	99 27       	eor	r25, r25
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	e0 91 0a 20 	lds	r30, 0x200A	; 0x80200a <udc_config+0x2>
    1228:	f0 91 0b 20 	lds	r31, 0x200B	; 0x80200b <udc_config+0x3>
    122c:	e8 0f       	add	r30, r24
    122e:	f9 1f       	adc	r31, r25
    1230:	80 81       	ld	r24, Z
    1232:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1234:	fc 01       	movw	r30, r24
    1236:	62 81       	ldd	r22, Z+2	; 0x02
    1238:	73 81       	ldd	r23, Z+3	; 0x03
    123a:	11 d6       	rcall	.+3106   	; 0x1e5e <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    123c:	e0 91 14 23 	lds	r30, 0x2314	; 0x802314 <udd_g_ctrlreq+0x8>
    1240:	f0 91 15 23 	lds	r31, 0x2315	; 0x802315 <udd_g_ctrlreq+0x9>
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	81 83       	std	Z+1, r24	; 0x01
    1248:	36 c0       	rjmp	.+108    	; 0x12b6 <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    124a:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <udc_config+0x4>
    124e:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <udc_config+0x5>
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	09 f4       	brne	.+2      	; 0x1258 <udc_process_setup+0xe8>
    1256:	ce c1       	rjmp	.+924    	; 0x15f4 <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1258:	dc 01       	movw	r26, r24
    125a:	12 96       	adiw	r26, 0x02	; 2
    125c:	6d 91       	ld	r22, X+
    125e:	7c 91       	ld	r23, X
    1260:	13 97       	sbiw	r26, 0x03	; 3
    1262:	fd d5       	rcall	.+3066   	; 0x1e5e <udd_set_setup_payload>
    1264:	28 c0       	rjmp	.+80     	; 0x12b6 <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1266:	99 27       	eor	r25, r25
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	91 05       	cpc	r25, r1
    126c:	71 f0       	breq	.+28     	; 0x128a <udc_process_setup+0x11a>
    126e:	38 f0       	brcs	.+14     	; 0x127e <udc_process_setup+0x10e>
    1270:	02 97       	sbiw	r24, 0x02	; 2
    1272:	09 f0       	breq	.+2      	; 0x1276 <udc_process_setup+0x106>
    1274:	8a c1       	rjmp	.+788    	; 0x158a <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    1276:	e2 e1       	ldi	r30, 0x12	; 18
    1278:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    127a:	31 e2       	ldi	r19, 0x21	; 33
    127c:	09 c0       	rjmp	.+18     	; 0x1290 <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    127e:	64 e0       	ldi	r22, 0x04	; 4
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	8e e3       	ldi	r24, 0x3E	; 62
    1284:	91 e2       	ldi	r25, 0x21	; 33
    1286:	eb d5       	rcall	.+3030   	; 0x1e5e <udd_set_setup_payload>
    1288:	16 c0       	rjmp	.+44     	; 0x12b6 <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    128a:	e4 e3       	ldi	r30, 0x34	; 52
    128c:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    128e:	39 e0       	ldi	r19, 0x09	; 9
    1290:	a0 ed       	ldi	r26, 0xD0	; 208
    1292:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1294:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1296:	81 91       	ld	r24, Z+
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	8d 93       	st	X+, r24
    129c:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    129e:	2f 5f       	subi	r18, 0xFF	; 255
    12a0:	23 17       	cp	r18, r19
    12a2:	c8 f3       	brcs	.-14     	; 0x1296 <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    12a4:	63 2f       	mov	r22, r19
    12a6:	66 0f       	add	r22, r22
    12a8:	6e 5f       	subi	r22, 0xFE	; 254
    12aa:	60 93 ce 20 	sts	0x20CE, r22	; 0x8020ce <udc_string_desc>
		udd_set_setup_payload(
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	8e ec       	ldi	r24, 0xCE	; 206
    12b2:	90 e2       	ldi	r25, 0x20	; 32
    12b4:	d4 d5       	rcall	.+2984   	; 0x1e5e <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    12b6:	ec e0       	ldi	r30, 0x0C	; 12
    12b8:	f3 e2       	ldi	r31, 0x23	; 35
    12ba:	86 81       	ldd	r24, Z+6	; 0x06
    12bc:	97 81       	ldd	r25, Z+7	; 0x07
    12be:	22 85       	ldd	r18, Z+10	; 0x0a
    12c0:	33 85       	ldd	r19, Z+11	; 0x0b
    12c2:	82 17       	cp	r24, r18
    12c4:	93 07       	cpc	r25, r19
    12c6:	08 f0       	brcs	.+2      	; 0x12ca <udc_process_setup+0x15a>
    12c8:	eb c1       	rjmp	.+982    	; 0x16a0 <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    12ca:	80 93 16 23 	sts	0x2316, r24	; 0x802316 <udd_g_ctrlreq+0xa>
    12ce:	90 93 17 23 	sts	0x2317, r25	; 0x802317 <udd_g_ctrlreq+0xb>
    12d2:	e6 c1       	rjmp	.+972    	; 0x16a0 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    12d4:	21 30       	cpi	r18, 0x01	; 1
    12d6:	31 05       	cpc	r19, r1
    12d8:	09 f0       	breq	.+2      	; 0x12dc <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    12da:	8c c1       	rjmp	.+792    	; 0x15f4 <udc_process_setup+0x484>
    12dc:	61 e0       	ldi	r22, 0x01	; 1
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	82 ea       	ldi	r24, 0xA2	; 162
    12e2:	91 e2       	ldi	r25, 0x21	; 33
    12e4:	bc d5       	rcall	.+2936   	; 0x1e5e <udd_set_setup_payload>
    12e6:	dc c1       	rjmp	.+952    	; 0x16a0 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	e1 f5       	brne	.+120    	; 0x1364 <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    12ec:	90 91 0d 23 	lds	r25, 0x230D	; 0x80230d <udd_g_ctrlreq+0x1>
    12f0:	9a 30       	cpi	r25, 0x0A	; 10
    12f2:	c1 f5       	brne	.+112    	; 0x1364 <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    12f4:	21 30       	cpi	r18, 0x01	; 1
    12f6:	31 05       	cpc	r19, r1
    12f8:	09 f0       	breq	.+2      	; 0x12fc <udc_process_setup+0x18c>
    12fa:	4c c1       	rjmp	.+664    	; 0x1594 <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    12fc:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <udc_num_configuration>
    1300:	88 23       	and	r24, r24
    1302:	09 f4       	brne	.+2      	; 0x1306 <udc_process_setup+0x196>
    1304:	47 c1       	rjmp	.+654    	; 0x1594 <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1306:	c0 91 10 23 	lds	r28, 0x2310	; 0x802310 <udd_g_ctrlreq+0x4>
    130a:	d0 91 11 23 	lds	r29, 0x2311	; 0x802311 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    130e:	00 91 a0 21 	lds	r16, 0x21A0	; 0x8021a0 <udc_ptr_conf>
    1312:	10 91 a1 21 	lds	r17, 0x21A1	; 0x8021a1 <udc_ptr_conf+0x1>
    1316:	d8 01       	movw	r26, r16
    1318:	ed 91       	ld	r30, X+
    131a:	fc 91       	ld	r31, X
    131c:	84 81       	ldd	r24, Z+4	; 0x04
    131e:	c8 17       	cp	r28, r24
    1320:	08 f0       	brcs	.+2      	; 0x1324 <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1322:	38 c1       	rjmp	.+624    	; 0x1594 <udc_process_setup+0x424>
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	8c 2f       	mov	r24, r28
    1328:	14 de       	rcall	.-984    	; 0xf52 <udc_update_iface_desc>
    132a:	88 23       	and	r24, r24
    132c:	09 f4       	brne	.+2      	; 0x1330 <udc_process_setup+0x1c0>
    132e:	2d c1       	rjmp	.+602    	; 0x158a <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1330:	ce 01       	movw	r24, r28
    1332:	99 27       	eor	r25, r25
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	d8 01       	movw	r26, r16
    133a:	12 96       	adiw	r26, 0x02	; 2
    133c:	ed 91       	ld	r30, X+
    133e:	fc 91       	ld	r31, X
    1340:	13 97       	sbiw	r26, 0x03	; 3
    1342:	e8 0f       	add	r30, r24
    1344:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1346:	01 90       	ld	r0, Z+
    1348:	f0 81       	ld	r31, Z
    134a:	e0 2d       	mov	r30, r0
    134c:	86 81       	ldd	r24, Z+6	; 0x06
    134e:	97 81       	ldd	r25, Z+7	; 0x07
    1350:	fc 01       	movw	r30, r24
    1352:	19 95       	eicall
    1354:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1358:	61 e0       	ldi	r22, 0x01	; 1
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	84 ea       	ldi	r24, 0xA4	; 164
    135e:	91 e2       	ldi	r25, 0x21	; 33
    1360:	7e d5       	rcall	.+2812   	; 0x1e5e <udd_set_setup_payload>
    1362:	9e c1       	rjmp	.+828    	; 0x16a0 <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1364:	82 30       	cpi	r24, 0x02	; 2
    1366:	09 f0       	breq	.+2      	; 0x136a <udc_process_setup+0x1fa>
    1368:	10 c1       	rjmp	.+544    	; 0x158a <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    136a:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <udd_g_ctrlreq+0x1>
    136e:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1370:	05 c1       	rjmp	.+522    	; 0x157c <udc_process_setup+0x40c>
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	09 f0       	breq	.+2      	; 0x137a <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1378:	3d c1       	rjmp	.+634    	; 0x15f4 <udc_process_setup+0x484>
    137a:	80 91 10 23 	lds	r24, 0x2310	; 0x802310 <udd_g_ctrlreq+0x4>
    137e:	07 d6       	rcall	.+3086   	; 0x1f8e <udd_ep_is_halted>
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <udc_ep_status.4556>
    1386:	90 93 9d 21 	sts	0x219D, r25	; 0x80219d <udc_ep_status.4556+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    138a:	62 e0       	ldi	r22, 0x02	; 2
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	8c e9       	ldi	r24, 0x9C	; 156
    1390:	91 e2       	ldi	r25, 0x21	; 33
    1392:	65 d5       	rcall	.+2762   	; 0x1e5e <udd_set_setup_payload>
    1394:	85 c1       	rjmp	.+778    	; 0x16a0 <udc_process_setup+0x530>
    1396:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1398:	09 f0       	breq	.+2      	; 0x139c <udc_process_setup+0x22c>
    139a:	9f c0       	rjmp	.+318    	; 0x14da <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    139c:	90 91 0d 23 	lds	r25, 0x230D	; 0x80230d <udd_g_ctrlreq+0x1>
    13a0:	93 30       	cpi	r25, 0x03	; 3
    13a2:	91 f1       	breq	.+100    	; 0x1408 <udc_process_setup+0x298>
    13a4:	18 f4       	brcc	.+6      	; 0x13ac <udc_process_setup+0x23c>
    13a6:	91 30       	cpi	r25, 0x01	; 1
    13a8:	a9 f0       	breq	.+42     	; 0x13d4 <udc_process_setup+0x264>
    13aa:	97 c0       	rjmp	.+302    	; 0x14da <udc_process_setup+0x36a>
    13ac:	95 30       	cpi	r25, 0x05	; 5
    13ae:	21 f0       	breq	.+8      	; 0x13b8 <udc_process_setup+0x248>
    13b0:	99 30       	cpi	r25, 0x09	; 9
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <udc_process_setup+0x246>
    13b4:	43 c0       	rjmp	.+134    	; 0x143c <udc_process_setup+0x2cc>
    13b6:	91 c0       	rjmp	.+290    	; 0x14da <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    13b8:	80 91 12 23 	lds	r24, 0x2312	; 0x802312 <udd_g_ctrlreq+0x6>
    13bc:	90 91 13 23 	lds	r25, 0x2313	; 0x802313 <udd_g_ctrlreq+0x7>
    13c0:	89 2b       	or	r24, r25
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <udc_process_setup+0x256>
    13c4:	17 c1       	rjmp	.+558    	; 0x15f4 <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    13c6:	84 ea       	ldi	r24, 0xA4	; 164
    13c8:	97 e0       	ldi	r25, 0x07	; 7
    13ca:	80 93 18 23 	sts	0x2318, r24	; 0x802318 <udd_g_ctrlreq+0xc>
    13ce:	90 93 19 23 	sts	0x2319, r25	; 0x802319 <udd_g_ctrlreq+0xd>
    13d2:	66 c1       	rjmp	.+716    	; 0x16a0 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    13d4:	80 91 12 23 	lds	r24, 0x2312	; 0x802312 <udd_g_ctrlreq+0x6>
    13d8:	90 91 13 23 	lds	r25, 0x2313	; 0x802313 <udd_g_ctrlreq+0x7>
    13dc:	89 2b       	or	r24, r25
    13de:	09 f0       	breq	.+2      	; 0x13e2 <udc_process_setup+0x272>
    13e0:	09 c1       	rjmp	.+530    	; 0x15f4 <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    13e2:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <udd_g_ctrlreq+0x2>
    13e6:	90 91 0f 23 	lds	r25, 0x230F	; 0x80230f <udd_g_ctrlreq+0x3>
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <udc_process_setup+0x280>
    13ee:	02 c1       	rjmp	.+516    	; 0x15f4 <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    13f0:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <udc_device_status>
    13f4:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <udc_device_status+0x1>
    13f8:	8d 7f       	andi	r24, 0xFD	; 253
    13fa:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <udc_device_status>
    13fe:	90 93 a7 21 	sts	0x21A7, r25	; 0x8021a7 <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    1402:	0e 94 53 13 	call	0x26a6	; 0x26a6 <main_remotewakeup_disable>
    1406:	4c c1       	rjmp	.+664    	; 0x16a0 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1408:	80 91 12 23 	lds	r24, 0x2312	; 0x802312 <udd_g_ctrlreq+0x6>
    140c:	90 91 13 23 	lds	r25, 0x2313	; 0x802313 <udd_g_ctrlreq+0x7>
    1410:	89 2b       	or	r24, r25
    1412:	09 f0       	breq	.+2      	; 0x1416 <udc_process_setup+0x2a6>
    1414:	ef c0       	rjmp	.+478    	; 0x15f4 <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1416:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <udd_g_ctrlreq+0x2>
    141a:	90 91 0f 23 	lds	r25, 0x230F	; 0x80230f <udd_g_ctrlreq+0x3>
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	09 f0       	breq	.+2      	; 0x1424 <udc_process_setup+0x2b4>
    1422:	ae c0       	rjmp	.+348    	; 0x1580 <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    1424:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <udc_device_status>
    1428:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <udc_device_status+0x1>
    142c:	82 60       	ori	r24, 0x02	; 2
    142e:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <udc_device_status>
    1432:	90 93 a7 21 	sts	0x21A7, r25	; 0x8021a7 <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    1436:	0e 94 52 13 	call	0x26a4	; 0x26a4 <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    143a:	32 c1       	rjmp	.+612    	; 0x16a0 <udc_process_setup+0x530>
    143c:	80 91 12 23 	lds	r24, 0x2312	; 0x802312 <udd_g_ctrlreq+0x6>
    1440:	90 91 13 23 	lds	r25, 0x2313	; 0x802313 <udd_g_ctrlreq+0x7>
    1444:	89 2b       	or	r24, r25
    1446:	09 f0       	breq	.+2      	; 0x144a <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1448:	d5 c0       	rjmp	.+426    	; 0x15f4 <udc_process_setup+0x484>
    144a:	01 d5       	rcall	.+2562   	; 0x1e4e <udd_getaddress>
    144c:	88 23       	and	r24, r24
    144e:	09 f4       	brne	.+2      	; 0x1452 <udc_process_setup+0x2e2>
    1450:	9c c0       	rjmp	.+312    	; 0x158a <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1452:	20 91 0e 23 	lds	r18, 0x230E	; 0x80230e <udd_g_ctrlreq+0x2>
    1456:	30 91 0f 23 	lds	r19, 0x230F	; 0x80230f <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    145a:	33 27       	eor	r19, r19
    145c:	e0 91 08 20 	lds	r30, 0x2008	; 0x802008 <udc_config>
    1460:	f0 91 09 20 	lds	r31, 0x2009	; 0x802009 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1464:	81 89       	ldd	r24, Z+17	; 0x11
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	82 17       	cp	r24, r18
    146a:	93 07       	cpc	r25, r19
    146c:	08 f4       	brcc	.+2      	; 0x1470 <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    146e:	8d c0       	rjmp	.+282    	; 0x158a <udc_process_setup+0x41a>
    1470:	25 de       	rcall	.-950    	; 0x10bc <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1472:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <udd_g_ctrlreq+0x2>
    1476:	90 91 0f 23 	lds	r25, 0x230F	; 0x80230f <udd_g_ctrlreq+0x3>
    147a:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    147e:	88 23       	and	r24, r24
    1480:	09 f4       	brne	.+2      	; 0x1484 <udc_process_setup+0x314>
    1482:	0e c1       	rjmp	.+540    	; 0x16a0 <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1484:	99 27       	eor	r25, r25
    1486:	81 50       	subi	r24, 0x01	; 1
    1488:	90 4c       	sbci	r25, 0xC0	; 192
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	e0 91 0a 20 	lds	r30, 0x200A	; 0x80200a <udc_config+0x2>
    1496:	f0 91 0b 20 	lds	r31, 0x200B	; 0x80200b <udc_config+0x3>
    149a:	e8 0f       	add	r30, r24
    149c:	f9 1f       	adc	r31, r25
    149e:	e0 93 a0 21 	sts	0x21A0, r30	; 0x8021a0 <udc_ptr_conf>
    14a2:	f0 93 a1 21 	sts	0x21A1, r31	; 0x8021a1 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14a6:	01 90       	ld	r0, Z+
    14a8:	f0 81       	ld	r31, Z
    14aa:	e0 2d       	mov	r30, r0
    14ac:	84 81       	ldd	r24, Z+4	; 0x04
    14ae:	88 23       	and	r24, r24
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <udc_process_setup+0x344>
    14b2:	f6 c0       	rjmp	.+492    	; 0x16a0 <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    14b4:	c0 e0       	ldi	r28, 0x00	; 0
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	8c 2f       	mov	r24, r28
    14ba:	c7 dd       	rcall	.-1138   	; 0x104a <udc_iface_enable>
    14bc:	88 23       	and	r24, r24
    14be:	09 f4       	brne	.+2      	; 0x14c2 <udc_process_setup+0x352>
    14c0:	64 c0       	rjmp	.+200    	; 0x158a <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    14c2:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14c4:	e0 91 a0 21 	lds	r30, 0x21A0	; 0x8021a0 <udc_ptr_conf>
    14c8:	f0 91 a1 21 	lds	r31, 0x21A1	; 0x8021a1 <udc_ptr_conf+0x1>
    14cc:	01 90       	ld	r0, Z+
    14ce:	f0 81       	ld	r31, Z
    14d0:	e0 2d       	mov	r30, r0
    14d2:	84 81       	ldd	r24, Z+4	; 0x04
    14d4:	c8 17       	cp	r28, r24
    14d6:	78 f3       	brcs	.-34     	; 0x14b6 <udc_process_setup+0x346>
    14d8:	e3 c0       	rjmp	.+454    	; 0x16a0 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	e9 f4       	brne	.+58     	; 0x1518 <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    14de:	90 91 0d 23 	lds	r25, 0x230D	; 0x80230d <udd_g_ctrlreq+0x1>
    14e2:	9b 30       	cpi	r25, 0x0B	; 11
    14e4:	c9 f4       	brne	.+50     	; 0x1518 <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    14e6:	80 91 12 23 	lds	r24, 0x2312	; 0x802312 <udd_g_ctrlreq+0x6>
    14ea:	90 91 13 23 	lds	r25, 0x2313	; 0x802313 <udd_g_ctrlreq+0x7>
    14ee:	89 2b       	or	r24, r25
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    14f2:	50 c0       	rjmp	.+160    	; 0x1594 <udc_process_setup+0x424>
    14f4:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <udc_num_configuration>
    14f8:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    14fa:	09 f4       	brne	.+2      	; 0x14fe <udc_process_setup+0x38e>
    14fc:	4b c0       	rjmp	.+150    	; 0x1594 <udc_process_setup+0x424>
    14fe:	ec e0       	ldi	r30, 0x0C	; 12
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1500:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1502:	c4 81       	ldd	r28, Z+4	; 0x04
    1504:	d2 81       	ldd	r29, Z+2	; 0x02
    1506:	8c 2f       	mov	r24, r28
    1508:	5e dd       	rcall	.-1348   	; 0xfc6 <udc_iface_disable>
    150a:	88 23       	and	r24, r24
    150c:	09 f4       	brne	.+2      	; 0x1510 <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    150e:	3d c0       	rjmp	.+122    	; 0x158a <udc_process_setup+0x41a>
    1510:	6d 2f       	mov	r22, r29
    1512:	8c 2f       	mov	r24, r28
    1514:	9a dd       	rcall	.-1228   	; 0x104a <udc_iface_enable>
    1516:	37 c0       	rjmp	.+110    	; 0x1586 <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1518:	82 30       	cpi	r24, 0x02	; 2
    151a:	b9 f5       	brne	.+110    	; 0x158a <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    151c:	80 91 0d 23 	lds	r24, 0x230D	; 0x80230d <udd_g_ctrlreq+0x1>
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	19 f0       	breq	.+6      	; 0x152a <udc_process_setup+0x3ba>
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	99 f0       	breq	.+38     	; 0x154e <udc_process_setup+0x3de>
    1528:	2d c0       	rjmp	.+90     	; 0x1584 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    152a:	80 91 12 23 	lds	r24, 0x2312	; 0x802312 <udd_g_ctrlreq+0x6>
    152e:	90 91 13 23 	lds	r25, 0x2313	; 0x802313 <udd_g_ctrlreq+0x7>
    1532:	89 2b       	or	r24, r25
    1534:	09 f0       	breq	.+2      	; 0x1538 <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1536:	5e c0       	rjmp	.+188    	; 0x15f4 <udc_process_setup+0x484>
    1538:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <udd_g_ctrlreq+0x2>
    153c:	90 91 0f 23 	lds	r25, 0x230F	; 0x80230f <udd_g_ctrlreq+0x3>
    1540:	89 2b       	or	r24, r25
    1542:	09 f0       	breq	.+2      	; 0x1546 <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1544:	57 c0       	rjmp	.+174    	; 0x15f4 <udc_process_setup+0x484>
    1546:	80 91 10 23 	lds	r24, 0x2310	; 0x802310 <udd_g_ctrlreq+0x4>
    154a:	3c d5       	rcall	.+2680   	; 0x1fc4 <udd_ep_clear_halt>
    154c:	1c c0       	rjmp	.+56     	; 0x1586 <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    154e:	80 91 12 23 	lds	r24, 0x2312	; 0x802312 <udd_g_ctrlreq+0x6>
    1552:	90 91 13 23 	lds	r25, 0x2313	; 0x802313 <udd_g_ctrlreq+0x7>
    1556:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1558:	09 f0       	breq	.+2      	; 0x155c <udc_process_setup+0x3ec>
    155a:	4c c0       	rjmp	.+152    	; 0x15f4 <udc_process_setup+0x484>
    155c:	80 91 0e 23 	lds	r24, 0x230E	; 0x80230e <udd_g_ctrlreq+0x2>
    1560:	90 91 0f 23 	lds	r25, 0x230F	; 0x80230f <udd_g_ctrlreq+0x3>
    1564:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1566:	09 f0       	breq	.+2      	; 0x156a <udc_process_setup+0x3fa>
    1568:	45 c0       	rjmp	.+138    	; 0x15f4 <udc_process_setup+0x484>
    156a:	cc e0       	ldi	r28, 0x0C	; 12
    156c:	d3 e2       	ldi	r29, 0x23	; 35
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1570:	35 d6       	rcall	.+3178   	; 0x21dc <udd_ep_abort>
    1572:	8c 81       	ldd	r24, Y+4	; 0x04
    1574:	9e d6       	rcall	.+3388   	; 0x22b2 <udd_ep_set_halt>
    1576:	07 c0       	rjmp	.+14     	; 0x1586 <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	03 c0       	rjmp	.+6      	; 0x1586 <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    1584:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1586:	81 11       	cpse	r24, r1
    1588:	8c c0       	rjmp	.+280    	; 0x16a2 <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    158a:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <udd_g_ctrlreq>
    158e:	8f 71       	andi	r24, 0x1F	; 31
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	81 f5       	brne	.+96     	; 0x15f4 <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1594:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <udc_num_configuration>
    1598:	88 23       	and	r24, r24
    159a:	09 f4       	brne	.+2      	; 0x159e <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    159c:	71 c0       	rjmp	.+226    	; 0x1680 <udc_process_setup+0x510>
    159e:	00 91 10 23 	lds	r16, 0x2310	; 0x802310 <udd_g_ctrlreq+0x4>
    15a2:	10 91 11 23 	lds	r17, 0x2311	; 0x802311 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    15a6:	c0 91 a0 21 	lds	r28, 0x21A0	; 0x8021a0 <udc_ptr_conf>
    15aa:	d0 91 a1 21 	lds	r29, 0x21A1	; 0x8021a1 <udc_ptr_conf+0x1>
    15ae:	e8 81       	ld	r30, Y
    15b0:	f9 81       	ldd	r31, Y+1	; 0x01
    15b2:	84 81       	ldd	r24, Z+4	; 0x04
    15b4:	08 17       	cp	r16, r24
    15b6:	08 f0       	brcs	.+2      	; 0x15ba <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    15b8:	65 c0       	rjmp	.+202    	; 0x1684 <udc_process_setup+0x514>
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	80 2f       	mov	r24, r16
    15be:	c9 dc       	rcall	.-1646   	; 0xf52 <udc_update_iface_desc>
    15c0:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    15c2:	c1 f0       	breq	.+48     	; 0x15f4 <udc_process_setup+0x484>
    15c4:	f8 01       	movw	r30, r16
    15c6:	ff 27       	eor	r31, r31
    15c8:	cf 01       	movw	r24, r30
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	ea 81       	ldd	r30, Y+2	; 0x02
    15d0:	fb 81       	ldd	r31, Y+3	; 0x03
    15d2:	e8 0f       	add	r30, r24
    15d4:	f9 1f       	adc	r31, r25
    15d6:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    15d8:	d1 81       	ldd	r29, Z+1	; 0x01
    15da:	ee 81       	ldd	r30, Y+6	; 0x06
    15dc:	ff 81       	ldd	r31, Y+7	; 0x07
    15de:	19 95       	eicall
    15e0:	68 2f       	mov	r22, r24
    15e2:	80 2f       	mov	r24, r16
    15e4:	b6 dc       	rcall	.-1684   	; 0xf52 <udc_update_iface_desc>
    15e6:	88 23       	and	r24, r24
    15e8:	29 f0       	breq	.+10     	; 0x15f4 <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    15ea:	ec 81       	ldd	r30, Y+4	; 0x04
    15ec:	fd 81       	ldd	r31, Y+5	; 0x05
    15ee:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    15f0:	81 11       	cpse	r24, r1
    15f2:	57 c0       	rjmp	.+174    	; 0x16a2 <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    15f4:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <udd_g_ctrlreq>
    15f8:	8f 71       	andi	r24, 0x1F	; 31
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	09 f0       	breq	.+2      	; 0x1600 <udc_process_setup+0x490>
    15fe:	44 c0       	rjmp	.+136    	; 0x1688 <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1600:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <udc_num_configuration>
    1604:	88 23       	and	r24, r24
    1606:	b1 f1       	breq	.+108    	; 0x1674 <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1608:	a0 91 a0 21 	lds	r26, 0x21A0	; 0x8021a0 <udc_ptr_conf>
    160c:	b0 91 a1 21 	lds	r27, 0x21A1	; 0x8021a1 <udc_ptr_conf+0x1>
    1610:	ed 91       	ld	r30, X+
    1612:	fc 91       	ld	r31, X
    1614:	11 97       	sbiw	r26, 0x01	; 1
    1616:	84 81       	ldd	r24, Z+4	; 0x04
    1618:	88 23       	and	r24, r24
    161a:	71 f1       	breq	.+92     	; 0x1678 <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    161c:	c0 e0       	ldi	r28, 0x00	; 0
    161e:	ec 2f       	mov	r30, r28
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	ee 0f       	add	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	12 96       	adiw	r26, 0x02	; 2
    1628:	8d 91       	ld	r24, X+
    162a:	9c 91       	ld	r25, X
    162c:	13 97       	sbiw	r26, 0x03	; 3
    162e:	e8 0f       	add	r30, r24
    1630:	f9 1f       	adc	r31, r25
    1632:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1634:	11 81       	ldd	r17, Z+1	; 0x01
    1636:	d8 01       	movw	r26, r16
    1638:	16 96       	adiw	r26, 0x06	; 6
    163a:	ed 91       	ld	r30, X+
    163c:	fc 91       	ld	r31, X
    163e:	17 97       	sbiw	r26, 0x07	; 7
    1640:	19 95       	eicall
    1642:	68 2f       	mov	r22, r24
    1644:	8c 2f       	mov	r24, r28
    1646:	85 dc       	rcall	.-1782   	; 0xf52 <udc_update_iface_desc>
    1648:	88 23       	and	r24, r24
    164a:	59 f1       	breq	.+86     	; 0x16a2 <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    164c:	d8 01       	movw	r26, r16
    164e:	14 96       	adiw	r26, 0x04	; 4
    1650:	ed 91       	ld	r30, X+
    1652:	fc 91       	ld	r31, X
    1654:	15 97       	sbiw	r26, 0x05	; 5
    1656:	19 95       	eicall
    1658:	81 11       	cpse	r24, r1
    165a:	23 c0       	rjmp	.+70     	; 0x16a2 <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    165c:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    165e:	a0 91 a0 21 	lds	r26, 0x21A0	; 0x8021a0 <udc_ptr_conf>
    1662:	b0 91 a1 21 	lds	r27, 0x21A1	; 0x8021a1 <udc_ptr_conf+0x1>
    1666:	ed 91       	ld	r30, X+
    1668:	fc 91       	ld	r31, X
    166a:	11 97       	sbiw	r26, 0x01	; 1
    166c:	94 81       	ldd	r25, Z+4	; 0x04
    166e:	c9 17       	cp	r28, r25
    1670:	b0 f2       	brcs	.-84     	; 0x161e <udc_process_setup+0x4ae>
    1672:	17 c0       	rjmp	.+46     	; 0x16a2 <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	15 c0       	rjmp	.+42     	; 0x16a2 <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	13 c0       	rjmp	.+38     	; 0x16a2 <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	11 c0       	rjmp	.+34     	; 0x16a2 <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	0f c0       	rjmp	.+30     	; 0x16a2 <udc_process_setup+0x532>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	0d c0       	rjmp	.+26     	; 0x16a2 <udc_process_setup+0x532>
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	0b c0       	rjmp	.+22     	; 0x16a2 <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    168c:	98 2f       	mov	r25, r24
    168e:	90 76       	andi	r25, 0x60	; 96
    1690:	09 f0       	breq	.+2      	; 0x1694 <udc_process_setup+0x524>
    1692:	7b cf       	rjmp	.-266    	; 0x158a <udc_process_setup+0x41a>
    1694:	80 ce       	rjmp	.-768    	; 0x1396 <udc_process_setup+0x226>
    1696:	98 2f       	mov	r25, r24
    1698:	90 76       	andi	r25, 0x60	; 96
    169a:	09 f0       	breq	.+2      	; 0x169e <udc_process_setup+0x52e>
    169c:	76 cf       	rjmp	.-276    	; 0x158a <udc_process_setup+0x41a>
    169e:	81 cd       	rjmp	.-1278   	; 0x11a2 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	08 95       	ret

000016ac <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    16ac:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    16b0:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    16b2:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    16b4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    16b8:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    16ba:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    16be:	08 95       	ret

000016c0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    16c0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    16c2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    16c4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    16c6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    16c8:	60 83       	st	Z, r22
	ret                             // Return to caller
    16ca:	08 95       	ret

000016cc <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	1f 92       	push	r1
    16d2:	1f 92       	push	r1
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	81 11       	cpse	r24, r1
    16da:	26 c0       	rjmp	.+76     	; 0x1728 <udd_sleep_mode+0x5c>
    16dc:	90 91 00 23 	lds	r25, 0x2300	; 0x802300 <udd_b_idle>
    16e0:	99 23       	and	r25, r25
    16e2:	f9 f0       	breq	.+62     	; 0x1722 <udd_sleep_mode+0x56>
    16e4:	90 91 07 23 	lds	r25, 0x2307	; 0x802307 <sleepmgr_locks+0x1>
    16e8:	91 11       	cpse	r25, r1
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <udd_sleep_mode+0x22>
    16ec:	ff cf       	rjmp	.-2      	; 0x16ec <udd_sleep_mode+0x20>
    16ee:	9f b7       	in	r25, 0x3f	; 63
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	f8 94       	cli
    16f4:	2a 81       	ldd	r18, Y+2	; 0x02
    16f6:	e6 e0       	ldi	r30, 0x06	; 6
    16f8:	f3 e2       	ldi	r31, 0x23	; 35
    16fa:	91 81       	ldd	r25, Z+1	; 0x01
    16fc:	91 50       	subi	r25, 0x01	; 1
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	2f bf       	out	0x3f, r18	; 63
    1702:	0f c0       	rjmp	.+30     	; 0x1722 <udd_sleep_mode+0x56>
    1704:	90 91 07 23 	lds	r25, 0x2307	; 0x802307 <sleepmgr_locks+0x1>
    1708:	9f 3f       	cpi	r25, 0xFF	; 255
    170a:	09 f4       	brne	.+2      	; 0x170e <udd_sleep_mode+0x42>
    170c:	ff cf       	rjmp	.-2      	; 0x170c <udd_sleep_mode+0x40>
    170e:	9f b7       	in	r25, 0x3f	; 63
    1710:	99 83       	std	Y+1, r25	; 0x01
    1712:	f8 94       	cli
    1714:	29 81       	ldd	r18, Y+1	; 0x01
    1716:	e6 e0       	ldi	r30, 0x06	; 6
    1718:	f3 e2       	ldi	r31, 0x23	; 35
    171a:	91 81       	ldd	r25, Z+1	; 0x01
    171c:	9f 5f       	subi	r25, 0xFF	; 255
    171e:	91 83       	std	Z+1, r25	; 0x01
    1720:	2f bf       	out	0x3f, r18	; 63
    1722:	80 93 00 23 	sts	0x2300, r24	; 0x802300 <udd_b_idle>
    1726:	05 c0       	rjmp	.+10     	; 0x1732 <udd_sleep_mode+0x66>
    1728:	90 91 00 23 	lds	r25, 0x2300	; 0x802300 <udd_b_idle>
    172c:	99 23       	and	r25, r25
    172e:	51 f3       	breq	.-44     	; 0x1704 <udd_sleep_mode+0x38>
    1730:	f8 cf       	rjmp	.-16     	; 0x1722 <udd_sleep_mode+0x56>
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <udd_ctrl_init>:
    173c:	0f 93       	push	r16
    173e:	e8 ec       	ldi	r30, 0xC8	; 200
    1740:	f4 e0       	ldi	r31, 0x04	; 4
    1742:	80 81       	ld	r24, Z
    1744:	8f 7d       	andi	r24, 0xDF	; 223
    1746:	80 83       	st	Z, r24
    1748:	80 81       	ld	r24, Z
    174a:	8f 7d       	andi	r24, 0xDF	; 223
    174c:	80 83       	st	Z, r24
    174e:	e4 ec       	ldi	r30, 0xC4	; 196
    1750:	f2 e2       	ldi	r31, 0x22	; 34
    1752:	02 e0       	ldi	r16, 0x02	; 2
    1754:	05 93       	las	Z, r16
    1756:	10 92 c6 22 	sts	0x22C6, r1	; 0x8022c6 <udd_sram+0x1a>
    175a:	10 92 c7 22 	sts	0x22C7, r1	; 0x8022c7 <udd_sram+0x1b>
    175e:	00 e2       	ldi	r16, 0x20	; 32
    1760:	06 93       	lac	Z, r16
    1762:	00 e4       	ldi	r16, 0x40	; 64
    1764:	06 93       	lac	Z, r16
    1766:	ec eb       	ldi	r30, 0xBC	; 188
    1768:	f2 e2       	ldi	r31, 0x22	; 34
    176a:	00 e4       	ldi	r16, 0x40	; 64
    176c:	06 93       	lac	Z, r16
    176e:	ec e0       	ldi	r30, 0x0C	; 12
    1770:	f3 e2       	ldi	r31, 0x23	; 35
    1772:	14 86       	std	Z+12, r1	; 0x0c
    1774:	15 86       	std	Z+13, r1	; 0x0d
    1776:	16 86       	std	Z+14, r1	; 0x0e
    1778:	17 86       	std	Z+15, r1	; 0x0f
    177a:	12 86       	std	Z+10, r1	; 0x0a
    177c:	13 86       	std	Z+11, r1	; 0x0b
    177e:	10 92 ab 22 	sts	0x22AB, r1	; 0x8022ab <udd_ep_control_state>
    1782:	0f 91       	pop	r16
    1784:	08 95       	ret

00001786 <udd_ctrl_stall_data>:
    1786:	0f 93       	push	r16
    1788:	85 e0       	ldi	r24, 0x05	; 5
    178a:	80 93 ab 22 	sts	0x22AB, r24	; 0x8022ab <udd_ep_control_state>
    178e:	e5 ec       	ldi	r30, 0xC5	; 197
    1790:	f2 e2       	ldi	r31, 0x22	; 34
    1792:	04 e0       	ldi	r16, 0x04	; 4
    1794:	05 93       	las	Z, r16
    1796:	ed eb       	ldi	r30, 0xBD	; 189
    1798:	f2 e2       	ldi	r31, 0x22	; 34
    179a:	04 e0       	ldi	r16, 0x04	; 4
    179c:	05 93       	las	Z, r16
    179e:	0f 91       	pop	r16
    17a0:	08 95       	ret

000017a2 <udd_ctrl_send_zlp_in>:
    17a2:	0f 93       	push	r16
    17a4:	83 e0       	ldi	r24, 0x03	; 3
    17a6:	80 93 ab 22 	sts	0x22AB, r24	; 0x8022ab <udd_ep_control_state>
    17aa:	10 92 c6 22 	sts	0x22C6, r1	; 0x8022c6 <udd_sram+0x1a>
    17ae:	10 92 c7 22 	sts	0x22C7, r1	; 0x8022c7 <udd_sram+0x1b>
    17b2:	e4 ec       	ldi	r30, 0xC4	; 196
    17b4:	f2 e2       	ldi	r31, 0x22	; 34
    17b6:	02 e0       	ldi	r16, 0x02	; 2
    17b8:	06 93       	lac	Z, r16
    17ba:	0f 91       	pop	r16
    17bc:	08 95       	ret

000017be <udd_ctrl_endofrequest>:
    17be:	e0 91 18 23 	lds	r30, 0x2318	; 0x802318 <udd_g_ctrlreq+0xc>
    17c2:	f0 91 19 23 	lds	r31, 0x2319	; 0x802319 <udd_g_ctrlreq+0xd>
    17c6:	30 97       	sbiw	r30, 0x00	; 0
    17c8:	09 f0       	breq	.+2      	; 0x17cc <udd_ctrl_endofrequest+0xe>
    17ca:	19 95       	eicall
    17cc:	08 95       	ret

000017ce <udd_ctrl_in_sent>:
    17ce:	0f 93       	push	r16
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <udd_ep_control_state>
    17d8:	83 30       	cpi	r24, 0x03	; 3
    17da:	19 f4       	brne	.+6      	; 0x17e2 <udd_ctrl_in_sent+0x14>
    17dc:	f0 df       	rcall	.-32     	; 0x17be <udd_ctrl_endofrequest>
    17de:	ae df       	rcall	.-164    	; 0x173c <udd_ctrl_init>
    17e0:	5e c0       	rjmp	.+188    	; 0x189e <udd_ctrl_in_sent+0xd0>
    17e2:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <udd_ctrl_payload_nb_trans>
    17e6:	90 91 a8 22 	lds	r25, 0x22A8	; 0x8022a8 <udd_ctrl_payload_nb_trans+0x1>
    17ea:	c0 91 16 23 	lds	r28, 0x2316	; 0x802316 <udd_g_ctrlreq+0xa>
    17ee:	d0 91 17 23 	lds	r29, 0x2317	; 0x802317 <udd_g_ctrlreq+0xb>
    17f2:	c8 1b       	sub	r28, r24
    17f4:	d9 0b       	sbc	r29, r25
    17f6:	71 f5       	brne	.+92     	; 0x1854 <udd_ctrl_in_sent+0x86>
    17f8:	20 91 a9 22 	lds	r18, 0x22A9	; 0x8022a9 <udd_ctrl_prev_payload_nb_trans>
    17fc:	30 91 aa 22 	lds	r19, 0x22AA	; 0x8022aa <udd_ctrl_prev_payload_nb_trans+0x1>
    1800:	82 0f       	add	r24, r18
    1802:	93 1f       	adc	r25, r19
    1804:	80 93 a9 22 	sts	0x22A9, r24	; 0x8022a9 <udd_ctrl_prev_payload_nb_trans>
    1808:	90 93 aa 22 	sts	0x22AA, r25	; 0x8022aa <udd_ctrl_prev_payload_nb_trans+0x1>
    180c:	20 91 12 23 	lds	r18, 0x2312	; 0x802312 <udd_g_ctrlreq+0x6>
    1810:	30 91 13 23 	lds	r19, 0x2313	; 0x802313 <udd_g_ctrlreq+0x7>
    1814:	82 17       	cp	r24, r18
    1816:	93 07       	cpc	r25, r19
    1818:	21 f0       	breq	.+8      	; 0x1822 <udd_ctrl_in_sent+0x54>
    181a:	80 91 a8 21 	lds	r24, 0x21A8	; 0x8021a8 <b_shortpacket.5272>
    181e:	88 23       	and	r24, r24
    1820:	41 f0       	breq	.+16     	; 0x1832 <udd_ctrl_in_sent+0x64>
    1822:	84 e0       	ldi	r24, 0x04	; 4
    1824:	80 93 ab 22 	sts	0x22AB, r24	; 0x8022ab <udd_ep_control_state>
    1828:	ec eb       	ldi	r30, 0xBC	; 188
    182a:	f2 e2       	ldi	r31, 0x22	; 34
    182c:	02 e0       	ldi	r16, 0x02	; 2
    182e:	06 93       	lac	Z, r16
    1830:	36 c0       	rjmp	.+108    	; 0x189e <udd_ctrl_in_sent+0xd0>
    1832:	e0 91 1a 23 	lds	r30, 0x231A	; 0x80231a <udd_g_ctrlreq+0xe>
    1836:	f0 91 1b 23 	lds	r31, 0x231B	; 0x80231b <udd_g_ctrlreq+0xf>
    183a:	30 97       	sbiw	r30, 0x00	; 0
    183c:	99 f0       	breq	.+38     	; 0x1864 <udd_ctrl_in_sent+0x96>
    183e:	19 95       	eicall
    1840:	88 23       	and	r24, r24
    1842:	81 f0       	breq	.+32     	; 0x1864 <udd_ctrl_in_sent+0x96>
    1844:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <udd_ctrl_payload_nb_trans>
    1848:	10 92 a8 22 	sts	0x22A8, r1	; 0x8022a8 <udd_ctrl_payload_nb_trans+0x1>
    184c:	c0 91 16 23 	lds	r28, 0x2316	; 0x802316 <udd_g_ctrlreq+0xa>
    1850:	d0 91 17 23 	lds	r29, 0x2317	; 0x802317 <udd_g_ctrlreq+0xb>
    1854:	c8 30       	cpi	r28, 0x08	; 8
    1856:	d1 05       	cpc	r29, r1
    1858:	28 f0       	brcs	.+10     	; 0x1864 <udd_ctrl_in_sent+0x96>
    185a:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <b_shortpacket.5272>
    185e:	c8 e0       	ldi	r28, 0x08	; 8
    1860:	d0 e0       	ldi	r29, 0x00	; 0
    1862:	03 c0       	rjmp	.+6      	; 0x186a <udd_ctrl_in_sent+0x9c>
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	80 93 a8 21 	sts	0x21A8, r24	; 0x8021a8 <b_shortpacket.5272>
    186a:	ec ea       	ldi	r30, 0xAC	; 172
    186c:	f2 e2       	ldi	r31, 0x22	; 34
    186e:	c2 8f       	std	Z+26, r28	; 0x1a
    1870:	d3 8f       	std	Z+27, r29	; 0x1b
    1872:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <udd_ctrl_payload_nb_trans>
    1876:	90 91 a8 22 	lds	r25, 0x22A8	; 0x8022a8 <udd_ctrl_payload_nb_trans+0x1>
    187a:	20 91 14 23 	lds	r18, 0x2314	; 0x802314 <udd_g_ctrlreq+0x8>
    187e:	30 91 15 23 	lds	r19, 0x2315	; 0x802315 <udd_g_ctrlreq+0x9>
    1882:	28 0f       	add	r18, r24
    1884:	39 1f       	adc	r19, r25
    1886:	24 8f       	std	Z+28, r18	; 0x1c
    1888:	35 8f       	std	Z+29, r19	; 0x1d
    188a:	c8 0f       	add	r28, r24
    188c:	d9 1f       	adc	r29, r25
    188e:	c0 93 a7 22 	sts	0x22A7, r28	; 0x8022a7 <udd_ctrl_payload_nb_trans>
    1892:	d0 93 a8 22 	sts	0x22A8, r29	; 0x8022a8 <udd_ctrl_payload_nb_trans+0x1>
    1896:	e4 ec       	ldi	r30, 0xC4	; 196
    1898:	f2 e2       	ldi	r31, 0x22	; 34
    189a:	02 e0       	ldi	r16, 0x02	; 2
    189c:	06 93       	lac	Z, r16
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	0f 91       	pop	r16
    18a4:	08 95       	ret

000018a6 <udd_ep_get_size>:
    18a6:	fc 01       	movw	r30, r24
    18a8:	81 81       	ldd	r24, Z+1	; 0x01
    18aa:	e8 2f       	mov	r30, r24
    18ac:	e7 70       	andi	r30, 0x07	; 7
    18ae:	8e 2f       	mov	r24, r30
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	fc 01       	movw	r30, r24
    18b4:	31 97       	sbiw	r30, 0x01	; 1
    18b6:	e7 30       	cpi	r30, 0x07	; 7
    18b8:	f1 05       	cpc	r31, r1
    18ba:	d0 f4       	brcc	.+52     	; 0x18f0 <udd_ep_get_size+0x4a>
    18bc:	88 27       	eor	r24, r24
    18be:	e9 5f       	subi	r30, 0xF9	; 249
    18c0:	fe 4f       	sbci	r31, 0xFE	; 254
    18c2:	8f 4f       	sbci	r24, 0xFF	; 255
    18c4:	13 c7       	rjmp	.+3622   	; 0x26ec <__tablejump2__>
    18c6:	80 e1       	ldi	r24, 0x10	; 16
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	08 95       	ret
    18cc:	80 e2       	ldi	r24, 0x20	; 32
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	08 95       	ret
    18d2:	80 e4       	ldi	r24, 0x40	; 64
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	08 95       	ret
    18d8:	80 e8       	ldi	r24, 0x80	; 128
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	08 95       	ret
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	08 95       	ret
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	92 e0       	ldi	r25, 0x02	; 2
    18e8:	08 95       	ret
    18ea:	8f ef       	ldi	r24, 0xFF	; 255
    18ec:	93 e0       	ldi	r25, 0x03	; 3
    18ee:	08 95       	ret
    18f0:	88 e0       	ldi	r24, 0x08	; 8
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	08 95       	ret

000018f6 <udd_ep_get_job>:
    18f6:	28 2f       	mov	r18, r24
    18f8:	2f 70       	andi	r18, 0x0F	; 15
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	22 0f       	add	r18, r18
    18fe:	33 1f       	adc	r19, r19
    1900:	08 2e       	mov	r0, r24
    1902:	00 0c       	add	r0, r0
    1904:	99 0b       	sbc	r25, r25
    1906:	88 27       	eor	r24, r24
    1908:	99 0f       	add	r25, r25
    190a:	88 1f       	adc	r24, r24
    190c:	99 27       	eor	r25, r25
    190e:	82 0f       	add	r24, r18
    1910:	93 1f       	adc	r25, r19
    1912:	02 97       	sbiw	r24, 0x02	; 2
    1914:	9c 01       	movw	r18, r24
    1916:	22 0f       	add	r18, r18
    1918:	33 1f       	adc	r19, r19
    191a:	22 0f       	add	r18, r18
    191c:	33 1f       	adc	r19, r19
    191e:	22 0f       	add	r18, r18
    1920:	33 1f       	adc	r19, r19
    1922:	82 0f       	add	r24, r18
    1924:	93 1f       	adc	r25, r19
    1926:	87 59       	subi	r24, 0x97	; 151
    1928:	9d 4d       	sbci	r25, 0xDD	; 221
    192a:	08 95       	ret

0000192c <udd_ctrl_interrupt_tc_setup>:
    192c:	0f 93       	push	r16
    192e:	cf 93       	push	r28
    1930:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1934:	80 ff       	sbrs	r24, 0
    1936:	64 c0       	rjmp	.+200    	; 0x1a00 <udd_ctrl_interrupt_tc_setup+0xd4>
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    193e:	ec eb       	ldi	r30, 0xBC	; 188
    1940:	f2 e2       	ldi	r31, 0x22	; 34
    1942:	00 e8       	ldi	r16, 0x80	; 128
    1944:	06 93       	lac	Z, r16
    1946:	e4 ec       	ldi	r30, 0xC4	; 196
    1948:	f2 e2       	ldi	r31, 0x22	; 34
    194a:	00 e8       	ldi	r16, 0x80	; 128
    194c:	06 93       	lac	Z, r16
    194e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    1952:	ec eb       	ldi	r30, 0xBC	; 188
    1954:	f2 e2       	ldi	r31, 0x22	; 34
    1956:	00 e1       	ldi	r16, 0x10	; 16
    1958:	06 93       	lac	Z, r16
    195a:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <udd_ep_control_state>
    195e:	88 23       	and	r24, r24
    1960:	29 f0       	breq	.+10     	; 0x196c <udd_ctrl_interrupt_tc_setup+0x40>
    1962:	83 50       	subi	r24, 0x03	; 3
    1964:	82 30       	cpi	r24, 0x02	; 2
    1966:	08 f4       	brcc	.+2      	; 0x196a <udd_ctrl_interrupt_tc_setup+0x3e>
    1968:	2a df       	rcall	.-428    	; 0x17be <udd_ctrl_endofrequest>
    196a:	e8 de       	rcall	.-560    	; 0x173c <udd_ctrl_init>
    196c:	80 91 be 22 	lds	r24, 0x22BE	; 0x8022be <udd_sram+0x12>
    1970:	90 91 bf 22 	lds	r25, 0x22BF	; 0x8022bf <udd_sram+0x13>
    1974:	08 97       	sbiw	r24, 0x08	; 8
    1976:	09 f0       	breq	.+2      	; 0x197a <udd_ctrl_interrupt_tc_setup+0x4e>
    1978:	45 c0       	rjmp	.+138    	; 0x1a04 <udd_ctrl_interrupt_tc_setup+0xd8>
    197a:	88 e0       	ldi	r24, 0x08	; 8
    197c:	ef e9       	ldi	r30, 0x9F	; 159
    197e:	f2 e2       	ldi	r31, 0x22	; 34
    1980:	ac e0       	ldi	r26, 0x0C	; 12
    1982:	b3 e2       	ldi	r27, 0x23	; 35
    1984:	01 90       	ld	r0, Z+
    1986:	0d 92       	st	X+, r0
    1988:	8a 95       	dec	r24
    198a:	e1 f7       	brne	.-8      	; 0x1984 <udd_ctrl_interrupt_tc_setup+0x58>
    198c:	e8 ec       	ldi	r30, 0xC8	; 200
    198e:	f4 e0       	ldi	r31, 0x04	; 4
    1990:	80 81       	ld	r24, Z
    1992:	80 62       	ori	r24, 0x20	; 32
    1994:	80 83       	st	Z, r24
    1996:	80 81       	ld	r24, Z
    1998:	80 62       	ori	r24, 0x20	; 32
    199a:	80 83       	st	Z, r24
    199c:	e9 db       	rcall	.-2094   	; 0x1170 <udc_process_setup>
    199e:	c8 2f       	mov	r28, r24
    19a0:	81 11       	cpse	r24, r1
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <udd_ctrl_interrupt_tc_setup+0x7e>
    19a4:	f0 de       	rcall	.-544    	; 0x1786 <udd_ctrl_stall_data>
    19a6:	c1 e0       	ldi	r28, 0x01	; 1
    19a8:	2e c0       	rjmp	.+92     	; 0x1a06 <udd_ctrl_interrupt_tc_setup+0xda>
    19aa:	80 91 0c 23 	lds	r24, 0x230C	; 0x80230c <udd_g_ctrlreq>
    19ae:	88 23       	and	r24, r24
    19b0:	6c f4       	brge	.+26     	; 0x19cc <udd_ctrl_interrupt_tc_setup+0xa0>
    19b2:	10 92 a9 22 	sts	0x22A9, r1	; 0x8022a9 <udd_ctrl_prev_payload_nb_trans>
    19b6:	10 92 aa 22 	sts	0x22AA, r1	; 0x8022aa <udd_ctrl_prev_payload_nb_trans+0x1>
    19ba:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <udd_ctrl_payload_nb_trans>
    19be:	10 92 a8 22 	sts	0x22A8, r1	; 0x8022a8 <udd_ctrl_payload_nb_trans+0x1>
    19c2:	82 e0       	ldi	r24, 0x02	; 2
    19c4:	80 93 ab 22 	sts	0x22AB, r24	; 0x8022ab <udd_ep_control_state>
    19c8:	02 df       	rcall	.-508    	; 0x17ce <udd_ctrl_in_sent>
    19ca:	1d c0       	rjmp	.+58     	; 0x1a06 <udd_ctrl_interrupt_tc_setup+0xda>
    19cc:	80 91 12 23 	lds	r24, 0x2312	; 0x802312 <udd_g_ctrlreq+0x6>
    19d0:	90 91 13 23 	lds	r25, 0x2313	; 0x802313 <udd_g_ctrlreq+0x7>
    19d4:	89 2b       	or	r24, r25
    19d6:	11 f4       	brne	.+4      	; 0x19dc <udd_ctrl_interrupt_tc_setup+0xb0>
    19d8:	e4 de       	rcall	.-568    	; 0x17a2 <udd_ctrl_send_zlp_in>
    19da:	15 c0       	rjmp	.+42     	; 0x1a06 <udd_ctrl_interrupt_tc_setup+0xda>
    19dc:	10 92 a9 22 	sts	0x22A9, r1	; 0x8022a9 <udd_ctrl_prev_payload_nb_trans>
    19e0:	10 92 aa 22 	sts	0x22AA, r1	; 0x8022aa <udd_ctrl_prev_payload_nb_trans+0x1>
    19e4:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <udd_ctrl_payload_nb_trans>
    19e8:	10 92 a8 22 	sts	0x22A8, r1	; 0x8022a8 <udd_ctrl_payload_nb_trans+0x1>
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	80 93 ab 22 	sts	0x22AB, r24	; 0x8022ab <udd_ep_control_state>
    19f2:	ec eb       	ldi	r30, 0xBC	; 188
    19f4:	f2 e2       	ldi	r31, 0x22	; 34
    19f6:	02 e0       	ldi	r16, 0x02	; 2
    19f8:	06 93       	lac	Z, r16
    19fa:	00 e2       	ldi	r16, 0x20	; 32
    19fc:	06 93       	lac	Z, r16
    19fe:	03 c0       	rjmp	.+6      	; 0x1a06 <udd_ctrl_interrupt_tc_setup+0xda>
    1a00:	c0 e0       	ldi	r28, 0x00	; 0
    1a02:	01 c0       	rjmp	.+2      	; 0x1a06 <udd_ctrl_interrupt_tc_setup+0xda>
    1a04:	c1 e0       	ldi	r28, 0x01	; 1
    1a06:	8c 2f       	mov	r24, r28
    1a08:	cf 91       	pop	r28
    1a0a:	0f 91       	pop	r16
    1a0c:	08 95       	ret

00001a0e <udd_ep_trans_complet>:
    1a0e:	8f 92       	push	r8
    1a10:	9f 92       	push	r9
    1a12:	af 92       	push	r10
    1a14:	bf 92       	push	r11
    1a16:	df 92       	push	r13
    1a18:	ef 92       	push	r14
    1a1a:	ff 92       	push	r15
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	d8 2e       	mov	r13, r24
    1a26:	67 df       	rcall	.-306    	; 0x18f6 <udd_ep_get_job>
    1a28:	8c 01       	movw	r16, r24
    1a2a:	cd 2d       	mov	r28, r13
    1a2c:	cf 70       	andi	r28, 0x0F	; 15
    1a2e:	d0 e0       	ldi	r29, 0x00	; 0
    1a30:	ce 01       	movw	r24, r28
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	cd 2d       	mov	r28, r13
    1a38:	0d 2c       	mov	r0, r13
    1a3a:	00 0c       	add	r0, r0
    1a3c:	dd 0b       	sbc	r29, r29
    1a3e:	cc 27       	eor	r28, r28
    1a40:	dd 0f       	add	r29, r29
    1a42:	cc 1f       	adc	r28, r28
    1a44:	dd 27       	eor	r29, r29
    1a46:	c8 0f       	add	r28, r24
    1a48:	d9 1f       	adc	r29, r25
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	88 0f       	add	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	9c 01       	movw	r18, r24
    1a5a:	24 54       	subi	r18, 0x44	; 68
    1a5c:	3d 4d       	sbci	r19, 0xDD	; 221
    1a5e:	79 01       	movw	r14, r18
    1a60:	c9 01       	movw	r24, r18
    1a62:	21 df       	rcall	.-446    	; 0x18a6 <udd_ep_get_size>
    1a64:	4c 01       	movw	r8, r24
    1a66:	dd 20       	and	r13, r13
    1a68:	0c f0       	brlt	.+2      	; 0x1a6c <udd_ep_trans_complet+0x5e>
    1a6a:	70 c0       	rjmp	.+224    	; 0x1b4c <udd_ep_trans_complet+0x13e>
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	ee 0f       	add	r30, r30
    1a70:	ff 1f       	adc	r31, r31
    1a72:	ee 0f       	add	r30, r30
    1a74:	ff 1f       	adc	r31, r31
    1a76:	ee 0f       	add	r30, r30
    1a78:	ff 1f       	adc	r31, r31
    1a7a:	e4 55       	subi	r30, 0x54	; 84
    1a7c:	fd 4d       	sbci	r31, 0xDD	; 221
    1a7e:	26 89       	ldd	r18, Z+22	; 0x16
    1a80:	37 89       	ldd	r19, Z+23	; 0x17
    1a82:	d8 01       	movw	r26, r16
    1a84:	15 96       	adiw	r26, 0x05	; 5
    1a86:	8d 91       	ld	r24, X+
    1a88:	9c 91       	ld	r25, X
    1a8a:	16 97       	sbiw	r26, 0x06	; 6
    1a8c:	82 0f       	add	r24, r18
    1a8e:	93 1f       	adc	r25, r19
    1a90:	15 96       	adiw	r26, 0x05	; 5
    1a92:	8d 93       	st	X+, r24
    1a94:	9c 93       	st	X, r25
    1a96:	16 97       	sbiw	r26, 0x06	; 6
    1a98:	13 96       	adiw	r26, 0x03	; 3
    1a9a:	2d 91       	ld	r18, X+
    1a9c:	3c 91       	ld	r19, X
    1a9e:	14 97       	sbiw	r26, 0x04	; 4
    1aa0:	82 17       	cp	r24, r18
    1aa2:	93 07       	cpc	r25, r19
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <udd_ep_trans_complet+0x9a>
    1aa6:	3c c0       	rjmp	.+120    	; 0x1b20 <udd_ep_trans_complet+0x112>
    1aa8:	28 1b       	sub	r18, r24
    1aaa:	39 0b       	sbc	r19, r25
    1aac:	21 15       	cp	r18, r1
    1aae:	b4 e0       	ldi	r27, 0x04	; 4
    1ab0:	3b 07       	cpc	r19, r27
    1ab2:	38 f0       	brcs	.+14     	; 0x1ac2 <udd_ep_trans_complet+0xb4>
    1ab4:	2f ef       	ldi	r18, 0xFF	; 255
    1ab6:	33 e0       	ldi	r19, 0x03	; 3
    1ab8:	c9 01       	movw	r24, r18
    1aba:	b4 01       	movw	r22, r8
    1abc:	03 d6       	rcall	.+3078   	; 0x26c4 <__udivmodhi4>
    1abe:	28 1b       	sub	r18, r24
    1ac0:	39 0b       	sbc	r19, r25
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	80 81       	ld	r24, Z
    1ac6:	81 ff       	sbrs	r24, 1
    1ac8:	09 c0       	rjmp	.+18     	; 0x1adc <udd_ep_trans_complet+0xce>
    1aca:	c9 01       	movw	r24, r18
    1acc:	b4 01       	movw	r22, r8
    1ace:	fa d5       	rcall	.+3060   	; 0x26c4 <__udivmodhi4>
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	89 2b       	or	r24, r25
    1ad4:	09 f0       	breq	.+2      	; 0x1ad8 <udd_ep_trans_complet+0xca>
    1ad6:	40 e0       	ldi	r20, 0x00	; 0
    1ad8:	84 2f       	mov	r24, r20
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <udd_ep_trans_complet+0xd0>
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	d8 01       	movw	r26, r16
    1ae0:	9c 91       	ld	r25, X
    1ae2:	80 fb       	bst	r24, 0
    1ae4:	91 f9       	bld	r25, 1
    1ae6:	9c 93       	st	X, r25
    1ae8:	cc 0f       	add	r28, r28
    1aea:	dd 1f       	adc	r29, r29
    1aec:	cc 0f       	add	r28, r28
    1aee:	dd 1f       	adc	r29, r29
    1af0:	cc 0f       	add	r28, r28
    1af2:	dd 1f       	adc	r29, r29
    1af4:	c4 55       	subi	r28, 0x54	; 84
    1af6:	dd 4d       	sbci	r29, 0xDD	; 221
    1af8:	1e 8a       	std	Y+22, r1	; 0x16
    1afa:	1f 8a       	std	Y+23, r1	; 0x17
    1afc:	2a 8b       	std	Y+18, r18	; 0x12
    1afe:	3b 8b       	std	Y+19, r19	; 0x13
    1b00:	11 96       	adiw	r26, 0x01	; 1
    1b02:	2d 91       	ld	r18, X+
    1b04:	3c 91       	ld	r19, X
    1b06:	12 97       	sbiw	r26, 0x02	; 2
    1b08:	15 96       	adiw	r26, 0x05	; 5
    1b0a:	8d 91       	ld	r24, X+
    1b0c:	9c 91       	ld	r25, X
    1b0e:	16 97       	sbiw	r26, 0x06	; 6
    1b10:	82 0f       	add	r24, r18
    1b12:	93 1f       	adc	r25, r19
    1b14:	8c 8b       	std	Y+20, r24	; 0x14
    1b16:	9d 8b       	std	Y+21, r25	; 0x15
    1b18:	f7 01       	movw	r30, r14
    1b1a:	02 e0       	ldi	r16, 0x02	; 2
    1b1c:	06 93       	lac	Z, r16
    1b1e:	c6 c0       	rjmp	.+396    	; 0x1cac <udd_ep_trans_complet+0x29e>
    1b20:	d8 01       	movw	r26, r16
    1b22:	8c 91       	ld	r24, X
    1b24:	81 ff       	sbrs	r24, 1
    1b26:	af c0       	rjmp	.+350    	; 0x1c86 <udd_ep_trans_complet+0x278>
    1b28:	8d 7f       	andi	r24, 0xFD	; 253
    1b2a:	8c 93       	st	X, r24
    1b2c:	cc 0f       	add	r28, r28
    1b2e:	dd 1f       	adc	r29, r29
    1b30:	cc 0f       	add	r28, r28
    1b32:	dd 1f       	adc	r29, r29
    1b34:	cc 0f       	add	r28, r28
    1b36:	dd 1f       	adc	r29, r29
    1b38:	c4 55       	subi	r28, 0x54	; 84
    1b3a:	dd 4d       	sbci	r29, 0xDD	; 221
    1b3c:	1e 8a       	std	Y+22, r1	; 0x16
    1b3e:	1f 8a       	std	Y+23, r1	; 0x17
    1b40:	1a 8a       	std	Y+18, r1	; 0x12
    1b42:	1b 8a       	std	Y+19, r1	; 0x13
    1b44:	f7 01       	movw	r30, r14
    1b46:	02 e0       	ldi	r16, 0x02	; 2
    1b48:	06 93       	lac	Z, r16
    1b4a:	b0 c0       	rjmp	.+352    	; 0x1cac <udd_ep_trans_complet+0x29e>
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	ee 0f       	add	r30, r30
    1b50:	ff 1f       	adc	r31, r31
    1b52:	ee 0f       	add	r30, r30
    1b54:	ff 1f       	adc	r31, r31
    1b56:	ee 0f       	add	r30, r30
    1b58:	ff 1f       	adc	r31, r31
    1b5a:	e4 55       	subi	r30, 0x54	; 84
    1b5c:	fd 4d       	sbci	r31, 0xDD	; 221
    1b5e:	a2 88       	ldd	r10, Z+18	; 0x12
    1b60:	b3 88       	ldd	r11, Z+19	; 0x13
    1b62:	d8 01       	movw	r26, r16
    1b64:	8c 91       	ld	r24, X
    1b66:	82 ff       	sbrs	r24, 2
    1b68:	19 c0       	rjmp	.+50     	; 0x1b9c <udd_ep_trans_complet+0x18e>
    1b6a:	11 96       	adiw	r26, 0x01	; 1
    1b6c:	ed 91       	ld	r30, X+
    1b6e:	fc 91       	ld	r31, X
    1b70:	12 97       	sbiw	r26, 0x02	; 2
    1b72:	15 96       	adiw	r26, 0x05	; 5
    1b74:	2d 91       	ld	r18, X+
    1b76:	3c 91       	ld	r19, X
    1b78:	16 97       	sbiw	r26, 0x06	; 6
    1b7a:	13 96       	adiw	r26, 0x03	; 3
    1b7c:	8d 91       	ld	r24, X+
    1b7e:	9c 91       	ld	r25, X
    1b80:	14 97       	sbiw	r26, 0x04	; 4
    1b82:	b4 01       	movw	r22, r8
    1b84:	9f d5       	rcall	.+2878   	; 0x26c4 <__udivmodhi4>
    1b86:	b0 e4       	ldi	r27, 0x40	; 64
    1b88:	db 9e       	mul	r13, r27
    1b8a:	b0 01       	movw	r22, r0
    1b8c:	11 24       	eor	r1, r1
    1b8e:	67 59       	subi	r22, 0x97	; 151
    1b90:	7e 4d       	sbci	r23, 0xDE	; 222
    1b92:	ac 01       	movw	r20, r24
    1b94:	cf 01       	movw	r24, r30
    1b96:	82 0f       	add	r24, r18
    1b98:	93 1f       	adc	r25, r19
    1b9a:	b0 d5       	rcall	.+2912   	; 0x26fc <memcpy>
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	25 81       	ldd	r18, Z+5	; 0x05
    1ba0:	36 81       	ldd	r19, Z+6	; 0x06
    1ba2:	2a 0d       	add	r18, r10
    1ba4:	3b 1d       	adc	r19, r11
    1ba6:	25 83       	std	Z+5, r18	; 0x05
    1ba8:	36 83       	std	Z+6, r19	; 0x06
    1baa:	83 81       	ldd	r24, Z+3	; 0x03
    1bac:	94 81       	ldd	r25, Z+4	; 0x04
    1bae:	82 17       	cp	r24, r18
    1bb0:	93 07       	cpc	r25, r19
    1bb2:	68 f4       	brcc	.+26     	; 0x1bce <udd_ep_trans_complet+0x1c0>
    1bb4:	85 83       	std	Z+5, r24	; 0x05
    1bb6:	96 83       	std	Z+6, r25	; 0x06
    1bb8:	cc 0f       	add	r28, r28
    1bba:	dd 1f       	adc	r29, r29
    1bbc:	cc 0f       	add	r28, r28
    1bbe:	dd 1f       	adc	r29, r29
    1bc0:	cc 0f       	add	r28, r28
    1bc2:	dd 1f       	adc	r29, r29
    1bc4:	c4 55       	subi	r28, 0x54	; 84
    1bc6:	dd 4d       	sbci	r29, 0xDD	; 221
    1bc8:	8e 89       	ldd	r24, Y+22	; 0x16
    1bca:	9f 89       	ldd	r25, Y+23	; 0x17
    1bcc:	5c c0       	rjmp	.+184    	; 0x1c86 <udd_ep_trans_complet+0x278>
    1bce:	fe 01       	movw	r30, r28
    1bd0:	ee 0f       	add	r30, r30
    1bd2:	ff 1f       	adc	r31, r31
    1bd4:	ee 0f       	add	r30, r30
    1bd6:	ff 1f       	adc	r31, r31
    1bd8:	ee 0f       	add	r30, r30
    1bda:	ff 1f       	adc	r31, r31
    1bdc:	e4 55       	subi	r30, 0x54	; 84
    1bde:	fd 4d       	sbci	r31, 0xDD	; 221
    1be0:	46 89       	ldd	r20, Z+22	; 0x16
    1be2:	57 89       	ldd	r21, Z+23	; 0x17
    1be4:	a4 16       	cp	r10, r20
    1be6:	b5 06       	cpc	r11, r21
    1be8:	09 f0       	breq	.+2      	; 0x1bec <udd_ep_trans_complet+0x1de>
    1bea:	4d c0       	rjmp	.+154    	; 0x1c86 <udd_ep_trans_complet+0x278>
    1bec:	28 17       	cp	r18, r24
    1bee:	39 07       	cpc	r19, r25
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <udd_ep_trans_complet+0x1e6>
    1bf2:	49 c0       	rjmp	.+146    	; 0x1c86 <udd_ep_trans_complet+0x278>
    1bf4:	ac 01       	movw	r20, r24
    1bf6:	42 1b       	sub	r20, r18
    1bf8:	53 0b       	sbc	r21, r19
    1bfa:	9a 01       	movw	r18, r20
    1bfc:	21 15       	cp	r18, r1
    1bfe:	54 e0       	ldi	r21, 0x04	; 4
    1c00:	35 07       	cpc	r19, r21
    1c02:	40 f0       	brcs	.+16     	; 0x1c14 <udd_ep_trans_complet+0x206>
    1c04:	2f ef       	ldi	r18, 0xFF	; 255
    1c06:	33 e0       	ldi	r19, 0x03	; 3
    1c08:	c9 01       	movw	r24, r18
    1c0a:	b4 01       	movw	r22, r8
    1c0c:	5b d5       	rcall	.+2742   	; 0x26c4 <__udivmodhi4>
    1c0e:	28 1b       	sub	r18, r24
    1c10:	39 0b       	sbc	r19, r25
    1c12:	05 c0       	rjmp	.+10     	; 0x1c1e <udd_ep_trans_complet+0x210>
    1c14:	c9 01       	movw	r24, r18
    1c16:	b4 01       	movw	r22, r8
    1c18:	55 d5       	rcall	.+2730   	; 0x26c4 <__udivmodhi4>
    1c1a:	28 1b       	sub	r18, r24
    1c1c:	39 0b       	sbc	r19, r25
    1c1e:	fe 01       	movw	r30, r28
    1c20:	ee 0f       	add	r30, r30
    1c22:	ff 1f       	adc	r31, r31
    1c24:	ee 0f       	add	r30, r30
    1c26:	ff 1f       	adc	r31, r31
    1c28:	ee 0f       	add	r30, r30
    1c2a:	ff 1f       	adc	r31, r31
    1c2c:	e4 55       	subi	r30, 0x54	; 84
    1c2e:	fd 4d       	sbci	r31, 0xDD	; 221
    1c30:	12 8a       	std	Z+18, r1	; 0x12
    1c32:	13 8a       	std	Z+19, r1	; 0x13
    1c34:	28 15       	cp	r18, r8
    1c36:	39 05       	cpc	r19, r9
    1c38:	78 f4       	brcc	.+30     	; 0x1c58 <udd_ep_trans_complet+0x24a>
    1c3a:	d8 01       	movw	r26, r16
    1c3c:	8c 91       	ld	r24, X
    1c3e:	84 60       	ori	r24, 0x04	; 4
    1c40:	8c 93       	st	X, r24
    1c42:	b0 e4       	ldi	r27, 0x40	; 64
    1c44:	db 9e       	mul	r13, r27
    1c46:	c0 01       	movw	r24, r0
    1c48:	11 24       	eor	r1, r1
    1c4a:	87 59       	subi	r24, 0x97	; 151
    1c4c:	9e 4d       	sbci	r25, 0xDE	; 222
    1c4e:	84 8b       	std	Z+20, r24	; 0x14
    1c50:	95 8b       	std	Z+21, r25	; 0x15
    1c52:	86 8a       	std	Z+22, r8	; 0x16
    1c54:	97 8a       	std	Z+23, r9	; 0x17
    1c56:	13 c0       	rjmp	.+38     	; 0x1c7e <udd_ep_trans_complet+0x270>
    1c58:	f8 01       	movw	r30, r16
    1c5a:	41 81       	ldd	r20, Z+1	; 0x01
    1c5c:	52 81       	ldd	r21, Z+2	; 0x02
    1c5e:	85 81       	ldd	r24, Z+5	; 0x05
    1c60:	96 81       	ldd	r25, Z+6	; 0x06
    1c62:	84 0f       	add	r24, r20
    1c64:	95 1f       	adc	r25, r21
    1c66:	cc 0f       	add	r28, r28
    1c68:	dd 1f       	adc	r29, r29
    1c6a:	cc 0f       	add	r28, r28
    1c6c:	dd 1f       	adc	r29, r29
    1c6e:	cc 0f       	add	r28, r28
    1c70:	dd 1f       	adc	r29, r29
    1c72:	c4 55       	subi	r28, 0x54	; 84
    1c74:	dd 4d       	sbci	r29, 0xDD	; 221
    1c76:	8c 8b       	std	Y+20, r24	; 0x14
    1c78:	9d 8b       	std	Y+21, r25	; 0x15
    1c7a:	2e 8b       	std	Y+22, r18	; 0x16
    1c7c:	3f 8b       	std	Y+23, r19	; 0x17
    1c7e:	f7 01       	movw	r30, r14
    1c80:	02 e0       	ldi	r16, 0x02	; 2
    1c82:	06 93       	lac	Z, r16
    1c84:	13 c0       	rjmp	.+38     	; 0x1cac <udd_ep_trans_complet+0x29e>
    1c86:	d8 01       	movw	r26, r16
    1c88:	8c 91       	ld	r24, X
    1c8a:	80 ff       	sbrs	r24, 0
    1c8c:	0f c0       	rjmp	.+30     	; 0x1cac <udd_ep_trans_complet+0x29e>
    1c8e:	8e 7f       	andi	r24, 0xFE	; 254
    1c90:	8c 93       	st	X, r24
    1c92:	17 96       	adiw	r26, 0x07	; 7
    1c94:	ed 91       	ld	r30, X+
    1c96:	fc 91       	ld	r31, X
    1c98:	18 97       	sbiw	r26, 0x08	; 8
    1c9a:	30 97       	sbiw	r30, 0x00	; 0
    1c9c:	39 f0       	breq	.+14     	; 0x1cac <udd_ep_trans_complet+0x29e>
    1c9e:	15 96       	adiw	r26, 0x05	; 5
    1ca0:	6d 91       	ld	r22, X+
    1ca2:	7c 91       	ld	r23, X
    1ca4:	16 97       	sbiw	r26, 0x06	; 6
    1ca6:	4d 2d       	mov	r20, r13
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	19 95       	eicall
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	ff 90       	pop	r15
    1cb6:	ef 90       	pop	r14
    1cb8:	df 90       	pop	r13
    1cba:	bf 90       	pop	r11
    1cbc:	af 90       	pop	r10
    1cbe:	9f 90       	pop	r9
    1cc0:	8f 90       	pop	r8
    1cc2:	08 95       	ret

00001cc4 <udd_attach>:
    1cc4:	1f 93       	push	r17
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	1f 92       	push	r1
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	8f b7       	in	r24, 0x3f	; 63
    1cd2:	89 83       	std	Y+1, r24	; 0x01
    1cd4:	f8 94       	cli
    1cd6:	19 81       	ldd	r17, Y+1	; 0x01
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	f8 dc       	rcall	.-1552   	; 0x16cc <udd_sleep_mode>
    1cdc:	ea ec       	ldi	r30, 0xCA	; 202
    1cde:	f4 e0       	ldi	r31, 0x04	; 4
    1ce0:	80 e4       	ldi	r24, 0x40	; 64
    1ce2:	80 83       	st	Z, r24
    1ce4:	80 e2       	ldi	r24, 0x20	; 32
    1ce6:	80 83       	st	Z, r24
    1ce8:	e1 ec       	ldi	r30, 0xC1	; 193
    1cea:	f4 e0       	ldi	r31, 0x04	; 4
    1cec:	80 81       	ld	r24, Z
    1cee:	81 60       	ori	r24, 0x01	; 1
    1cf0:	80 83       	st	Z, r24
    1cf2:	a9 ec       	ldi	r26, 0xC9	; 201
    1cf4:	b4 e0       	ldi	r27, 0x04	; 4
    1cf6:	8c 91       	ld	r24, X
    1cf8:	82 60       	ori	r24, 0x02	; 2
    1cfa:	8c 93       	st	X, r24
    1cfc:	e8 ec       	ldi	r30, 0xC8	; 200
    1cfe:	f4 e0       	ldi	r31, 0x04	; 4
    1d00:	80 81       	ld	r24, Z
    1d02:	80 64       	ori	r24, 0x40	; 64
    1d04:	80 83       	st	Z, r24
    1d06:	8c 91       	ld	r24, X
    1d08:	81 60       	ori	r24, 0x01	; 1
    1d0a:	8c 93       	st	X, r24
    1d0c:	80 81       	ld	r24, Z
    1d0e:	80 68       	ori	r24, 0x80	; 128
    1d10:	80 83       	st	Z, r24
    1d12:	1f bf       	out	0x3f, r17	; 63
    1d14:	0f 90       	pop	r0
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	1f 91       	pop	r17
    1d1c:	08 95       	ret

00001d1e <udd_enable>:
    1d1e:	0f 93       	push	r16
    1d20:	1f 93       	push	r17
    1d22:	cf 93       	push	r28
    1d24:	df 93       	push	r29
    1d26:	1f 92       	push	r1
    1d28:	1f 92       	push	r1
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	00 e6       	ldi	r16, 0x60	; 96
    1d30:	10 e0       	ldi	r17, 0x00	; 0
    1d32:	f8 01       	movw	r30, r16
    1d34:	10 82       	st	Z, r1
    1d36:	80 e3       	ldi	r24, 0x30	; 48
    1d38:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <sysclk_enable_usb>
    1d3c:	e0 ec       	ldi	r30, 0xC0	; 192
    1d3e:	f4 e0       	ldi	r31, 0x04	; 4
    1d40:	80 81       	ld	r24, Z
    1d42:	80 64       	ori	r24, 0x40	; 64
    1d44:	80 83       	st	Z, r24
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	f8 01       	movw	r30, r16
    1d4a:	80 83       	st	Z, r24
    1d4c:	8f b7       	in	r24, 0x3f	; 63
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
    1d50:	f8 94       	cli
    1d52:	1a 81       	ldd	r17, Y+2	; 0x02
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	fc 01       	movw	r30, r24
    1d5a:	ee 0f       	add	r30, r30
    1d5c:	ff 1f       	adc	r31, r31
    1d5e:	ee 0f       	add	r30, r30
    1d60:	ff 1f       	adc	r31, r31
    1d62:	ee 0f       	add	r30, r30
    1d64:	ff 1f       	adc	r31, r31
    1d66:	e4 55       	subi	r30, 0x54	; 84
    1d68:	fd 4d       	sbci	r31, 0xDD	; 221
    1d6a:	11 8a       	std	Z+17, r1	; 0x11
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	88 30       	cpi	r24, 0x08	; 8
    1d70:	91 05       	cpc	r25, r1
    1d72:	91 f7       	brne	.-28     	; 0x1d58 <udd_enable+0x3a>
    1d74:	e9 e6       	ldi	r30, 0x69	; 105
    1d76:	f2 e2       	ldi	r31, 0x22	; 34
    1d78:	80 81       	ld	r24, Z
    1d7a:	8e 7f       	andi	r24, 0xFE	; 254
    1d7c:	80 83       	st	Z, r24
    1d7e:	e2 e7       	ldi	r30, 0x72	; 114
    1d80:	f2 e2       	ldi	r31, 0x22	; 34
    1d82:	80 81       	ld	r24, Z
    1d84:	8e 7f       	andi	r24, 0xFE	; 254
    1d86:	80 83       	st	Z, r24
    1d88:	eb e7       	ldi	r30, 0x7B	; 123
    1d8a:	f2 e2       	ldi	r31, 0x22	; 34
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8e 7f       	andi	r24, 0xFE	; 254
    1d90:	80 83       	st	Z, r24
    1d92:	e4 e8       	ldi	r30, 0x84	; 132
    1d94:	f2 e2       	ldi	r31, 0x22	; 34
    1d96:	80 81       	ld	r24, Z
    1d98:	8e 7f       	andi	r24, 0xFE	; 254
    1d9a:	80 83       	st	Z, r24
    1d9c:	ed e8       	ldi	r30, 0x8D	; 141
    1d9e:	f2 e2       	ldi	r31, 0x22	; 34
    1da0:	80 81       	ld	r24, Z
    1da2:	8e 7f       	andi	r24, 0xFE	; 254
    1da4:	80 83       	st	Z, r24
    1da6:	e6 e9       	ldi	r30, 0x96	; 150
    1da8:	f2 e2       	ldi	r31, 0x22	; 34
    1daa:	80 81       	ld	r24, Z
    1dac:	8e 7f       	andi	r24, 0xFE	; 254
    1dae:	80 83       	st	Z, r24
    1db0:	6a e1       	ldi	r22, 0x1A	; 26
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	82 e0       	ldi	r24, 0x02	; 2
    1db6:	7a dc       	rcall	.-1804   	; 0x16ac <nvm_read_byte>
    1db8:	8f 3f       	cpi	r24, 0xFF	; 255
    1dba:	19 f0       	breq	.+6      	; 0x1dc2 <udd_enable+0xa4>
    1dbc:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    1dc0:	03 c0       	rjmp	.+6      	; 0x1dc8 <udd_enable+0xaa>
    1dc2:	8f e1       	ldi	r24, 0x1F	; 31
    1dc4:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    1dc8:	6b e1       	ldi	r22, 0x1B	; 27
    1dca:	70 e0       	ldi	r23, 0x00	; 0
    1dcc:	82 e0       	ldi	r24, 0x02	; 2
    1dce:	6e dc       	rcall	.-1828   	; 0x16ac <nvm_read_byte>
    1dd0:	8f 3f       	cpi	r24, 0xFF	; 255
    1dd2:	19 f0       	breq	.+6      	; 0x1dda <udd_enable+0xbc>
    1dd4:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    1dd8:	03 c0       	rjmp	.+6      	; 0x1de0 <udd_enable+0xc2>
    1dda:	8f e1       	ldi	r24, 0x1F	; 31
    1ddc:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    1de0:	e0 ec       	ldi	r30, 0xC0	; 192
    1de2:	f4 e0       	ldi	r31, 0x04	; 4
    1de4:	80 81       	ld	r24, Z
    1de6:	83 60       	ori	r24, 0x03	; 3
    1de8:	80 83       	st	Z, r24
    1dea:	80 81       	ld	r24, Z
    1dec:	80 68       	ori	r24, 0x80	; 128
    1dee:	80 83       	st	Z, r24
    1df0:	80 81       	ld	r24, Z
    1df2:	80 61       	ori	r24, 0x10	; 16
    1df4:	80 83       	st	Z, r24
    1df6:	8c eb       	ldi	r24, 0xBC	; 188
    1df8:	92 e2       	ldi	r25, 0x22	; 34
    1dfa:	86 83       	std	Z+6, r24	; 0x06
    1dfc:	97 83       	std	Z+7, r25	; 0x07
    1dfe:	80 81       	ld	r24, Z
    1e00:	80 62       	ori	r24, 0x20	; 32
    1e02:	80 83       	st	Z, r24
    1e04:	8f ef       	ldi	r24, 0xFF	; 255
    1e06:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    1e0a:	e8 ec       	ldi	r30, 0xC8	; 200
    1e0c:	f4 e0       	ldi	r31, 0x04	; 4
    1e0e:	80 81       	ld	r24, Z
    1e10:	81 60       	ori	r24, 0x01	; 1
    1e12:	80 83       	st	Z, r24
    1e14:	10 92 00 23 	sts	0x2300, r1	; 0x802300 <udd_b_idle>
    1e18:	80 91 0b 23 	lds	r24, 0x230B	; 0x80230b <sleepmgr_locks+0x5>
    1e1c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <udd_enable+0x104>
    1e20:	ff cf       	rjmp	.-2      	; 0x1e20 <udd_enable+0x102>
    1e22:	8f b7       	in	r24, 0x3f	; 63
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	f8 94       	cli
    1e28:	99 81       	ldd	r25, Y+1	; 0x01
    1e2a:	e6 e0       	ldi	r30, 0x06	; 6
    1e2c:	f3 e2       	ldi	r31, 0x23	; 35
    1e2e:	85 81       	ldd	r24, Z+5	; 0x05
    1e30:	8f 5f       	subi	r24, 0xFF	; 255
    1e32:	85 83       	std	Z+5, r24	; 0x05
    1e34:	9f bf       	out	0x3f, r25	; 63
    1e36:	46 df       	rcall	.-372    	; 0x1cc4 <udd_attach>
    1e38:	1f bf       	out	0x3f, r17	; 63
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	1f 91       	pop	r17
    1e44:	0f 91       	pop	r16
    1e46:	08 95       	ret

00001e48 <udd_set_address>:
    1e48:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    1e4c:	08 95       	ret

00001e4e <udd_getaddress>:
    1e4e:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    1e52:	08 95       	ret

00001e54 <udd_get_frame_number>:
    1e54:	80 91 fc 22 	lds	r24, 0x22FC	; 0x8022fc <udd_sram+0x50>
    1e58:	90 91 fd 22 	lds	r25, 0x22FD	; 0x8022fd <udd_sram+0x51>
    1e5c:	08 95       	ret

00001e5e <udd_set_setup_payload>:
    1e5e:	ec e0       	ldi	r30, 0x0C	; 12
    1e60:	f3 e2       	ldi	r31, 0x23	; 35
    1e62:	80 87       	std	Z+8, r24	; 0x08
    1e64:	91 87       	std	Z+9, r25	; 0x09
    1e66:	62 87       	std	Z+10, r22	; 0x0a
    1e68:	73 87       	std	Z+11, r23	; 0x0b
    1e6a:	08 95       	ret

00001e6c <udd_ep_alloc>:
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	2f 70       	andi	r18, 0x0F	; 15
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	22 0f       	add	r18, r18
    1e74:	33 1f       	adc	r19, r19
    1e76:	08 2e       	mov	r0, r24
    1e78:	00 0c       	add	r0, r0
    1e7a:	99 0b       	sbc	r25, r25
    1e7c:	88 27       	eor	r24, r24
    1e7e:	99 0f       	add	r25, r25
    1e80:	88 1f       	adc	r24, r24
    1e82:	99 27       	eor	r25, r25
    1e84:	82 0f       	add	r24, r18
    1e86:	93 1f       	adc	r25, r19
    1e88:	fc 01       	movw	r30, r24
    1e8a:	ee 0f       	add	r30, r30
    1e8c:	ff 1f       	adc	r31, r31
    1e8e:	ee 0f       	add	r30, r30
    1e90:	ff 1f       	adc	r31, r31
    1e92:	ee 0f       	add	r30, r30
    1e94:	ff 1f       	adc	r31, r31
    1e96:	e4 55       	subi	r30, 0x54	; 84
    1e98:	fd 4d       	sbci	r31, 0xDD	; 221
    1e9a:	21 89       	ldd	r18, Z+17	; 0x11
    1e9c:	20 7c       	andi	r18, 0xC0	; 192
    1e9e:	09 f0       	breq	.+2      	; 0x1ea2 <udd_ep_alloc+0x36>
    1ea0:	72 c0       	rjmp	.+228    	; 0x1f86 <udd_ep_alloc+0x11a>
    1ea2:	63 70       	andi	r22, 0x03	; 3
    1ea4:	61 30       	cpi	r22, 0x01	; 1
    1ea6:	11 f0       	breq	.+4      	; 0x1eac <udd_ep_alloc+0x40>
    1ea8:	18 f4       	brcc	.+6      	; 0x1eb0 <udd_ep_alloc+0x44>
    1eaa:	04 c0       	rjmp	.+8      	; 0x1eb4 <udd_ep_alloc+0x48>
    1eac:	60 ec       	ldi	r22, 0xC0	; 192
    1eae:	03 c0       	rjmp	.+6      	; 0x1eb6 <udd_ep_alloc+0x4a>
    1eb0:	60 e8       	ldi	r22, 0x80	; 128
    1eb2:	01 c0       	rjmp	.+2      	; 0x1eb6 <udd_ep_alloc+0x4a>
    1eb4:	60 e4       	ldi	r22, 0x40	; 64
    1eb6:	40 38       	cpi	r20, 0x80	; 128
    1eb8:	51 05       	cpc	r21, r1
    1eba:	e9 f0       	breq	.+58     	; 0x1ef6 <udd_ep_alloc+0x8a>
    1ebc:	50 f4       	brcc	.+20     	; 0x1ed2 <udd_ep_alloc+0x66>
    1ebe:	40 32       	cpi	r20, 0x20	; 32
    1ec0:	51 05       	cpc	r21, r1
    1ec2:	a9 f0       	breq	.+42     	; 0x1eee <udd_ep_alloc+0x82>
    1ec4:	40 34       	cpi	r20, 0x40	; 64
    1ec6:	51 05       	cpc	r21, r1
    1ec8:	a1 f0       	breq	.+40     	; 0x1ef2 <udd_ep_alloc+0x86>
    1eca:	40 31       	cpi	r20, 0x10	; 16
    1ecc:	51 05       	cpc	r21, r1
    1ece:	d9 f4       	brne	.+54     	; 0x1f06 <udd_ep_alloc+0x9a>
    1ed0:	0c c0       	rjmp	.+24     	; 0x1eea <udd_ep_alloc+0x7e>
    1ed2:	41 15       	cp	r20, r1
    1ed4:	22 e0       	ldi	r18, 0x02	; 2
    1ed6:	52 07       	cpc	r21, r18
    1ed8:	91 f0       	breq	.+36     	; 0x1efe <udd_ep_alloc+0x92>
    1eda:	4f 3f       	cpi	r20, 0xFF	; 255
    1edc:	23 e0       	ldi	r18, 0x03	; 3
    1ede:	52 07       	cpc	r21, r18
    1ee0:	81 f0       	breq	.+32     	; 0x1f02 <udd_ep_alloc+0x96>
    1ee2:	41 15       	cp	r20, r1
    1ee4:	51 40       	sbci	r21, 0x01	; 1
    1ee6:	79 f4       	brne	.+30     	; 0x1f06 <udd_ep_alloc+0x9a>
    1ee8:	08 c0       	rjmp	.+16     	; 0x1efa <udd_ep_alloc+0x8e>
    1eea:	21 e0       	ldi	r18, 0x01	; 1
    1eec:	0d c0       	rjmp	.+26     	; 0x1f08 <udd_ep_alloc+0x9c>
    1eee:	22 e0       	ldi	r18, 0x02	; 2
    1ef0:	0b c0       	rjmp	.+22     	; 0x1f08 <udd_ep_alloc+0x9c>
    1ef2:	23 e0       	ldi	r18, 0x03	; 3
    1ef4:	09 c0       	rjmp	.+18     	; 0x1f08 <udd_ep_alloc+0x9c>
    1ef6:	24 e0       	ldi	r18, 0x04	; 4
    1ef8:	07 c0       	rjmp	.+14     	; 0x1f08 <udd_ep_alloc+0x9c>
    1efa:	25 e0       	ldi	r18, 0x05	; 5
    1efc:	05 c0       	rjmp	.+10     	; 0x1f08 <udd_ep_alloc+0x9c>
    1efe:	26 e0       	ldi	r18, 0x06	; 6
    1f00:	03 c0       	rjmp	.+6      	; 0x1f08 <udd_ep_alloc+0x9c>
    1f02:	27 e0       	ldi	r18, 0x07	; 7
    1f04:	01 c0       	rjmp	.+2      	; 0x1f08 <udd_ep_alloc+0x9c>
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	fc 01       	movw	r30, r24
    1f0a:	ee 0f       	add	r30, r30
    1f0c:	ff 1f       	adc	r31, r31
    1f0e:	ee 0f       	add	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	ee 0f       	add	r30, r30
    1f14:	ff 1f       	adc	r31, r31
    1f16:	e4 55       	subi	r30, 0x54	; 84
    1f18:	fd 4d       	sbci	r31, 0xDD	; 221
    1f1a:	11 8a       	std	Z+17, r1	; 0x11
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	aa 0f       	add	r26, r26
    1f20:	bb 1f       	adc	r27, r27
    1f22:	aa 0f       	add	r26, r26
    1f24:	bb 1f       	adc	r27, r27
    1f26:	aa 0f       	add	r26, r26
    1f28:	bb 1f       	adc	r27, r27
    1f2a:	a4 54       	subi	r26, 0x44	; 68
    1f2c:	bd 4d       	sbci	r27, 0xDD	; 221
    1f2e:	36 e0       	ldi	r19, 0x06	; 6
    1f30:	3c 93       	st	X, r19
    1f32:	26 2b       	or	r18, r22
    1f34:	21 8b       	std	Z+17, r18	; 0x11
    1f36:	fc 01       	movw	r30, r24
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	ee 0f       	add	r30, r30
    1f3e:	ff 1f       	adc	r31, r31
    1f40:	ee 0f       	add	r30, r30
    1f42:	ff 1f       	adc	r31, r31
    1f44:	e4 55       	subi	r30, 0x54	; 84
    1f46:	fd 4d       	sbci	r31, 0xDD	; 221
    1f48:	21 89       	ldd	r18, Z+17	; 0x11
    1f4a:	20 7c       	andi	r18, 0xC0	; 192
    1f4c:	20 3c       	cpi	r18, 0xC0	; 192
    1f4e:	69 f4       	brne	.+26     	; 0x1f6a <udd_ep_alloc+0xfe>
    1f50:	fc 01       	movw	r30, r24
    1f52:	ee 0f       	add	r30, r30
    1f54:	ff 1f       	adc	r31, r31
    1f56:	ee 0f       	add	r30, r30
    1f58:	ff 1f       	adc	r31, r31
    1f5a:	ee 0f       	add	r30, r30
    1f5c:	ff 1f       	adc	r31, r31
    1f5e:	e4 55       	subi	r30, 0x54	; 84
    1f60:	fd 4d       	sbci	r31, 0xDD	; 221
    1f62:	21 89       	ldd	r18, Z+17	; 0x11
    1f64:	27 70       	andi	r18, 0x07	; 7
    1f66:	27 30       	cpi	r18, 0x07	; 7
    1f68:	81 f0       	breq	.+32     	; 0x1f8a <udd_ep_alloc+0x11e>
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	fc 01       	movw	r30, r24
    1f78:	e4 55       	subi	r30, 0x54	; 84
    1f7a:	fd 4d       	sbci	r31, 0xDD	; 221
    1f7c:	81 89       	ldd	r24, Z+17	; 0x11
    1f7e:	80 62       	ori	r24, 0x20	; 32
    1f80:	81 8b       	std	Z+17, r24	; 0x11
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	08 95       	ret
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	08 95       	ret
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	08 95       	ret

00001f8e <udd_ep_is_halted>:
    1f8e:	e8 2f       	mov	r30, r24
    1f90:	ef 70       	andi	r30, 0x0F	; 15
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	ee 0f       	add	r30, r30
    1f96:	ff 1f       	adc	r31, r31
    1f98:	08 2e       	mov	r0, r24
    1f9a:	00 0c       	add	r0, r0
    1f9c:	99 0b       	sbc	r25, r25
    1f9e:	88 27       	eor	r24, r24
    1fa0:	99 0f       	add	r25, r25
    1fa2:	88 1f       	adc	r24, r24
    1fa4:	99 27       	eor	r25, r25
    1fa6:	e8 0f       	add	r30, r24
    1fa8:	f9 1f       	adc	r31, r25
    1faa:	ee 0f       	add	r30, r30
    1fac:	ff 1f       	adc	r31, r31
    1fae:	ee 0f       	add	r30, r30
    1fb0:	ff 1f       	adc	r31, r31
    1fb2:	ee 0f       	add	r30, r30
    1fb4:	ff 1f       	adc	r31, r31
    1fb6:	e4 55       	subi	r30, 0x54	; 84
    1fb8:	fd 4d       	sbci	r31, 0xDD	; 221
    1fba:	81 89       	ldd	r24, Z+17	; 0x11
    1fbc:	82 fb       	bst	r24, 2
    1fbe:	88 27       	eor	r24, r24
    1fc0:	80 f9       	bld	r24, 0
    1fc2:	08 95       	ret

00001fc4 <udd_ep_clear_halt>:
    1fc4:	0f 93       	push	r16
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	2f 70       	andi	r18, 0x0F	; 15
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	a9 01       	movw	r20, r18
    1fce:	44 0f       	add	r20, r20
    1fd0:	55 1f       	adc	r21, r21
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	08 2e       	mov	r0, r24
    1fd6:	00 0c       	add	r0, r0
    1fd8:	33 0b       	sbc	r19, r19
    1fda:	22 27       	eor	r18, r18
    1fdc:	33 0f       	add	r19, r19
    1fde:	22 1f       	adc	r18, r18
    1fe0:	33 27       	eor	r19, r19
    1fe2:	24 0f       	add	r18, r20
    1fe4:	35 1f       	adc	r19, r21
    1fe6:	f9 01       	movw	r30, r18
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	ee 0f       	add	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	ee 0f       	add	r30, r30
    1ff2:	ff 1f       	adc	r31, r31
    1ff4:	e4 54       	subi	r30, 0x44	; 68
    1ff6:	fd 4d       	sbci	r31, 0xDD	; 221
    1ff8:	01 e0       	ldi	r16, 0x01	; 1
    1ffa:	06 93       	lac	Z, r16
    1ffc:	f9 01       	movw	r30, r18
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 1f       	adc	r31, r31
    2002:	ee 0f       	add	r30, r30
    2004:	ff 1f       	adc	r31, r31
    2006:	ee 0f       	add	r30, r30
    2008:	ff 1f       	adc	r31, r31
    200a:	e4 55       	subi	r30, 0x54	; 84
    200c:	fd 4d       	sbci	r31, 0xDD	; 221
    200e:	91 89       	ldd	r25, Z+17	; 0x11
    2010:	92 ff       	sbrs	r25, 2
    2012:	17 c0       	rjmp	.+46     	; 0x2042 <udd_ep_clear_halt+0x7e>
    2014:	22 0f       	add	r18, r18
    2016:	33 1f       	adc	r19, r19
    2018:	22 0f       	add	r18, r18
    201a:	33 1f       	adc	r19, r19
    201c:	22 0f       	add	r18, r18
    201e:	33 1f       	adc	r19, r19
    2020:	f9 01       	movw	r30, r18
    2022:	e4 55       	subi	r30, 0x54	; 84
    2024:	fd 4d       	sbci	r31, 0xDD	; 221
    2026:	91 89       	ldd	r25, Z+17	; 0x11
    2028:	9b 7f       	andi	r25, 0xFB	; 251
    202a:	91 8b       	std	Z+17, r25	; 0x11
    202c:	64 dc       	rcall	.-1848   	; 0x18f6 <udd_ep_get_job>
    202e:	fc 01       	movw	r30, r24
    2030:	80 81       	ld	r24, Z
    2032:	80 ff       	sbrs	r24, 0
    2034:	06 c0       	rjmp	.+12     	; 0x2042 <udd_ep_clear_halt+0x7e>
    2036:	8e 7f       	andi	r24, 0xFE	; 254
    2038:	80 83       	st	Z, r24
    203a:	07 80       	ldd	r0, Z+7	; 0x07
    203c:	f0 85       	ldd	r31, Z+8	; 0x08
    203e:	e0 2d       	mov	r30, r0
    2040:	19 95       	eicall
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	0f 91       	pop	r16
    2046:	08 95       	ret

00002048 <udd_ep_run>:
    2048:	6f 92       	push	r6
    204a:	7f 92       	push	r7
    204c:	8f 92       	push	r8
    204e:	9f 92       	push	r9
    2050:	af 92       	push	r10
    2052:	bf 92       	push	r11
    2054:	cf 92       	push	r12
    2056:	df 92       	push	r13
    2058:	ef 92       	push	r14
    205a:	ff 92       	push	r15
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	1f 92       	push	r1
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	78 2e       	mov	r7, r24
    206c:	66 2e       	mov	r6, r22
    206e:	4a 01       	movw	r8, r20
    2070:	59 01       	movw	r10, r18
    2072:	41 dc       	rcall	.-1918   	; 0x18f6 <udd_ep_get_job>
    2074:	6c 01       	movw	r12, r24
    2076:	27 2d       	mov	r18, r7
    2078:	87 2d       	mov	r24, r7
    207a:	8f 70       	andi	r24, 0x0F	; 15
    207c:	e8 2e       	mov	r14, r24
    207e:	f1 2c       	mov	r15, r1
    2080:	c7 01       	movw	r24, r14
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	e7 2c       	mov	r14, r7
    2088:	07 2c       	mov	r0, r7
    208a:	00 0c       	add	r0, r0
    208c:	ff 08       	sbc	r15, r15
    208e:	ee 24       	eor	r14, r14
    2090:	ff 0c       	add	r15, r15
    2092:	ee 1c       	adc	r14, r14
    2094:	ff 24       	eor	r15, r15
    2096:	e8 0e       	add	r14, r24
    2098:	f9 1e       	adc	r15, r25
    209a:	f7 01       	movw	r30, r14
    209c:	ee 0f       	add	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	ee 0f       	add	r30, r30
    20a2:	ff 1f       	adc	r31, r31
    20a4:	ee 0f       	add	r30, r30
    20a6:	ff 1f       	adc	r31, r31
    20a8:	e4 55       	subi	r30, 0x54	; 84
    20aa:	fd 4d       	sbci	r31, 0xDD	; 221
    20ac:	81 89       	ldd	r24, Z+17	; 0x11
    20ae:	80 7c       	andi	r24, 0xC0	; 192
    20b0:	09 f4       	brne	.+2      	; 0x20b4 <udd_ep_run+0x6c>
    20b2:	81 c0       	rjmp	.+258    	; 0x21b6 <udd_ep_run+0x16e>
    20b4:	f7 01       	movw	r30, r14
    20b6:	ee 0f       	add	r30, r30
    20b8:	ff 1f       	adc	r31, r31
    20ba:	ee 0f       	add	r30, r30
    20bc:	ff 1f       	adc	r31, r31
    20be:	ee 0f       	add	r30, r30
    20c0:	ff 1f       	adc	r31, r31
    20c2:	e4 55       	subi	r30, 0x54	; 84
    20c4:	fd 4d       	sbci	r31, 0xDD	; 221
    20c6:	81 89       	ldd	r24, Z+17	; 0x11
    20c8:	80 7c       	andi	r24, 0xC0	; 192
    20ca:	80 3c       	cpi	r24, 0xC0	; 192
    20cc:	61 f0       	breq	.+24     	; 0x20e6 <udd_ep_run+0x9e>
    20ce:	f7 01       	movw	r30, r14
    20d0:	ee 0f       	add	r30, r30
    20d2:	ff 1f       	adc	r31, r31
    20d4:	ee 0f       	add	r30, r30
    20d6:	ff 1f       	adc	r31, r31
    20d8:	ee 0f       	add	r30, r30
    20da:	ff 1f       	adc	r31, r31
    20dc:	e4 55       	subi	r30, 0x54	; 84
    20de:	fd 4d       	sbci	r31, 0xDD	; 221
    20e0:	81 89       	ldd	r24, Z+17	; 0x11
    20e2:	82 fd       	sbrc	r24, 2
    20e4:	6a c0       	rjmp	.+212    	; 0x21ba <udd_ep_run+0x172>
    20e6:	8f b7       	in	r24, 0x3f	; 63
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	f8 94       	cli
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	f6 01       	movw	r30, r12
    20f0:	90 81       	ld	r25, Z
    20f2:	90 ff       	sbrs	r25, 0
    20f4:	03 c0       	rjmp	.+6      	; 0x20fc <udd_ep_run+0xb4>
    20f6:	8f bf       	out	0x3f, r24	; 63
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	60 c0       	rjmp	.+192    	; 0x21bc <udd_ep_run+0x174>
    20fc:	f6 01       	movw	r30, r12
    20fe:	90 81       	ld	r25, Z
    2100:	91 60       	ori	r25, 0x01	; 1
    2102:	90 83       	st	Z, r25
    2104:	8f bf       	out	0x3f, r24	; 63
    2106:	81 82       	std	Z+1, r8	; 0x01
    2108:	92 82       	std	Z+2, r9	; 0x02
    210a:	a3 82       	std	Z+3, r10	; 0x03
    210c:	b4 82       	std	Z+4, r11	; 0x04
    210e:	15 82       	std	Z+5, r1	; 0x05
    2110:	16 82       	std	Z+6, r1	; 0x06
    2112:	07 83       	std	Z+7, r16	; 0x07
    2114:	10 87       	std	Z+8, r17	; 0x08
    2116:	61 10       	cpse	r6, r1
    2118:	06 c0       	rjmp	.+12     	; 0x2126 <udd_ep_run+0xde>
    211a:	91 e0       	ldi	r25, 0x01	; 1
    211c:	a1 14       	cp	r10, r1
    211e:	b1 04       	cpc	r11, r1
    2120:	19 f0       	breq	.+6      	; 0x2128 <udd_ep_run+0xe0>
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	01 c0       	rjmp	.+2      	; 0x2128 <udd_ep_run+0xe0>
    2126:	91 e0       	ldi	r25, 0x01	; 1
    2128:	f6 01       	movw	r30, r12
    212a:	80 81       	ld	r24, Z
    212c:	90 fb       	bst	r25, 0
    212e:	81 f9       	bld	r24, 1
    2130:	8b 7f       	andi	r24, 0xFB	; 251
    2132:	80 83       	st	Z, r24
    2134:	22 23       	and	r18, r18
    2136:	64 f4       	brge	.+24     	; 0x2150 <udd_ep_run+0x108>
    2138:	f7 01       	movw	r30, r14
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	ee 0f       	add	r30, r30
    2140:	ff 1f       	adc	r31, r31
    2142:	ee 0f       	add	r30, r30
    2144:	ff 1f       	adc	r31, r31
    2146:	e4 55       	subi	r30, 0x54	; 84
    2148:	fd 4d       	sbci	r31, 0xDD	; 221
    214a:	16 8a       	std	Z+22, r1	; 0x16
    214c:	17 8a       	std	Z+23, r1	; 0x17
    214e:	2f c0       	rjmp	.+94     	; 0x21ae <udd_ep_run+0x166>
    2150:	f7 01       	movw	r30, r14
    2152:	ee 0f       	add	r30, r30
    2154:	ff 1f       	adc	r31, r31
    2156:	ee 0f       	add	r30, r30
    2158:	ff 1f       	adc	r31, r31
    215a:	ee 0f       	add	r30, r30
    215c:	ff 1f       	adc	r31, r31
    215e:	e4 55       	subi	r30, 0x54	; 84
    2160:	fd 4d       	sbci	r31, 0xDD	; 221
    2162:	81 89       	ldd	r24, Z+17	; 0x11
    2164:	80 7c       	andi	r24, 0xC0	; 192
    2166:	80 3c       	cpi	r24, 0xC0	; 192
    2168:	a9 f4       	brne	.+42     	; 0x2194 <udd_ep_run+0x14c>
    216a:	c7 01       	movw	r24, r14
    216c:	88 0f       	add	r24, r24
    216e:	99 1f       	adc	r25, r25
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	88 0f       	add	r24, r24
    2176:	99 1f       	adc	r25, r25
    2178:	84 54       	subi	r24, 0x44	; 68
    217a:	9d 4d       	sbci	r25, 0xDD	; 221
    217c:	94 db       	rcall	.-2264   	; 0x18a6 <udd_ep_get_size>
    217e:	bc 01       	movw	r22, r24
    2180:	c5 01       	movw	r24, r10
    2182:	a0 d2       	rcall	.+1344   	; 0x26c4 <__udivmodhi4>
    2184:	89 2b       	or	r24, r25
    2186:	31 f0       	breq	.+12     	; 0x2194 <udd_ep_run+0x14c>
    2188:	f6 01       	movw	r30, r12
    218a:	80 81       	ld	r24, Z
    218c:	8e 7f       	andi	r24, 0xFE	; 254
    218e:	80 83       	st	Z, r24
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	14 c0       	rjmp	.+40     	; 0x21bc <udd_ep_run+0x174>
    2194:	f7 01       	movw	r30, r14
    2196:	ee 0f       	add	r30, r30
    2198:	ff 1f       	adc	r31, r31
    219a:	ee 0f       	add	r30, r30
    219c:	ff 1f       	adc	r31, r31
    219e:	ee 0f       	add	r30, r30
    21a0:	ff 1f       	adc	r31, r31
    21a2:	e4 55       	subi	r30, 0x54	; 84
    21a4:	fd 4d       	sbci	r31, 0xDD	; 221
    21a6:	12 8a       	std	Z+18, r1	; 0x12
    21a8:	13 8a       	std	Z+19, r1	; 0x13
    21aa:	16 8a       	std	Z+22, r1	; 0x16
    21ac:	17 8a       	std	Z+23, r1	; 0x17
    21ae:	87 2d       	mov	r24, r7
    21b0:	2e dc       	rcall	.-1956   	; 0x1a0e <udd_ep_trans_complet>
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	03 c0       	rjmp	.+6      	; 0x21bc <udd_ep_run+0x174>
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	01 c0       	rjmp	.+2      	; 0x21bc <udd_ep_run+0x174>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	0f 90       	pop	r0
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	1f 91       	pop	r17
    21c4:	0f 91       	pop	r16
    21c6:	ff 90       	pop	r15
    21c8:	ef 90       	pop	r14
    21ca:	df 90       	pop	r13
    21cc:	cf 90       	pop	r12
    21ce:	bf 90       	pop	r11
    21d0:	af 90       	pop	r10
    21d2:	9f 90       	pop	r9
    21d4:	8f 90       	pop	r8
    21d6:	7f 90       	pop	r7
    21d8:	6f 90       	pop	r6
    21da:	08 95       	ret

000021dc <udd_ep_abort>:
    21dc:	ff 92       	push	r15
    21de:	0f 93       	push	r16
    21e0:	1f 93       	push	r17
    21e2:	cf 93       	push	r28
    21e4:	df 93       	push	r29
    21e6:	18 2f       	mov	r17, r24
    21e8:	c8 2f       	mov	r28, r24
    21ea:	cf 70       	andi	r28, 0x0F	; 15
    21ec:	d0 e0       	ldi	r29, 0x00	; 0
    21ee:	ce 01       	movw	r24, r28
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	c1 2f       	mov	r28, r17
    21f6:	01 2e       	mov	r0, r17
    21f8:	00 0c       	add	r0, r0
    21fa:	dd 0b       	sbc	r29, r29
    21fc:	cc 27       	eor	r28, r28
    21fe:	dd 0f       	add	r29, r29
    2200:	cc 1f       	adc	r28, r28
    2202:	dd 27       	eor	r29, r29
    2204:	c8 0f       	add	r28, r24
    2206:	d9 1f       	adc	r29, r25
    2208:	81 2f       	mov	r24, r17
    220a:	75 db       	rcall	.-2326   	; 0x18f6 <udd_ep_get_job>
    220c:	dc 01       	movw	r26, r24
    220e:	fe 01       	movw	r30, r28
    2210:	ee 0f       	add	r30, r30
    2212:	ff 1f       	adc	r31, r31
    2214:	ee 0f       	add	r30, r30
    2216:	ff 1f       	adc	r31, r31
    2218:	ee 0f       	add	r30, r30
    221a:	ff 1f       	adc	r31, r31
    221c:	e4 54       	subi	r30, 0x44	; 68
    221e:	fd 4d       	sbci	r31, 0xDD	; 221
    2220:	02 e0       	ldi	r16, 0x02	; 2
    2222:	05 93       	las	Z, r16
    2224:	8c 91       	ld	r24, X
    2226:	80 ff       	sbrs	r24, 0
    2228:	22 c0       	rjmp	.+68     	; 0x226e <udd_ep_abort+0x92>
    222a:	8e 7f       	andi	r24, 0xFE	; 254
    222c:	8c 93       	st	X, r24
    222e:	17 96       	adiw	r26, 0x07	; 7
    2230:	ed 91       	ld	r30, X+
    2232:	fc 91       	ld	r31, X
    2234:	18 97       	sbiw	r26, 0x08	; 8
    2236:	30 97       	sbiw	r30, 0x00	; 0
    2238:	d1 f0       	breq	.+52     	; 0x226e <udd_ep_abort+0x92>
    223a:	11 23       	and	r17, r17
    223c:	5c f4       	brge	.+22     	; 0x2254 <udd_ep_abort+0x78>
    223e:	cc 0f       	add	r28, r28
    2240:	dd 1f       	adc	r29, r29
    2242:	cc 0f       	add	r28, r28
    2244:	dd 1f       	adc	r29, r29
    2246:	cc 0f       	add	r28, r28
    2248:	dd 1f       	adc	r29, r29
    224a:	c4 55       	subi	r28, 0x54	; 84
    224c:	dd 4d       	sbci	r29, 0xDD	; 221
    224e:	6e 89       	ldd	r22, Y+22	; 0x16
    2250:	7f 89       	ldd	r23, Y+23	; 0x17
    2252:	0a c0       	rjmp	.+20     	; 0x2268 <udd_ep_abort+0x8c>
    2254:	cc 0f       	add	r28, r28
    2256:	dd 1f       	adc	r29, r29
    2258:	cc 0f       	add	r28, r28
    225a:	dd 1f       	adc	r29, r29
    225c:	cc 0f       	add	r28, r28
    225e:	dd 1f       	adc	r29, r29
    2260:	c4 55       	subi	r28, 0x54	; 84
    2262:	dd 4d       	sbci	r29, 0xDD	; 221
    2264:	6a 89       	ldd	r22, Y+18	; 0x12
    2266:	7b 89       	ldd	r23, Y+19	; 0x13
    2268:	41 2f       	mov	r20, r17
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	19 95       	eicall
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	1f 91       	pop	r17
    2274:	0f 91       	pop	r16
    2276:	ff 90       	pop	r15
    2278:	08 95       	ret

0000227a <udd_ep_free>:
    227a:	cf 93       	push	r28
    227c:	c8 2f       	mov	r28, r24
    227e:	ae df       	rcall	.-164    	; 0x21dc <udd_ep_abort>
    2280:	ec 2f       	mov	r30, r28
    2282:	ef 70       	andi	r30, 0x0F	; 15
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	ee 0f       	add	r30, r30
    2288:	ff 1f       	adc	r31, r31
    228a:	8c 2f       	mov	r24, r28
    228c:	cc 0f       	add	r28, r28
    228e:	99 0b       	sbc	r25, r25
    2290:	88 27       	eor	r24, r24
    2292:	99 0f       	add	r25, r25
    2294:	88 1f       	adc	r24, r24
    2296:	99 27       	eor	r25, r25
    2298:	e8 0f       	add	r30, r24
    229a:	f9 1f       	adc	r31, r25
    229c:	ee 0f       	add	r30, r30
    229e:	ff 1f       	adc	r31, r31
    22a0:	ee 0f       	add	r30, r30
    22a2:	ff 1f       	adc	r31, r31
    22a4:	ee 0f       	add	r30, r30
    22a6:	ff 1f       	adc	r31, r31
    22a8:	e4 55       	subi	r30, 0x54	; 84
    22aa:	fd 4d       	sbci	r31, 0xDD	; 221
    22ac:	11 8a       	std	Z+17, r1	; 0x11
    22ae:	cf 91       	pop	r28
    22b0:	08 95       	ret

000022b2 <udd_ep_set_halt>:
    22b2:	e8 2f       	mov	r30, r24
    22b4:	ef 70       	andi	r30, 0x0F	; 15
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	ee 0f       	add	r30, r30
    22ba:	ff 1f       	adc	r31, r31
    22bc:	28 2f       	mov	r18, r24
    22be:	08 2e       	mov	r0, r24
    22c0:	00 0c       	add	r0, r0
    22c2:	33 0b       	sbc	r19, r19
    22c4:	22 27       	eor	r18, r18
    22c6:	33 0f       	add	r19, r19
    22c8:	22 1f       	adc	r18, r18
    22ca:	33 27       	eor	r19, r19
    22cc:	e2 0f       	add	r30, r18
    22ce:	f3 1f       	adc	r31, r19
    22d0:	ee 0f       	add	r30, r30
    22d2:	ff 1f       	adc	r31, r31
    22d4:	ee 0f       	add	r30, r30
    22d6:	ff 1f       	adc	r31, r31
    22d8:	ee 0f       	add	r30, r30
    22da:	ff 1f       	adc	r31, r31
    22dc:	e4 55       	subi	r30, 0x54	; 84
    22de:	fd 4d       	sbci	r31, 0xDD	; 221
    22e0:	91 89       	ldd	r25, Z+17	; 0x11
    22e2:	94 60       	ori	r25, 0x04	; 4
    22e4:	91 8b       	std	Z+17, r25	; 0x11
    22e6:	7a df       	rcall	.-268    	; 0x21dc <udd_ep_abort>
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	08 95       	ret

000022ec <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    22ec:	1f 92       	push	r1
    22ee:	0f 92       	push	r0
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	0f 92       	push	r0
    22f4:	11 24       	eor	r1, r1
    22f6:	0b b6       	in	r0, 0x3b	; 59
    22f8:	0f 92       	push	r0
    22fa:	0f 93       	push	r16
    22fc:	2f 93       	push	r18
    22fe:	3f 93       	push	r19
    2300:	4f 93       	push	r20
    2302:	5f 93       	push	r21
    2304:	6f 93       	push	r22
    2306:	7f 93       	push	r23
    2308:	8f 93       	push	r24
    230a:	9f 93       	push	r25
    230c:	af 93       	push	r26
    230e:	bf 93       	push	r27
    2310:	ef 93       	push	r30
    2312:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2314:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2318:	88 23       	and	r24, r24
    231a:	3c f4       	brge	.+14     	; 0x232a <__vector_125+0x3e>
		udd_ack_start_of_frame_event();
    231c:	80 e8       	ldi	r24, 0x80	; 128
    231e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    2322:	0e 94 88 08 	call	0x1110	; 0x1110 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2326:	ab d1       	rcall	.+854    	; 0x267e <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2328:	8c c0       	rjmp	.+280    	; 0x2442 <__vector_125+0x156>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    232a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    232e:	82 ff       	sbrs	r24, 2
    2330:	20 c0       	rjmp	.+64     	; 0x2372 <__vector_125+0x86>
		udd_ack_underflow_event();
    2332:	84 e0       	ldi	r24, 0x04	; 4
    2334:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    2338:	80 91 c4 22 	lds	r24, 0x22C4	; 0x8022c4 <udd_sram+0x18>
    233c:	86 ff       	sbrs	r24, 6
    233e:	81 c0       	rjmp	.+258    	; 0x2442 <__vector_125+0x156>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2340:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2344:	81 fd       	sbrc	r24, 1
    2346:	7d c0       	rjmp	.+250    	; 0x2442 <__vector_125+0x156>
    2348:	f1 da       	rcall	.-2590   	; 0x192c <udd_ctrl_interrupt_tc_setup>
    234a:	81 11       	cpse	r24, r1
    234c:	7a c0       	rjmp	.+244    	; 0x2442 <__vector_125+0x156>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    234e:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <udd_ep_control_state>
    2352:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2354:	11 f4       	brne	.+4      	; 0x235a <__vector_125+0x6e>
    2356:	25 da       	rcall	.-2998   	; 0x17a2 <udd_ctrl_send_zlp_in>
    2358:	74 c0       	rjmp	.+232    	; 0x2442 <__vector_125+0x156>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    235a:	84 30       	cpi	r24, 0x04	; 4
    235c:	09 f0       	breq	.+2      	; 0x2360 <__vector_125+0x74>
    235e:	71 c0       	rjmp	.+226    	; 0x2442 <__vector_125+0x156>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2360:	e5 ec       	ldi	r30, 0xC5	; 197
    2362:	f2 e2       	ldi	r31, 0x22	; 34
    2364:	04 e0       	ldi	r16, 0x04	; 4
    2366:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2368:	ed eb       	ldi	r30, 0xBD	; 189
    236a:	f2 e2       	ldi	r31, 0x22	; 34
    236c:	04 e0       	ldi	r16, 0x04	; 4
    236e:	05 93       	las	Z, r16
    2370:	68 c0       	rjmp	.+208    	; 0x2442 <__vector_125+0x156>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2372:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2376:	81 ff       	sbrs	r24, 1
    2378:	5f c0       	rjmp	.+190    	; 0x2438 <__vector_125+0x14c>
		udd_ack_overflow_event();
    237a:	82 e0       	ldi	r24, 0x02	; 2
    237c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    2380:	80 91 bc 22 	lds	r24, 0x22BC	; 0x8022bc <udd_sram+0x10>
    2384:	86 ff       	sbrs	r24, 6
    2386:	5d c0       	rjmp	.+186    	; 0x2442 <__vector_125+0x156>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2388:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    238c:	81 fd       	sbrc	r24, 1
    238e:	59 c0       	rjmp	.+178    	; 0x2442 <__vector_125+0x156>
    2390:	cd da       	rcall	.-2662   	; 0x192c <udd_ctrl_interrupt_tc_setup>
    2392:	81 11       	cpse	r24, r1
    2394:	56 c0       	rjmp	.+172    	; 0x2442 <__vector_125+0x156>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2396:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <udd_ep_control_state>
    239a:	82 30       	cpi	r24, 0x02	; 2
    239c:	41 f4       	brne	.+16     	; 0x23ae <__vector_125+0xc2>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    239e:	84 e0       	ldi	r24, 0x04	; 4
    23a0:	80 93 ab 22 	sts	0x22AB, r24	; 0x8022ab <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    23a4:	ec eb       	ldi	r30, 0xBC	; 188
    23a6:	f2 e2       	ldi	r31, 0x22	; 34
    23a8:	02 e0       	ldi	r16, 0x02	; 2
    23aa:	06 93       	lac	Z, r16
    23ac:	4a c0       	rjmp	.+148    	; 0x2442 <__vector_125+0x156>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    23ae:	83 30       	cpi	r24, 0x03	; 3
    23b0:	09 f0       	breq	.+2      	; 0x23b4 <__vector_125+0xc8>
    23b2:	47 c0       	rjmp	.+142    	; 0x2442 <__vector_125+0x156>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    23b4:	e5 ec       	ldi	r30, 0xC5	; 197
    23b6:	f2 e2       	ldi	r31, 0x22	; 34
    23b8:	04 e0       	ldi	r16, 0x04	; 4
    23ba:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    23bc:	ed eb       	ldi	r30, 0xBD	; 189
    23be:	f2 e2       	ldi	r31, 0x22	; 34
    23c0:	04 e0       	ldi	r16, 0x04	; 4
    23c2:	05 93       	las	Z, r16
    23c4:	3e c0       	rjmp	.+124    	; 0x2442 <__vector_125+0x156>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    23c6:	80 e1       	ldi	r24, 0x10	; 16
    23c8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    23cc:	81 e0       	ldi	r24, 0x01	; 1
			udd_ep_abort(i | USB_EP_DIR_IN);
    23ce:	06 df       	rcall	.-500    	; 0x21dc <udd_ep_abort>
    23d0:	81 e8       	ldi	r24, 0x81	; 129
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    23d2:	04 df       	rcall	.-504    	; 0x21dc <udd_ep_abort>
    23d4:	82 e0       	ldi	r24, 0x02	; 2
			udd_ep_abort(i | USB_EP_DIR_IN);
    23d6:	02 df       	rcall	.-508    	; 0x21dc <udd_ep_abort>
    23d8:	82 e8       	ldi	r24, 0x82	; 130
    23da:	00 df       	rcall	.-512    	; 0x21dc <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    23dc:	83 e0       	ldi	r24, 0x03	; 3
    23de:	fe de       	rcall	.-516    	; 0x21dc <udd_ep_abort>
    23e0:	83 e8       	ldi	r24, 0x83	; 131
			udd_ep_abort(i | USB_EP_DIR_IN);
    23e2:	fc de       	rcall	.-520    	; 0x21dc <udd_ep_abort>
    23e4:	0e 94 5e 08 	call	0x10bc	; 0x10bc <udc_reset>
		}
#endif
		udc_reset();
    23e8:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>

		// Reset USB address to 0
		udd_set_device_address(0);
    23ec:	ec ea       	ldi	r30, 0xAC	; 172
    23ee:	f2 e2       	ldi	r31, 0x22	; 34
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    23f0:	11 8a       	std	Z+17, r1	; 0x11
    23f2:	96 e0       	ldi	r25, 0x06	; 6
    23f4:	90 8b       	std	Z+16, r25	; 0x10
	udd_endpoint_clear_status(ep_ctrl);
    23f6:	80 e4       	ldi	r24, 0x40	; 64
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    23f8:	81 8b       	std	Z+17, r24	; 0x11
    23fa:	11 8e       	std	Z+25, r1	; 0x19
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    23fc:	90 8f       	std	Z+24, r25	; 0x18
	udd_endpoint_clear_status(ep_ctrl);
    23fe:	81 8f       	std	Z+25, r24	; 0x19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2400:	8f e9       	ldi	r24, 0x9F	; 159
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2402:	92 e2       	ldi	r25, 0x22	; 34
    2404:	84 8b       	std	Z+20, r24	; 0x14
    2406:	95 8b       	std	Z+21, r25	; 0x15
    2408:	99 d9       	rcall	.-3278   	; 0x173c <udd_ctrl_init>
		// Reset endpoint control management
		udd_ctrl_init();
    240a:	1b c0       	rjmp	.+54     	; 0x2442 <__vector_125+0x156>
		goto udd_interrupt_bus_event_end;
    240c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
	}

	if (udd_is_suspend_event()) {
    2410:	86 ff       	sbrs	r24, 6
    2412:	07 c0       	rjmp	.+14     	; 0x2422 <__vector_125+0x136>
    2414:	80 e4       	ldi	r24, 0x40	; 64
		udd_ack_suspend_event();
    2416:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    241a:	80 e0       	ldi	r24, 0x00	; 0
		udd_sleep_mode(false); // Enter in SUSPEND mode
    241c:	57 d9       	rcall	.-3410   	; 0x16cc <udd_sleep_mode>
    241e:	2d d1       	rcall	.+602    	; 0x267a <main_suspend_action>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2420:	10 c0       	rjmp	.+32     	; 0x2442 <__vector_125+0x156>
    2422:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    2426:	85 ff       	sbrs	r24, 5
    2428:	0c c0       	rjmp	.+24     	; 0x2442 <__vector_125+0x156>
    242a:	80 e2       	ldi	r24, 0x20	; 32
    242c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udd_ack_resume_event();
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	4c d9       	rcall	.-3432   	; 0x16cc <udd_sleep_mode>
		udd_sleep_mode(true); // Enter in power reduction mode
    2434:	23 d1       	rcall	.+582    	; 0x267c <main_resume_action>
    2436:	05 c0       	rjmp	.+10     	; 0x2442 <__vector_125+0x156>
    2438:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    243c:	84 fd       	sbrc	r24, 4
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    243e:	c3 cf       	rjmp	.-122    	; 0x23c6 <__vector_125+0xda>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2440:	e5 cf       	rjmp	.-54     	; 0x240c <__vector_125+0x120>
    2442:	ff 91       	pop	r31
    2444:	ef 91       	pop	r30
    2446:	bf 91       	pop	r27
    2448:	af 91       	pop	r26
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    244a:	9f 91       	pop	r25
    244c:	8f 91       	pop	r24
    244e:	7f 91       	pop	r23
    2450:	6f 91       	pop	r22
    2452:	5f 91       	pop	r21
    2454:	4f 91       	pop	r20
    2456:	3f 91       	pop	r19
    2458:	2f 91       	pop	r18
    245a:	0f 91       	pop	r16
    245c:	0f 90       	pop	r0
    245e:	0b be       	out	0x3b, r0	; 59
    2460:	0f 90       	pop	r0
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	0f 90       	pop	r0
    2466:	1f 90       	pop	r1
    2468:	18 95       	reti

0000246a <__vector_126>:
    246a:	1f 92       	push	r1
    246c:	0f 92       	push	r0
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	0f 92       	push	r0
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2472:	11 24       	eor	r1, r1
    2474:	0b b6       	in	r0, 0x3b	; 59
    2476:	0f 92       	push	r0
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	2f 93       	push	r18
    247e:	3f 93       	push	r19
    2480:	4f 93       	push	r20
    2482:	5f 93       	push	r21
    2484:	6f 93       	push	r22
    2486:	7f 93       	push	r23
    2488:	8f 93       	push	r24
    248a:	9f 93       	push	r25
    248c:	af 93       	push	r26
    248e:	bf 93       	push	r27
    2490:	cf 93       	push	r28
    2492:	df 93       	push	r29
    2494:	ef 93       	push	r30
    2496:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2498:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    249c:	81 fd       	sbrc	r24, 1
    249e:	03 c0       	rjmp	.+6      	; 0x24a6 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    24a0:	45 da       	rcall	.-2934   	; 0x192c <udd_ctrl_interrupt_tc_setup>
    24a2:	81 11       	cpse	r24, r1
    24a4:	bb c0       	rjmp	.+374    	; 0x261c <__vector_126+0x1b2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    24a6:	82 e0       	ldi	r24, 0x02	; 2
    24a8:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    24ac:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    24b0:	81 95       	neg	r24
    24b2:	88 0f       	add	r24, r24
    24b4:	ec eb       	ldi	r30, 0xBC	; 188
    24b6:	f2 e2       	ldi	r31, 0x22	; 34
    24b8:	e8 1b       	sub	r30, r24
    24ba:	f1 09       	sbc	r31, r1
    24bc:	20 81       	ld	r18, Z
    24be:	31 81       	ldd	r19, Z+1	; 0x01
    24c0:	2c 5b       	subi	r18, 0xBC	; 188
    24c2:	32 42       	sbci	r19, 0x22	; 34
    24c4:	36 95       	lsr	r19
    24c6:	27 95       	ror	r18
    24c8:	36 95       	lsr	r19
    24ca:	27 95       	ror	r18
    24cc:	36 95       	lsr	r19
    24ce:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    24d0:	82 2f       	mov	r24, r18
    24d2:	86 95       	lsr	r24
    24d4:	20 fd       	sbrc	r18, 0
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <__vector_126+0x72>
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	01 c0       	rjmp	.+2      	; 0x24de <__vector_126+0x74>
    24dc:	90 e8       	ldi	r25, 0x80	; 128
    24de:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    24e0:	e8 2f       	mov	r30, r24
    24e2:	ef 70       	andi	r30, 0x0F	; 15
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	ee 0f       	add	r30, r30
    24e8:	ff 1f       	adc	r31, r31
    24ea:	28 2f       	mov	r18, r24
    24ec:	08 2e       	mov	r0, r24
    24ee:	00 0c       	add	r0, r0
    24f0:	33 0b       	sbc	r19, r19
    24f2:	22 27       	eor	r18, r18
    24f4:	33 0f       	add	r19, r19
    24f6:	22 1f       	adc	r18, r18
    24f8:	33 27       	eor	r19, r19
    24fa:	e2 0f       	add	r30, r18
    24fc:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    24fe:	df 01       	movw	r26, r30
    2500:	aa 0f       	add	r26, r26
    2502:	bb 1f       	adc	r27, r27
    2504:	aa 0f       	add	r26, r26
    2506:	bb 1f       	adc	r27, r27
    2508:	aa 0f       	add	r26, r26
    250a:	bb 1f       	adc	r27, r27
    250c:	a4 54       	subi	r26, 0x44	; 68
    250e:	bd 4d       	sbci	r27, 0xDD	; 221
    2510:	9c 91       	ld	r25, X
    2512:	95 ff       	sbrs	r25, 5
    2514:	83 c0       	rjmp	.+262    	; 0x261c <__vector_126+0x1b2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2516:	fd 01       	movw	r30, r26
    2518:	00 e2       	ldi	r16, 0x20	; 32
    251a:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    251c:	81 11       	cpse	r24, r1
    251e:	79 c0       	rjmp	.+242    	; 0x2612 <__vector_126+0x1a8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2520:	80 91 ab 22 	lds	r24, 0x22AB	; 0x8022ab <udd_ep_control_state>
    2524:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2526:	19 f4       	brne	.+6      	; 0x252e <__vector_126+0xc4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2528:	4a d9       	rcall	.-3436   	; 0x17be <udd_ctrl_endofrequest>
    252a:	08 d9       	rcall	.-3568   	; 0x173c <udd_ctrl_init>
    252c:	77 c0       	rjmp	.+238    	; 0x261c <__vector_126+0x1b2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    252e:	00 91 be 22 	lds	r16, 0x22BE	; 0x8022be <udd_sram+0x12>
    2532:	10 91 bf 22 	lds	r17, 0x22BF	; 0x8022bf <udd_sram+0x13>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2536:	80 91 16 23 	lds	r24, 0x2316	; 0x802316 <udd_g_ctrlreq+0xa>
    253a:	90 91 17 23 	lds	r25, 0x2317	; 0x802317 <udd_g_ctrlreq+0xb>
    253e:	c0 91 a7 22 	lds	r28, 0x22A7	; 0x8022a7 <udd_ctrl_payload_nb_trans>
    2542:	d0 91 a8 22 	lds	r29, 0x22A8	; 0x8022a8 <udd_ctrl_payload_nb_trans+0x1>
    2546:	98 01       	movw	r18, r16
    2548:	2c 0f       	add	r18, r28
    254a:	3d 1f       	adc	r19, r29
    254c:	82 17       	cp	r24, r18
    254e:	93 07       	cpc	r25, r19
    2550:	18 f4       	brcc	.+6      	; 0x2558 <__vector_126+0xee>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2552:	8c 01       	movw	r16, r24
    2554:	0c 1b       	sub	r16, r28
    2556:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2558:	80 91 14 23 	lds	r24, 0x2314	; 0x802314 <udd_g_ctrlreq+0x8>
    255c:	90 91 15 23 	lds	r25, 0x2315	; 0x802315 <udd_g_ctrlreq+0x9>
    2560:	a8 01       	movw	r20, r16
    2562:	6f e9       	ldi	r22, 0x9F	; 159
    2564:	72 e2       	ldi	r23, 0x22	; 34
    2566:	8c 0f       	add	r24, r28
    2568:	9d 1f       	adc	r25, r29
    256a:	c8 d0       	rcall	.+400    	; 0x26fc <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    256c:	c0 0f       	add	r28, r16
    256e:	d1 1f       	adc	r29, r17
    2570:	c0 93 a7 22 	sts	0x22A7, r28	; 0x8022a7 <udd_ctrl_payload_nb_trans>
    2574:	d0 93 a8 22 	sts	0x22A8, r29	; 0x8022a8 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2578:	08 30       	cpi	r16, 0x08	; 8
    257a:	11 05       	cpc	r17, r1
    257c:	69 f4       	brne	.+26     	; 0x2598 <__vector_126+0x12e>
    257e:	80 91 a9 22 	lds	r24, 0x22A9	; 0x8022a9 <udd_ctrl_prev_payload_nb_trans>
    2582:	90 91 aa 22 	lds	r25, 0x22AA	; 0x8022aa <udd_ctrl_prev_payload_nb_trans+0x1>
    2586:	8c 0f       	add	r24, r28
    2588:	9d 1f       	adc	r25, r29
    258a:	20 91 12 23 	lds	r18, 0x2312	; 0x802312 <udd_g_ctrlreq+0x6>
    258e:	30 91 13 23 	lds	r19, 0x2313	; 0x802313 <udd_g_ctrlreq+0x7>
    2592:	82 17       	cp	r24, r18
    2594:	93 07       	cpc	r25, r19
    2596:	80 f0       	brcs	.+32     	; 0x25b8 <__vector_126+0x14e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2598:	ec e0       	ldi	r30, 0x0C	; 12
    259a:	f3 e2       	ldi	r31, 0x23	; 35
    259c:	c2 87       	std	Z+10, r28	; 0x0a
    259e:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    25a0:	06 84       	ldd	r0, Z+14	; 0x0e
    25a2:	f7 85       	ldd	r31, Z+15	; 0x0f
    25a4:	e0 2d       	mov	r30, r0
    25a6:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    25a8:	29 f0       	breq	.+10     	; 0x25b4 <__vector_126+0x14a>
    25aa:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    25ac:	81 11       	cpse	r24, r1
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <__vector_126+0x14a>
    25b0:	ea d8       	rcall	.-3628   	; 0x1786 <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    25b2:	34 c0       	rjmp	.+104    	; 0x261c <__vector_126+0x1b2>
    25b4:	f6 d8       	rcall	.-3604   	; 0x17a2 <udd_ctrl_send_zlp_in>
    25b6:	32 c0       	rjmp	.+100    	; 0x261c <__vector_126+0x1b2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    25b8:	80 91 16 23 	lds	r24, 0x2316	; 0x802316 <udd_g_ctrlreq+0xa>
    25bc:	90 91 17 23 	lds	r25, 0x2317	; 0x802317 <udd_g_ctrlreq+0xb>
    25c0:	c8 17       	cp	r28, r24
    25c2:	d9 07       	cpc	r29, r25
    25c4:	f9 f4       	brne	.+62     	; 0x2604 <__vector_126+0x19a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    25c6:	e0 91 1a 23 	lds	r30, 0x231A	; 0x80231a <udd_g_ctrlreq+0xe>
    25ca:	f0 91 1b 23 	lds	r31, 0x231B	; 0x80231b <udd_g_ctrlreq+0xf>
    25ce:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    25d0:	11 f4       	brne	.+4      	; 0x25d6 <__vector_126+0x16c>
    25d2:	d9 d8       	rcall	.-3662   	; 0x1786 <udd_ctrl_stall_data>
    25d4:	23 c0       	rjmp	.+70     	; 0x261c <__vector_126+0x1b2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    25d6:	19 95       	eicall
    25d8:	81 11       	cpse	r24, r1
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <__vector_126+0x176>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    25dc:	d4 d8       	rcall	.-3672   	; 0x1786 <udd_ctrl_stall_data>
    25de:	1e c0       	rjmp	.+60     	; 0x261c <__vector_126+0x1b2>
    25e0:	20 91 a9 22 	lds	r18, 0x22A9	; 0x8022a9 <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    25e4:	30 91 aa 22 	lds	r19, 0x22AA	; 0x8022aa <udd_ctrl_prev_payload_nb_trans+0x1>
    25e8:	80 91 a7 22 	lds	r24, 0x22A7	; 0x8022a7 <udd_ctrl_payload_nb_trans>
    25ec:	90 91 a8 22 	lds	r25, 0x22A8	; 0x8022a8 <udd_ctrl_payload_nb_trans+0x1>
    25f0:	82 0f       	add	r24, r18
    25f2:	93 1f       	adc	r25, r19
    25f4:	80 93 a9 22 	sts	0x22A9, r24	; 0x8022a9 <udd_ctrl_prev_payload_nb_trans>
    25f8:	90 93 aa 22 	sts	0x22AA, r25	; 0x8022aa <udd_ctrl_prev_payload_nb_trans+0x1>
    25fc:	10 92 a7 22 	sts	0x22A7, r1	; 0x8022a7 <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2600:	10 92 a8 22 	sts	0x22A8, r1	; 0x8022a8 <udd_ctrl_payload_nb_trans+0x1>
    2604:	ec eb       	ldi	r30, 0xBC	; 188
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2606:	f2 e2       	ldi	r31, 0x22	; 34
    2608:	02 e0       	ldi	r16, 0x02	; 2
    260a:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    260c:	00 e2       	ldi	r16, 0x20	; 32
    260e:	06 93       	lac	Z, r16
    2610:	05 c0       	rjmp	.+10     	; 0x261c <__vector_126+0x1b2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2612:	80 38       	cpi	r24, 0x80	; 128
    2614:	11 f4       	brne	.+4      	; 0x261a <__vector_126+0x1b0>
		udd_ctrl_in_sent();
    2616:	db d8       	rcall	.-3658   	; 0x17ce <udd_ctrl_in_sent>
    2618:	01 c0       	rjmp	.+2      	; 0x261c <__vector_126+0x1b2>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    261a:	f9 d9       	rcall	.-3086   	; 0x1a0e <udd_ep_trans_complet>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    261c:	ff 91       	pop	r31
    261e:	ef 91       	pop	r30
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2620:	df 91       	pop	r29
    2622:	cf 91       	pop	r28
    2624:	bf 91       	pop	r27
    2626:	af 91       	pop	r26
    2628:	9f 91       	pop	r25
    262a:	8f 91       	pop	r24
    262c:	7f 91       	pop	r23
    262e:	6f 91       	pop	r22
    2630:	5f 91       	pop	r21
    2632:	4f 91       	pop	r20
    2634:	3f 91       	pop	r19
    2636:	2f 91       	pop	r18
    2638:	1f 91       	pop	r17
    263a:	0f 91       	pop	r16
    263c:	0f 90       	pop	r0
    263e:	0b be       	out	0x3b, r0	; 59
    2640:	0f 90       	pop	r0
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	0f 90       	pop	r0
    2646:	1f 90       	pop	r1
    2648:	18 95       	reti

0000264a <main>:
static volatile bool main_b_kbd_enable = false;
static volatile bool main_b_generic_enable = false;

int main (void)
{
	irq_initialize_vectors();
    264a:	87 e0       	ldi	r24, 0x07	; 7
    264c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();
    2650:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2652:	e6 e0       	ldi	r30, 0x06	; 6
    2654:	f3 e2       	ldi	r31, 0x23	; 35
    2656:	10 82       	st	Z, r1
    2658:	11 82       	std	Z+1, r1	; 0x01
    265a:	12 82       	std	Z+2, r1	; 0x02
    265c:	13 82       	std	Z+3, r1	; 0x03
    265e:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();			// initialize sleep manager
	sysclk_init();				// initialize clock
    2664:	0e 94 6e 04 	call	0x8dc	; 0x8dc <sysclk_init>

	io_init();
    2668:	0e 94 30 01 	call	0x260	; 0x260 <io_init>
	led_init();
    266c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <led_init>
	keypad_init();
    2670:	0e 94 88 02 	call	0x510	; 0x510 <keypad_init>

	udc_start();
    2674:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <udc_start>
    2678:	ff cf       	rjmp	.-2      	; 0x2678 <main+0x2e>

0000267a <main_suspend_action>:
	while (true) { }
}

/* --------------------------------------------------------------------- */

void main_suspend_action(void) { }
    267a:	08 95       	ret

0000267c <main_resume_action>:
void main_resume_action(void) { }
    267c:	08 95       	ret

0000267e <main_sof_action>:

void main_sof_action(void) {
	if (!main_b_kbd_enable)
    267e:	80 91 02 23 	lds	r24, 0x2302	; 0x802302 <main_b_kbd_enable>
    2682:	88 23       	and	r24, r24
    2684:	71 f0       	breq	.+28     	; 0x26a2 <main_sof_action+0x24>
	return;
	if (!main_b_generic_enable)
    2686:	80 91 01 23 	lds	r24, 0x2301	; 0x802301 <main_b_generic_enable>
    268a:	88 23       	and	r24, r24
    268c:	51 f0       	breq	.+20     	; 0x26a2 <main_sof_action+0x24>
		return;
	keypad_poll();
    268e:	0e 94 c2 02 	call	0x584	; 0x584 <keypad_poll>
	keypad_report();
    2692:	0e 94 67 03 	call	0x6ce	; 0x6ce <keypad_report>
	
	BD76319_ui_process(udd_get_frame_number());
    2696:	de db       	rcall	.-2116   	; 0x1e54 <udd_get_frame_number>
    2698:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <BD76319_ui_process>

	ui_process(udd_get_frame_number());
    269c:	db db       	rcall	.-2122   	; 0x1e54 <udd_get_frame_number>
    269e:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <ui_process>
    26a2:	08 95       	ret

000026a4 <main_remotewakeup_enable>:
    26a4:	08 95       	ret

000026a6 <main_remotewakeup_disable>:
}

void main_remotewakeup_enable(void) { }
void main_remotewakeup_disable(void) { }
    26a6:	08 95       	ret

000026a8 <main_kbd_enable>:

bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	80 93 02 23 	sts	0x2302, r24	; 0x802302 <main_b_kbd_enable>
	return true;
}
    26ae:	08 95       	ret

000026b0 <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    26b0:	10 92 02 23 	sts	0x2302, r1	; 0x802302 <main_b_kbd_enable>
    26b4:	08 95       	ret

000026b6 <main_generic_enable>:

/* --------------------------------------------------------------------- */

bool main_generic_enable(void)
{
	main_b_generic_enable = true;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	80 93 01 23 	sts	0x2301, r24	; 0x802301 <main_b_generic_enable>
	return true;
}
    26bc:	08 95       	ret

000026be <main_generic_disable>:

void main_generic_disable(void)
{
	main_b_generic_enable = false;
    26be:	10 92 01 23 	sts	0x2301, r1	; 0x802301 <main_b_generic_enable>
    26c2:	08 95       	ret

000026c4 <__udivmodhi4>:
    26c4:	aa 1b       	sub	r26, r26
    26c6:	bb 1b       	sub	r27, r27
    26c8:	51 e1       	ldi	r21, 0x11	; 17
    26ca:	07 c0       	rjmp	.+14     	; 0x26da <__udivmodhi4_ep>

000026cc <__udivmodhi4_loop>:
    26cc:	aa 1f       	adc	r26, r26
    26ce:	bb 1f       	adc	r27, r27
    26d0:	a6 17       	cp	r26, r22
    26d2:	b7 07       	cpc	r27, r23
    26d4:	10 f0       	brcs	.+4      	; 0x26da <__udivmodhi4_ep>
    26d6:	a6 1b       	sub	r26, r22
    26d8:	b7 0b       	sbc	r27, r23

000026da <__udivmodhi4_ep>:
    26da:	88 1f       	adc	r24, r24
    26dc:	99 1f       	adc	r25, r25
    26de:	5a 95       	dec	r21
    26e0:	a9 f7       	brne	.-22     	; 0x26cc <__udivmodhi4_loop>
    26e2:	80 95       	com	r24
    26e4:	90 95       	com	r25
    26e6:	bc 01       	movw	r22, r24
    26e8:	cd 01       	movw	r24, r26
    26ea:	08 95       	ret

000026ec <__tablejump2__>:
    26ec:	ee 0f       	add	r30, r30
    26ee:	ff 1f       	adc	r31, r31
    26f0:	88 1f       	adc	r24, r24
    26f2:	8b bf       	out	0x3b, r24	; 59
    26f4:	07 90       	elpm	r0, Z+
    26f6:	f6 91       	elpm	r31, Z
    26f8:	e0 2d       	mov	r30, r0
    26fa:	19 94       	eijmp

000026fc <memcpy>:
    26fc:	fb 01       	movw	r30, r22
    26fe:	dc 01       	movw	r26, r24
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <memcpy+0xa>
    2702:	01 90       	ld	r0, Z+
    2704:	0d 92       	st	X+, r0
    2706:	41 50       	subi	r20, 0x01	; 1
    2708:	50 40       	sbci	r21, 0x00	; 0
    270a:	d8 f7       	brcc	.-10     	; 0x2702 <memcpy+0x6>
    270c:	08 95       	ret

0000270e <_exit>:
    270e:	f8 94       	cli

00002710 <__stop_program>:
    2710:	ff cf       	rjmp	.-2      	; 0x2710 <__stop_program>
