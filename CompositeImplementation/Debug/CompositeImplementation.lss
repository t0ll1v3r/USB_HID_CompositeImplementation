
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000198  00802000  00002a6c  00002b00  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000231  00802198  00802198  00002c98  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000558  00000000  00000000  00002d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000aefa  00000000  00000000  00003260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000051f5  00000000  00000000  0000e15a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a1dd  00000000  00000000  0001334f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be8  00000000  00000000  0001d52c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036b7d  00000000  00000000  0001e114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003354  00000000  00000000  00054c91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b8  00000000  00000000  00057fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000d3e8  00000000  00000000  000586a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	2c c1       	rjmp	.+600    	; 0x25e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c1       	rjmp	.+596    	; 0x25e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c1       	rjmp	.+592    	; 0x25e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c1       	rjmp	.+588    	; 0x25e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c1       	rjmp	.+584    	; 0x25e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c1       	rjmp	.+580    	; 0x25e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c1       	rjmp	.+576    	; 0x25e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c1       	rjmp	.+572    	; 0x25e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c1       	rjmp	.+568    	; 0x25e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c1       	rjmp	.+564    	; 0x25e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	18 c1       	rjmp	.+560    	; 0x25e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c1       	rjmp	.+556    	; 0x25e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c1       	rjmp	.+552    	; 0x25e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c1       	rjmp	.+548    	; 0x25e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c1       	rjmp	.+544    	; 0x25e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c1       	rjmp	.+540    	; 0x25e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c1       	rjmp	.+536    	; 0x25e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c1       	rjmp	.+532    	; 0x25e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c1       	rjmp	.+528    	; 0x25e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c1       	rjmp	.+524    	; 0x25e <__bad_interrupt>
      52:	00 00       	nop
      54:	04 c1       	rjmp	.+520    	; 0x25e <__bad_interrupt>
      56:	00 00       	nop
      58:	02 c1       	rjmp	.+516    	; 0x25e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	00 c1       	rjmp	.+512    	; 0x25e <__bad_interrupt>
      5e:	00 00       	nop
      60:	fe c0       	rjmp	.+508    	; 0x25e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c0       	rjmp	.+504    	; 0x25e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c0       	rjmp	.+500    	; 0x25e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c0       	rjmp	.+496    	; 0x25e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c0       	rjmp	.+492    	; 0x25e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c0       	rjmp	.+488    	; 0x25e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c0       	rjmp	.+484    	; 0x25e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c0       	rjmp	.+480    	; 0x25e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c0       	rjmp	.+476    	; 0x25e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c0       	rjmp	.+472    	; 0x25e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c0       	rjmp	.+468    	; 0x25e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c0       	rjmp	.+464    	; 0x25e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c0       	rjmp	.+460    	; 0x25e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c0       	rjmp	.+456    	; 0x25e <__bad_interrupt>
      96:	00 00       	nop
      98:	e2 c0       	rjmp	.+452    	; 0x25e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e0 c0       	rjmp	.+448    	; 0x25e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	de c0       	rjmp	.+444    	; 0x25e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dc c0       	rjmp	.+440    	; 0x25e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	da c0       	rjmp	.+436    	; 0x25e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d8 c0       	rjmp	.+432    	; 0x25e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d6 c0       	rjmp	.+428    	; 0x25e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d4 c0       	rjmp	.+424    	; 0x25e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d2 c0       	rjmp	.+420    	; 0x25e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d0 c0       	rjmp	.+416    	; 0x25e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ce c0       	rjmp	.+412    	; 0x25e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cc c0       	rjmp	.+408    	; 0x25e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ca c0       	rjmp	.+404    	; 0x25e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c8 c0       	rjmp	.+400    	; 0x25e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c6 c0       	rjmp	.+396    	; 0x25e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c4 c0       	rjmp	.+392    	; 0x25e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c2 c0       	rjmp	.+388    	; 0x25e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <__bad_interrupt>
      de:	00 00       	nop
      e0:	be c0       	rjmp	.+380    	; 0x25e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bc c0       	rjmp	.+376    	; 0x25e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ba c0       	rjmp	.+372    	; 0x25e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b8 c0       	rjmp	.+368    	; 0x25e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b6 c0       	rjmp	.+364    	; 0x25e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b4 c0       	rjmp	.+360    	; 0x25e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b2 c0       	rjmp	.+356    	; 0x25e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b0 c0       	rjmp	.+352    	; 0x25e <__bad_interrupt>
      fe:	00 00       	nop
     100:	ae c0       	rjmp	.+348    	; 0x25e <__bad_interrupt>
     102:	00 00       	nop
     104:	ac c0       	rjmp	.+344    	; 0x25e <__bad_interrupt>
     106:	00 00       	nop
     108:	aa c0       	rjmp	.+340    	; 0x25e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a8 c0       	rjmp	.+336    	; 0x25e <__bad_interrupt>
     10e:	00 00       	nop
     110:	a6 c0       	rjmp	.+332    	; 0x25e <__bad_interrupt>
     112:	00 00       	nop
     114:	a4 c0       	rjmp	.+328    	; 0x25e <__bad_interrupt>
     116:	00 00       	nop
     118:	a2 c0       	rjmp	.+324    	; 0x25e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c0       	rjmp	.+320    	; 0x25e <__bad_interrupt>
     11e:	00 00       	nop
     120:	9e c0       	rjmp	.+316    	; 0x25e <__bad_interrupt>
     122:	00 00       	nop
     124:	9c c0       	rjmp	.+312    	; 0x25e <__bad_interrupt>
     126:	00 00       	nop
     128:	9a c0       	rjmp	.+308    	; 0x25e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	98 c0       	rjmp	.+304    	; 0x25e <__bad_interrupt>
     12e:	00 00       	nop
     130:	96 c0       	rjmp	.+300    	; 0x25e <__bad_interrupt>
     132:	00 00       	nop
     134:	94 c0       	rjmp	.+296    	; 0x25e <__bad_interrupt>
     136:	00 00       	nop
     138:	92 c0       	rjmp	.+292    	; 0x25e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	90 c0       	rjmp	.+288    	; 0x25e <__bad_interrupt>
     13e:	00 00       	nop
     140:	8e c0       	rjmp	.+284    	; 0x25e <__bad_interrupt>
     142:	00 00       	nop
     144:	8c c0       	rjmp	.+280    	; 0x25e <__bad_interrupt>
     146:	00 00       	nop
     148:	8a c0       	rjmp	.+276    	; 0x25e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	88 c0       	rjmp	.+272    	; 0x25e <__bad_interrupt>
     14e:	00 00       	nop
     150:	86 c0       	rjmp	.+268    	; 0x25e <__bad_interrupt>
     152:	00 00       	nop
     154:	84 c0       	rjmp	.+264    	; 0x25e <__bad_interrupt>
     156:	00 00       	nop
     158:	82 c0       	rjmp	.+260    	; 0x25e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	80 c0       	rjmp	.+256    	; 0x25e <__bad_interrupt>
     15e:	00 00       	nop
     160:	7e c0       	rjmp	.+252    	; 0x25e <__bad_interrupt>
     162:	00 00       	nop
     164:	7c c0       	rjmp	.+248    	; 0x25e <__bad_interrupt>
     166:	00 00       	nop
     168:	7a c0       	rjmp	.+244    	; 0x25e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	78 c0       	rjmp	.+240    	; 0x25e <__bad_interrupt>
     16e:	00 00       	nop
     170:	76 c0       	rjmp	.+236    	; 0x25e <__bad_interrupt>
     172:	00 00       	nop
     174:	74 c0       	rjmp	.+232    	; 0x25e <__bad_interrupt>
     176:	00 00       	nop
     178:	72 c0       	rjmp	.+228    	; 0x25e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	70 c0       	rjmp	.+224    	; 0x25e <__bad_interrupt>
     17e:	00 00       	nop
     180:	6e c0       	rjmp	.+220    	; 0x25e <__bad_interrupt>
     182:	00 00       	nop
     184:	6c c0       	rjmp	.+216    	; 0x25e <__bad_interrupt>
     186:	00 00       	nop
     188:	6a c0       	rjmp	.+212    	; 0x25e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	68 c0       	rjmp	.+208    	; 0x25e <__bad_interrupt>
     18e:	00 00       	nop
     190:	66 c0       	rjmp	.+204    	; 0x25e <__bad_interrupt>
     192:	00 00       	nop
     194:	64 c0       	rjmp	.+200    	; 0x25e <__bad_interrupt>
     196:	00 00       	nop
     198:	62 c0       	rjmp	.+196    	; 0x25e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	60 c0       	rjmp	.+192    	; 0x25e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5c c0       	rjmp	.+184    	; 0x25e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5a c0       	rjmp	.+180    	; 0x25e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	58 c0       	rjmp	.+176    	; 0x25e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	56 c0       	rjmp	.+172    	; 0x25e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	54 c0       	rjmp	.+168    	; 0x25e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	52 c0       	rjmp	.+164    	; 0x25e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	50 c0       	rjmp	.+160    	; 0x25e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4e c0       	rjmp	.+156    	; 0x25e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4c c0       	rjmp	.+152    	; 0x25e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4a c0       	rjmp	.+148    	; 0x25e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	48 c0       	rjmp	.+144    	; 0x25e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	46 c0       	rjmp	.+140    	; 0x25e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	44 c0       	rjmp	.+136    	; 0x25e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	40 c0       	rjmp	.+128    	; 0x25e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3e c0       	rjmp	.+124    	; 0x25e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3c c0       	rjmp	.+120    	; 0x25e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3a c0       	rjmp	.+116    	; 0x25e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	38 c0       	rjmp	.+112    	; 0x25e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	36 c0       	rjmp	.+108    	; 0x25e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 17 13 	jmp	0x262e	; 0x262e <__vector_125>
     1f8:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__vector_126>
     1fc:	aa 03       	fmulsu	r18, r18
     1fe:	f0 03       	fmuls	r23, r16
     200:	a0 03       	fmuls	r18, r16
     202:	f2 03       	fmuls	r23, r18
     204:	a2 03       	fmuls	r18, r18
     206:	a4 03       	fmuls	r18, r20
     208:	a6 03       	fmuls	r18, r22
     20a:	a8 03       	fmulsu	r18, r16
     20c:	aa 03       	fmulsu	r18, r18
     20e:	04 0e       	add	r0, r20
     210:	07 0e       	add	r0, r23
     212:	0a 0e       	add	r0, r26
     214:	0d 0e       	add	r0, r29
     216:	10 0e       	add	r1, r16
     218:	13 0e       	add	r1, r19
     21a:	16 0e       	add	r1, r22

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df e5       	ldi	r29, 0x5F	; 95
     226:	de bf       	out	0x3e, r29	; 62
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	11 e2       	ldi	r17, 0x21	; 33
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	ec e6       	ldi	r30, 0x6C	; 108
     234:	fa e2       	ldi	r31, 0x2A	; 42
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a8 39       	cpi	r26, 0x98	; 152
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	23 e2       	ldi	r18, 0x23	; 35
     248:	a8 e9       	ldi	r26, 0x98	; 152
     24a:	b1 e2       	ldi	r27, 0x21	; 33
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	a9 3c       	cpi	r26, 0xC9	; 201
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 cd 14 	call	0x299a	; 0x299a <main>
     25a:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <_exit>

0000025e <__bad_interrupt>:
     25e:	d0 ce       	rjmp	.-608    	; 0x0 <__vectors>

00000260 <udi_hid_led_getsetting>:
		                 udi_hid_led_setreport);
}

uint8_t udi_hid_led_getsetting(void) {
	return 0;
}
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret

00000264 <udi_hid_led_setreport>:

static bool udi_hid_led_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8)) &&
     264:	30 91 bb 23 	lds	r19, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
     268:	20 91 bc 23 	lds	r18, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
     26c:	82 2f       	mov	r24, r18
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 97       	sbiw	r24, 0x02	; 2
     272:	c1 f4       	brne	.+48     	; 0x2a4 <udi_hid_led_setreport+0x40>
     274:	31 11       	cpse	r19, r1
     276:	18 c0       	rjmp	.+48     	; 0x2a8 <udi_hid_led_setreport+0x44>
	   (0 == (0xFF & udd_g_ctrlreq.req.wValue))                         &&
     278:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
     27c:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	a1 f4       	brne	.+40     	; 0x2ac <udi_hid_led_setreport+0x48>
	   (UDI_HID_LED_REPORT_OUT_SIZE == udd_g_ctrlreq.req.wLength))
	{
		udd_g_ctrlreq.payload      = udi_hid_led_report_out;
     284:	e9 eb       	ldi	r30, 0xB9	; 185
     286:	f3 e2       	ldi	r31, 0x23	; 35
     288:	88 e9       	ldi	r24, 0x98	; 152
     28a:	91 e2       	ldi	r25, 0x21	; 33
     28c:	80 87       	std	Z+8, r24	; 0x08
     28e:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.payload_size = UDI_HID_LED_REPORT_OUT_SIZE;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	82 87       	std	Z+10, r24	; 0x0a
     296:	93 87       	std	Z+11, r25	; 0x0b
		udd_g_ctrlreq.callback     = udi_hid_led_report_out_received;
     298:	84 e7       	ldi	r24, 0x74	; 116
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	84 87       	std	Z+12, r24	; 0x0c
     29e:	95 87       	std	Z+13, r25	; 0x0d
		return true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	08 95       	ret
	}
	return false;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 95       	ret
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
     2ac:	80 e0       	ldi	r24, 0x00	; 0
}
     2ae:	08 95       	ret

000002b0 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     2b4:	04 e7       	ldi	r16, 0x74	; 116
     2b6:	11 e0       	ldi	r17, 0x01	; 1
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	48 e9       	ldi	r20, 0x98	; 152
     2be:	51 e2       	ldi	r21, 0x21	; 33
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	0e 94 c5 11 	call	0x238a	; 0x238a <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	08 95       	ret

000002ce <udi_hid_led_enable>:
		                                    iram_size_t     nb_received,
		                                    udd_ep_id_t     ep);

static bool udi_hid_led_report_out_enable(void);

bool udi_hid_led_enable(void) {
     2ce:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     2d0:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     2d4:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <__data_end>

	if(!udi_hid_led_report_out_enable())
     2d8:	eb df       	rcall	.-42     	; 0x2b0 <udi_hid_led_report_out_enable>
     2da:	c8 2f       	mov	r28, r24
     2dc:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     2de:	0e 94 03 15 	call	0x2a06	; 0x2a06 <main_led_enable>
	return true;
}
     2e2:	8c 2f       	mov	r24, r28
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     2e8:	81 11       	cpse	r24, r1
     2ea:	07 c0       	rjmp	.+14     	; 0x2fa <udi_hid_led_report_out_received+0x12>
     2ec:	61 30       	cpi	r22, 0x01	; 1
     2ee:	71 05       	cpc	r23, r1
     2f0:	21 f4       	brne	.+8      	; 0x2fa <udi_hid_led_report_out_received+0x12>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     2f2:	88 e9       	ldi	r24, 0x98	; 152
     2f4:	91 e2       	ldi	r25, 0x21	; 33
     2f6:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <main_led_report_out>
	}
	udi_hid_led_report_out_enable();
     2fa:	da cf       	rjmp	.-76     	; 0x2b0 <udi_hid_led_report_out_enable>
     2fc:	08 95       	ret

000002fe <udi_hid_led_disable>:
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     2fe:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <main_led_disable>
     302:	08 95       	ret

00000304 <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     304:	22 e3       	ldi	r18, 0x32	; 50
     306:	31 e0       	ldi	r19, 0x01	; 1
     308:	40 e0       	ldi	r20, 0x00	; 0
     30a:	50 e2       	ldi	r21, 0x20	; 32
     30c:	68 e9       	ldi	r22, 0x98	; 152
     30e:	71 e2       	ldi	r23, 0x21	; 33
     310:	8a e9       	ldi	r24, 0x9A	; 154
     312:	91 e2       	ldi	r25, 0x21	; 33
     314:	e5 c6       	rjmp	.+3530   	; 0x10e0 <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     316:	08 95       	ret

00000318 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     318:	e0 e0       	ldi	r30, 0x00	; 0
     31a:	f6 e0       	ldi	r31, 0x06	; 6
     31c:	9f ef       	ldi	r25, 0xFF	; 255
     31e:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     320:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     322:	e0 e2       	ldi	r30, 0x20	; 32
     324:	f6 e0       	ldi	r31, 0x06	; 6
     326:	3f e3       	ldi	r19, 0x3F	; 63
     328:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     32a:	88 e1       	ldi	r24, 0x18	; 24
     32c:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     32e:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     330:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     332:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     334:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     336:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     338:	20 ec       	ldi	r18, 0xC0	; 192
     33a:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     33c:	40 e4       	ldi	r20, 0x40	; 64
     33e:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     340:	40 e8       	ldi	r20, 0x80	; 128
     342:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     344:	e0 e4       	ldi	r30, 0x40	; 64
     346:	f6 e0       	ldi	r31, 0x06	; 6
     348:	4c ef       	ldi	r20, 0xFC	; 252
     34a:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     34c:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     34e:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     350:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     352:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     354:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     356:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     358:	43 e0       	ldi	r20, 0x03	; 3
     35a:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     35c:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     35e:	e0 e6       	ldi	r30, 0x60	; 96
     360:	f6 e0       	ldi	r31, 0x06	; 6
     362:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     364:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     366:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     368:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36a:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36c:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36e:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     370:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     372:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     374:	e0 e8       	ldi	r30, 0x80	; 128
     376:	f6 e0       	ldi	r31, 0x06	; 6
     378:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     37a:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     37c:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     37e:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     380:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     382:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     384:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     386:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     388:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     38a:	e0 ea       	ldi	r30, 0xA0	; 160
     38c:	f6 e0       	ldi	r31, 0x06	; 6
     38e:	90 ef       	ldi	r25, 0xF0	; 240
     390:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     392:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     394:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     396:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     398:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     39a:	8f e0       	ldi	r24, 0x0F	; 15
     39c:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     39e:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     3a0:	50 d2       	rcall	.+1184   	; 0x842 <led_init>
	keypad_init();
     3a2:	0d c1       	rjmp	.+538    	; 0x5be <keypad_init>
     3a4:	08 95       	ret

000003a6 <jstk_readVertIndex>:
     3a6:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     3aa:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	92 2b       	or	r25, r18
     3b2:	96 95       	lsr	r25
     3b4:	87 95       	ror	r24
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
     3ba:	bc 01       	movw	r22, r24
     3bc:	7f 70       	andi	r23, 0x0F	; 15
     3be:	80 ff       	sbrs	r24, 0
     3c0:	17 c0       	rjmp	.+46     	; 0x3f0 <jstk_readVertIndex+0x4a>
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	e1 e0       	ldi	r30, 0x01	; 1
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	82 2f       	mov	r24, r18
     3cc:	af 01       	movw	r20, r30
     3ce:	02 2e       	mov	r0, r18
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <jstk_readVertIndex+0x30>
     3d2:	44 0f       	add	r20, r20
     3d4:	55 1f       	adc	r21, r21
     3d6:	0a 94       	dec	r0
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <jstk_readVertIndex+0x2c>
     3da:	46 23       	and	r20, r22
     3dc:	57 23       	and	r21, r23
     3de:	45 2b       	or	r20, r21
     3e0:	41 f0       	breq	.+16     	; 0x3f2 <jstk_readVertIndex+0x4c>
     3e2:	2f 5f       	subi	r18, 0xFF	; 255
     3e4:	3f 4f       	sbci	r19, 0xFF	; 255
     3e6:	2c 30       	cpi	r18, 0x0C	; 12
     3e8:	31 05       	cpc	r19, r1
     3ea:	79 f7       	brne	.-34     	; 0x3ca <jstk_readVertIndex+0x24>
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	08 95       	ret
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	08 95       	ret

000003f4 <jstk_readHoriIndex>:
     3f4:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     3f8:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	92 2b       	or	r25, r18
     400:	bc 01       	movw	r22, r24
     402:	7f 70       	andi	r23, 0x0F	; 15
     404:	80 ff       	sbrs	r24, 0
     406:	17 c0       	rjmp	.+46     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     408:	21 e0       	ldi	r18, 0x01	; 1
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	e1 e0       	ldi	r30, 0x01	; 1
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	82 2f       	mov	r24, r18
     412:	af 01       	movw	r20, r30
     414:	02 2e       	mov	r0, r18
     416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     418:	44 0f       	add	r20, r20
     41a:	55 1f       	adc	r21, r21
     41c:	0a 94       	dec	r0
     41e:	e2 f7       	brpl	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     420:	46 23       	and	r20, r22
     422:	57 23       	and	r21, r23
     424:	45 2b       	or	r20, r21
     426:	41 f0       	breq	.+16     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     428:	2f 5f       	subi	r18, 0xFF	; 255
     42a:	3f 4f       	sbci	r19, 0xFF	; 255
     42c:	2c 30       	cpi	r18, 0x0C	; 12
     42e:	31 05       	cpc	r19, r1
     430:	79 f7       	brne	.-34     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	08 95       	ret
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	08 95       	ret

0000043a <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     43a:	88 23       	and	r24, r24
     43c:	f4 f1       	brlt	.+124    	; 0x4ba <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     43e:	9b ef       	ldi	r25, 0xFB	; 251
     440:	98 0f       	add	r25, r24
     442:	92 30       	cpi	r25, 0x02	; 2
     444:	e0 f1       	brcs	.+120    	; 0x4be <jstk_ledMask+0x84>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     446:	85 30       	cpi	r24, 0x05	; 5
     448:	34 f4       	brge	.+12     	; 0x456 <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     44a:	95 e0       	ldi	r25, 0x05	; 5
     44c:	98 1b       	sub	r25, r24
     44e:	92 30       	cpi	r25, 0x02	; 2
     450:	08 f0       	brcs	.+2      	; 0x454 <jstk_ledMask+0x1a>
     452:	42 c0       	rjmp	.+132    	; 0x4d8 <jstk_ledMask+0x9e>
     454:	36 c0       	rjmp	.+108    	; 0x4c2 <jstk_ledMask+0x88>
     456:	9a ef       	ldi	r25, 0xFA	; 250
     458:	98 0f       	add	r25, r24
     45a:	92 30       	cpi	r25, 0x02	; 2
     45c:	b0 f5       	brcc	.+108    	; 0x4ca <jstk_ledMask+0x90>
     45e:	31 c0       	rjmp	.+98     	; 0x4c2 <jstk_ledMask+0x88>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     460:	62 e0       	ldi	r22, 0x02	; 2
     462:	23 e0       	ldi	r18, 0x03	; 3
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     46a:	e1 e0       	ldi	r30, 0x01	; 1
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	af 01       	movw	r20, r30
     470:	02 2e       	mov	r0, r18
     472:	02 c0       	rjmp	.+4      	; 0x478 <jstk_ledMask+0x3e>
     474:	44 0f       	add	r20, r20
     476:	55 1f       	adc	r21, r21
     478:	0a 94       	dec	r0
     47a:	e2 f7       	brpl	.-8      	; 0x474 <jstk_ledMask+0x3a>
     47c:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     47e:	9f 5f       	subi	r25, 0xFF	; 255
     480:	21 50       	subi	r18, 0x01	; 1
     482:	31 09       	sbc	r19, r1
     484:	96 17       	cp	r25, r22
     486:	98 f3       	brcs	.-26     	; 0x46e <jstk_ledMask+0x34>
     488:	08 95       	ret
     48a:	81 50       	subi	r24, 0x01	; 1
     48c:	48 2f       	mov	r20, r24
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	4b 5f       	subi	r20, 0xFB	; 251
     492:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     494:	24 e0       	ldi	r18, 0x04	; 4
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     49a:	e1 e0       	ldi	r30, 0x01	; 1
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	bf 01       	movw	r22, r30
     4a0:	02 2e       	mov	r0, r18
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <jstk_ledMask+0x6e>
     4a4:	66 0f       	add	r22, r22
     4a6:	77 1f       	adc	r23, r23
     4a8:	0a 94       	dec	r0
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <jstk_ledMask+0x6a>
     4ac:	86 2b       	or	r24, r22
     4ae:	2f 5f       	subi	r18, 0xFF	; 255
     4b0:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     4b2:	24 17       	cp	r18, r20
     4b4:	35 07       	cpc	r19, r21
     4b6:	99 f7       	brne	.-26     	; 0x49e <jstk_ledMask+0x64>
     4b8:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     4be:	88 e1       	ldi	r24, 0x18	; 24
     4c0:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     4c2:	85 30       	cpi	r24, 0x05	; 5
     4c4:	6c f2       	brlt	.-102    	; 0x460 <jstk_ledMask+0x26>
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	e0 cf       	rjmp	.-64     	; 0x48a <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4ca:	85 50       	subi	r24, 0x05	; 5
     4cc:	85 30       	cpi	r24, 0x05	; 5
     4ce:	08 f0       	brcs	.+2      	; 0x4d2 <jstk_ledMask+0x98>
     4d0:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     4d2:	81 11       	cpse	r24, r1
     4d4:	da cf       	rjmp	.-76     	; 0x48a <jstk_ledMask+0x50>
     4d6:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4d8:	66 e0       	ldi	r22, 0x06	; 6
     4da:	68 1b       	sub	r22, r24
     4dc:	65 30       	cpi	r22, 0x05	; 5
     4de:	08 f0       	brcs	.+2      	; 0x4e2 <jstk_ledMask+0xa8>
     4e0:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     4e2:	61 11       	cpse	r22, r1
     4e4:	be cf       	rjmp	.-132    	; 0x462 <jstk_ledMask+0x28>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     4e8:	08 95       	ret

000004ea <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     4ea:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     4ec:	5c df       	rcall	.-328    	; 0x3a6 <jstk_readVertIndex>
     4ee:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     4f0:	81 df       	rcall	.-254    	; 0x3f4 <jstk_readHoriIndex>
     4f2:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     4f4:	24 f4       	brge	.+8      	; 0x4fe <jstk_readMask+0x14>
     4f6:	88 23       	and	r24, r24
     4f8:	c4 f0       	brlt	.+48     	; 0x52a <jstk_readMask+0x40>
     4fa:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     4fc:	09 c0       	rjmp	.+18     	; 0x510 <jstk_readMask+0x26>
     4fe:	c6 30       	cpi	r28, 0x06	; 6
     500:	1c f0       	brlt	.+6      	; 0x508 <jstk_readMask+0x1e>
     502:	9b ef       	ldi	r25, 0xFB	; 251
     504:	9c 0f       	add	r25, r28
     506:	02 c0       	rjmp	.+4      	; 0x50c <jstk_readMask+0x22>
     508:	95 e0       	ldi	r25, 0x05	; 5
     50a:	9c 1b       	sub	r25, r28
     50c:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     50e:	54 f0       	brlt	.+20     	; 0x524 <jstk_readMask+0x3a>
     510:	86 30       	cpi	r24, 0x06	; 6
     512:	1c f0       	brlt	.+6      	; 0x51a <jstk_readMask+0x30>
     514:	2b ef       	ldi	r18, 0xFB	; 251
     516:	28 0f       	add	r18, r24
     518:	02 c0       	rjmp	.+4      	; 0x51e <jstk_readMask+0x34>
     51a:	25 e0       	ldi	r18, 0x05	; 5
     51c:	28 1b       	sub	r18, r24
     51e:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     520:	08 f4       	brcc	.+2      	; 0x524 <jstk_readMask+0x3a>
     522:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     524:	8c 2f       	mov	r24, r28
     526:	89 df       	rcall	.-238    	; 0x43a <jstk_ledMask>
     528:	01 c0       	rjmp	.+2      	; 0x52c <jstk_readMask+0x42>
     52a:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     52c:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     52e:	08 95       	ret

00000530 <jstk_usbTask>:
     530:	61 df       	rcall	.-318    	; 0x3f4 <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     532:	88 23       	and	r24, r24
     534:	3c f0       	brlt	.+14     	; 0x544 <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     536:	e8 2f       	mov	r30, r24
     538:	88 0f       	add	r24, r24
     53a:	ff 0b       	sbc	r31, r31
     53c:	e4 57       	subi	r30, 0x74	; 116
     53e:	fe 4d       	sbci	r31, 0xDE	; 222
     540:	80 81       	ld	r24, Z
     542:	01 c0       	rjmp	.+2      	; 0x546 <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     544:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     546:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <jstk_usbReport>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     54a:	2d df       	rcall	.-422    	; 0x3a6 <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     54c:	88 23       	and	r24, r24
     54e:	3c f0       	brlt	.+14     	; 0x55e <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     550:	e8 2f       	mov	r30, r24
     552:	88 0f       	add	r24, r24
     554:	ff 0b       	sbc	r31, r31
     556:	e4 57       	subi	r30, 0x74	; 116
     558:	fe 4d       	sbci	r31, 0xDE	; 222
     55a:	80 81       	ld	r24, Z
     55c:	01 c0       	rjmp	.+2      	; 0x560 <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     55e:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     560:	ec e9       	ldi	r30, 0x9C	; 156
     562:	f1 e2       	ldi	r31, 0x21	; 33
     564:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     566:	20 81       	ld	r18, Z
     568:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     56c:	29 13       	cpse	r18, r25
     56e:	04 c0       	rjmp	.+8      	; 0x578 <jstk_usbTask+0x48>
     570:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     574:	98 17       	cp	r25, r24
     576:	71 f0       	breq	.+28     	; 0x594 <jstk_usbTask+0x64>
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     578:	8c e9       	ldi	r24, 0x9C	; 156
     57a:	91 e2       	ldi	r25, 0x21	; 33
     57c:	c0 d4       	rcall	.+2432   	; 0xefe <udi_hid_generic_send_report_in>
     57e:	88 23       	and	r24, r24
     580:	49 f0       	breq	.+18     	; 0x594 <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     582:	e6 e2       	ldi	r30, 0x26	; 38
     584:	f0 e2       	ldi	r31, 0x20	; 32
     586:	ac e9       	ldi	r26, 0x9C	; 156
     588:	b1 e2       	ldi	r27, 0x21	; 33
     58a:	8c 91       	ld	r24, X
     58c:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     58e:	11 96       	adiw	r26, 0x01	; 1
     590:	8c 91       	ld	r24, X
     592:	81 83       	std	Z+1, r24	; 0x01
     594:	08 95       	ret

00000596 <joystick>:
    }
}

void joystick(void) 
{
    jstk_mask = jstk_readMask();            // pick LED's
     596:	a9 df       	rcall	.-174    	; 0x4ea <jstk_readMask>
     598:	80 93 b0 23 	sts	0x23B0, r24	; 0x8023b0 <jstk_mask>
    jstk_testMode = PORTB.IN;               // checks switch for testing mode
     59c:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     5a0:	90 93 b1 23 	sts	0x23B1, r25	; 0x8023b1 <jstk_testMode>

    if ((jstk_testMode & PIN4_bm) == 0) {   // test mode
     5a4:	90 91 b1 23 	lds	r25, 0x23B1	; 0x8023b1 <jstk_testMode>
     5a8:	94 fd       	sbrc	r25, 4
     5aa:	07 c0       	rjmp	.+14     	; 0x5ba <joystick+0x24>
        if (jstk_mask) {
     5ac:	88 23       	and	r24, r24
            led_allOff();
     5ae:	31 f0       	breq	.+12     	; 0x5bc <joystick+0x26>
     5b0:	4e d1       	rcall	.+668    	; 0x84e <led_allOff>
            led_on(jstk_mask);
     5b2:	80 91 b0 23 	lds	r24, 0x23B0	; 0x8023b0 <jstk_mask>
     5b6:	4f c1       	rjmp	.+670    	; 0x856 <led_on>
        }
    } else {                                // normal mode
        // led_allOff();                       // for testing
        jstk_usbTask();                     // send to USB
     5b8:	08 95       	ret
     5ba:	ba cf       	rjmp	.-140    	; 0x530 <jstk_usbTask>
     5bc:	08 95       	ret

000005be <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     5be:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <kpd_keyPressed>
     5c2:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <kpd_currState>
     5c6:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <kpd_prevState>
     5ca:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <kpd_exitTestMode>
     5ce:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <kpd_rowVal>
     5d2:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <kpd_code>
     5d6:	ef ea       	ldi	r30, 0xAF	; 175
     5d8:	f1 e2       	ldi	r31, 0x21	; 33
     5da:	81 e6       	ldi	r24, 0x61	; 97
     5dc:	80 83       	st	Z, r24
     5de:	80 e6       	ldi	r24, 0x60	; 96
     5e0:	81 83       	std	Z+1, r24	; 0x01
     5e2:	12 82       	std	Z+2, r1	; 0x02
     5e4:	13 82       	std	Z+3, r1	; 0x03
     5e6:	8f e5       	ldi	r24, 0x5F	; 95
     5e8:	84 83       	std	Z+4, r24	; 0x04
     5ea:	8e e5       	ldi	r24, 0x5E	; 94
     5ec:	85 83       	std	Z+5, r24	; 0x05
     5ee:	16 82       	std	Z+6, r1	; 0x06
     5f0:	17 82       	std	Z+7, r1	; 0x07
     5f2:	8d e5       	ldi	r24, 0x5D	; 93
     5f4:	80 87       	std	Z+8, r24	; 0x08
     5f6:	11 86       	std	Z+9, r1	; 0x09
     5f8:	12 86       	std	Z+10, r1	; 0x0a
     5fa:	13 86       	std	Z+11, r1	; 0x0b
     5fc:	14 86       	std	Z+12, r1	; 0x0c
     5fe:	15 86       	std	Z+13, r1	; 0x0d
     600:	89 e5       	ldi	r24, 0x59	; 89
     602:	86 87       	std	Z+14, r24	; 0x0e
     604:	8b e5       	ldi	r24, 0x5B	; 91
     606:	87 87       	std	Z+15, r24	; 0x0f
     608:	10 8a       	std	Z+16, r1	; 0x10
     60a:	11 8a       	std	Z+17, r1	; 0x11
     60c:	8a e5       	ldi	r24, 0x5A	; 90
     60e:	82 8b       	std	Z+18, r24	; 0x12
     610:	8c e5       	ldi	r24, 0x5C	; 92
     612:	83 8b       	std	Z+19, r24	; 0x13
     614:	ea ea       	ldi	r30, 0xAA	; 170
     616:	f1 e2       	ldi	r31, 0x21	; 33
     618:	8e e0       	ldi	r24, 0x0E	; 14
     61a:	80 83       	st	Z, r24
     61c:	8d e0       	ldi	r24, 0x0D	; 13
     61e:	81 83       	std	Z+1, r24	; 0x01
     620:	8b e0       	ldi	r24, 0x0B	; 11
     622:	82 83       	std	Z+2, r24	; 0x02
     624:	87 e0       	ldi	r24, 0x07	; 7
     626:	83 83       	std	Z+3, r24	; 0x03
     628:	8f ef       	ldi	r24, 0xFF	; 255
     62a:	84 83       	std	Z+4, r24	; 0x04
     62c:	08 95       	ret

0000062e <keypad_poll>:
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	45 e0       	ldi	r20, 0x05	; 5
     638:	54 e0       	ldi	r21, 0x04	; 4
     63a:	e0 ea       	ldi	r30, 0xA0	; 160
     63c:	f6 e0       	ldi	r31, 0x06	; 6
     63e:	c0 e2       	ldi	r28, 0x20	; 32
     640:	d6 e0       	ldi	r29, 0x06	; 6
     642:	60 e8       	ldi	r22, 0x80	; 128
     644:	92 2f       	mov	r25, r18
     646:	d9 01       	movw	r26, r18
     648:	a6 55       	subi	r26, 0x56	; 86
     64a:	be 4d       	sbci	r27, 0xDE	; 222
     64c:	8c 91       	ld	r24, X
     64e:	84 83       	std	Z+4, r24	; 0x04
     650:	24 30       	cpi	r18, 0x04	; 4
     652:	11 f4       	brne	.+4      	; 0x658 <keypad_poll+0x2a>
     654:	6e 83       	std	Y+6, r22	; 0x06
     656:	31 c0       	rjmp	.+98     	; 0x6ba <keypad_poll+0x8c>
     658:	6d 83       	std	Y+5, r22	; 0x05
     65a:	2f c0       	rjmp	.+94     	; 0x6ba <keypad_poll+0x8c>
     65c:	49 2f       	mov	r20, r25
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	2f 5f       	subi	r18, 0xFF	; 255
     662:	3f 4f       	sbci	r19, 0xFF	; 255
     664:	25 30       	cpi	r18, 0x05	; 5
     666:	31 05       	cpc	r19, r1
     668:	69 f7       	brne	.-38     	; 0x644 <keypad_poll+0x16>
     66a:	80 e8       	ldi	r24, 0x80	; 128
     66c:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     670:	54 30       	cpi	r21, 0x04	; 4
     672:	e0 f4       	brcc	.+56     	; 0x6ac <keypad_poll+0x7e>
     674:	e4 2f       	mov	r30, r20
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	ee 0f       	add	r30, r30
     67e:	ff 1f       	adc	r31, r31
     680:	e1 55       	subi	r30, 0x51	; 81
     682:	fe 4d       	sbci	r31, 0xDE	; 222
     684:	e5 0f       	add	r30, r21
     686:	f1 1d       	adc	r31, r1
     688:	80 81       	ld	r24, Z
     68a:	90 91 a8 21 	lds	r25, 0x21A8	; 0x8021a8 <kpd_keyPressed>
     68e:	91 11       	cpse	r25, r1
     690:	06 c0       	rjmp	.+12     	; 0x69e <keypad_poll+0x70>
     692:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <kpd_code>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 a8 21 	sts	0x21A8, r24	; 0x8021a8 <kpd_keyPressed>
     69c:	22 c0       	rjmp	.+68     	; 0x6e2 <keypad_poll+0xb4>
     69e:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <kpd_code>
     6a2:	89 17       	cp	r24, r25
     6a4:	f1 f0       	breq	.+60     	; 0x6e2 <keypad_poll+0xb4>
     6a6:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <kpd_code>
     6aa:	1b c0       	rjmp	.+54     	; 0x6e2 <keypad_poll+0xb4>
     6ac:	80 91 a8 21 	lds	r24, 0x21A8	; 0x8021a8 <kpd_keyPressed>
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	b9 f4       	brne	.+46     	; 0x6e2 <keypad_poll+0xb4>
     6b4:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <kpd_keyPressed>
     6b8:	14 c0       	rjmp	.+40     	; 0x6e2 <keypad_poll+0xb4>
     6ba:	80 85       	ldd	r24, Z+8	; 0x08
     6bc:	80 7f       	andi	r24, 0xF0	; 240
     6be:	80 3b       	cpi	r24, 0xB0	; 176
     6c0:	49 f0       	breq	.+18     	; 0x6d4 <keypad_poll+0xa6>
     6c2:	18 f4       	brcc	.+6      	; 0x6ca <keypad_poll+0x9c>
     6c4:	80 37       	cpi	r24, 0x70	; 112
     6c6:	51 f0       	breq	.+20     	; 0x6dc <keypad_poll+0xae>
     6c8:	cb cf       	rjmp	.-106    	; 0x660 <keypad_poll+0x32>
     6ca:	80 3d       	cpi	r24, 0xD0	; 208
     6cc:	29 f0       	breq	.+10     	; 0x6d8 <keypad_poll+0xaa>
     6ce:	80 3e       	cpi	r24, 0xE0	; 224
     6d0:	29 f2       	breq	.-118    	; 0x65c <keypad_poll+0x2e>
     6d2:	c6 cf       	rjmp	.-116    	; 0x660 <keypad_poll+0x32>
     6d4:	52 e0       	ldi	r21, 0x02	; 2
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <keypad_poll+0xb0>
     6d8:	51 e0       	ldi	r21, 0x01	; 1
     6da:	01 c0       	rjmp	.+2      	; 0x6de <keypad_poll+0xb0>
     6dc:	53 e0       	ldi	r21, 0x03	; 3
     6de:	49 2f       	mov	r20, r25
     6e0:	bf cf       	rjmp	.-130    	; 0x660 <keypad_poll+0x32>
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret

000006e8 <keypad_getState>:
     6e8:	80 91 a8 21 	lds	r24, 0x21A8	; 0x8021a8 <kpd_keyPressed>
     6ec:	08 95       	ret

000006ee <keypad_report>:

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     6ee:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     6f2:	80 93 b2 23 	sts	0x23B2, r24	; 0x8023b2 <kpd_testMode>
	}
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     6f6:	80 91 a8 21 	lds	r24, 0x21A8	; 0x8021a8 <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     6fa:	80 93 a5 21 	sts	0x21A5, r24	; 0x8021a5 <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     6fe:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_codeOut = keypad_getCode();    // current code to be outputed
     702:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <kpd_codeOut>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     706:	80 91 b2 23 	lds	r24, 0x23B2	; 0x8023b2 <kpd_testMode>
     70a:	84 fd       	sbrc	r24, 4
     70c:	29 c0       	rjmp	.+82     	; 0x760 <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     70e:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <kpd_currState>
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	09 f0       	breq	.+2      	; 0x718 <keypad_report+0x2a>
     716:	54 c0       	rjmp	.+168    	; 0x7c0 <keypad_report+0xd2>
     718:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <kpd_prevState>
     71c:	81 11       	cpse	r24, r1
     71e:	50 c0       	rjmp	.+160    	; 0x7c0 <keypad_report+0xd2>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
     720:	e0 91 a4 21 	lds	r30, 0x21A4	; 0x8021a4 <kpd_codeOut>
     724:	8e 2f       	mov	r24, r30
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	fc 01       	movw	r30, r24
     72a:	e9 55       	subi	r30, 0x59	; 89
     72c:	f1 09       	sbc	r31, r1
     72e:	e9 30       	cpi	r30, 0x09	; 9
     730:	f1 05       	cpc	r31, r1
     732:	90 f4       	brcc	.+36     	; 0x758 <keypad_report+0x6a>
     734:	88 27       	eor	r24, r24
     736:	e2 50       	subi	r30, 0x02	; 2
     738:	ff 4f       	sbci	r31, 0xFF	; 255
     73a:	8f 4f       	sbci	r24, 0xFF	; 255
     73c:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     740:	84 e0       	ldi	r24, 0x04	; 4
     742:	09 c0       	rjmp	.+18     	; 0x756 <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     744:	80 e1       	ldi	r24, 0x10	; 16
     746:	07 c0       	rjmp	.+14     	; 0x756 <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     748:	80 e2       	ldi	r24, 0x20	; 32
     74a:	05 c0       	rjmp	.+10     	; 0x756 <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     74c:	80 e4       	ldi	r24, 0x40	; 64
     74e:	03 c0       	rjmp	.+6      	; 0x756 <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     750:	80 e8       	ldi	r24, 0x80	; 128
     752:	01 c0       	rjmp	.+2      	; 0x756 <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     754:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     756:	85 d0       	rcall	.+266    	; 0x862 <led_toggle>
			kpd_exitTestMode = 1;	// flag for exiting test mode
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <kpd_exitTestMode>
     75e:	30 c0       	rjmp	.+96     	; 0x7c0 <keypad_report+0xd2>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     760:	90 91 a7 21 	lds	r25, 0x21A7	; 0x8021a7 <kpd_code>
	else // normal mode
	{
		static uint8_t kpd_prevCode = 0;
		uint8_t currCode = keypad_getCode();

		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
     764:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <kpd_currState>
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	61 f4       	brne	.+24     	; 0x784 <keypad_report+0x96>
     76c:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <kpd_prevState>
     770:	81 11       	cpse	r24, r1
     772:	08 c0       	rjmp	.+16     	; 0x784 <keypad_report+0x96>
			kpd_prevCode = currCode;
     774:	90 93 a0 21 	sts	0x21A0, r25	; 0x8021a0 <kpd_prevCode.5344>
			// BD76319_KeyToReport(KEYPAD_PRESSED, currCode);

			keyStatus2Report = KEYPAD_PRESSED;
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <keyStatus2Report>
			key2Report = currCode;
     77e:	90 93 a1 21 	sts	0x21A1, r25	; 0x8021a1 <key2Report>
     782:	1e c0       	rjmp	.+60     	; 0x7c0 <keypad_report+0xd2>
		} else if (kpd_currState == KEYPAD_PRESSED && currCode != kpd_prevCode) {
     784:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <kpd_currState>
     788:	81 30       	cpi	r24, 0x01	; 1
     78a:	61 f4       	brne	.+24     	; 0x7a4 <keypad_report+0xb6>
     78c:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <kpd_prevCode.5344>
     790:	98 17       	cp	r25, r24
     792:	41 f0       	breq	.+16     	; 0x7a4 <keypad_report+0xb6>
			kpd_prevCode = currCode;
     794:	90 93 a0 21 	sts	0x21A0, r25	; 0x8021a0 <kpd_prevCode.5344>
			// BD76319_KeyToReport(KEYPAD_PRESSED, currCode);

			keyStatus2Report = KEYPAD_PRESSED;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <keyStatus2Report>
			key2Report = currCode;
     79e:	90 93 a1 21 	sts	0x21A1, r25	; 0x8021a1 <key2Report>
     7a2:	0e c0       	rjmp	.+28     	; 0x7c0 <keypad_report+0xd2>
		} else if (kpd_currState == KEYPAD_RELEASED && kpd_prevState == KEYPAD_PRESSED) {
     7a4:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <kpd_currState>
     7a8:	81 11       	cpse	r24, r1
     7aa:	0a c0       	rjmp	.+20     	; 0x7c0 <keypad_report+0xd2>
     7ac:	80 91 a6 21 	lds	r24, 0x21A6	; 0x8021a6 <kpd_prevState>
     7b0:	81 30       	cpi	r24, 0x01	; 1
     7b2:	31 f4       	brne	.+12     	; 0x7c0 <keypad_report+0xd2>
			// BD76319_KeyToReport(KEYPAD_RELEASED, kpd_prevCode);

			keyStatus2Report = KEYPAD_RELEASED;
     7b4:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <keyStatus2Report>
			key2Report = kpd_prevCode;
     7b8:	80 91 a0 21 	lds	r24, 0x21A0	; 0x8021a0 <kpd_prevCode.5344>
     7bc:	80 93 a1 21 	sts	0x21A1, r24	; 0x8021a1 <key2Report>
		}
	}
	
	// clears LEDs when exiting test mode
	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     7c0:	80 91 b2 23 	lds	r24, 0x23B2	; 0x8023b2 <kpd_testMode>
     7c4:	84 ff       	sbrs	r24, 4
     7c6:	07 c0       	rjmp	.+14     	; 0x7d6 <keypad_report+0xe8>
     7c8:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <kpd_exitTestMode>
     7cc:	81 30       	cpi	r24, 0x01	; 1
		led_allOff();
     7ce:	19 f4       	brne	.+6      	; 0x7d6 <keypad_report+0xe8>
     7d0:	3e d0       	rcall	.+124    	; 0x84e <led_allOff>
		kpd_exitTestMode = 0;
     7d2:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <kpd_exitTestMode>
	}
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
     7d6:	80 91 a5 21 	lds	r24, 0x21A5	; 0x8021a5 <kpd_currState>
     7da:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <kpd_prevState>
}
     7de:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	b9 cf       	rjmp	.-142    	; 0x756 <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     7e4:	88 e0       	ldi	r24, 0x08	; 8
     7e6:	b7 cf       	rjmp	.-146    	; 0x756 <keypad_report+0x68>

000007e8 <keypad>:
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
}


void keypad(void) {
     7e8:	cf 93       	push	r28
	keypad_poll();
     7ea:	21 df       	rcall	.-446    	; 0x62e <keypad_poll>
	keypad_report();
     7ec:	80 df       	rcall	.-256    	; 0x6ee <keypad_report>
     7ee:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <keyStatus2Report>

	static bool key_was_down = false;
	static uint8_t active_key = 0;

	bool key_down = keyStatus2Report;
     7f2:	c1 e0       	ldi	r28, 0x01	; 1
     7f4:	81 11       	cpse	r24, r1
     7f6:	01 c0       	rjmp	.+2      	; 0x7fa <keypad+0x12>
     7f8:	c0 e0       	ldi	r28, 0x00	; 0
     7fa:	88 23       	and	r24, r24
	uint8_t key_val = key2Report;

	if (key_down) {
     7fc:	81 f0       	breq	.+32     	; 0x81e <keypad+0x36>
     7fe:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <key2Report>

	static bool key_was_down = false;
	static uint8_t active_key = 0;

	bool key_down = keyStatus2Report;
	uint8_t key_val = key2Report;
     802:	90 91 9f 21 	lds	r25, 0x219F	; 0x80219f <key_was_down.5349>

	if (key_down) {
		if (!key_was_down)
     806:	91 11       	cpse	r25, r1
     808:	03 c0       	rjmp	.+6      	; 0x810 <keypad+0x28>
     80a:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <active_key.5350>
			active_key = key_val;
     80e:	15 c0       	rjmp	.+42     	; 0x83a <keypad+0x52>
     810:	90 91 9e 21 	lds	r25, 0x219E	; 0x80219e <active_key.5350>
		else if (key_val != active_key)
     814:	89 17       	cp	r24, r25
     816:	89 f0       	breq	.+34     	; 0x83a <keypad+0x52>
     818:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <active_key.5350>
			active_key = key_val;
     81c:	0e c0       	rjmp	.+28     	; 0x83a <keypad+0x52>
     81e:	80 91 9f 21 	lds	r24, 0x219F	; 0x80219f <key_was_down.5349>
	} else if (key_was_down) {
     822:	88 23       	and	r24, r24
     824:	51 f0       	breq	.+20     	; 0x83a <keypad+0x52>
     826:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <active_key.5350>
		if (active_key) {
     82a:	88 23       	and	r24, r24
     82c:	21 f0       	breq	.+8      	; 0x836 <keypad+0x4e>
			udi_hid_kbd_down(active_key);
     82e:	24 d4       	rcall	.+2120   	; 0x1078 <udi_hid_kbd_down>
			udi_hid_kbd_up(active_key);
     830:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <active_key.5350>
     834:	e5 d3       	rcall	.+1994   	; 0x1000 <udi_hid_kbd_up>
     836:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <active_key.5350>
		}
		active_key = 0;
     83a:	c0 93 9f 21 	sts	0x219F, r28	; 0x80219f <key_was_down.5349>
	}
	key_was_down = key_down;
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

00000842 <led_init>:
     842:	e0 e0       	ldi	r30, 0x00	; 0
    LED_PORT.DIRSET = LED_MASK;	// outputs
    LED_PORT.OUTSET = LED_MASK;
}

void led_allOn(void) {			// turns all LED's on
	LED_PORT.OUTCLR = LED_MASK;
     844:	f6 e0       	ldi	r31, 0x06	; 6
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	81 83       	std	Z+1, r24	; 0x01
     84a:	85 83       	std	Z+5, r24	; 0x05
     84c:	08 95       	ret

0000084e <led_allOff>:
}

void led_allOff(void) {			// turns all LED's off
	LED_PORT.OUTSET = LED_MASK;
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     854:	08 95       	ret

00000856 <led_on>:
}

void led_on(uint8_t mask) {		// LED on
    LED_PORT.OUTCLR = mask;		// drive low (on)
     856:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     85a:	08 95       	ret

0000085c <led_off>:
}

void led_off(uint8_t mask) {	// LED off
    LED_PORT.OUTSET = mask;		// drive high (off)
     85c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     860:	08 95       	ret

00000862 <led_toggle>:
}

void led_toggle(uint8_t mask) {	// toggle LED
    LED_PORT.OUTTGL = mask;
     862:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     866:	08 95       	ret

00000868 <led_setStatus>:
}

void led_setStatus(uint8_t mask) {
    LED_PORT.OUTSET = LED_MASK;
     868:	e0 e0       	ldi	r30, 0x00	; 0
     86a:	f6 e0       	ldi	r31, 0x06	; 6
     86c:	9f ef       	ldi	r25, 0xFF	; 255
     86e:	95 83       	std	Z+5, r25	; 0x05
    LED_PORT.OUTCLR = mask;
     870:	86 83       	std	Z+6, r24	; 0x06
     872:	08 95       	ret

00000874 <startupSequence>:
#include "startup.h"
#include "joystick.h"


void startupSequence(int sequence)
{
     874:	6f 92       	push	r6
     876:	7f 92       	push	r7
     878:	8f 92       	push	r8
     87a:	9f 92       	push	r9
     87c:	af 92       	push	r10
     87e:	bf 92       	push	r11
     880:	cf 92       	push	r12
     882:	df 92       	push	r13
     884:	ef 92       	push	r14
     886:	ff 92       	push	r15
     888:	0f 93       	push	r16
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
     894:	29 97       	sbiw	r28, 0x09	; 9
     896:	cd bf       	out	0x3d, r28	; 61
     898:	de bf       	out	0x3e, r29	; 62
	const uint8_t seq[8] = {
     89a:	28 e0       	ldi	r18, 0x08	; 8
     89c:	e4 e8       	ldi	r30, 0x84	; 132
     89e:	f1 e2       	ldi	r31, 0x21	; 33
     8a0:	de 01       	movw	r26, r28
     8a2:	11 96       	adiw	r26, 0x01	; 1
     8a4:	01 90       	ld	r0, Z+
     8a6:	0d 92       	st	X+, r0
     8a8:	2a 95       	dec	r18
     8aa:	e1 f7       	brne	.-8      	; 0x8a4 <startupSequence+0x30>
		LED5_PIN,
		LED6_PIN,
		LED7_PIN,
		LED8_PIN
	};
	volatile bool user_active = false;
     8ac:	19 86       	std	Y+9, r1	; 0x09

	switch (sequence) {
     8ae:	83 30       	cpi	r24, 0x03	; 3
     8b0:	91 05       	cpc	r25, r1
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <startupSequence+0x42>
     8b4:	09 c1       	rjmp	.+530    	; 0xac8 <startupSequence+0x254>
     8b6:	44 f4       	brge	.+16     	; 0x8c8 <startupSequence+0x54>
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	91 05       	cpc	r25, r1
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <startupSequence+0x4c>
     8be:	4b c0       	rjmp	.+150    	; 0x956 <startupSequence+0xe2>
     8c0:	02 97       	sbiw	r24, 0x02	; 2
     8c2:	09 f4       	brne	.+2      	; 0x8c6 <startupSequence+0x52>
     8c4:	aa c0       	rjmp	.+340    	; 0xa1a <startupSequence+0x1a6>
     8c6:	ef c1       	rjmp	.+990    	; 0xca6 <startupSequence+0x432>
     8c8:	84 30       	cpi	r24, 0x04	; 4
     8ca:	91 05       	cpc	r25, r1
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <startupSequence+0x5c>
     8ce:	54 c1       	rjmp	.+680    	; 0xb78 <startupSequence+0x304>
     8d0:	05 97       	sbiw	r24, 0x05	; 5
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <startupSequence+0x62>
     8d4:	a5 c1       	rjmp	.+842    	; 0xc20 <startupSequence+0x3ac>
     8d6:	e7 c1       	rjmp	.+974    	; 0xca6 <startupSequence+0x432>
		case 1:
			/* ---------------- sequential ----------------- */
			while (!user_active) {
				for (int i = 0; i < 8 && !user_active; i++) {
					led_on(seq[i]);
     8d8:	f8 01       	movw	r30, r16
     8da:	f1 90       	ld	r15, Z+
     8dc:	8f 01       	movw	r16, r30
     8de:	8f 2d       	mov	r24, r15
     8e0:	ba df       	rcall	.-140    	; 0x856 <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8e2:	ff e0       	ldi	r31, 0x0F	; 15
     8e4:	28 e9       	ldi	r18, 0x98	; 152
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	f1 50       	subi	r31, 0x01	; 1
     8ea:	20 40       	sbci	r18, 0x00	; 0
     8ec:	80 40       	sbci	r24, 0x00	; 0
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <startupSequence+0x74>
     8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <startupSequence+0x7e>
     8f2:	00 00       	nop
					_delay_ms(850);
					led_off(seq[i]);
     8f4:	8f 2d       	mov	r24, r15

					keypad_poll();
     8f6:	b2 df       	rcall	.-156    	; 0x85c <led_off>
     8f8:	9a de       	rcall	.-716    	; 0x62e <keypad_poll>
					if (keypad_getState() == KEYPAD_PRESSED)
     8fa:	f6 de       	rcall	.-532    	; 0x6e8 <keypad_getState>
     8fc:	81 30       	cpi	r24, 0x01	; 1
     8fe:	09 f4       	brne	.+2      	; 0x902 <startupSequence+0x8e>
						user_active = true;
     900:	e9 86       	std	Y+9, r14	; 0x09
					if (jstk_readMask() != 0)
     902:	f3 dd       	rcall	.-1050   	; 0x4ea <jstk_readMask>
     904:	81 11       	cpse	r24, r1
     906:	e9 86       	std	Y+9, r14	; 0x09
						user_active = true;
     908:	a0 16       	cp	r10, r16

	switch (sequence) {
		case 1:
			/* ---------------- sequential ----------------- */
			while (!user_active) {
				for (int i = 0; i < 8 && !user_active; i++) {
     90a:	b1 06       	cpc	r11, r17
     90c:	09 f4       	brne	.+2      	; 0x910 <startupSequence+0x9c>
     90e:	9d c1       	rjmp	.+826    	; 0xc4a <startupSequence+0x3d6>
     910:	89 85       	ldd	r24, Y+9	; 0x09
     912:	88 23       	and	r24, r24
     914:	09 f3       	breq	.-62     	; 0x8d8 <startupSequence+0x64>
     916:	99 c1       	rjmp	.+818    	; 0xc4a <startupSequence+0x3d6>
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 7; i >= 0 && !user_active; i--) {
					led_on(seq[i]);
     918:	f8 01       	movw	r30, r16
     91a:	f2 90       	ld	r15, -Z
     91c:	8f 01       	movw	r16, r30
     91e:	8f 2d       	mov	r24, r15
     920:	9a df       	rcall	.-204    	; 0x856 <led_on>
     922:	ff e0       	ldi	r31, 0x0F	; 15
     924:	28 e9       	ldi	r18, 0x98	; 152
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	f1 50       	subi	r31, 0x01	; 1
     92a:	20 40       	sbci	r18, 0x00	; 0
     92c:	80 40       	sbci	r24, 0x00	; 0
     92e:	e1 f7       	brne	.-8      	; 0x928 <startupSequence+0xb4>
					_delay_ms(850);
					led_off(seq[i]);
     930:	00 c0       	rjmp	.+0      	; 0x932 <startupSequence+0xbe>
     932:	00 00       	nop

					keypad_poll();
     934:	8f 2d       	mov	r24, r15
     936:	92 df       	rcall	.-220    	; 0x85c <led_off>
					if (keypad_getState() == KEYPAD_PRESSED)
     938:	7a de       	rcall	.-780    	; 0x62e <keypad_poll>
     93a:	d6 de       	rcall	.-596    	; 0x6e8 <keypad_getState>
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	09 f4       	brne	.+2      	; 0x942 <startupSequence+0xce>
						user_active = true;
     940:	e9 86       	std	Y+9, r14	; 0x09
					if (jstk_readMask() != 0)
     942:	d3 dd       	rcall	.-1114   	; 0x4ea <jstk_readMask>
     944:	81 11       	cpse	r24, r1
     946:	e9 86       	std	Y+9, r14	; 0x09
						user_active = true;
     948:	0c 15       	cp	r16, r12
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 7; i >= 0 && !user_active; i--) {
     94a:	1d 05       	cpc	r17, r13
     94c:	69 f0       	breq	.+26     	; 0x968 <startupSequence+0xf4>
     94e:	89 85       	ldd	r24, Y+9	; 0x09
     950:	88 23       	and	r24, r24
     952:	11 f3       	breq	.-60     	; 0x918 <startupSequence+0xa4>
     954:	09 c0       	rjmp	.+18     	; 0x968 <startupSequence+0xf4>
     956:	5e 01       	movw	r10, r28
     958:	99 e0       	ldi	r25, 0x09	; 9
     95a:	a9 0e       	add	r10, r25
     95c:	b1 1c       	adc	r11, r1
     95e:	ee 24       	eor	r14, r14

					keypad_poll();
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
     960:	e3 94       	inc	r14
     962:	fe 01       	movw	r30, r28
     964:	31 96       	adiw	r30, 0x01	; 1
     966:	6f 01       	movw	r12, r30
     968:	89 85       	ldd	r24, Y+9	; 0x09
	volatile bool user_active = false;

	switch (sequence) {
		case 1:
			/* ---------------- sequential ----------------- */
			while (!user_active) {
     96a:	81 11       	cpse	r24, r1
     96c:	07 c0       	rjmp	.+14     	; 0x97c <startupSequence+0x108>
				for (int i = 0; i < 8 && !user_active; i++) {
     96e:	89 85       	ldd	r24, Y+9	; 0x09
     970:	81 11       	cpse	r24, r1
     972:	6b c1       	rjmp	.+726    	; 0xc4a <startupSequence+0x3d6>
     974:	8e 01       	movw	r16, r28
     976:	0f 5f       	subi	r16, 0xFF	; 255
     978:	1f 4f       	sbci	r17, 0xFF	; 255
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
			}
			led_allOff();
     97a:	ae cf       	rjmp	.-164    	; 0x8d8 <startupSequence+0x64>
			break;
     97c:	68 df       	rcall	.-304    	; 0x84e <led_allOff>
			/* ---------------- out-n-back ----------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
					int left = 3 - i;
					int right = 4 + i;
					led_on(seq[left]);
     97e:	93 c1       	rjmp	.+806    	; 0xca6 <startupSequence+0x432>
     980:	f8 01       	movw	r30, r16
     982:	72 90       	ld	r7, -Z
     984:	8f 01       	movw	r16, r30
     986:	87 2d       	mov	r24, r7
     988:	66 df       	rcall	.-308    	; 0x856 <led_on>
					led_on(seq[right]);
     98a:	f6 01       	movw	r30, r12
     98c:	f1 90       	ld	r15, Z+
     98e:	6f 01       	movw	r12, r30
     990:	8f 2d       	mov	r24, r15
     992:	61 df       	rcall	.-318    	; 0x856 <led_on>
     994:	ff e1       	ldi	r31, 0x1F	; 31
     996:	2f eb       	ldi	r18, 0xBF	; 191
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	f1 50       	subi	r31, 0x01	; 1
     99c:	20 40       	sbci	r18, 0x00	; 0
     99e:	80 40       	sbci	r24, 0x00	; 0
					_delay_ms(900);
					led_off(seq[left]);
     9a0:	e1 f7       	brne	.-8      	; 0x99a <startupSequence+0x126>
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <startupSequence+0x130>
     9a4:	00 00       	nop
					led_off(seq[right]);
     9a6:	87 2d       	mov	r24, r7
     9a8:	59 df       	rcall	.-334    	; 0x85c <led_off>
     9aa:	8f 2d       	mov	r24, r15

					keypad_poll();
     9ac:	57 df       	rcall	.-338    	; 0x85c <led_off>
     9ae:	3f de       	rcall	.-898    	; 0x62e <keypad_poll>
					if (keypad_getState() == KEYPAD_PRESSED)
     9b0:	9b de       	rcall	.-714    	; 0x6e8 <keypad_getState>
     9b2:	81 30       	cpi	r24, 0x01	; 1
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <startupSequence+0x144>
						user_active = true;
     9b6:	e9 86       	std	Y+9, r14	; 0x09
					if (jstk_readMask() != 0)
     9b8:	98 dd       	rcall	.-1232   	; 0x4ea <jstk_readMask>
     9ba:	81 11       	cpse	r24, r1
     9bc:	e9 86       	std	Y+9, r14	; 0x09
			led_allOff();
			break;
		case 2:
			/* ---------------- out-n-back ----------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
     9be:	80 16       	cp	r8, r16
     9c0:	91 06       	cpc	r9, r17
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <startupSequence+0x152>
     9c4:	49 c1       	rjmp	.+658    	; 0xc58 <startupSequence+0x3e4>
     9c6:	89 85       	ldd	r24, Y+9	; 0x09
     9c8:	88 23       	and	r24, r24
     9ca:	d1 f2       	breq	.-76     	; 0x980 <startupSequence+0x10c>
     9cc:	45 c1       	rjmp	.+650    	; 0xc58 <startupSequence+0x3e4>
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
					int left = 3 - i;
					int right = 4 + i;
					led_on(seq[left]);
     9ce:	f3 01       	movw	r30, r6
     9d0:	d1 90       	ld	r13, Z+
     9d2:	3f 01       	movw	r6, r30
     9d4:	8d 2d       	mov	r24, r13
					led_on(seq[right]);
     9d6:	3f df       	rcall	.-386    	; 0x856 <led_on>
     9d8:	f8 01       	movw	r30, r16
     9da:	f2 90       	ld	r15, -Z
     9dc:	8f 01       	movw	r16, r30
     9de:	8f 2d       	mov	r24, r15
     9e0:	3a df       	rcall	.-396    	; 0x856 <led_on>
     9e2:	ff e1       	ldi	r31, 0x1F	; 31
     9e4:	2f eb       	ldi	r18, 0xBF	; 191
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	f1 50       	subi	r31, 0x01	; 1
     9ea:	20 40       	sbci	r18, 0x00	; 0
     9ec:	80 40       	sbci	r24, 0x00	; 0
     9ee:	e1 f7       	brne	.-8      	; 0x9e8 <startupSequence+0x174>
					_delay_ms(900);
					led_off(seq[left]);
     9f0:	00 c0       	rjmp	.+0      	; 0x9f2 <startupSequence+0x17e>
     9f2:	00 00       	nop
     9f4:	8d 2d       	mov	r24, r13
					led_off(seq[right]);
     9f6:	32 df       	rcall	.-412    	; 0x85c <led_off>
     9f8:	8f 2d       	mov	r24, r15
     9fa:	30 df       	rcall	.-416    	; 0x85c <led_off>

					keypad_poll();
     9fc:	18 de       	rcall	.-976    	; 0x62e <keypad_poll>
     9fe:	74 de       	rcall	.-792    	; 0x6e8 <keypad_getState>
					if (keypad_getState() == KEYPAD_PRESSED)
     a00:	81 30       	cpi	r24, 0x01	; 1
     a02:	09 f4       	brne	.+2      	; 0xa06 <startupSequence+0x192>
     a04:	e9 86       	std	Y+9, r14	; 0x09
     a06:	71 dd       	rcall	.-1310   	; 0x4ea <jstk_readMask>
						user_active = true;
     a08:	81 11       	cpse	r24, r1
					if (jstk_readMask() != 0)
     a0a:	e9 86       	std	Y+9, r14	; 0x09
     a0c:	0a 15       	cp	r16, r10
     a0e:	1b 05       	cpc	r17, r11
						user_active = true;
     a10:	69 f0       	breq	.+26     	; 0xa2c <startupSequence+0x1b8>
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     a12:	89 85       	ldd	r24, Y+9	; 0x09
     a14:	88 23       	and	r24, r24
     a16:	d9 f2       	breq	.-74     	; 0x9ce <startupSequence+0x15a>
     a18:	09 c0       	rjmp	.+18     	; 0xa2c <startupSequence+0x1b8>
     a1a:	fe 01       	movw	r30, r28
     a1c:	31 96       	adiw	r30, 0x01	; 1
     a1e:	4f 01       	movw	r8, r30
     a20:	ee 24       	eor	r14, r14

					keypad_poll();
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
     a22:	e3 94       	inc	r14
     a24:	5e 01       	movw	r10, r28
     a26:	f5 e0       	ldi	r31, 0x05	; 5
     a28:	af 0e       	add	r10, r31
     a2a:	b1 1c       	adc	r11, r1
			}
			led_allOff();
			break;
		case 2:
			/* ---------------- out-n-back ----------------- */
			while (!user_active) {
     a2c:	89 85       	ldd	r24, Y+9	; 0x09
     a2e:	81 11       	cpse	r24, r1
     a30:	08 c0       	rjmp	.+16     	; 0xa42 <startupSequence+0x1ce>
				for (int i = 0; i < 4 && !user_active; i++) {
     a32:	89 85       	ldd	r24, Y+9	; 0x09
     a34:	81 11       	cpse	r24, r1
     a36:	10 c1       	rjmp	.+544    	; 0xc58 <startupSequence+0x3e4>
     a38:	8e 01       	movw	r16, r28
     a3a:	0b 5f       	subi	r16, 0xFB	; 251
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
			}
			led_allOff();
     a3c:	1f 4f       	sbci	r17, 0xFF	; 255
     a3e:	68 01       	movw	r12, r16
			break;
     a40:	9f cf       	rjmp	.-194    	; 0x980 <startupSequence+0x10c>
			/* --------------- grow-n-shrink ---------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
					int left = 3 - i;
					int right = 4 + i;
					led_on(seq[left]);
     a42:	05 df       	rcall	.-502    	; 0x84e <led_allOff>
     a44:	30 c1       	rjmp	.+608    	; 0xca6 <startupSequence+0x432>
     a46:	f8 01       	movw	r30, r16
     a48:	82 91       	ld	r24, -Z
     a4a:	8f 01       	movw	r16, r30
					led_on(seq[right]);
     a4c:	04 df       	rcall	.-504    	; 0x856 <led_on>
     a4e:	f7 01       	movw	r30, r14
     a50:	81 91       	ld	r24, Z+
     a52:	7f 01       	movw	r14, r30
     a54:	00 df       	rcall	.-512    	; 0x856 <led_on>
     a56:	ff e2       	ldi	r31, 0x2F	; 47
     a58:	27 e5       	ldi	r18, 0x57	; 87
     a5a:	85 e0       	ldi	r24, 0x05	; 5
     a5c:	f1 50       	subi	r31, 0x01	; 1
     a5e:	20 40       	sbci	r18, 0x00	; 0
     a60:	80 40       	sbci	r24, 0x00	; 0
     a62:	e1 f7       	brne	.-8      	; 0xa5c <startupSequence+0x1e8>
					_delay_ms(1750);

					keypad_poll();
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <startupSequence+0x1f2>
     a66:	00 00       	nop
					if (keypad_getState() == KEYPAD_PRESSED)
     a68:	e2 dd       	rcall	.-1084   	; 0x62e <keypad_poll>
     a6a:	3e de       	rcall	.-900    	; 0x6e8 <keypad_getState>
     a6c:	81 30       	cpi	r24, 0x01	; 1
						user_active = true;
					if (jstk_readMask() != 0)
     a6e:	09 f4       	brne	.+2      	; 0xa72 <startupSequence+0x1fe>
     a70:	99 86       	std	Y+9, r9	; 0x09
     a72:	3b dd       	rcall	.-1418   	; 0x4ea <jstk_readMask>
			led_allOff();
			break;
		case 3:
			/* --------------- grow-n-shrink ---------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
     a74:	81 11       	cpse	r24, r1
     a76:	99 86       	std	Y+9, r9	; 0x09
     a78:	a0 16       	cp	r10, r16
     a7a:	b1 06       	cpc	r11, r17
     a7c:	09 f4       	brne	.+2      	; 0xa80 <startupSequence+0x20c>
     a7e:	f6 c0       	rjmp	.+492    	; 0xc6c <startupSequence+0x3f8>
     a80:	89 85       	ldd	r24, Y+9	; 0x09
     a82:	88 23       	and	r24, r24
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
					int left = 3 - i;
					int right = 4 + i;
					led_off(seq[left]);
     a84:	01 f3       	breq	.-64     	; 0xa46 <startupSequence+0x1d2>
     a86:	f2 c0       	rjmp	.+484    	; 0xc6c <startupSequence+0x3f8>
     a88:	f7 01       	movw	r30, r14
     a8a:	81 91       	ld	r24, Z+
     a8c:	7f 01       	movw	r14, r30
					led_off(seq[right]);
     a8e:	e6 de       	rcall	.-564    	; 0x85c <led_off>
     a90:	f8 01       	movw	r30, r16
     a92:	82 91       	ld	r24, -Z
     a94:	8f 01       	movw	r16, r30
     a96:	e2 de       	rcall	.-572    	; 0x85c <led_off>
     a98:	ff e2       	ldi	r31, 0x2F	; 47
     a9a:	27 e5       	ldi	r18, 0x57	; 87
     a9c:	85 e0       	ldi	r24, 0x05	; 5
     a9e:	f1 50       	subi	r31, 0x01	; 1
     aa0:	20 40       	sbci	r18, 0x00	; 0
     aa2:	80 40       	sbci	r24, 0x00	; 0
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <startupSequence+0x22a>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <startupSequence+0x234>
     aa8:	00 00       	nop
					_delay_ms(1750);

					keypad_poll();
     aaa:	c1 dd       	rcall	.-1150   	; 0x62e <keypad_poll>
     aac:	1d de       	rcall	.-966    	; 0x6e8 <keypad_getState>
					if (keypad_getState() == KEYPAD_PRESSED)
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	09 f4       	brne	.+2      	; 0xab4 <startupSequence+0x240>
     ab2:	99 86       	std	Y+9, r9	; 0x09
						user_active = true;
     ab4:	1a dd       	rcall	.-1484   	; 0x4ea <jstk_readMask>
					if (jstk_readMask() != 0)
     ab6:	81 11       	cpse	r24, r1
     ab8:	99 86       	std	Y+9, r9	; 0x09
						user_active = true;
     aba:	0c 15       	cp	r16, r12
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     abc:	1d 05       	cpc	r17, r13
     abe:	69 f0       	breq	.+26     	; 0xada <startupSequence+0x266>
     ac0:	89 85       	ldd	r24, Y+9	; 0x09
     ac2:	88 23       	and	r24, r24
     ac4:	09 f3       	breq	.-62     	; 0xa88 <startupSequence+0x214>
     ac6:	09 c0       	rjmp	.+18     	; 0xada <startupSequence+0x266>
     ac8:	fe 01       	movw	r30, r28
     aca:	31 96       	adiw	r30, 0x01	; 1
     acc:	5f 01       	movw	r10, r30

					keypad_poll();
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
     ace:	99 24       	eor	r9, r9
     ad0:	93 94       	inc	r9
     ad2:	6e 01       	movw	r12, r28
     ad4:	f5 e0       	ldi	r31, 0x05	; 5
			}
			led_allOff();
			break;
		case 3:
			/* --------------- grow-n-shrink ---------------- */
			while (!user_active) {
     ad6:	cf 0e       	add	r12, r31
     ad8:	d1 1c       	adc	r13, r1
				for (int i = 0; i < 4 && !user_active; i++) {
     ada:	89 85       	ldd	r24, Y+9	; 0x09
     adc:	81 11       	cpse	r24, r1
     ade:	09 c0       	rjmp	.+18     	; 0xaf2 <startupSequence+0x27e>
     ae0:	89 85       	ldd	r24, Y+9	; 0x09
     ae2:	81 11       	cpse	r24, r1
     ae4:	c3 c0       	rjmp	.+390    	; 0xc6c <startupSequence+0x3f8>
     ae6:	7e 01       	movw	r14, r28
     ae8:	25 e0       	ldi	r18, 0x05	; 5
     aea:	e2 0e       	add	r14, r18
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
			}
			led_allOff();
     aec:	f1 1c       	adc	r15, r1
     aee:	87 01       	movw	r16, r14
			/* --------------- outward waves --------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
					int left = 3 - i;
					int right = 4 + i;
					led_on(seq[left]);
     af0:	aa cf       	rjmp	.-172    	; 0xa46 <startupSequence+0x1d2>
     af2:	ad de       	rcall	.-678    	; 0x84e <led_allOff>
     af4:	d8 c0       	rjmp	.+432    	; 0xca6 <startupSequence+0x432>
     af6:	f8 01       	movw	r30, r16
					led_on(seq[right]);
     af8:	82 91       	ld	r24, -Z
     afa:	8f 01       	movw	r16, r30
     afc:	ac de       	rcall	.-680    	; 0x856 <led_on>
     afe:	f7 01       	movw	r30, r14
     b00:	81 91       	ld	r24, Z+
     b02:	7f 01       	movw	r14, r30
     b04:	a8 de       	rcall	.-688    	; 0x856 <led_on>
     b06:	ff e2       	ldi	r31, 0x2F	; 47
     b08:	27 e5       	ldi	r18, 0x57	; 87
     b0a:	85 e0       	ldi	r24, 0x05	; 5
     b0c:	f1 50       	subi	r31, 0x01	; 1
     b0e:	20 40       	sbci	r18, 0x00	; 0
					_delay_ms(1750);

					keypad_poll();
     b10:	80 40       	sbci	r24, 0x00	; 0
     b12:	e1 f7       	brne	.-8      	; 0xb0c <startupSequence+0x298>
					if (keypad_getState() == KEYPAD_PRESSED)
     b14:	00 c0       	rjmp	.+0      	; 0xb16 <startupSequence+0x2a2>
     b16:	00 00       	nop
     b18:	8a dd       	rcall	.-1260   	; 0x62e <keypad_poll>
     b1a:	e6 dd       	rcall	.-1076   	; 0x6e8 <keypad_getState>
						user_active = true;
     b1c:	81 30       	cpi	r24, 0x01	; 1
					if (jstk_readMask() != 0)
     b1e:	09 f4       	brne	.+2      	; 0xb22 <startupSequence+0x2ae>
     b20:	b9 86       	std	Y+9, r11	; 0x09
     b22:	e3 dc       	rcall	.-1594   	; 0x4ea <jstk_readMask>
						user_active = true;
     b24:	81 11       	cpse	r24, r1
			led_allOff();
			break;
		case 4:
			/* --------------- outward waves --------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
     b26:	b9 86       	std	Y+9, r11	; 0x09
     b28:	c0 16       	cp	r12, r16
     b2a:	d1 06       	cpc	r13, r17
     b2c:	09 f4       	brne	.+2      	; 0xb30 <startupSequence+0x2bc>
     b2e:	a8 c0       	rjmp	.+336    	; 0xc80 <startupSequence+0x40c>
     b30:	89 85       	ldd	r24, Y+9	; 0x09
     b32:	88 23       	and	r24, r24
     b34:	01 f3       	breq	.-64     	; 0xaf6 <startupSequence+0x282>
						user_active = true;
				}
				for (int i = 0; i < 4 && !user_active; i++) {
					int left = 3 - i;
					int right = 4 + i;
					led_off(seq[left]);
     b36:	a4 c0       	rjmp	.+328    	; 0xc80 <startupSequence+0x40c>
     b38:	f8 01       	movw	r30, r16
     b3a:	82 91       	ld	r24, -Z
     b3c:	8f 01       	movw	r16, r30
     b3e:	8e de       	rcall	.-740    	; 0x85c <led_off>
					led_off(seq[right]);
     b40:	f7 01       	movw	r30, r14
     b42:	81 91       	ld	r24, Z+
     b44:	7f 01       	movw	r14, r30
     b46:	8a de       	rcall	.-748    	; 0x85c <led_off>
     b48:	ff e2       	ldi	r31, 0x2F	; 47
     b4a:	27 e5       	ldi	r18, 0x57	; 87
     b4c:	85 e0       	ldi	r24, 0x05	; 5
     b4e:	f1 50       	subi	r31, 0x01	; 1
     b50:	20 40       	sbci	r18, 0x00	; 0
     b52:	80 40       	sbci	r24, 0x00	; 0
     b54:	e1 f7       	brne	.-8      	; 0xb4e <startupSequence+0x2da>
					_delay_ms(1750);

					keypad_poll();
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <startupSequence+0x2e4>
     b58:	00 00       	nop
					if (keypad_getState() == KEYPAD_PRESSED)
     b5a:	69 dd       	rcall	.-1326   	; 0x62e <keypad_poll>
     b5c:	c5 dd       	rcall	.-1142   	; 0x6e8 <keypad_getState>
     b5e:	81 30       	cpi	r24, 0x01	; 1
     b60:	09 f4       	brne	.+2      	; 0xb64 <startupSequence+0x2f0>
						user_active = true;
     b62:	b9 86       	std	Y+9, r11	; 0x09
					if (jstk_readMask() != 0)
     b64:	c2 dc       	rcall	.-1660   	; 0x4ea <jstk_readMask>
						user_active = true;
     b66:	81 11       	cpse	r24, r1
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 0; i < 4 && !user_active; i++) {
     b68:	b9 86       	std	Y+9, r11	; 0x09
     b6a:	c0 16       	cp	r12, r16
     b6c:	d1 06       	cpc	r13, r17
     b6e:	49 f0       	breq	.+18     	; 0xb82 <startupSequence+0x30e>
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	88 23       	and	r24, r24
     b74:	09 f3       	breq	.-62     	; 0xb38 <startupSequence+0x2c4>
     b76:	05 c0       	rjmp	.+10     	; 0xb82 <startupSequence+0x30e>
     b78:	fe 01       	movw	r30, r28

					keypad_poll();
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
     b7a:	31 96       	adiw	r30, 0x01	; 1
     b7c:	6f 01       	movw	r12, r30
			}
			led_allOff();
			break;
		case 4:
			/* --------------- outward waves --------------- */
			while (!user_active) {
     b7e:	bb 24       	eor	r11, r11
     b80:	b3 94       	inc	r11
     b82:	89 85       	ldd	r24, Y+9	; 0x09
				for (int i = 0; i < 4 && !user_active; i++) {
     b84:	81 11       	cpse	r24, r1
     b86:	09 c0       	rjmp	.+18     	; 0xb9a <startupSequence+0x326>
     b88:	89 85       	ldd	r24, Y+9	; 0x09
     b8a:	81 11       	cpse	r24, r1
     b8c:	79 c0       	rjmp	.+242    	; 0xc80 <startupSequence+0x40c>
     b8e:	7e 01       	movw	r14, r28
     b90:	f5 e0       	ldi	r31, 0x05	; 5
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
			}
			led_allOff();
     b92:	ef 0e       	add	r14, r31
     b94:	f1 1c       	adc	r15, r1
			break;
     b96:	87 01       	movw	r16, r14
			/* ---------------- inward waves --------------- */
			while (!user_active) {
				for (int i = 3; i >= 0 && !user_active; i--) {
					int left = 3 - i;
					int right = 4 + i;
					led_on(seq[left]);
     b98:	ae cf       	rjmp	.-164    	; 0xaf6 <startupSequence+0x282>
     b9a:	59 de       	rcall	.-846    	; 0x84e <led_allOff>
     b9c:	84 c0       	rjmp	.+264    	; 0xca6 <startupSequence+0x432>
					led_on(seq[right]);
     b9e:	f7 01       	movw	r30, r14
     ba0:	81 91       	ld	r24, Z+
     ba2:	7f 01       	movw	r14, r30
     ba4:	58 de       	rcall	.-848    	; 0x856 <led_on>
     ba6:	f8 01       	movw	r30, r16
     ba8:	82 91       	ld	r24, -Z
     baa:	8f 01       	movw	r16, r30
     bac:	54 de       	rcall	.-856    	; 0x856 <led_on>
     bae:	ff e2       	ldi	r31, 0x2F	; 47
     bb0:	27 e5       	ldi	r18, 0x57	; 87
     bb2:	85 e0       	ldi	r24, 0x05	; 5
     bb4:	f1 50       	subi	r31, 0x01	; 1
     bb6:	20 40       	sbci	r18, 0x00	; 0
					_delay_ms(1750);

					keypad_poll();
     bb8:	80 40       	sbci	r24, 0x00	; 0
     bba:	e1 f7       	brne	.-8      	; 0xbb4 <startupSequence+0x340>
					if (keypad_getState() == KEYPAD_PRESSED)
     bbc:	00 c0       	rjmp	.+0      	; 0xbbe <startupSequence+0x34a>
     bbe:	00 00       	nop
     bc0:	36 dd       	rcall	.-1428   	; 0x62e <keypad_poll>
     bc2:	92 dd       	rcall	.-1244   	; 0x6e8 <keypad_getState>
						user_active = true;
     bc4:	81 30       	cpi	r24, 0x01	; 1
					if (jstk_readMask() != 0)
     bc6:	09 f4       	brne	.+2      	; 0xbca <startupSequence+0x356>
     bc8:	b9 86       	std	Y+9, r11	; 0x09
     bca:	8f dc       	rcall	.-1762   	; 0x4ea <jstk_readMask>
						user_active = true;
     bcc:	81 11       	cpse	r24, r1
			led_allOff();
			break;
		case 5:
			/* ---------------- inward waves --------------- */
			while (!user_active) {
				for (int i = 3; i >= 0 && !user_active; i--) {
     bce:	b9 86       	std	Y+9, r11	; 0x09
     bd0:	0c 15       	cp	r16, r12
     bd2:	1d 05       	cpc	r17, r13
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <startupSequence+0x364>
     bd6:	5d c0       	rjmp	.+186    	; 0xc92 <startupSequence+0x41e>
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	88 23       	and	r24, r24
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
					int left = 3 - i;
					int right = 4 + i;
					led_off(seq[left]);
     bdc:	01 f3       	breq	.-64     	; 0xb9e <startupSequence+0x32a>
     bde:	59 c0       	rjmp	.+178    	; 0xc92 <startupSequence+0x41e>
     be0:	f7 01       	movw	r30, r14
     be2:	81 91       	ld	r24, Z+
     be4:	7f 01       	movw	r14, r30
					led_off(seq[right]);
     be6:	3a de       	rcall	.-908    	; 0x85c <led_off>
     be8:	f8 01       	movw	r30, r16
     bea:	82 91       	ld	r24, -Z
     bec:	8f 01       	movw	r16, r30
     bee:	36 de       	rcall	.-916    	; 0x85c <led_off>
     bf0:	ff e2       	ldi	r31, 0x2F	; 47
     bf2:	27 e5       	ldi	r18, 0x57	; 87
     bf4:	85 e0       	ldi	r24, 0x05	; 5
     bf6:	f1 50       	subi	r31, 0x01	; 1
     bf8:	20 40       	sbci	r18, 0x00	; 0
     bfa:	80 40       	sbci	r24, 0x00	; 0
     bfc:	e1 f7       	brne	.-8      	; 0xbf6 <startupSequence+0x382>
     bfe:	00 c0       	rjmp	.+0      	; 0xc00 <startupSequence+0x38c>
     c00:	00 00       	nop
					_delay_ms(1750);

					keypad_poll();
     c02:	15 dd       	rcall	.-1494   	; 0x62e <keypad_poll>
     c04:	71 dd       	rcall	.-1310   	; 0x6e8 <keypad_getState>
					if (keypad_getState() == KEYPAD_PRESSED)
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	09 f4       	brne	.+2      	; 0xc0c <startupSequence+0x398>
     c0a:	b9 86       	std	Y+9, r11	; 0x09
     c0c:	6e dc       	rcall	.-1828   	; 0x4ea <jstk_readMask>
						user_active = true;
     c0e:	81 11       	cpse	r24, r1
					if (jstk_readMask() != 0)
     c10:	b9 86       	std	Y+9, r11	; 0x09
     c12:	0c 15       	cp	r16, r12
     c14:	1d 05       	cpc	r17, r13
						user_active = true;
     c16:	51 f0       	breq	.+20     	; 0xc2c <startupSequence+0x3b8>
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     c18:	89 85       	ldd	r24, Y+9	; 0x09
     c1a:	88 23       	and	r24, r24
     c1c:	09 f3       	breq	.-62     	; 0xbe0 <startupSequence+0x36c>
     c1e:	06 c0       	rjmp	.+12     	; 0xc2c <startupSequence+0x3b8>
     c20:	6e 01       	movw	r12, r28
     c22:	95 e0       	ldi	r25, 0x05	; 5
     c24:	c9 0e       	add	r12, r25
     c26:	d1 1c       	adc	r13, r1
     c28:	bb 24       	eor	r11, r11
     c2a:	b3 94       	inc	r11
     c2c:	89 85       	ldd	r24, Y+9	; 0x09

					keypad_poll();
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
     c2e:	81 11       	cpse	r24, r1
     c30:	0a c0       	rjmp	.+20     	; 0xc46 <startupSequence+0x3d2>
			}
			led_allOff();
			break;
		case 5:
			/* ---------------- inward waves --------------- */
			while (!user_active) {
     c32:	89 85       	ldd	r24, Y+9	; 0x09
     c34:	81 11       	cpse	r24, r1
     c36:	2d c0       	rjmp	.+90     	; 0xc92 <startupSequence+0x41e>
				for (int i = 3; i >= 0 && !user_active; i--) {
     c38:	fe 01       	movw	r30, r28
     c3a:	31 96       	adiw	r30, 0x01	; 1
     c3c:	7f 01       	movw	r14, r30
     c3e:	8e 01       	movw	r16, r28
     c40:	07 5f       	subi	r16, 0xF7	; 247
     c42:	1f 4f       	sbci	r17, 0xFF	; 255
     c44:	ac cf       	rjmp	.-168    	; 0xb9e <startupSequence+0x32a>
     c46:	03 de       	rcall	.-1018   	; 0x84e <led_allOff>
     c48:	2e c0       	rjmp	.+92     	; 0xca6 <startupSequence+0x432>
     c4a:	89 85       	ldd	r24, Y+9	; 0x09
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
			}
			led_allOff();
     c4c:	81 11       	cpse	r24, r1
     c4e:	8c ce       	rjmp	.-744    	; 0x968 <startupSequence+0xf4>
			break;
		default:
			break;
	}
     c50:	8e 01       	movw	r16, r28
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 7; i >= 0 && !user_active; i--) {
     c52:	07 5f       	subi	r16, 0xF7	; 247
     c54:	1f 4f       	sbci	r17, 0xFF	; 255
     c56:	60 ce       	rjmp	.-832    	; 0x918 <startupSequence+0xa4>
     c58:	89 85       	ldd	r24, Y+9	; 0x09
     c5a:	81 11       	cpse	r24, r1
     c5c:	e7 ce       	rjmp	.-562    	; 0xa2c <startupSequence+0x1b8>
     c5e:	ce 01       	movw	r24, r28
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	3c 01       	movw	r6, r24
     c64:	8e 01       	movw	r16, r28
     c66:	07 5f       	subi	r16, 0xF7	; 247
     c68:	1f 4f       	sbci	r17, 0xFF	; 255
     c6a:	b1 ce       	rjmp	.-670    	; 0x9ce <startupSequence+0x15a>
     c6c:	89 85       	ldd	r24, Y+9	; 0x09
     c6e:	81 11       	cpse	r24, r1
     c70:	34 cf       	rjmp	.-408    	; 0xada <startupSequence+0x266>
     c72:	fe 01       	movw	r30, r28
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     c74:	31 96       	adiw	r30, 0x01	; 1
     c76:	7f 01       	movw	r14, r30
     c78:	8e 01       	movw	r16, r28
     c7a:	07 5f       	subi	r16, 0xF7	; 247
     c7c:	1f 4f       	sbci	r17, 0xFF	; 255
     c7e:	04 cf       	rjmp	.-504    	; 0xa88 <startupSequence+0x214>
     c80:	89 85       	ldd	r24, Y+9	; 0x09
     c82:	81 11       	cpse	r24, r1
     c84:	7e cf       	rjmp	.-260    	; 0xb82 <startupSequence+0x30e>
     c86:	7e 01       	movw	r14, r28
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 0; i < 4 && !user_active; i++) {
     c88:	f5 e0       	ldi	r31, 0x05	; 5
     c8a:	ef 0e       	add	r14, r31
     c8c:	f1 1c       	adc	r15, r1
     c8e:	87 01       	movw	r16, r14
     c90:	53 cf       	rjmp	.-346    	; 0xb38 <startupSequence+0x2c4>
     c92:	89 85       	ldd	r24, Y+9	; 0x09
     c94:	81 11       	cpse	r24, r1
     c96:	ca cf       	rjmp	.-108    	; 0xc2c <startupSequence+0x3b8>
     c98:	ce 01       	movw	r24, r28
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	7c 01       	movw	r14, r24
     c9e:	8e 01       	movw	r16, r28
     ca0:	07 5f       	subi	r16, 0xF7	; 247
     ca2:	1f 4f       	sbci	r17, 0xFF	; 255
     ca4:	9d cf       	rjmp	.-198    	; 0xbe0 <startupSequence+0x36c>
     ca6:	29 96       	adiw	r28, 0x09	; 9
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	df 91       	pop	r29
			led_allOff();
			break;
		default:
			break;
	}
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	df 90       	pop	r13
     cba:	cf 90       	pop	r12
     cbc:	bf 90       	pop	r11
     cbe:	af 90       	pop	r10
     cc0:	9f 90       	pop	r9
     cc2:	8f 90       	pop	r8
     cc4:	7f 90       	pop	r7
     cc6:	6f 90       	pop	r6
     cc8:	08 95       	ret

00000cca <jstk_ui_process>:
#include "led.h"
#include "keypad.h"
#include "joystick.h"

void jstk_ui_process(void) {
	joystick();
     cca:	65 cc       	rjmp	.-1846   	; 0x596 <joystick>
     ccc:	08 95       	ret

00000cce <kbd_ui_process>:
}

void kbd_ui_process(void) {
	keypad();
     cce:	8c cd       	rjmp	.-1256   	; 0x7e8 <keypad>
     cd0:	08 95       	ret

00000cd2 <led_ui_process>:
}

void led_ui_process(uint8_t mask) {
	led_setStatus(mask);
     cd2:	ca cd       	rjmp	.-1132   	; 0x868 <led_setStatus>
     cd4:	08 95       	ret

00000cd6 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	27 97       	sbiw	r28, 0x07	; 7
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	8f ef       	ldi	r24, 0xFF	; 255
     cea:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     cee:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     cf2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     cf6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     cfa:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     cfe:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     d02:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     d06:	65 e0       	ldi	r22, 0x05	; 5
     d08:	81 e4       	ldi	r24, 0x41	; 65
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	7a d6       	rcall	.+3316   	; 0x1a02 <ccp_write_io>
     d0e:	6c e1       	ldi	r22, 0x1C	; 28
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	6c d6       	rcall	.+3288   	; 0x19ee <nvm_read_byte>
     d16:	8a 83       	std	Y+2, r24	; 0x02
     d18:	6d e1       	ldi	r22, 0x1D	; 29
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	67 d6       	rcall	.+3278   	; 0x19ee <nvm_read_byte>
     d20:	89 83       	std	Y+1, r24	; 0x01
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	9a 81       	ldd	r25, Y+2	; 0x02
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	21 f4       	brne	.+8      	; 0xd32 <sysclk_init+0x5c>
     d2a:	80 e4       	ldi	r24, 0x40	; 64
     d2c:	93 e2       	ldi	r25, 0x23	; 35
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	9a 83       	std	Y+2, r25	; 0x02
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	8b 83       	std	Y+3, r24	; 0x03
     d38:	9c 83       	std	Y+4, r25	; 0x04
     d3a:	e0 e6       	ldi	r30, 0x60	; 96
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	82 83       	std	Z+2, r24	; 0x02
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	83 83       	std	Z+3, r24	; 0x03
     d44:	8f b7       	in	r24, 0x3f	; 63
     d46:	8e 83       	std	Y+6, r24	; 0x06
     d48:	f8 94       	cli
     d4a:	9e 81       	ldd	r25, Y+6	; 0x06
     d4c:	e0 e5       	ldi	r30, 0x50	; 80
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	82 60       	ori	r24, 0x02	; 2
     d54:	80 83       	st	Z, r24
     d56:	9f bf       	out	0x3f, r25	; 63
     d58:	81 81       	ldd	r24, Z+1	; 0x01
     d5a:	81 ff       	sbrs	r24, 1
     d5c:	fd cf       	rjmp	.-6      	; 0xd58 <sysclk_init+0x82>
     d5e:	8f b7       	in	r24, 0x3f	; 63
     d60:	8f 83       	std	Y+7, r24	; 0x07
     d62:	f8 94       	cli
     d64:	9f 81       	ldd	r25, Y+7	; 0x07
     d66:	00 e5       	ldi	r16, 0x50	; 80
     d68:	10 e0       	ldi	r17, 0x00	; 0
     d6a:	d8 01       	movw	r26, r16
     d6c:	16 96       	adiw	r26, 0x06	; 6
     d6e:	8c 91       	ld	r24, X
     d70:	16 97       	sbiw	r26, 0x06	; 6
     d72:	89 7f       	andi	r24, 0xF9	; 249
     d74:	16 96       	adiw	r26, 0x06	; 6
     d76:	8c 93       	st	X, r24
     d78:	16 97       	sbiw	r26, 0x06	; 6
     d7a:	e0 e6       	ldi	r30, 0x60	; 96
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 e8       	ldi	r24, 0x80	; 128
     d80:	85 83       	std	Z+5, r24	; 0x05
     d82:	8b eb       	ldi	r24, 0xBB	; 187
     d84:	86 83       	std	Z+6, r24	; 0x06
     d86:	16 96       	adiw	r26, 0x06	; 6
     d88:	8c 91       	ld	r24, X
     d8a:	16 97       	sbiw	r26, 0x06	; 6
     d8c:	84 60       	ori	r24, 0x04	; 4
     d8e:	16 96       	adiw	r26, 0x06	; 6
     d90:	8c 93       	st	X, r24
     d92:	80 81       	ld	r24, Z
     d94:	81 60       	ori	r24, 0x01	; 1
     d96:	80 83       	st	Z, r24
     d98:	9f bf       	out	0x3f, r25	; 63
     d9a:	61 e0       	ldi	r22, 0x01	; 1
     d9c:	80 e4       	ldi	r24, 0x40	; 64
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	30 d6       	rcall	.+3168   	; 0x1a02 <ccp_write_io>
     da2:	8f b7       	in	r24, 0x3f	; 63
     da4:	8d 83       	std	Y+5, r24	; 0x05
     da6:	f8 94       	cli
     da8:	9d 81       	ldd	r25, Y+5	; 0x05
     daa:	f8 01       	movw	r30, r16
     dac:	80 81       	ld	r24, Z
     dae:	8e 7f       	andi	r24, 0xFE	; 254
     db0:	80 83       	st	Z, r24
     db2:	9f bf       	out	0x3f, r25	; 63
     db4:	27 96       	adiw	r28, 0x07	; 7
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	08 95       	ret

00000dc4 <sysclk_enable_module>:
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	1f 92       	push	r1
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	9f b7       	in	r25, 0x3f	; 63
     dd0:	99 83       	std	Y+1, r25	; 0x01
     dd2:	f8 94       	cli
     dd4:	99 81       	ldd	r25, Y+1	; 0x01
     dd6:	e8 2f       	mov	r30, r24
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	e0 59       	subi	r30, 0x90	; 144
     ddc:	ff 4f       	sbci	r31, 0xFF	; 255
     dde:	60 95       	com	r22
     de0:	80 81       	ld	r24, Z
     de2:	68 23       	and	r22, r24
     de4:	60 83       	st	Z, r22
     de6:	9f bf       	out	0x3f, r25	; 63
     de8:	0f 90       	pop	r0
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	1f 92       	push	r1
     df6:	1f 92       	push	r1
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     dfc:	86 30       	cpi	r24, 0x06	; 6
     dfe:	11 f0       	breq	.+4      	; 0xe04 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	01 c0       	rjmp	.+2      	; 0xe06 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     e04:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     e06:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     e0a:	81 fd       	sbrc	r24, 1
     e0c:	2a c0       	rjmp	.+84     	; 0xe62 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e0e:	8f b7       	in	r24, 0x3f	; 63
     e10:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e12:	f8 94       	cli
	return flags;
     e14:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     e16:	e0 e5       	ldi	r30, 0x50	; 80
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	82 60       	ori	r24, 0x02	; 2
     e1e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e20:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     e22:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     e24:	81 ff       	sbrs	r24, 1
     e26:	fd cf       	rjmp	.-6      	; 0xe22 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e28:	8f b7       	in	r24, 0x3f	; 63
     e2a:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     e2c:	f8 94       	cli
	return flags;
     e2e:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     e30:	a0 e5       	ldi	r26, 0x50	; 80
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	16 96       	adiw	r26, 0x06	; 6
     e36:	8c 91       	ld	r24, X
     e38:	16 97       	sbiw	r26, 0x06	; 6
     e3a:	89 7f       	andi	r24, 0xF9	; 249
     e3c:	16 96       	adiw	r26, 0x06	; 6
     e3e:	8c 93       	st	X, r24
     e40:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     e42:	e0 e6       	ldi	r30, 0x60	; 96
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 e8       	ldi	r24, 0x80	; 128
     e48:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     e4a:	8b eb       	ldi	r24, 0xBB	; 187
     e4c:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     e4e:	16 96       	adiw	r26, 0x06	; 6
     e50:	8c 91       	ld	r24, X
     e52:	16 97       	sbiw	r26, 0x06	; 6
     e54:	84 60       	ori	r24, 0x04	; 4
     e56:	16 96       	adiw	r26, 0x06	; 6
     e58:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     e5a:	80 81       	ld	r24, Z
     e5c:	81 60       	ori	r24, 0x01	; 1
     e5e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e60:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     e62:	63 60       	ori	r22, 0x03	; 3
     e64:	84 e4       	ldi	r24, 0x44	; 68
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	cc d5       	rcall	.+2968   	; 0x1a02 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     e6a:	60 e4       	ldi	r22, 0x40	; 64
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	aa df       	rcall	.-172    	; 0xdc4 <sysclk_enable_module>
}
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	08 95       	ret

00000e7e <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     e7e:	30 91 bb 23 	lds	r19, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
     e82:	20 91 bc 23 	lds	r18, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
     e86:	82 2f       	mov	r24, r18
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	03 97       	sbiw	r24, 0x03	; 3
     e8c:	b1 f4       	brne	.+44     	; 0xeba <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     e8e:	31 11       	cpse	r19, r1
     e90:	16 c0       	rjmp	.+44     	; 0xebe <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
     e92:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
     e96:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
     e9a:	89 2b       	or	r24, r25
     e9c:	91 f4       	brne	.+36     	; 0xec2 <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     e9e:	e9 eb       	ldi	r30, 0xB9	; 185
     ea0:	f3 e2       	ldi	r31, 0x23	; 35
     ea2:	84 ec       	ldi	r24, 0xC4	; 196
     ea4:	91 e2       	ldi	r25, 0x21	; 33
     ea6:	80 87       	std	Z+8, r24	; 0x08
     ea8:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     eaa:	83 e6       	ldi	r24, 0x63	; 99
     eac:	97 e0       	ldi	r25, 0x07	; 7
     eae:	84 87       	std	Z+12, r24	; 0x0c
     eb0:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
     eb2:	12 86       	std	Z+10, r1	; 0x0a
     eb4:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	08 95       	ret
	}
	return false;
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	08 95       	ret
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	08 95       	ret
     ec2:	80 e0       	ldi	r24, 0x00	; 0
}
     ec4:	08 95       	ret

00000ec6 <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
     ec6:	08 95       	ret

00000ec8 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <udi_hid_generic_b_report_in_free>
     ece:	08 95       	ret

00000ed0 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
     ed0:	10 92 ca 21 	sts	0x21CA, r1	; 0x8021ca <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
     ed4:	10 92 c8 21 	sts	0x21C8, r1	; 0x8021c8 <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
     ede:	0c 94 fc 14 	jmp	0x29f8	; 0x29f8 <main_generic_enable>
}
     ee2:	08 95       	ret

00000ee4 <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
     ee4:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <main_generic_disable>
     ee8:	08 95       	ret

00000eea <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
     eea:	2f e3       	ldi	r18, 0x3F	; 63
     eec:	37 e0       	ldi	r19, 0x07	; 7
     eee:	46 ea       	ldi	r20, 0xA6	; 166
     ef0:	50 e2       	ldi	r21, 0x20	; 32
     ef2:	68 ec       	ldi	r22, 0xC8	; 200
     ef4:	71 e2       	ldi	r23, 0x21	; 33
     ef6:	8a ec       	ldi	r24, 0xCA	; 202
     ef8:	91 e2       	ldi	r25, 0x21	; 33
     efa:	f2 c0       	rjmp	.+484    	; 0x10e0 <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
     efc:	08 95       	ret

00000efe <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	1f 92       	push	r1
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
     f10:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <udi_hid_generic_b_report_in_free>
     f14:	88 23       	and	r24, r24
     f16:	09 f1       	breq	.+66     	; 0xf5a <udi_hid_generic_send_report_in+0x5c>
     f18:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f1a:	8f b7       	in	r24, 0x3f	; 63
     f1c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f1e:	f8 94       	cli
	return flags;
     f20:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
     f22:	10 92 c4 21 	sts	0x21C4, r1	; 0x8021c4 <udi_hid_generic_report_feature>
     f26:	10 92 c5 21 	sts	0x21C5, r1	; 0x8021c5 <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <udi_hid_generic_report_feature>
     f32:	90 93 c5 21 	sts	0x21C5, r25	; 0x8021c5 <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     f36:	04 e6       	ldi	r16, 0x64	; 100
     f38:	17 e0       	ldi	r17, 0x07	; 7
     f3a:	22 e0       	ldi	r18, 0x02	; 2
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	44 ec       	ldi	r20, 0xC4	; 196
     f40:	51 e2       	ldi	r21, 0x21	; 33
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	82 e8       	ldi	r24, 0x82	; 130
     f46:	0e 94 c5 11 	call	0x238a	; 0x238a <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
     f4a:	91 e0       	ldi	r25, 0x01	; 1
     f4c:	89 27       	eor	r24, r25
     f4e:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f52:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
     f54:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <udi_hid_generic_b_report_in_free>
     f58:	89 27       	eor	r24, r25

}
     f5a:	0f 90       	pop	r0
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	08 95       	ret

00000f68 <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	08 95       	ret

00000f6c <udi_hid_kbd_setreport>:
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	08 95       	ret

00000f70 <udi_hid_kbd_enable>:
     f70:	10 92 e0 21 	sts	0x21E0, r1	; 0x8021e0 <udi_hid_kbd_rate>
     f74:	10 92 de 21 	sts	0x21DE, r1	; 0x8021de <udi_hid_kbd_protocol>
     f78:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <udi_hid_kbd_b_report_trans_ongoing>
     f7c:	88 e0       	ldi	r24, 0x08	; 8
     f7e:	e5 ed       	ldi	r30, 0xD5	; 213
     f80:	f1 e2       	ldi	r31, 0x21	; 33
     f82:	df 01       	movw	r26, r30
     f84:	1d 92       	st	X+, r1
     f86:	8a 95       	dec	r24
     f88:	e9 f7       	brne	.-6      	; 0xf84 <udi_hid_kbd_enable+0x14>
     f8a:	10 92 dd 21 	sts	0x21DD, r1	; 0x8021dd <udi_hid_kbd_b_report_valid>
     f8e:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <main_kbd_enable>
     f92:	08 95       	ret

00000f94 <udi_hid_kbd_disable>:
     f94:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <main_kbd_disable>
     f98:	08 95       	ret

00000f9a <udi_hid_kbd_setup>:
     f9a:	26 eb       	ldi	r18, 0xB6	; 182
     f9c:	37 e0       	ldi	r19, 0x07	; 7
     f9e:	4b ec       	ldi	r20, 0xCB	; 203
     fa0:	50 e2       	ldi	r21, 0x20	; 32
     fa2:	6e ed       	ldi	r22, 0xDE	; 222
     fa4:	71 e2       	ldi	r23, 0x21	; 33
     fa6:	80 ee       	ldi	r24, 0xE0	; 224
     fa8:	91 e2       	ldi	r25, 0x21	; 33
     faa:	9a c0       	rjmp	.+308    	; 0x10e0 <udi_hid_setup>
     fac:	08 95       	ret

00000fae <udi_hid_kbd_send_report>:
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <udi_hid_kbd_b_report_trans_ongoing>
     fb6:	81 11       	cpse	r24, r1
     fb8:	18 c0       	rjmp	.+48     	; 0xfea <udi_hid_kbd_send_report+0x3c>
     fba:	88 e0       	ldi	r24, 0x08	; 8
     fbc:	e5 ed       	ldi	r30, 0xD5	; 213
     fbe:	f1 e2       	ldi	r31, 0x21	; 33
     fc0:	ac ec       	ldi	r26, 0xCC	; 204
     fc2:	b1 e2       	ldi	r27, 0x21	; 33
     fc4:	01 90       	ld	r0, Z+
     fc6:	0d 92       	st	X+, r0
     fc8:	8a 95       	dec	r24
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <udi_hid_kbd_send_report+0x16>
     fcc:	10 92 dd 21 	sts	0x21DD, r1	; 0x8021dd <udi_hid_kbd_b_report_valid>
     fd0:	09 ef       	ldi	r16, 0xF9	; 249
     fd2:	17 e0       	ldi	r17, 0x07	; 7
     fd4:	28 e0       	ldi	r18, 0x08	; 8
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	4c ec       	ldi	r20, 0xCC	; 204
     fda:	51 e2       	ldi	r21, 0x21	; 33
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	81 e8       	ldi	r24, 0x81	; 129
     fe0:	0e 94 c5 11 	call	0x238a	; 0x238a <udd_ep_run>
     fe4:	80 93 d4 21 	sts	0x21D4, r24	; 0x8021d4 <udi_hid_kbd_b_report_trans_ongoing>
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <udi_hid_kbd_send_report+0x3e>
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <udi_hid_kbd_report_sent>:
     ff2:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <udi_hid_kbd_b_report_trans_ongoing>
     ff6:	80 91 dd 21 	lds	r24, 0x21DD	; 0x8021dd <udi_hid_kbd_b_report_valid>
     ffa:	81 11       	cpse	r24, r1
     ffc:	d8 cf       	rjmp	.-80     	; 0xfae <udi_hid_kbd_send_report>
     ffe:	08 95       	ret

00001000 <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	1f 92       	push	r1
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    100c:	9f b7       	in	r25, 0x3f	; 63
    100e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1010:	f8 94       	cli
	return flags;
    1012:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    1014:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <udi_hid_kbd_report+0x2>
    1018:	99 23       	and	r25, r25
    101a:	41 f0       	breq	.+16     	; 0x102c <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    101c:	89 17       	cp	r24, r25
    101e:	a9 f0       	breq	.+42     	; 0x104a <udi_hid_kbd_up+0x4a>
    1020:	e8 ed       	ldi	r30, 0xD8	; 216
    1022:	f1 e2       	ldi	r31, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1024:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    1026:	21 91       	ld	r18, Z+
    1028:	21 11       	cpse	r18, r1
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    102c:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    102e:	1e c0       	rjmp	.+60     	; 0x106c <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
    1030:	28 17       	cp	r18, r24
    1032:	21 f0       	breq	.+8      	; 0x103c <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1034:	9f 5f       	subi	r25, 0xFF	; 255
    1036:	98 30       	cpi	r25, 0x08	; 8
    1038:	b1 f7       	brne	.-20     	; 0x1026 <udi_hid_kbd_up+0x26>
    103a:	05 c0       	rjmp	.+10     	; 0x1046 <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    103c:	98 30       	cpi	r25, 0x08	; 8
    103e:	19 f0       	breq	.+6      	; 0x1046 <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    1040:	97 30       	cpi	r25, 0x07	; 7
    1042:	20 f0       	brcs	.+8      	; 0x104c <udi_hid_kbd_up+0x4c>
    1044:	0c c0       	rjmp	.+24     	; 0x105e <udi_hid_kbd_up+0x5e>
    1046:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    1048:	11 c0       	rjmp	.+34     	; 0x106c <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    104a:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    104c:	e9 2f       	mov	r30, r25
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	eb 52       	subi	r30, 0x2B	; 43
    1052:	fe 4d       	sbci	r31, 0xDE	; 222
    1054:	81 81       	ldd	r24, Z+1	; 0x01
    1056:	80 83       	st	Z, r24
		i++;
    1058:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    105a:	97 30       	cpi	r25, 0x07	; 7
    105c:	b9 f7       	brne	.-18     	; 0x104c <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    105e:	10 92 dc 21 	sts	0x21DC, r1	; 0x8021dc <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	80 93 dd 21 	sts	0x21DD, r24	; 0x8021dd <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    1068:	a2 df       	rcall	.-188    	; 0xfae <udi_hid_kbd_send_report>
    106a:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	0f 90       	pop	r0
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	08 95       	ret

00001078 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	1f 92       	push	r1
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1084:	9f b7       	in	r25, 0x3f	; 63
    1086:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1088:	f8 94       	cli
	return flags;
    108a:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    108c:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <udi_hid_kbd_report+0x2>
    1090:	99 23       	and	r25, r25
    1092:	b1 f0       	breq	.+44     	; 0x10c0 <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    1094:	89 17       	cp	r24, r25
    1096:	41 f0       	breq	.+16     	; 0x10a8 <udi_hid_kbd_down+0x30>
    1098:	a8 ed       	ldi	r26, 0xD8	; 216
    109a:	b1 e2       	ldi	r27, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    109c:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    109e:	9d 91       	ld	r25, X+
    10a0:	99 23       	and	r25, r25
    10a2:	49 f0       	breq	.+18     	; 0x10b6 <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    10a4:	98 13       	cpse	r25, r24
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10a8:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	14 c0       	rjmp	.+40     	; 0x10d6 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    10ae:	ef 5f       	subi	r30, 0xFF	; 255
    10b0:	e8 30       	cpi	r30, 0x08	; 8
    10b2:	a9 f7       	brne	.-22     	; 0x109e <udi_hid_kbd_down+0x26>
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    10b6:	e8 30       	cpi	r30, 0x08	; 8
    10b8:	21 f4       	brne	.+8      	; 0x10c2 <udi_hid_kbd_down+0x4a>
    10ba:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	0b c0       	rjmp	.+22     	; 0x10d6 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    10c0:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	eb 52       	subi	r30, 0x2B	; 43
    10c6:	fe 4d       	sbci	r31, 0xDE	; 222
    10c8:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	80 93 dd 21 	sts	0x21DD, r24	; 0x8021dd <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    10d0:	6e df       	rcall	.-292    	; 0xfae <udi_hid_kbd_send_report>
    10d2:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
}
    10d6:	0f 90       	pop	r0
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	1f 91       	pop	r17
    10de:	08 95       	ret

000010e0 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	dc 01       	movw	r26, r24
    10e6:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    10e8:	90 91 b9 23 	lds	r25, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    10ec:	99 23       	and	r25, r25
    10ee:	0c f0       	brlt	.+2      	; 0x10f2 <udi_hid_setup+0x12>
    10f0:	68 c0       	rjmp	.+208    	; 0x11c2 <udi_hid_setup+0xe2>
    10f2:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <udi_hid_setup+0x18>
    10f6:	45 c0       	rjmp	.+138    	; 0x1182 <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    10f8:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    10fc:	86 30       	cpi	r24, 0x06	; 6
    10fe:	09 f0       	breq	.+2      	; 0x1102 <udi_hid_setup+0x22>
    1100:	40 c0       	rjmp	.+128    	; 0x1182 <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    1102:	76 d1       	rcall	.+748    	; 0x13f0 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1104:	dc 01       	movw	r26, r24
    1106:	1a 96       	adiw	r26, 0x0a	; 10
    1108:	2c 91       	ld	r18, X
    110a:	1a 97       	sbiw	r26, 0x0a	; 10
    110c:	21 32       	cpi	r18, 0x21	; 33
    110e:	09 f0       	breq	.+2      	; 0x1112 <udi_hid_setup+0x32>
    1110:	77 c0       	rjmp	.+238    	; 0x1200 <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1112:	20 91 bc 23 	lds	r18, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	21 32       	cpi	r18, 0x21	; 33
    111a:	31 05       	cpc	r19, r1
    111c:	b1 f4       	brne	.+44     	; 0x114a <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    111e:	9c 01       	movw	r18, r24
    1120:	27 5f       	subi	r18, 0xF7	; 247
    1122:	3f 4f       	sbci	r19, 0xFF	; 255
    1124:	20 93 c1 23 	sts	0x23C1, r18	; 0x8023c1 <udd_g_ctrlreq+0x8>
    1128:	30 93 c2 23 	sts	0x23C2, r19	; 0x8023c2 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    112c:	e9 eb       	ldi	r30, 0xB9	; 185
    112e:	f3 e2       	ldi	r31, 0x23	; 35
    1130:	19 96       	adiw	r26, 0x09	; 9
    1132:	8c 91       	ld	r24, X
    1134:	26 81       	ldd	r18, Z+6	; 0x06
    1136:	37 81       	ldd	r19, Z+7	; 0x07
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	28 17       	cp	r18, r24
    113c:	39 07       	cpc	r19, r25
    113e:	08 f4       	brcc	.+2      	; 0x1142 <udi_hid_setup+0x62>
    1140:	c9 01       	movw	r24, r18
    1142:	82 87       	std	Z+10, r24	; 0x0a
    1144:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	68 c0       	rjmp	.+208    	; 0x121a <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    114a:	fc 01       	movw	r30, r24
    114c:	47 85       	ldd	r20, Z+15	; 0x0f
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	42 17       	cp	r20, r18
    1152:	53 07       	cpc	r21, r19
    1154:	09 f0       	breq	.+2      	; 0x1158 <udi_hid_setup+0x78>
    1156:	56 c0       	rjmp	.+172    	; 0x1204 <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    1158:	c0 93 c1 23 	sts	0x23C1, r28	; 0x8023c1 <udd_g_ctrlreq+0x8>
    115c:	d0 93 c2 23 	sts	0x23C2, r29	; 0x8023c2 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    1160:	e9 eb       	ldi	r30, 0xB9	; 185
    1162:	f3 e2       	ldi	r31, 0x23	; 35
    1164:	26 81       	ldd	r18, Z+6	; 0x06
    1166:	37 81       	ldd	r19, Z+7	; 0x07
    1168:	dc 01       	movw	r26, r24
    116a:	50 96       	adiw	r26, 0x10	; 16
    116c:	8d 91       	ld	r24, X+
    116e:	9c 91       	ld	r25, X
    1170:	51 97       	sbiw	r26, 0x11	; 17
    1172:	28 17       	cp	r18, r24
    1174:	39 07       	cpc	r19, r25
    1176:	08 f4       	brcc	.+2      	; 0x117a <udi_hid_setup+0x9a>
    1178:	c9 01       	movw	r24, r18
    117a:	82 87       	std	Z+10, r24	; 0x0a
    117c:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	4c c0       	rjmp	.+152    	; 0x121a <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1182:	90 32       	cpi	r25, 0x20	; 32
    1184:	09 f0       	breq	.+2      	; 0x1188 <udi_hid_setup+0xa8>
    1186:	40 c0       	rjmp	.+128    	; 0x1208 <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1188:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	39 f0       	breq	.+14     	; 0x119e <udi_hid_setup+0xbe>
    1190:	83 30       	cpi	r24, 0x03	; 3
    1192:	71 f0       	breq	.+28     	; 0x11b0 <udi_hid_setup+0xd0>
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	d1 f5       	brne	.+116    	; 0x120c <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    1198:	f9 01       	movw	r30, r18
    119a:	19 95       	eicall
    119c:	3e c0       	rjmp	.+124    	; 0x121a <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    119e:	e9 eb       	ldi	r30, 0xB9	; 185
    11a0:	f3 e2       	ldi	r31, 0x23	; 35
    11a2:	a0 87       	std	Z+8, r26	; 0x08
    11a4:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	82 87       	std	Z+10, r24	; 0x0a
    11ac:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    11ae:	35 c0       	rjmp	.+106    	; 0x121a <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    11b0:	e9 eb       	ldi	r30, 0xB9	; 185
    11b2:	f3 e2       	ldi	r31, 0x23	; 35
    11b4:	60 87       	std	Z+8, r22	; 0x08
    11b6:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	82 87       	std	Z+10, r24	; 0x0a
    11be:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    11c0:	2c c0       	rjmp	.+88     	; 0x121a <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    11c2:	90 76       	andi	r25, 0x60	; 96
    11c4:	90 32       	cpi	r25, 0x20	; 32
    11c6:	21 f5       	brne	.+72     	; 0x1210 <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    11c8:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    11cc:	8a 30       	cpi	r24, 0x0A	; 10
    11ce:	39 f0       	breq	.+14     	; 0x11de <udi_hid_setup+0xfe>
    11d0:	8b 30       	cpi	r24, 0x0B	; 11
    11d2:	51 f0       	breq	.+20     	; 0x11e8 <udi_hid_setup+0x108>
    11d4:	89 30       	cpi	r24, 0x09	; 9
    11d6:	f1 f4       	brne	.+60     	; 0x1214 <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    11d8:	f9 01       	movw	r30, r18
    11da:	19 95       	eicall
    11dc:	1e c0       	rjmp	.+60     	; 0x121a <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    11de:	80 91 bc 23 	lds	r24, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    11e2:	8c 93       	st	X, r24
				return true;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	19 c0       	rjmp	.+50     	; 0x121a <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    11e8:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    11ec:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    11f0:	89 2b       	or	r24, r25
    11f2:	91 f4       	brne	.+36     	; 0x1218 <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    11f4:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    11f8:	db 01       	movw	r26, r22
    11fa:	8c 93       	st	X, r24
				return true;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	0d c0       	rjmp	.+26     	; 0x121a <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	0b c0       	rjmp	.+22     	; 0x121a <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	09 c0       	rjmp	.+18     	; 0x121a <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	07 c0       	rjmp	.+14     	; 0x121a <udi_hid_setup+0x13a>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	05 c0       	rjmp	.+10     	; 0x121a <udi_hid_setup+0x13a>
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	03 c0       	rjmp	.+6      	; 0x121a <udi_hid_setup+0x13a>
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	01 c0       	rjmp	.+2      	; 0x121a <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    1218:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    1220:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    1224:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1228:	01 90       	ld	r0, Z+
    122a:	f0 81       	ld	r31, Z
    122c:	e0 2d       	mov	r30, r0
    122e:	22 81       	ldd	r18, Z+2	; 0x02
    1230:	33 81       	ldd	r19, Z+3	; 0x03
    1232:	2e 0f       	add	r18, r30
    1234:	3f 1f       	adc	r19, r31
    1236:	fc 01       	movw	r30, r24
    1238:	40 81       	ld	r20, Z
    123a:	e4 0f       	add	r30, r20
    123c:	f1 1d       	adc	r31, r1
    123e:	e2 17       	cp	r30, r18
    1240:	f3 07       	cpc	r31, r19
    1242:	a0 f4       	brcc	.+40     	; 0x126c <udc_next_desc_in_iface+0x4c>
    1244:	81 81       	ldd	r24, Z+1	; 0x01
    1246:	84 30       	cpi	r24, 0x04	; 4
    1248:	a1 f0       	breq	.+40     	; 0x1272 <udc_next_desc_in_iface+0x52>
    124a:	86 13       	cpse	r24, r22
    124c:	06 c0       	rjmp	.+12     	; 0x125a <udc_next_desc_in_iface+0x3a>
    124e:	14 c0       	rjmp	.+40     	; 0x1278 <udc_next_desc_in_iface+0x58>
    1250:	81 81       	ldd	r24, Z+1	; 0x01
    1252:	84 30       	cpi	r24, 0x04	; 4
    1254:	a1 f0       	breq	.+40     	; 0x127e <udc_next_desc_in_iface+0x5e>
    1256:	86 17       	cp	r24, r22
    1258:	a9 f0       	breq	.+42     	; 0x1284 <udc_next_desc_in_iface+0x64>
    125a:	80 81       	ld	r24, Z
    125c:	e8 0f       	add	r30, r24
    125e:	f1 1d       	adc	r31, r1
    1260:	e2 17       	cp	r30, r18
    1262:	f3 07       	cpc	r31, r19
    1264:	a8 f3       	brcs	.-22     	; 0x1250 <udc_next_desc_in_iface+0x30>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	08 95       	ret
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	08 95       	ret
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	08 95       	ret
    1278:	8e 2f       	mov	r24, r30
    127a:	9f 2f       	mov	r25, r31
    127c:	08 95       	ret
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	08 95       	ret
    1284:	8e 2f       	mov	r24, r30
    1286:	9f 2f       	mov	r25, r31
    1288:	08 95       	ret

0000128a <udc_valid_address>:
    128a:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    128e:	8f 77       	andi	r24, 0x7F	; 127
    1290:	95 c7       	rjmp	.+3882   	; 0x21bc <udd_set_address>
    1292:	08 95       	ret

00001294 <udc_update_iface_desc>:
    1294:	90 91 e8 21 	lds	r25, 0x21E8	; 0x8021e8 <udc_num_configuration>
    1298:	99 23       	and	r25, r25
    129a:	81 f1       	breq	.+96     	; 0x12fc <udc_update_iface_desc+0x68>
    129c:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    12a0:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    12a4:	01 90       	ld	r0, Z+
    12a6:	f0 81       	ld	r31, Z
    12a8:	e0 2d       	mov	r30, r0
    12aa:	94 81       	ldd	r25, Z+4	; 0x04
    12ac:	89 17       	cp	r24, r25
    12ae:	40 f5       	brcc	.+80     	; 0x1300 <udc_update_iface_desc+0x6c>
    12b0:	e0 93 e4 21 	sts	0x21E4, r30	; 0x8021e4 <udc_ptr_iface>
    12b4:	f0 93 e5 21 	sts	0x21E5, r31	; 0x8021e5 <udc_ptr_iface+0x1>
    12b8:	22 81       	ldd	r18, Z+2	; 0x02
    12ba:	33 81       	ldd	r19, Z+3	; 0x03
    12bc:	2e 0f       	add	r18, r30
    12be:	3f 1f       	adc	r19, r31
    12c0:	e2 17       	cp	r30, r18
    12c2:	f3 07       	cpc	r31, r19
    12c4:	f8 f4       	brcc	.+62     	; 0x1304 <udc_update_iface_desc+0x70>
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	94 30       	cpi	r25, 0x04	; 4
    12ca:	61 f4       	brne	.+24     	; 0x12e4 <udc_update_iface_desc+0x50>
    12cc:	92 81       	ldd	r25, Z+2	; 0x02
    12ce:	89 13       	cpse	r24, r25
    12d0:	09 c0       	rjmp	.+18     	; 0x12e4 <udc_update_iface_desc+0x50>
    12d2:	93 81       	ldd	r25, Z+3	; 0x03
    12d4:	96 13       	cpse	r25, r22
    12d6:	06 c0       	rjmp	.+12     	; 0x12e4 <udc_update_iface_desc+0x50>
    12d8:	e0 93 e4 21 	sts	0x21E4, r30	; 0x8021e4 <udc_ptr_iface>
    12dc:	f0 93 e5 21 	sts	0x21E5, r31	; 0x8021e5 <udc_ptr_iface+0x1>
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	08 95       	ret
    12e4:	90 81       	ld	r25, Z
    12e6:	e9 0f       	add	r30, r25
    12e8:	f1 1d       	adc	r31, r1
    12ea:	e2 17       	cp	r30, r18
    12ec:	f3 07       	cpc	r31, r19
    12ee:	58 f3       	brcs	.-42     	; 0x12c6 <udc_update_iface_desc+0x32>
    12f0:	e0 93 e4 21 	sts	0x21E4, r30	; 0x8021e4 <udc_ptr_iface>
    12f4:	f0 93 e5 21 	sts	0x21E5, r31	; 0x8021e5 <udc_ptr_iface+0x1>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	08 95       	ret
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	08 95       	ret
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	08 95       	ret
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	08 95       	ret

00001308 <udc_iface_disable>:
    1308:	ef 92       	push	r14
    130a:	ff 92       	push	r15
    130c:	1f 93       	push	r17
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	c8 2f       	mov	r28, r24
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	be df       	rcall	.-132    	; 0x1294 <udc_update_iface_desc>
    1318:	18 2f       	mov	r17, r24
    131a:	88 23       	and	r24, r24
    131c:	81 f1       	breq	.+96     	; 0x137e <udc_iface_disable+0x76>
    131e:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    1322:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1326:	ec 2f       	mov	r30, r28
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	ee 0f       	add	r30, r30
    132c:	ff 1f       	adc	r31, r31
    132e:	12 96       	adiw	r26, 0x02	; 2
    1330:	8d 91       	ld	r24, X+
    1332:	9c 91       	ld	r25, X
    1334:	13 97       	sbiw	r26, 0x03	; 3
    1336:	e8 0f       	add	r30, r24
    1338:	f9 1f       	adc	r31, r25
    133a:	e0 80       	ld	r14, Z
    133c:	f1 80       	ldd	r15, Z+1	; 0x01
    133e:	d7 01       	movw	r26, r14
    1340:	16 96       	adiw	r26, 0x06	; 6
    1342:	ed 91       	ld	r30, X+
    1344:	fc 91       	ld	r31, X
    1346:	17 97       	sbiw	r26, 0x07	; 7
    1348:	19 95       	eicall
    134a:	68 2f       	mov	r22, r24
    134c:	8c 2f       	mov	r24, r28
    134e:	a2 df       	rcall	.-188    	; 0x1294 <udc_update_iface_desc>
    1350:	18 2f       	mov	r17, r24
    1352:	88 23       	and	r24, r24
    1354:	a1 f0       	breq	.+40     	; 0x137e <udc_iface_disable+0x76>
    1356:	c0 91 e4 21 	lds	r28, 0x21E4	; 0x8021e4 <udc_ptr_iface>
    135a:	d0 91 e5 21 	lds	r29, 0x21E5	; 0x8021e5 <udc_ptr_iface+0x1>
    135e:	65 e0       	ldi	r22, 0x05	; 5
    1360:	ce 01       	movw	r24, r28
    1362:	5e df       	rcall	.-324    	; 0x1220 <udc_next_desc_in_iface>
    1364:	ec 01       	movw	r28, r24
    1366:	89 2b       	or	r24, r25
    1368:	21 f0       	breq	.+8      	; 0x1372 <udc_iface_disable+0x6a>
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	0e 94 de 12 	call	0x25bc	; 0x25bc <udd_ep_free>
    1370:	f6 cf       	rjmp	.-20     	; 0x135e <udc_iface_disable+0x56>
    1372:	d7 01       	movw	r26, r14
    1374:	12 96       	adiw	r26, 0x02	; 2
    1376:	ed 91       	ld	r30, X+
    1378:	fc 91       	ld	r31, X
    137a:	13 97       	sbiw	r26, 0x03	; 3
    137c:	19 95       	eicall
    137e:	81 2f       	mov	r24, r17
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	1f 91       	pop	r17
    1386:	ff 90       	pop	r15
    1388:	ef 90       	pop	r14
    138a:	08 95       	ret

0000138c <udc_iface_enable>:
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	18 2f       	mov	r17, r24
    1394:	7f df       	rcall	.-258    	; 0x1294 <udc_update_iface_desc>
    1396:	88 23       	and	r24, r24
    1398:	39 f1       	breq	.+78     	; 0x13e8 <udc_iface_enable+0x5c>
    139a:	c0 91 e4 21 	lds	r28, 0x21E4	; 0x8021e4 <udc_ptr_iface>
    139e:	d0 91 e5 21 	lds	r29, 0x21E5	; 0x8021e5 <udc_ptr_iface+0x1>
    13a2:	65 e0       	ldi	r22, 0x05	; 5
    13a4:	ce 01       	movw	r24, r28
    13a6:	3c df       	rcall	.-392    	; 0x1220 <udc_next_desc_in_iface>
    13a8:	ec 01       	movw	r28, r24
    13aa:	89 2b       	or	r24, r25
    13ac:	41 f0       	breq	.+16     	; 0x13be <udc_iface_enable+0x32>
    13ae:	4c 81       	ldd	r20, Y+4	; 0x04
    13b0:	5d 81       	ldd	r21, Y+5	; 0x05
    13b2:	6b 81       	ldd	r22, Y+3	; 0x03
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	0f d7       	rcall	.+3614   	; 0x21d6 <udd_ep_alloc>
    13b8:	81 11       	cpse	r24, r1
    13ba:	f3 cf       	rjmp	.-26     	; 0x13a2 <udc_iface_enable+0x16>
    13bc:	15 c0       	rjmp	.+42     	; 0x13e8 <udc_iface_enable+0x5c>
    13be:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    13c2:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    13c6:	e1 2f       	mov	r30, r17
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	ee 0f       	add	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	12 96       	adiw	r26, 0x02	; 2
    13d0:	8d 91       	ld	r24, X+
    13d2:	9c 91       	ld	r25, X
    13d4:	13 97       	sbiw	r26, 0x03	; 3
    13d6:	e8 0f       	add	r30, r24
    13d8:	f9 1f       	adc	r31, r25
    13da:	01 90       	ld	r0, Z+
    13dc:	f0 81       	ld	r31, Z
    13de:	e0 2d       	mov	r30, r0
    13e0:	01 90       	ld	r0, Z+
    13e2:	f0 81       	ld	r31, Z
    13e4:	e0 2d       	mov	r30, r0
    13e6:	19 95       	eicall
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	1f 91       	pop	r17
    13ee:	08 95       	ret

000013f0 <udc_get_interface_desc>:
    13f0:	80 91 e4 21 	lds	r24, 0x21E4	; 0x8021e4 <udc_ptr_iface>
    13f4:	90 91 e5 21 	lds	r25, 0x21E5	; 0x8021e5 <udc_ptr_iface+0x1>
    13f8:	08 95       	ret

000013fa <udc_start>:
    13fa:	55 c6       	rjmp	.+3242   	; 0x20a6 <udd_enable>
    13fc:	08 95       	ret

000013fe <udc_reset>:
    13fe:	cf 93       	push	r28
    1400:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    1404:	88 23       	and	r24, r24
    1406:	c1 f0       	breq	.+48     	; 0x1438 <udc_reset+0x3a>
    1408:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    140c:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1410:	01 90       	ld	r0, Z+
    1412:	f0 81       	ld	r31, Z
    1414:	e0 2d       	mov	r30, r0
    1416:	84 81       	ldd	r24, Z+4	; 0x04
    1418:	88 23       	and	r24, r24
    141a:	71 f0       	breq	.+28     	; 0x1438 <udc_reset+0x3a>
    141c:	c0 e0       	ldi	r28, 0x00	; 0
    141e:	8c 2f       	mov	r24, r28
    1420:	73 df       	rcall	.-282    	; 0x1308 <udc_iface_disable>
    1422:	cf 5f       	subi	r28, 0xFF	; 255
    1424:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    1428:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    142c:	01 90       	ld	r0, Z+
    142e:	f0 81       	ld	r31, Z
    1430:	e0 2d       	mov	r30, r0
    1432:	84 81       	ldd	r24, Z+4	; 0x04
    1434:	c8 17       	cp	r28, r24
    1436:	98 f3       	brcs	.-26     	; 0x141e <udc_reset+0x20>
    1438:	10 92 e8 21 	sts	0x21E8, r1	; 0x8021e8 <udc_num_configuration>
    143c:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <udc_device_status>
    1440:	81 fd       	sbrc	r24, 1
    1442:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <main_remotewakeup_disable>
    1446:	10 92 ec 21 	sts	0x21EC, r1	; 0x8021ec <udc_device_status>
    144a:	10 92 ed 21 	sts	0x21ED, r1	; 0x8021ed <udc_device_status+0x1>
    144e:	cf 91       	pop	r28
    1450:	08 95       	ret

00001452 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1452:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1454:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    1458:	88 23       	and	r24, r24
    145a:	49 f1       	breq	.+82     	; 0x14ae <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    145c:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    1460:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1464:	ed 91       	ld	r30, X+
    1466:	fc 91       	ld	r31, X
    1468:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    146a:	84 81       	ldd	r24, Z+4	; 0x04
    146c:	88 23       	and	r24, r24
    146e:	f9 f0       	breq	.+62     	; 0x14ae <udc_sof_notify+0x5c>
    1470:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1472:	ec 2f       	mov	r30, r28
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	ee 0f       	add	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	12 96       	adiw	r26, 0x02	; 2
    147c:	8d 91       	ld	r24, X+
    147e:	9c 91       	ld	r25, X
    1480:	13 97       	sbiw	r26, 0x03	; 3
    1482:	e8 0f       	add	r30, r24
    1484:	f9 1f       	adc	r31, r25
    1486:	01 90       	ld	r0, Z+
    1488:	f0 81       	ld	r31, Z
    148a:	e0 2d       	mov	r30, r0
    148c:	00 84       	ldd	r0, Z+8	; 0x08
    148e:	f1 85       	ldd	r31, Z+9	; 0x09
    1490:	e0 2d       	mov	r30, r0
    1492:	30 97       	sbiw	r30, 0x00	; 0
    1494:	09 f0       	breq	.+2      	; 0x1498 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1496:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1498:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    149a:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    149e:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    14a2:	ed 91       	ld	r30, X+
    14a4:	fc 91       	ld	r31, X
    14a6:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    14a8:	84 81       	ldd	r24, Z+4	; 0x04
    14aa:	c8 17       	cp	r28, r24
    14ac:	10 f3       	brcs	.-60     	; 0x1472 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    14ae:	cf 91       	pop	r28
    14b0:	08 95       	ret

000014b2 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    14ba:	e9 eb       	ldi	r30, 0xB9	; 185
    14bc:	f3 e2       	ldi	r31, 0x23	; 35
    14be:	12 86       	std	Z+10, r1	; 0x0a
    14c0:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    14c2:	14 86       	std	Z+12, r1	; 0x0c
    14c4:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    14c6:	16 86       	std	Z+14, r1	; 0x0e
    14c8:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    14ca:	80 81       	ld	r24, Z
    14cc:	88 23       	and	r24, r24
    14ce:	0c f0       	brlt	.+2      	; 0x14d2 <udc_process_setup+0x20>
    14d0:	7e c2       	rjmp	.+1276   	; 0x19ce <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    14d2:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    14d6:	30 91 c0 23 	lds	r19, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    14da:	21 15       	cp	r18, r1
    14dc:	31 05       	cpc	r19, r1
    14de:	09 f0       	breq	.+2      	; 0x14e2 <udc_process_setup+0x30>
    14e0:	7b c2       	rjmp	.+1270   	; 0x19d8 <udc_process_setup+0x526>
    14e2:	6d c2       	rjmp	.+1242   	; 0x19be <udc_process_setup+0x50c>
    14e4:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    14e6:	09 f0       	breq	.+2      	; 0x14ea <udc_process_setup+0x38>
    14e8:	a0 c0       	rjmp	.+320    	; 0x162a <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    14ea:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    14ee:	96 30       	cpi	r25, 0x06	; 6
    14f0:	79 f0       	breq	.+30     	; 0x1510 <udc_process_setup+0x5e>
    14f2:	98 30       	cpi	r25, 0x08	; 8
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <udc_process_setup+0x46>
    14f6:	8f c0       	rjmp	.+286    	; 0x1616 <udc_process_setup+0x164>
    14f8:	91 11       	cpse	r25, r1
    14fa:	97 c0       	rjmp	.+302    	; 0x162a <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    14fc:	22 30       	cpi	r18, 0x02	; 2
    14fe:	31 05       	cpc	r19, r1
    1500:	09 f0       	breq	.+2      	; 0x1504 <udc_process_setup+0x52>
    1502:	19 c2       	rjmp	.+1074   	; 0x1936 <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1504:	62 e0       	ldi	r22, 0x02	; 2
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	8c ee       	ldi	r24, 0xEC	; 236
    150a:	91 e2       	ldi	r25, 0x21	; 33
    150c:	5d d6       	rcall	.+3258   	; 0x21c8 <udd_set_setup_payload>
    150e:	69 c2       	rjmp	.+1234   	; 0x19e2 <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1510:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1514:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1518:	29 2f       	mov	r18, r25
    151a:	33 27       	eor	r19, r19
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	a9 f0       	breq	.+42     	; 0x154c <udc_process_setup+0x9a>
    1522:	20 f4       	brcc	.+8      	; 0x152c <udc_process_setup+0x7a>
    1524:	21 30       	cpi	r18, 0x01	; 1
    1526:	31 05       	cpc	r19, r1
    1528:	41 f0       	breq	.+16     	; 0x153a <udc_process_setup+0x88>
    152a:	c7 c1       	rjmp	.+910    	; 0x18ba <udc_process_setup+0x408>
    152c:	23 30       	cpi	r18, 0x03	; 3
    152e:	31 05       	cpc	r19, r1
    1530:	d9 f1       	breq	.+118    	; 0x15a8 <udc_process_setup+0xf6>
    1532:	2f 30       	cpi	r18, 0x0F	; 15
    1534:	31 05       	cpc	r19, r1
    1536:	51 f1       	breq	.+84     	; 0x158c <udc_process_setup+0xda>
    1538:	c0 c1       	rjmp	.+896    	; 0x18ba <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    153a:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <udc_config>
    153e:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1542:	dc 01       	movw	r26, r24
    1544:	6c 91       	ld	r22, X
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	3f d6       	rcall	.+3198   	; 0x21c8 <udd_set_setup_payload>
    154a:	56 c0       	rjmp	.+172    	; 0x15f8 <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    154c:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    1550:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
    1554:	21 89       	ldd	r18, Z+17	; 0x11
    1556:	82 17       	cp	r24, r18
    1558:	08 f0       	brcs	.+2      	; 0x155c <udc_process_setup+0xaa>
    155a:	ed c1       	rjmp	.+986    	; 0x1936 <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    155c:	99 27       	eor	r25, r25
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    156a:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    156e:	e8 0f       	add	r30, r24
    1570:	f9 1f       	adc	r31, r25
    1572:	80 81       	ld	r24, Z
    1574:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1576:	fc 01       	movw	r30, r24
    1578:	62 81       	ldd	r22, Z+2	; 0x02
    157a:	73 81       	ldd	r23, Z+3	; 0x03
    157c:	25 d6       	rcall	.+3146   	; 0x21c8 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    157e:	e0 91 c1 23 	lds	r30, 0x23C1	; 0x8023c1 <udd_g_ctrlreq+0x8>
    1582:	f0 91 c2 23 	lds	r31, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x9>
    1586:	82 e0       	ldi	r24, 0x02	; 2
    1588:	81 83       	std	Z+1, r24	; 0x01
    158a:	36 c0       	rjmp	.+108    	; 0x15f8 <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    158c:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <udc_config+0x4>
    1590:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <udc_config+0x5>
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	09 f4       	brne	.+2      	; 0x159a <udc_process_setup+0xe8>
    1598:	ce c1       	rjmp	.+924    	; 0x1936 <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    159a:	dc 01       	movw	r26, r24
    159c:	12 96       	adiw	r26, 0x02	; 2
    159e:	6d 91       	ld	r22, X+
    15a0:	7c 91       	ld	r23, X
    15a2:	13 97       	sbiw	r26, 0x03	; 3
    15a4:	11 d6       	rcall	.+3106   	; 0x21c8 <udd_set_setup_payload>
    15a6:	28 c0       	rjmp	.+80     	; 0x15f8 <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    15a8:	99 27       	eor	r25, r25
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	91 05       	cpc	r25, r1
    15ae:	71 f0       	breq	.+28     	; 0x15cc <udc_process_setup+0x11a>
    15b0:	38 f0       	brcs	.+14     	; 0x15c0 <udc_process_setup+0x10e>
    15b2:	02 97       	sbiw	r24, 0x02	; 2
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <udc_process_setup+0x106>
    15b6:	8a c1       	rjmp	.+788    	; 0x18cc <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    15b8:	e4 e5       	ldi	r30, 0x54	; 84
    15ba:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    15bc:	31 e2       	ldi	r19, 0x21	; 33
    15be:	09 c0       	rjmp	.+18     	; 0x15d2 <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    15c0:	64 e0       	ldi	r22, 0x04	; 4
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	80 e8       	ldi	r24, 0x80	; 128
    15c6:	91 e2       	ldi	r25, 0x21	; 33
    15c8:	ff d5       	rcall	.+3070   	; 0x21c8 <udd_set_setup_payload>
    15ca:	16 c0       	rjmp	.+44     	; 0x15f8 <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    15cc:	e6 e7       	ldi	r30, 0x76	; 118
    15ce:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    15d0:	39 e0       	ldi	r19, 0x09	; 9
    15d2:	a2 e1       	ldi	r26, 0x12	; 18
    15d4:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    15d6:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    15d8:	81 91       	ld	r24, Z+
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	8d 93       	st	X+, r24
    15de:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    15e0:	2f 5f       	subi	r18, 0xFF	; 255
    15e2:	23 17       	cp	r18, r19
    15e4:	c8 f3       	brcs	.-14     	; 0x15d8 <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    15e6:	63 2f       	mov	r22, r19
    15e8:	66 0f       	add	r22, r22
    15ea:	6e 5f       	subi	r22, 0xFE	; 254
    15ec:	60 93 10 21 	sts	0x2110, r22	; 0x802110 <udc_string_desc>
		udd_set_setup_payload(
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	80 e1       	ldi	r24, 0x10	; 16
    15f4:	91 e2       	ldi	r25, 0x21	; 33
    15f6:	e8 d5       	rcall	.+3024   	; 0x21c8 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    15f8:	e9 eb       	ldi	r30, 0xB9	; 185
    15fa:	f3 e2       	ldi	r31, 0x23	; 35
    15fc:	86 81       	ldd	r24, Z+6	; 0x06
    15fe:	97 81       	ldd	r25, Z+7	; 0x07
    1600:	22 85       	ldd	r18, Z+10	; 0x0a
    1602:	33 85       	ldd	r19, Z+11	; 0x0b
    1604:	82 17       	cp	r24, r18
    1606:	93 07       	cpc	r25, r19
    1608:	08 f0       	brcs	.+2      	; 0x160c <udc_process_setup+0x15a>
    160a:	eb c1       	rjmp	.+982    	; 0x19e2 <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    160c:	80 93 c3 23 	sts	0x23C3, r24	; 0x8023c3 <udd_g_ctrlreq+0xa>
    1610:	90 93 c4 23 	sts	0x23C4, r25	; 0x8023c4 <udd_g_ctrlreq+0xb>
    1614:	e6 c1       	rjmp	.+972    	; 0x19e2 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1616:	21 30       	cpi	r18, 0x01	; 1
    1618:	31 05       	cpc	r19, r1
    161a:	09 f0       	breq	.+2      	; 0x161e <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    161c:	8c c1       	rjmp	.+792    	; 0x1936 <udc_process_setup+0x484>
    161e:	61 e0       	ldi	r22, 0x01	; 1
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	88 ee       	ldi	r24, 0xE8	; 232
    1624:	91 e2       	ldi	r25, 0x21	; 33
    1626:	d0 d5       	rcall	.+2976   	; 0x21c8 <udd_set_setup_payload>
    1628:	dc c1       	rjmp	.+952    	; 0x19e2 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	e1 f5       	brne	.+120    	; 0x16a6 <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    162e:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1632:	9a 30       	cpi	r25, 0x0A	; 10
    1634:	c1 f5       	brne	.+112    	; 0x16a6 <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1636:	21 30       	cpi	r18, 0x01	; 1
    1638:	31 05       	cpc	r19, r1
    163a:	09 f0       	breq	.+2      	; 0x163e <udc_process_setup+0x18c>
    163c:	4c c1       	rjmp	.+664    	; 0x18d6 <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    163e:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    1642:	88 23       	and	r24, r24
    1644:	09 f4       	brne	.+2      	; 0x1648 <udc_process_setup+0x196>
    1646:	47 c1       	rjmp	.+654    	; 0x18d6 <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1648:	c0 91 bd 23 	lds	r28, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    164c:	d0 91 be 23 	lds	r29, 0x23BE	; 0x8023be <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1650:	00 91 e6 21 	lds	r16, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    1654:	10 91 e7 21 	lds	r17, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1658:	d8 01       	movw	r26, r16
    165a:	ed 91       	ld	r30, X+
    165c:	fc 91       	ld	r31, X
    165e:	84 81       	ldd	r24, Z+4	; 0x04
    1660:	c8 17       	cp	r28, r24
    1662:	08 f0       	brcs	.+2      	; 0x1666 <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1664:	38 c1       	rjmp	.+624    	; 0x18d6 <udc_process_setup+0x424>
    1666:	60 e0       	ldi	r22, 0x00	; 0
    1668:	8c 2f       	mov	r24, r28
    166a:	14 de       	rcall	.-984    	; 0x1294 <udc_update_iface_desc>
    166c:	88 23       	and	r24, r24
    166e:	09 f4       	brne	.+2      	; 0x1672 <udc_process_setup+0x1c0>
    1670:	2d c1       	rjmp	.+602    	; 0x18cc <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1672:	ce 01       	movw	r24, r28
    1674:	99 27       	eor	r25, r25
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	d8 01       	movw	r26, r16
    167c:	12 96       	adiw	r26, 0x02	; 2
    167e:	ed 91       	ld	r30, X+
    1680:	fc 91       	ld	r31, X
    1682:	13 97       	sbiw	r26, 0x03	; 3
    1684:	e8 0f       	add	r30, r24
    1686:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1688:	01 90       	ld	r0, Z+
    168a:	f0 81       	ld	r31, Z
    168c:	e0 2d       	mov	r30, r0
    168e:	86 81       	ldd	r24, Z+6	; 0x06
    1690:	97 81       	ldd	r25, Z+7	; 0x07
    1692:	fc 01       	movw	r30, r24
    1694:	19 95       	eicall
    1696:	80 93 ea 21 	sts	0x21EA, r24	; 0x8021ea <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    169a:	61 e0       	ldi	r22, 0x01	; 1
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	8a ee       	ldi	r24, 0xEA	; 234
    16a0:	91 e2       	ldi	r25, 0x21	; 33
    16a2:	92 d5       	rcall	.+2852   	; 0x21c8 <udd_set_setup_payload>
    16a4:	9e c1       	rjmp	.+828    	; 0x19e2 <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    16a6:	82 30       	cpi	r24, 0x02	; 2
    16a8:	09 f0       	breq	.+2      	; 0x16ac <udc_process_setup+0x1fa>
    16aa:	10 c1       	rjmp	.+544    	; 0x18cc <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    16ac:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    16b0:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    16b2:	05 c1       	rjmp	.+522    	; 0x18be <udc_process_setup+0x40c>
    16b4:	22 30       	cpi	r18, 0x02	; 2
    16b6:	31 05       	cpc	r19, r1
    16b8:	09 f0       	breq	.+2      	; 0x16bc <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    16ba:	3d c1       	rjmp	.+634    	; 0x1936 <udc_process_setup+0x484>
    16bc:	80 91 bd 23 	lds	r24, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    16c0:	12 d6       	rcall	.+3108   	; 0x22e6 <udd_ep_is_halted>
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	80 93 e2 21 	sts	0x21E2, r24	; 0x8021e2 <udc_ep_status.4569>
    16c8:	90 93 e3 21 	sts	0x21E3, r25	; 0x8021e3 <udc_ep_status.4569+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    16cc:	62 e0       	ldi	r22, 0x02	; 2
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	82 ee       	ldi	r24, 0xE2	; 226
    16d2:	91 e2       	ldi	r25, 0x21	; 33
    16d4:	79 d5       	rcall	.+2802   	; 0x21c8 <udd_set_setup_payload>
    16d6:	85 c1       	rjmp	.+778    	; 0x19e2 <udc_process_setup+0x530>
    16d8:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    16da:	09 f0       	breq	.+2      	; 0x16de <udc_process_setup+0x22c>
    16dc:	9f c0       	rjmp	.+318    	; 0x181c <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    16de:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    16e2:	93 30       	cpi	r25, 0x03	; 3
    16e4:	91 f1       	breq	.+100    	; 0x174a <udc_process_setup+0x298>
    16e6:	18 f4       	brcc	.+6      	; 0x16ee <udc_process_setup+0x23c>
    16e8:	91 30       	cpi	r25, 0x01	; 1
    16ea:	a9 f0       	breq	.+42     	; 0x1716 <udc_process_setup+0x264>
    16ec:	97 c0       	rjmp	.+302    	; 0x181c <udc_process_setup+0x36a>
    16ee:	95 30       	cpi	r25, 0x05	; 5
    16f0:	21 f0       	breq	.+8      	; 0x16fa <udc_process_setup+0x248>
    16f2:	99 30       	cpi	r25, 0x09	; 9
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <udc_process_setup+0x246>
    16f6:	43 c0       	rjmp	.+134    	; 0x177e <udc_process_setup+0x2cc>
    16f8:	91 c0       	rjmp	.+290    	; 0x181c <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    16fa:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    16fe:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1702:	89 2b       	or	r24, r25
    1704:	09 f0       	breq	.+2      	; 0x1708 <udc_process_setup+0x256>
    1706:	17 c1       	rjmp	.+558    	; 0x1936 <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1708:	85 e4       	ldi	r24, 0x45	; 69
    170a:	99 e0       	ldi	r25, 0x09	; 9
    170c:	80 93 c5 23 	sts	0x23C5, r24	; 0x8023c5 <udd_g_ctrlreq+0xc>
    1710:	90 93 c6 23 	sts	0x23C6, r25	; 0x8023c6 <udd_g_ctrlreq+0xd>
    1714:	66 c1       	rjmp	.+716    	; 0x19e2 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1716:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    171a:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    171e:	89 2b       	or	r24, r25
    1720:	09 f0       	breq	.+2      	; 0x1724 <udc_process_setup+0x272>
    1722:	09 c1       	rjmp	.+530    	; 0x1936 <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1724:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1728:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	09 f0       	breq	.+2      	; 0x1732 <udc_process_setup+0x280>
    1730:	02 c1       	rjmp	.+516    	; 0x1936 <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1732:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <udc_device_status>
    1736:	90 91 ed 21 	lds	r25, 0x21ED	; 0x8021ed <udc_device_status+0x1>
    173a:	8d 7f       	andi	r24, 0xFD	; 253
    173c:	80 93 ec 21 	sts	0x21EC, r24	; 0x8021ec <udc_device_status>
    1740:	90 93 ed 21 	sts	0x21ED, r25	; 0x8021ed <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    1744:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <main_remotewakeup_disable>
    1748:	4c c1       	rjmp	.+664    	; 0x19e2 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    174a:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    174e:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1752:	89 2b       	or	r24, r25
    1754:	09 f0       	breq	.+2      	; 0x1758 <udc_process_setup+0x2a6>
    1756:	ef c0       	rjmp	.+478    	; 0x1936 <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1758:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    175c:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	09 f0       	breq	.+2      	; 0x1766 <udc_process_setup+0x2b4>
    1764:	ae c0       	rjmp	.+348    	; 0x18c2 <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    1766:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <udc_device_status>
    176a:	90 91 ed 21 	lds	r25, 0x21ED	; 0x8021ed <udc_device_status+0x1>
    176e:	82 60       	ori	r24, 0x02	; 2
    1770:	80 93 ec 21 	sts	0x21EC, r24	; 0x8021ec <udc_device_status>
    1774:	90 93 ed 21 	sts	0x21ED, r25	; 0x8021ed <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    1778:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    177c:	32 c1       	rjmp	.+612    	; 0x19e2 <udc_process_setup+0x530>
    177e:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1782:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1786:	89 2b       	or	r24, r25
    1788:	09 f0       	breq	.+2      	; 0x178c <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    178a:	d5 c0       	rjmp	.+426    	; 0x1936 <udc_process_setup+0x484>
    178c:	1a d5       	rcall	.+2612   	; 0x21c2 <udd_getaddress>
    178e:	88 23       	and	r24, r24
    1790:	09 f4       	brne	.+2      	; 0x1794 <udc_process_setup+0x2e2>
    1792:	9c c0       	rjmp	.+312    	; 0x18cc <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1794:	20 91 bb 23 	lds	r18, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1798:	30 91 bc 23 	lds	r19, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    179c:	33 27       	eor	r19, r19
    179e:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    17a2:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    17a6:	81 89       	ldd	r24, Z+17	; 0x11
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	82 17       	cp	r24, r18
    17ac:	93 07       	cpc	r25, r19
    17ae:	08 f4       	brcc	.+2      	; 0x17b2 <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    17b0:	8d c0       	rjmp	.+282    	; 0x18cc <udc_process_setup+0x41a>
    17b2:	25 de       	rcall	.-950    	; 0x13fe <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    17b4:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    17b8:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    17bc:	80 93 e8 21 	sts	0x21E8, r24	; 0x8021e8 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    17c0:	88 23       	and	r24, r24
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <udc_process_setup+0x314>
    17c4:	0e c1       	rjmp	.+540    	; 0x19e2 <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    17c6:	99 27       	eor	r25, r25
    17c8:	81 50       	subi	r24, 0x01	; 1
    17ca:	90 4c       	sbci	r25, 0xC0	; 192
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    17d8:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    17dc:	e8 0f       	add	r30, r24
    17de:	f9 1f       	adc	r31, r25
    17e0:	e0 93 e6 21 	sts	0x21E6, r30	; 0x8021e6 <udc_ptr_conf>
    17e4:	f0 93 e7 21 	sts	0x21E7, r31	; 0x8021e7 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    17e8:	01 90       	ld	r0, Z+
    17ea:	f0 81       	ld	r31, Z
    17ec:	e0 2d       	mov	r30, r0
    17ee:	84 81       	ldd	r24, Z+4	; 0x04
    17f0:	88 23       	and	r24, r24
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <udc_process_setup+0x344>
    17f4:	f6 c0       	rjmp	.+492    	; 0x19e2 <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    17f6:	c0 e0       	ldi	r28, 0x00	; 0
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	8c 2f       	mov	r24, r28
    17fc:	c7 dd       	rcall	.-1138   	; 0x138c <udc_iface_enable>
    17fe:	88 23       	and	r24, r24
    1800:	09 f4       	brne	.+2      	; 0x1804 <udc_process_setup+0x352>
    1802:	64 c0       	rjmp	.+200    	; 0x18cc <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1804:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1806:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    180a:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    180e:	01 90       	ld	r0, Z+
    1810:	f0 81       	ld	r31, Z
    1812:	e0 2d       	mov	r30, r0
    1814:	84 81       	ldd	r24, Z+4	; 0x04
    1816:	c8 17       	cp	r28, r24
    1818:	78 f3       	brcs	.-34     	; 0x17f8 <udc_process_setup+0x346>
    181a:	e3 c0       	rjmp	.+454    	; 0x19e2 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	e9 f4       	brne	.+58     	; 0x185a <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1820:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1824:	9b 30       	cpi	r25, 0x0B	; 11
    1826:	c9 f4       	brne	.+50     	; 0x185a <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1828:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    182c:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1830:	89 2b       	or	r24, r25
    1832:	09 f0       	breq	.+2      	; 0x1836 <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1834:	50 c0       	rjmp	.+160    	; 0x18d6 <udc_process_setup+0x424>
    1836:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    183a:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    183c:	09 f4       	brne	.+2      	; 0x1840 <udc_process_setup+0x38e>
    183e:	4b c0       	rjmp	.+150    	; 0x18d6 <udc_process_setup+0x424>
    1840:	e9 eb       	ldi	r30, 0xB9	; 185
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1842:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1844:	c4 81       	ldd	r28, Z+4	; 0x04
    1846:	d2 81       	ldd	r29, Z+2	; 0x02
    1848:	8c 2f       	mov	r24, r28
    184a:	5e dd       	rcall	.-1348   	; 0x1308 <udc_iface_disable>
    184c:	88 23       	and	r24, r24
    184e:	09 f4       	brne	.+2      	; 0x1852 <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1850:	3d c0       	rjmp	.+122    	; 0x18cc <udc_process_setup+0x41a>
    1852:	6d 2f       	mov	r22, r29
    1854:	8c 2f       	mov	r24, r28
    1856:	9a dd       	rcall	.-1228   	; 0x138c <udc_iface_enable>
    1858:	37 c0       	rjmp	.+110    	; 0x18c8 <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    185a:	82 30       	cpi	r24, 0x02	; 2
    185c:	b9 f5       	brne	.+110    	; 0x18cc <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    185e:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	19 f0       	breq	.+6      	; 0x186c <udc_process_setup+0x3ba>
    1866:	83 30       	cpi	r24, 0x03	; 3
    1868:	99 f0       	breq	.+38     	; 0x1890 <udc_process_setup+0x3de>
    186a:	2d c0       	rjmp	.+90     	; 0x18c6 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    186c:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1870:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1874:	89 2b       	or	r24, r25
    1876:	09 f0       	breq	.+2      	; 0x187a <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1878:	5e c0       	rjmp	.+188    	; 0x1936 <udc_process_setup+0x484>
    187a:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    187e:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    1882:	89 2b       	or	r24, r25
    1884:	09 f0       	breq	.+2      	; 0x1888 <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1886:	57 c0       	rjmp	.+174    	; 0x1936 <udc_process_setup+0x484>
    1888:	80 91 bd 23 	lds	r24, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    188c:	47 d5       	rcall	.+2702   	; 0x231c <udd_ep_clear_halt>
    188e:	1c c0       	rjmp	.+56     	; 0x18c8 <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1890:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1894:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1898:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    189a:	09 f0       	breq	.+2      	; 0x189e <udc_process_setup+0x3ec>
    189c:	4c c0       	rjmp	.+152    	; 0x1936 <udc_process_setup+0x484>
    189e:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    18a2:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    18a6:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    18a8:	09 f0       	breq	.+2      	; 0x18ac <udc_process_setup+0x3fa>
    18aa:	45 c0       	rjmp	.+138    	; 0x1936 <udc_process_setup+0x484>
    18ac:	c9 eb       	ldi	r28, 0xB9	; 185
    18ae:	d3 e2       	ldi	r29, 0x23	; 35
    18b0:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    18b2:	35 d6       	rcall	.+3178   	; 0x251e <udd_ep_abort>
    18b4:	8c 81       	ldd	r24, Y+4	; 0x04
    18b6:	9e d6       	rcall	.+3388   	; 0x25f4 <udd_ep_set_halt>
    18b8:	07 c0       	rjmp	.+14     	; 0x18c8 <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	05 c0       	rjmp	.+10     	; 0x18c8 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	03 c0       	rjmp	.+6      	; 0x18c8 <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    18c6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    18c8:	81 11       	cpse	r24, r1
    18ca:	8c c0       	rjmp	.+280    	; 0x19e4 <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    18cc:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    18d0:	8f 71       	andi	r24, 0x1F	; 31
    18d2:	81 30       	cpi	r24, 0x01	; 1
    18d4:	81 f5       	brne	.+96     	; 0x1936 <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    18d6:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    18da:	88 23       	and	r24, r24
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18de:	71 c0       	rjmp	.+226    	; 0x19c2 <udc_process_setup+0x510>
    18e0:	00 91 bd 23 	lds	r16, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    18e4:	10 91 be 23 	lds	r17, 0x23BE	; 0x8023be <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    18e8:	c0 91 e6 21 	lds	r28, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    18ec:	d0 91 e7 21 	lds	r29, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    18f0:	e8 81       	ld	r30, Y
    18f2:	f9 81       	ldd	r31, Y+1	; 0x01
    18f4:	84 81       	ldd	r24, Z+4	; 0x04
    18f6:	08 17       	cp	r16, r24
    18f8:	08 f0       	brcs	.+2      	; 0x18fc <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    18fa:	65 c0       	rjmp	.+202    	; 0x19c6 <udc_process_setup+0x514>
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	80 2f       	mov	r24, r16
    1900:	c9 dc       	rcall	.-1646   	; 0x1294 <udc_update_iface_desc>
    1902:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1904:	c1 f0       	breq	.+48     	; 0x1936 <udc_process_setup+0x484>
    1906:	f8 01       	movw	r30, r16
    1908:	ff 27       	eor	r31, r31
    190a:	cf 01       	movw	r24, r30
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	ea 81       	ldd	r30, Y+2	; 0x02
    1912:	fb 81       	ldd	r31, Y+3	; 0x03
    1914:	e8 0f       	add	r30, r24
    1916:	f9 1f       	adc	r31, r25
    1918:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    191a:	d1 81       	ldd	r29, Z+1	; 0x01
    191c:	ee 81       	ldd	r30, Y+6	; 0x06
    191e:	ff 81       	ldd	r31, Y+7	; 0x07
    1920:	19 95       	eicall
    1922:	68 2f       	mov	r22, r24
    1924:	80 2f       	mov	r24, r16
    1926:	b6 dc       	rcall	.-1684   	; 0x1294 <udc_update_iface_desc>
    1928:	88 23       	and	r24, r24
    192a:	29 f0       	breq	.+10     	; 0x1936 <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    192c:	ec 81       	ldd	r30, Y+4	; 0x04
    192e:	fd 81       	ldd	r31, Y+5	; 0x05
    1930:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1932:	81 11       	cpse	r24, r1
    1934:	57 c0       	rjmp	.+174    	; 0x19e4 <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1936:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    193a:	8f 71       	andi	r24, 0x1F	; 31
    193c:	82 30       	cpi	r24, 0x02	; 2
    193e:	09 f0       	breq	.+2      	; 0x1942 <udc_process_setup+0x490>
    1940:	44 c0       	rjmp	.+136    	; 0x19ca <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1942:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    1946:	88 23       	and	r24, r24
    1948:	b1 f1       	breq	.+108    	; 0x19b6 <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    194a:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    194e:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1952:	ed 91       	ld	r30, X+
    1954:	fc 91       	ld	r31, X
    1956:	11 97       	sbiw	r26, 0x01	; 1
    1958:	84 81       	ldd	r24, Z+4	; 0x04
    195a:	88 23       	and	r24, r24
    195c:	71 f1       	breq	.+92     	; 0x19ba <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    195e:	c0 e0       	ldi	r28, 0x00	; 0
    1960:	ec 2f       	mov	r30, r28
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	ee 0f       	add	r30, r30
    1966:	ff 1f       	adc	r31, r31
    1968:	12 96       	adiw	r26, 0x02	; 2
    196a:	8d 91       	ld	r24, X+
    196c:	9c 91       	ld	r25, X
    196e:	13 97       	sbiw	r26, 0x03	; 3
    1970:	e8 0f       	add	r30, r24
    1972:	f9 1f       	adc	r31, r25
    1974:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1976:	11 81       	ldd	r17, Z+1	; 0x01
    1978:	d8 01       	movw	r26, r16
    197a:	16 96       	adiw	r26, 0x06	; 6
    197c:	ed 91       	ld	r30, X+
    197e:	fc 91       	ld	r31, X
    1980:	17 97       	sbiw	r26, 0x07	; 7
    1982:	19 95       	eicall
    1984:	68 2f       	mov	r22, r24
    1986:	8c 2f       	mov	r24, r28
    1988:	85 dc       	rcall	.-1782   	; 0x1294 <udc_update_iface_desc>
    198a:	88 23       	and	r24, r24
    198c:	59 f1       	breq	.+86     	; 0x19e4 <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    198e:	d8 01       	movw	r26, r16
    1990:	14 96       	adiw	r26, 0x04	; 4
    1992:	ed 91       	ld	r30, X+
    1994:	fc 91       	ld	r31, X
    1996:	15 97       	sbiw	r26, 0x05	; 5
    1998:	19 95       	eicall
    199a:	81 11       	cpse	r24, r1
    199c:	23 c0       	rjmp	.+70     	; 0x19e4 <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    199e:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19a0:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    19a4:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    19a8:	ed 91       	ld	r30, X+
    19aa:	fc 91       	ld	r31, X
    19ac:	11 97       	sbiw	r26, 0x01	; 1
    19ae:	94 81       	ldd	r25, Z+4	; 0x04
    19b0:	c9 17       	cp	r28, r25
    19b2:	b0 f2       	brcs	.-84     	; 0x1960 <udc_process_setup+0x4ae>
    19b4:	17 c0       	rjmp	.+46     	; 0x19e4 <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	15 c0       	rjmp	.+42     	; 0x19e4 <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	13 c0       	rjmp	.+38     	; 0x19e4 <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	11 c0       	rjmp	.+34     	; 0x19e4 <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <udc_process_setup+0x532>
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	0d c0       	rjmp	.+26     	; 0x19e4 <udc_process_setup+0x532>
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	0b c0       	rjmp	.+22     	; 0x19e4 <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    19ce:	98 2f       	mov	r25, r24
    19d0:	90 76       	andi	r25, 0x60	; 96
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <udc_process_setup+0x524>
    19d4:	7b cf       	rjmp	.-266    	; 0x18cc <udc_process_setup+0x41a>
    19d6:	80 ce       	rjmp	.-768    	; 0x16d8 <udc_process_setup+0x226>
    19d8:	98 2f       	mov	r25, r24
    19da:	90 76       	andi	r25, 0x60	; 96
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <udc_process_setup+0x52e>
    19de:	76 cf       	rjmp	.-276    	; 0x18cc <udc_process_setup+0x41a>
    19e0:	81 cd       	rjmp	.-1278   	; 0x14e4 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	1f 91       	pop	r17
    19ea:	0f 91       	pop	r16
    19ec:	08 95       	ret

000019ee <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    19ee:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    19f2:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    19f4:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    19f6:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    19fa:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    19fc:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1a00:	08 95       	ret

00001a02 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1a02:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1a04:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1a06:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1a08:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1a0a:	60 83       	st	Z, r22
	ret                             // Return to caller
    1a0c:	08 95       	ret

00001a0e <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	1f 92       	push	r1
    1a14:	1f 92       	push	r1
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	81 11       	cpse	r24, r1
    1a1c:	26 c0       	rjmp	.+76     	; 0x1a6a <udd_sleep_mode+0x5c>
    1a1e:	90 91 ac 23 	lds	r25, 0x23AC	; 0x8023ac <udd_b_idle>
    1a22:	99 23       	and	r25, r25
    1a24:	f9 f0       	breq	.+62     	; 0x1a64 <udd_sleep_mode+0x56>
    1a26:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <sleepmgr_locks+0x1>
    1a2a:	91 11       	cpse	r25, r1
    1a2c:	01 c0       	rjmp	.+2      	; 0x1a30 <udd_sleep_mode+0x22>
    1a2e:	ff cf       	rjmp	.-2      	; 0x1a2e <udd_sleep_mode+0x20>
    1a30:	9f b7       	in	r25, 0x3f	; 63
    1a32:	9a 83       	std	Y+2, r25	; 0x02
    1a34:	f8 94       	cli
    1a36:	2a 81       	ldd	r18, Y+2	; 0x02
    1a38:	e3 eb       	ldi	r30, 0xB3	; 179
    1a3a:	f3 e2       	ldi	r31, 0x23	; 35
    1a3c:	91 81       	ldd	r25, Z+1	; 0x01
    1a3e:	91 50       	subi	r25, 0x01	; 1
    1a40:	91 83       	std	Z+1, r25	; 0x01
    1a42:	2f bf       	out	0x3f, r18	; 63
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <udd_sleep_mode+0x56>
    1a46:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <sleepmgr_locks+0x1>
    1a4a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <udd_sleep_mode+0x42>
    1a4e:	ff cf       	rjmp	.-2      	; 0x1a4e <udd_sleep_mode+0x40>
    1a50:	9f b7       	in	r25, 0x3f	; 63
    1a52:	99 83       	std	Y+1, r25	; 0x01
    1a54:	f8 94       	cli
    1a56:	29 81       	ldd	r18, Y+1	; 0x01
    1a58:	e3 eb       	ldi	r30, 0xB3	; 179
    1a5a:	f3 e2       	ldi	r31, 0x23	; 35
    1a5c:	91 81       	ldd	r25, Z+1	; 0x01
    1a5e:	9f 5f       	subi	r25, 0xFF	; 255
    1a60:	91 83       	std	Z+1, r25	; 0x01
    1a62:	2f bf       	out	0x3f, r18	; 63
    1a64:	80 93 ac 23 	sts	0x23AC, r24	; 0x8023ac <udd_b_idle>
    1a68:	05 c0       	rjmp	.+10     	; 0x1a74 <udd_sleep_mode+0x66>
    1a6a:	90 91 ac 23 	lds	r25, 0x23AC	; 0x8023ac <udd_b_idle>
    1a6e:	99 23       	and	r25, r25
    1a70:	51 f3       	breq	.-44     	; 0x1a46 <udd_sleep_mode+0x38>
    1a72:	f8 cf       	rjmp	.-16     	; 0x1a64 <udd_sleep_mode+0x56>
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	08 95       	ret

00001a7e <udd_ctrl_init>:
    1a7e:	0f 93       	push	r16
    1a80:	e8 ec       	ldi	r30, 0xC8	; 200
    1a82:	f4 e0       	ldi	r31, 0x04	; 4
    1a84:	80 81       	ld	r24, Z
    1a86:	8f 7d       	andi	r24, 0xDF	; 223
    1a88:	80 83       	st	Z, r24
    1a8a:	80 81       	ld	r24, Z
    1a8c:	8f 7d       	andi	r24, 0xDF	; 223
    1a8e:	80 83       	st	Z, r24
    1a90:	e0 e6       	ldi	r30, 0x60	; 96
    1a92:	f3 e2       	ldi	r31, 0x23	; 35
    1a94:	02 e0       	ldi	r16, 0x02	; 2
    1a96:	05 93       	las	Z, r16
    1a98:	10 92 62 23 	sts	0x2362, r1	; 0x802362 <udd_sram+0x1e>
    1a9c:	10 92 63 23 	sts	0x2363, r1	; 0x802363 <udd_sram+0x1f>
    1aa0:	00 e2       	ldi	r16, 0x20	; 32
    1aa2:	06 93       	lac	Z, r16
    1aa4:	00 e4       	ldi	r16, 0x40	; 64
    1aa6:	06 93       	lac	Z, r16
    1aa8:	e8 e5       	ldi	r30, 0x58	; 88
    1aaa:	f3 e2       	ldi	r31, 0x23	; 35
    1aac:	00 e4       	ldi	r16, 0x40	; 64
    1aae:	06 93       	lac	Z, r16
    1ab0:	e9 eb       	ldi	r30, 0xB9	; 185
    1ab2:	f3 e2       	ldi	r31, 0x23	; 35
    1ab4:	14 86       	std	Z+12, r1	; 0x0c
    1ab6:	15 86       	std	Z+13, r1	; 0x0d
    1ab8:	16 86       	std	Z+14, r1	; 0x0e
    1aba:	17 86       	std	Z+15, r1	; 0x0f
    1abc:	12 86       	std	Z+10, r1	; 0x0a
    1abe:	13 86       	std	Z+11, r1	; 0x0b
    1ac0:	10 92 43 23 	sts	0x2343, r1	; 0x802343 <udd_ep_control_state>
    1ac4:	0f 91       	pop	r16
    1ac6:	08 95       	ret

00001ac8 <udd_ctrl_stall_data>:
    1ac8:	0f 93       	push	r16
    1aca:	85 e0       	ldi	r24, 0x05	; 5
    1acc:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
    1ad0:	e1 e6       	ldi	r30, 0x61	; 97
    1ad2:	f3 e2       	ldi	r31, 0x23	; 35
    1ad4:	04 e0       	ldi	r16, 0x04	; 4
    1ad6:	05 93       	las	Z, r16
    1ad8:	e9 e5       	ldi	r30, 0x59	; 89
    1ada:	f3 e2       	ldi	r31, 0x23	; 35
    1adc:	04 e0       	ldi	r16, 0x04	; 4
    1ade:	05 93       	las	Z, r16
    1ae0:	0f 91       	pop	r16
    1ae2:	08 95       	ret

00001ae4 <udd_ctrl_send_zlp_in>:
    1ae4:	0f 93       	push	r16
    1ae6:	83 e0       	ldi	r24, 0x03	; 3
    1ae8:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
    1aec:	10 92 62 23 	sts	0x2362, r1	; 0x802362 <udd_sram+0x1e>
    1af0:	10 92 63 23 	sts	0x2363, r1	; 0x802363 <udd_sram+0x1f>
    1af4:	e0 e6       	ldi	r30, 0x60	; 96
    1af6:	f3 e2       	ldi	r31, 0x23	; 35
    1af8:	02 e0       	ldi	r16, 0x02	; 2
    1afa:	06 93       	lac	Z, r16
    1afc:	0f 91       	pop	r16
    1afe:	08 95       	ret

00001b00 <udd_ctrl_endofrequest>:
    1b00:	e0 91 c5 23 	lds	r30, 0x23C5	; 0x8023c5 <udd_g_ctrlreq+0xc>
    1b04:	f0 91 c6 23 	lds	r31, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0xd>
    1b08:	30 97       	sbiw	r30, 0x00	; 0
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <udd_ctrl_endofrequest+0xe>
    1b0c:	19 95       	eicall
    1b0e:	08 95       	ret

00001b10 <udd_ctrl_in_sent>:
    1b10:	0f 93       	push	r16
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_ep_control_state>
    1b1a:	83 30       	cpi	r24, 0x03	; 3
    1b1c:	19 f4       	brne	.+6      	; 0x1b24 <udd_ctrl_in_sent+0x14>
    1b1e:	f0 df       	rcall	.-32     	; 0x1b00 <udd_ctrl_endofrequest>
    1b20:	ae df       	rcall	.-164    	; 0x1a7e <udd_ctrl_init>
    1b22:	5e c0       	rjmp	.+188    	; 0x1be0 <udd_ctrl_in_sent+0xd0>
    1b24:	80 91 3f 23 	lds	r24, 0x233F	; 0x80233f <udd_ctrl_payload_nb_trans>
    1b28:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1b2c:	c0 91 c3 23 	lds	r28, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    1b30:	d0 91 c4 23 	lds	r29, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    1b34:	c8 1b       	sub	r28, r24
    1b36:	d9 0b       	sbc	r29, r25
    1b38:	71 f5       	brne	.+92     	; 0x1b96 <udd_ctrl_in_sent+0x86>
    1b3a:	20 91 41 23 	lds	r18, 0x2341	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    1b3e:	30 91 42 23 	lds	r19, 0x2342	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    1b42:	82 0f       	add	r24, r18
    1b44:	93 1f       	adc	r25, r19
    1b46:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    1b4a:	90 93 42 23 	sts	0x2342, r25	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    1b4e:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1b52:	30 91 c0 23 	lds	r19, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1b56:	82 17       	cp	r24, r18
    1b58:	93 07       	cpc	r25, r19
    1b5a:	21 f0       	breq	.+8      	; 0x1b64 <udd_ctrl_in_sent+0x54>
    1b5c:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <b_shortpacket.5285>
    1b60:	88 23       	and	r24, r24
    1b62:	41 f0       	breq	.+16     	; 0x1b74 <udd_ctrl_in_sent+0x64>
    1b64:	84 e0       	ldi	r24, 0x04	; 4
    1b66:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
    1b6a:	e8 e5       	ldi	r30, 0x58	; 88
    1b6c:	f3 e2       	ldi	r31, 0x23	; 35
    1b6e:	02 e0       	ldi	r16, 0x02	; 2
    1b70:	06 93       	lac	Z, r16
    1b72:	36 c0       	rjmp	.+108    	; 0x1be0 <udd_ctrl_in_sent+0xd0>
    1b74:	e0 91 c7 23 	lds	r30, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0xe>
    1b78:	f0 91 c8 23 	lds	r31, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0xf>
    1b7c:	30 97       	sbiw	r30, 0x00	; 0
    1b7e:	99 f0       	breq	.+38     	; 0x1ba6 <udd_ctrl_in_sent+0x96>
    1b80:	19 95       	eicall
    1b82:	88 23       	and	r24, r24
    1b84:	81 f0       	breq	.+32     	; 0x1ba6 <udd_ctrl_in_sent+0x96>
    1b86:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udd_ctrl_payload_nb_trans>
    1b8a:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1b8e:	c0 91 c3 23 	lds	r28, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    1b92:	d0 91 c4 23 	lds	r29, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    1b96:	c8 30       	cpi	r28, 0x08	; 8
    1b98:	d1 05       	cpc	r29, r1
    1b9a:	28 f0       	brcs	.+10     	; 0x1ba6 <udd_ctrl_in_sent+0x96>
    1b9c:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <b_shortpacket.5285>
    1ba0:	c8 e0       	ldi	r28, 0x08	; 8
    1ba2:	d0 e0       	ldi	r29, 0x00	; 0
    1ba4:	03 c0       	rjmp	.+6      	; 0x1bac <udd_ctrl_in_sent+0x9c>
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <b_shortpacket.5285>
    1bac:	e4 e4       	ldi	r30, 0x44	; 68
    1bae:	f3 e2       	ldi	r31, 0x23	; 35
    1bb0:	c6 8f       	std	Z+30, r28	; 0x1e
    1bb2:	d7 8f       	std	Z+31, r29	; 0x1f
    1bb4:	80 91 3f 23 	lds	r24, 0x233F	; 0x80233f <udd_ctrl_payload_nb_trans>
    1bb8:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1bbc:	20 91 c1 23 	lds	r18, 0x23C1	; 0x8023c1 <udd_g_ctrlreq+0x8>
    1bc0:	30 91 c2 23 	lds	r19, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x9>
    1bc4:	28 0f       	add	r18, r24
    1bc6:	39 1f       	adc	r19, r25
    1bc8:	20 a3       	std	Z+32, r18	; 0x20
    1bca:	31 a3       	std	Z+33, r19	; 0x21
    1bcc:	c8 0f       	add	r28, r24
    1bce:	d9 1f       	adc	r29, r25
    1bd0:	c0 93 3f 23 	sts	0x233F, r28	; 0x80233f <udd_ctrl_payload_nb_trans>
    1bd4:	d0 93 40 23 	sts	0x2340, r29	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1bd8:	e0 e6       	ldi	r30, 0x60	; 96
    1bda:	f3 e2       	ldi	r31, 0x23	; 35
    1bdc:	02 e0       	ldi	r16, 0x02	; 2
    1bde:	06 93       	lac	Z, r16
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	0f 91       	pop	r16
    1be6:	08 95       	ret

00001be8 <udd_ep_get_size>:
    1be8:	fc 01       	movw	r30, r24
    1bea:	81 81       	ldd	r24, Z+1	; 0x01
    1bec:	e8 2f       	mov	r30, r24
    1bee:	e7 70       	andi	r30, 0x07	; 7
    1bf0:	8e 2f       	mov	r24, r30
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	31 97       	sbiw	r30, 0x01	; 1
    1bf8:	e7 30       	cpi	r30, 0x07	; 7
    1bfa:	f1 05       	cpc	r31, r1
    1bfc:	d0 f4       	brcc	.+52     	; 0x1c32 <udd_ep_get_size+0x4a>
    1bfe:	88 27       	eor	r24, r24
    1c00:	e9 5f       	subi	r30, 0xF9	; 249
    1c02:	fe 4f       	sbci	r31, 0xFE	; 254
    1c04:	8f 4f       	sbci	r24, 0xFF	; 255
    1c06:	1f c7       	rjmp	.+3646   	; 0x2a46 <__tablejump2__>
    1c08:	80 e1       	ldi	r24, 0x10	; 16
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	08 95       	ret
    1c0e:	80 e2       	ldi	r24, 0x20	; 32
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	08 95       	ret
    1c14:	80 e4       	ldi	r24, 0x40	; 64
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	08 95       	ret
    1c1a:	80 e8       	ldi	r24, 0x80	; 128
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	08 95       	ret
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	91 e0       	ldi	r25, 0x01	; 1
    1c24:	08 95       	ret
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	92 e0       	ldi	r25, 0x02	; 2
    1c2a:	08 95       	ret
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	93 e0       	ldi	r25, 0x03	; 3
    1c30:	08 95       	ret
    1c32:	88 e0       	ldi	r24, 0x08	; 8
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	08 95       	ret

00001c38 <udd_ep_get_job>:
    1c38:	28 2f       	mov	r18, r24
    1c3a:	2f 70       	andi	r18, 0x0F	; 15
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	22 0f       	add	r18, r18
    1c40:	33 1f       	adc	r19, r19
    1c42:	08 2e       	mov	r0, r24
    1c44:	00 0c       	add	r0, r0
    1c46:	99 0b       	sbc	r25, r25
    1c48:	88 27       	eor	r24, r24
    1c4a:	99 0f       	add	r25, r25
    1c4c:	88 1f       	adc	r24, r24
    1c4e:	99 27       	eor	r25, r25
    1c50:	82 0f       	add	r24, r18
    1c52:	93 1f       	adc	r25, r19
    1c54:	02 97       	sbiw	r24, 0x02	; 2
    1c56:	9c 01       	movw	r18, r24
    1c58:	22 0f       	add	r18, r18
    1c5a:	33 1f       	adc	r19, r19
    1c5c:	22 0f       	add	r18, r18
    1c5e:	33 1f       	adc	r19, r19
    1c60:	22 0f       	add	r18, r18
    1c62:	33 1f       	adc	r19, r19
    1c64:	82 0f       	add	r24, r18
    1c66:	93 1f       	adc	r25, r19
    1c68:	81 51       	subi	r24, 0x11	; 17
    1c6a:	9d 4d       	sbci	r25, 0xDD	; 221
    1c6c:	08 95       	ret

00001c6e <udd_ctrl_interrupt_tc_setup>:
    1c6e:	0f 93       	push	r16
    1c70:	cf 93       	push	r28
    1c72:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1c76:	80 ff       	sbrs	r24, 0
    1c78:	64 c0       	rjmp	.+200    	; 0x1d42 <udd_ctrl_interrupt_tc_setup+0xd4>
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1c80:	e8 e5       	ldi	r30, 0x58	; 88
    1c82:	f3 e2       	ldi	r31, 0x23	; 35
    1c84:	00 e8       	ldi	r16, 0x80	; 128
    1c86:	06 93       	lac	Z, r16
    1c88:	e0 e6       	ldi	r30, 0x60	; 96
    1c8a:	f3 e2       	ldi	r31, 0x23	; 35
    1c8c:	00 e8       	ldi	r16, 0x80	; 128
    1c8e:	06 93       	lac	Z, r16
    1c90:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    1c94:	e8 e5       	ldi	r30, 0x58	; 88
    1c96:	f3 e2       	ldi	r31, 0x23	; 35
    1c98:	00 e1       	ldi	r16, 0x10	; 16
    1c9a:	06 93       	lac	Z, r16
    1c9c:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_ep_control_state>
    1ca0:	88 23       	and	r24, r24
    1ca2:	29 f0       	breq	.+10     	; 0x1cae <udd_ctrl_interrupt_tc_setup+0x40>
    1ca4:	83 50       	subi	r24, 0x03	; 3
    1ca6:	82 30       	cpi	r24, 0x02	; 2
    1ca8:	08 f4       	brcc	.+2      	; 0x1cac <udd_ctrl_interrupt_tc_setup+0x3e>
    1caa:	2a df       	rcall	.-428    	; 0x1b00 <udd_ctrl_endofrequest>
    1cac:	e8 de       	rcall	.-560    	; 0x1a7e <udd_ctrl_init>
    1cae:	80 91 5a 23 	lds	r24, 0x235A	; 0x80235a <udd_sram+0x16>
    1cb2:	90 91 5b 23 	lds	r25, 0x235B	; 0x80235b <udd_sram+0x17>
    1cb6:	08 97       	sbiw	r24, 0x08	; 8
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <udd_ctrl_interrupt_tc_setup+0x4e>
    1cba:	45 c0       	rjmp	.+138    	; 0x1d46 <udd_ctrl_interrupt_tc_setup+0xd8>
    1cbc:	88 e0       	ldi	r24, 0x08	; 8
    1cbe:	e7 e3       	ldi	r30, 0x37	; 55
    1cc0:	f3 e2       	ldi	r31, 0x23	; 35
    1cc2:	a9 eb       	ldi	r26, 0xB9	; 185
    1cc4:	b3 e2       	ldi	r27, 0x23	; 35
    1cc6:	01 90       	ld	r0, Z+
    1cc8:	0d 92       	st	X+, r0
    1cca:	8a 95       	dec	r24
    1ccc:	e1 f7       	brne	.-8      	; 0x1cc6 <udd_ctrl_interrupt_tc_setup+0x58>
    1cce:	e8 ec       	ldi	r30, 0xC8	; 200
    1cd0:	f4 e0       	ldi	r31, 0x04	; 4
    1cd2:	80 81       	ld	r24, Z
    1cd4:	80 62       	ori	r24, 0x20	; 32
    1cd6:	80 83       	st	Z, r24
    1cd8:	80 81       	ld	r24, Z
    1cda:	80 62       	ori	r24, 0x20	; 32
    1cdc:	80 83       	st	Z, r24
    1cde:	e9 db       	rcall	.-2094   	; 0x14b2 <udc_process_setup>
    1ce0:	c8 2f       	mov	r28, r24
    1ce2:	81 11       	cpse	r24, r1
    1ce4:	03 c0       	rjmp	.+6      	; 0x1cec <udd_ctrl_interrupt_tc_setup+0x7e>
    1ce6:	f0 de       	rcall	.-544    	; 0x1ac8 <udd_ctrl_stall_data>
    1ce8:	c1 e0       	ldi	r28, 0x01	; 1
    1cea:	2e c0       	rjmp	.+92     	; 0x1d48 <udd_ctrl_interrupt_tc_setup+0xda>
    1cec:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    1cf0:	88 23       	and	r24, r24
    1cf2:	6c f4       	brge	.+26     	; 0x1d0e <udd_ctrl_interrupt_tc_setup+0xa0>
    1cf4:	10 92 41 23 	sts	0x2341, r1	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    1cf8:	10 92 42 23 	sts	0x2342, r1	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    1cfc:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udd_ctrl_payload_nb_trans>
    1d00:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
    1d0a:	02 df       	rcall	.-508    	; 0x1b10 <udd_ctrl_in_sent>
    1d0c:	1d c0       	rjmp	.+58     	; 0x1d48 <udd_ctrl_interrupt_tc_setup+0xda>
    1d0e:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1d12:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1d16:	89 2b       	or	r24, r25
    1d18:	11 f4       	brne	.+4      	; 0x1d1e <udd_ctrl_interrupt_tc_setup+0xb0>
    1d1a:	e4 de       	rcall	.-568    	; 0x1ae4 <udd_ctrl_send_zlp_in>
    1d1c:	15 c0       	rjmp	.+42     	; 0x1d48 <udd_ctrl_interrupt_tc_setup+0xda>
    1d1e:	10 92 41 23 	sts	0x2341, r1	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    1d22:	10 92 42 23 	sts	0x2342, r1	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    1d26:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udd_ctrl_payload_nb_trans>
    1d2a:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
    1d34:	e8 e5       	ldi	r30, 0x58	; 88
    1d36:	f3 e2       	ldi	r31, 0x23	; 35
    1d38:	02 e0       	ldi	r16, 0x02	; 2
    1d3a:	06 93       	lac	Z, r16
    1d3c:	00 e2       	ldi	r16, 0x20	; 32
    1d3e:	06 93       	lac	Z, r16
    1d40:	03 c0       	rjmp	.+6      	; 0x1d48 <udd_ctrl_interrupt_tc_setup+0xda>
    1d42:	c0 e0       	ldi	r28, 0x00	; 0
    1d44:	01 c0       	rjmp	.+2      	; 0x1d48 <udd_ctrl_interrupt_tc_setup+0xda>
    1d46:	c1 e0       	ldi	r28, 0x01	; 1
    1d48:	8c 2f       	mov	r24, r28
    1d4a:	cf 91       	pop	r28
    1d4c:	0f 91       	pop	r16
    1d4e:	08 95       	ret

00001d50 <udd_ep_trans_complet>:
    1d50:	8f 92       	push	r8
    1d52:	9f 92       	push	r9
    1d54:	af 92       	push	r10
    1d56:	bf 92       	push	r11
    1d58:	df 92       	push	r13
    1d5a:	ef 92       	push	r14
    1d5c:	ff 92       	push	r15
    1d5e:	0f 93       	push	r16
    1d60:	1f 93       	push	r17
    1d62:	cf 93       	push	r28
    1d64:	df 93       	push	r29
    1d66:	d8 2e       	mov	r13, r24
    1d68:	67 df       	rcall	.-306    	; 0x1c38 <udd_ep_get_job>
    1d6a:	8c 01       	movw	r16, r24
    1d6c:	cd 2d       	mov	r28, r13
    1d6e:	cf 70       	andi	r28, 0x0F	; 15
    1d70:	d0 e0       	ldi	r29, 0x00	; 0
    1d72:	ce 01       	movw	r24, r28
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	cd 2d       	mov	r28, r13
    1d7a:	0d 2c       	mov	r0, r13
    1d7c:	00 0c       	add	r0, r0
    1d7e:	dd 0b       	sbc	r29, r29
    1d80:	cc 27       	eor	r28, r28
    1d82:	dd 0f       	add	r29, r29
    1d84:	cc 1f       	adc	r28, r28
    1d86:	dd 27       	eor	r29, r29
    1d88:	c8 0f       	add	r28, r24
    1d8a:	d9 1f       	adc	r29, r25
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	9c 01       	movw	r18, r24
    1d9c:	28 5a       	subi	r18, 0xA8	; 168
    1d9e:	3c 4d       	sbci	r19, 0xDC	; 220
    1da0:	79 01       	movw	r14, r18
    1da2:	c9 01       	movw	r24, r18
    1da4:	21 df       	rcall	.-446    	; 0x1be8 <udd_ep_get_size>
    1da6:	4c 01       	movw	r8, r24
    1da8:	dd 20       	and	r13, r13
    1daa:	0c f0       	brlt	.+2      	; 0x1dae <udd_ep_trans_complet+0x5e>
    1dac:	79 c0       	rjmp	.+242    	; 0x1ea0 <udd_ep_trans_complet+0x150>
    1dae:	fe 01       	movw	r30, r28
    1db0:	ee 0f       	add	r30, r30
    1db2:	ff 1f       	adc	r31, r31
    1db4:	ee 0f       	add	r30, r30
    1db6:	ff 1f       	adc	r31, r31
    1db8:	ee 0f       	add	r30, r30
    1dba:	ff 1f       	adc	r31, r31
    1dbc:	ec 5b       	subi	r30, 0xBC	; 188
    1dbe:	fc 4d       	sbci	r31, 0xDC	; 220
    1dc0:	22 8d       	ldd	r18, Z+26	; 0x1a
    1dc2:	33 8d       	ldd	r19, Z+27	; 0x1b
    1dc4:	d8 01       	movw	r26, r16
    1dc6:	15 96       	adiw	r26, 0x05	; 5
    1dc8:	8d 91       	ld	r24, X+
    1dca:	9c 91       	ld	r25, X
    1dcc:	16 97       	sbiw	r26, 0x06	; 6
    1dce:	82 0f       	add	r24, r18
    1dd0:	93 1f       	adc	r25, r19
    1dd2:	15 96       	adiw	r26, 0x05	; 5
    1dd4:	8d 93       	st	X+, r24
    1dd6:	9c 93       	st	X, r25
    1dd8:	16 97       	sbiw	r26, 0x06	; 6
    1dda:	13 96       	adiw	r26, 0x03	; 3
    1ddc:	2d 91       	ld	r18, X+
    1dde:	3c 91       	ld	r19, X
    1de0:	14 97       	sbiw	r26, 0x04	; 4
    1de2:	82 17       	cp	r24, r18
    1de4:	93 07       	cpc	r25, r19
    1de6:	09 f4       	brne	.+2      	; 0x1dea <udd_ep_trans_complet+0x9a>
    1de8:	45 c0       	rjmp	.+138    	; 0x1e74 <udd_ep_trans_complet+0x124>
    1dea:	28 1b       	sub	r18, r24
    1dec:	39 0b       	sbc	r19, r25
    1dee:	21 15       	cp	r18, r1
    1df0:	b4 e0       	ldi	r27, 0x04	; 4
    1df2:	3b 07       	cpc	r19, r27
    1df4:	38 f0       	brcs	.+14     	; 0x1e04 <udd_ep_trans_complet+0xb4>
    1df6:	2f ef       	ldi	r18, 0xFF	; 255
    1df8:	33 e0       	ldi	r19, 0x03	; 3
    1dfa:	c9 01       	movw	r24, r18
    1dfc:	b4 01       	movw	r22, r8
    1dfe:	0f d6       	rcall	.+3102   	; 0x2a1e <__udivmodhi4>
    1e00:	28 1b       	sub	r18, r24
    1e02:	39 0b       	sbc	r19, r25
    1e04:	f8 01       	movw	r30, r16
    1e06:	80 81       	ld	r24, Z
    1e08:	81 ff       	sbrs	r24, 1
    1e0a:	09 c0       	rjmp	.+18     	; 0x1e1e <udd_ep_trans_complet+0xce>
    1e0c:	c9 01       	movw	r24, r18
    1e0e:	b4 01       	movw	r22, r8
    1e10:	06 d6       	rcall	.+3084   	; 0x2a1e <__udivmodhi4>
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	89 2b       	or	r24, r25
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <udd_ep_trans_complet+0xca>
    1e18:	40 e0       	ldi	r20, 0x00	; 0
    1e1a:	84 2f       	mov	r24, r20
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <udd_ep_trans_complet+0xd0>
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	d8 01       	movw	r26, r16
    1e22:	9c 91       	ld	r25, X
    1e24:	80 fb       	bst	r24, 0
    1e26:	91 f9       	bld	r25, 1
    1e28:	9c 93       	st	X, r25
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	ee 0f       	add	r30, r30
    1e2e:	ff 1f       	adc	r31, r31
    1e30:	ee 0f       	add	r30, r30
    1e32:	ff 1f       	adc	r31, r31
    1e34:	ee 0f       	add	r30, r30
    1e36:	ff 1f       	adc	r31, r31
    1e38:	ec 5b       	subi	r30, 0xBC	; 188
    1e3a:	fc 4d       	sbci	r31, 0xDC	; 220
    1e3c:	12 8e       	std	Z+26, r1	; 0x1a
    1e3e:	13 8e       	std	Z+27, r1	; 0x1b
    1e40:	26 8b       	std	Z+22, r18	; 0x16
    1e42:	37 8b       	std	Z+23, r19	; 0x17
    1e44:	11 96       	adiw	r26, 0x01	; 1
    1e46:	2d 91       	ld	r18, X+
    1e48:	3c 91       	ld	r19, X
    1e4a:	12 97       	sbiw	r26, 0x02	; 2
    1e4c:	15 96       	adiw	r26, 0x05	; 5
    1e4e:	8d 91       	ld	r24, X+
    1e50:	9c 91       	ld	r25, X
    1e52:	16 97       	sbiw	r26, 0x06	; 6
    1e54:	82 0f       	add	r24, r18
    1e56:	93 1f       	adc	r25, r19
    1e58:	cc 0f       	add	r28, r28
    1e5a:	dd 1f       	adc	r29, r29
    1e5c:	cc 0f       	add	r28, r28
    1e5e:	dd 1f       	adc	r29, r29
    1e60:	cc 0f       	add	r28, r28
    1e62:	dd 1f       	adc	r29, r29
    1e64:	c4 5a       	subi	r28, 0xA4	; 164
    1e66:	dc 4d       	sbci	r29, 0xDC	; 220
    1e68:	88 83       	st	Y, r24
    1e6a:	99 83       	std	Y+1, r25	; 0x01
    1e6c:	f7 01       	movw	r30, r14
    1e6e:	02 e0       	ldi	r16, 0x02	; 2
    1e70:	06 93       	lac	Z, r16
    1e72:	e0 c0       	rjmp	.+448    	; 0x2034 <udd_ep_trans_complet+0x2e4>
    1e74:	d8 01       	movw	r26, r16
    1e76:	8c 91       	ld	r24, X
    1e78:	81 ff       	sbrs	r24, 1
    1e7a:	c9 c0       	rjmp	.+402    	; 0x200e <udd_ep_trans_complet+0x2be>
    1e7c:	8d 7f       	andi	r24, 0xFD	; 253
    1e7e:	8c 93       	st	X, r24
    1e80:	cc 0f       	add	r28, r28
    1e82:	dd 1f       	adc	r29, r29
    1e84:	cc 0f       	add	r28, r28
    1e86:	dd 1f       	adc	r29, r29
    1e88:	cc 0f       	add	r28, r28
    1e8a:	dd 1f       	adc	r29, r29
    1e8c:	cc 5b       	subi	r28, 0xBC	; 188
    1e8e:	dc 4d       	sbci	r29, 0xDC	; 220
    1e90:	1a 8e       	std	Y+26, r1	; 0x1a
    1e92:	1b 8e       	std	Y+27, r1	; 0x1b
    1e94:	1e 8a       	std	Y+22, r1	; 0x16
    1e96:	1f 8a       	std	Y+23, r1	; 0x17
    1e98:	f7 01       	movw	r30, r14
    1e9a:	02 e0       	ldi	r16, 0x02	; 2
    1e9c:	06 93       	lac	Z, r16
    1e9e:	ca c0       	rjmp	.+404    	; 0x2034 <udd_ep_trans_complet+0x2e4>
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	ee 0f       	add	r30, r30
    1ea4:	ff 1f       	adc	r31, r31
    1ea6:	ee 0f       	add	r30, r30
    1ea8:	ff 1f       	adc	r31, r31
    1eaa:	ee 0f       	add	r30, r30
    1eac:	ff 1f       	adc	r31, r31
    1eae:	ec 5b       	subi	r30, 0xBC	; 188
    1eb0:	fc 4d       	sbci	r31, 0xDC	; 220
    1eb2:	a6 88       	ldd	r10, Z+22	; 0x16
    1eb4:	b7 88       	ldd	r11, Z+23	; 0x17
    1eb6:	d8 01       	movw	r26, r16
    1eb8:	8c 91       	ld	r24, X
    1eba:	82 ff       	sbrs	r24, 2
    1ebc:	19 c0       	rjmp	.+50     	; 0x1ef0 <udd_ep_trans_complet+0x1a0>
    1ebe:	11 96       	adiw	r26, 0x01	; 1
    1ec0:	ed 91       	ld	r30, X+
    1ec2:	fc 91       	ld	r31, X
    1ec4:	12 97       	sbiw	r26, 0x02	; 2
    1ec6:	15 96       	adiw	r26, 0x05	; 5
    1ec8:	2d 91       	ld	r18, X+
    1eca:	3c 91       	ld	r19, X
    1ecc:	16 97       	sbiw	r26, 0x06	; 6
    1ece:	13 96       	adiw	r26, 0x03	; 3
    1ed0:	8d 91       	ld	r24, X+
    1ed2:	9c 91       	ld	r25, X
    1ed4:	14 97       	sbiw	r26, 0x04	; 4
    1ed6:	b4 01       	movw	r22, r8
    1ed8:	a2 d5       	rcall	.+2884   	; 0x2a1e <__udivmodhi4>
    1eda:	b0 e4       	ldi	r27, 0x40	; 64
    1edc:	db 9e       	mul	r13, r27
    1ede:	b0 01       	movw	r22, r0
    1ee0:	11 24       	eor	r1, r1
    1ee2:	61 55       	subi	r22, 0x51	; 81
    1ee4:	7e 4d       	sbci	r23, 0xDE	; 222
    1ee6:	ac 01       	movw	r20, r24
    1ee8:	cf 01       	movw	r24, r30
    1eea:	82 0f       	add	r24, r18
    1eec:	93 1f       	adc	r25, r19
    1eee:	b3 d5       	rcall	.+2918   	; 0x2a56 <memcpy>
    1ef0:	f8 01       	movw	r30, r16
    1ef2:	25 81       	ldd	r18, Z+5	; 0x05
    1ef4:	36 81       	ldd	r19, Z+6	; 0x06
    1ef6:	2a 0d       	add	r18, r10
    1ef8:	3b 1d       	adc	r19, r11
    1efa:	25 83       	std	Z+5, r18	; 0x05
    1efc:	36 83       	std	Z+6, r19	; 0x06
    1efe:	83 81       	ldd	r24, Z+3	; 0x03
    1f00:	94 81       	ldd	r25, Z+4	; 0x04
    1f02:	82 17       	cp	r24, r18
    1f04:	93 07       	cpc	r25, r19
    1f06:	68 f4       	brcc	.+26     	; 0x1f22 <udd_ep_trans_complet+0x1d2>
    1f08:	85 83       	std	Z+5, r24	; 0x05
    1f0a:	96 83       	std	Z+6, r25	; 0x06
    1f0c:	cc 0f       	add	r28, r28
    1f0e:	dd 1f       	adc	r29, r29
    1f10:	cc 0f       	add	r28, r28
    1f12:	dd 1f       	adc	r29, r29
    1f14:	cc 0f       	add	r28, r28
    1f16:	dd 1f       	adc	r29, r29
    1f18:	cc 5b       	subi	r28, 0xBC	; 188
    1f1a:	dc 4d       	sbci	r29, 0xDC	; 220
    1f1c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f1e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f20:	76 c0       	rjmp	.+236    	; 0x200e <udd_ep_trans_complet+0x2be>
    1f22:	fe 01       	movw	r30, r28
    1f24:	ee 0f       	add	r30, r30
    1f26:	ff 1f       	adc	r31, r31
    1f28:	ee 0f       	add	r30, r30
    1f2a:	ff 1f       	adc	r31, r31
    1f2c:	ee 0f       	add	r30, r30
    1f2e:	ff 1f       	adc	r31, r31
    1f30:	ec 5b       	subi	r30, 0xBC	; 188
    1f32:	fc 4d       	sbci	r31, 0xDC	; 220
    1f34:	42 8d       	ldd	r20, Z+26	; 0x1a
    1f36:	53 8d       	ldd	r21, Z+27	; 0x1b
    1f38:	a4 16       	cp	r10, r20
    1f3a:	b5 06       	cpc	r11, r21
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <udd_ep_trans_complet+0x1f0>
    1f3e:	67 c0       	rjmp	.+206    	; 0x200e <udd_ep_trans_complet+0x2be>
    1f40:	28 17       	cp	r18, r24
    1f42:	39 07       	cpc	r19, r25
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <udd_ep_trans_complet+0x1f8>
    1f46:	63 c0       	rjmp	.+198    	; 0x200e <udd_ep_trans_complet+0x2be>
    1f48:	ac 01       	movw	r20, r24
    1f4a:	42 1b       	sub	r20, r18
    1f4c:	53 0b       	sbc	r21, r19
    1f4e:	9a 01       	movw	r18, r20
    1f50:	21 15       	cp	r18, r1
    1f52:	54 e0       	ldi	r21, 0x04	; 4
    1f54:	35 07       	cpc	r19, r21
    1f56:	40 f0       	brcs	.+16     	; 0x1f68 <udd_ep_trans_complet+0x218>
    1f58:	2f ef       	ldi	r18, 0xFF	; 255
    1f5a:	33 e0       	ldi	r19, 0x03	; 3
    1f5c:	c9 01       	movw	r24, r18
    1f5e:	b4 01       	movw	r22, r8
    1f60:	5e d5       	rcall	.+2748   	; 0x2a1e <__udivmodhi4>
    1f62:	28 1b       	sub	r18, r24
    1f64:	39 0b       	sbc	r19, r25
    1f66:	05 c0       	rjmp	.+10     	; 0x1f72 <udd_ep_trans_complet+0x222>
    1f68:	c9 01       	movw	r24, r18
    1f6a:	b4 01       	movw	r22, r8
    1f6c:	58 d5       	rcall	.+2736   	; 0x2a1e <__udivmodhi4>
    1f6e:	28 1b       	sub	r18, r24
    1f70:	39 0b       	sbc	r19, r25
    1f72:	fe 01       	movw	r30, r28
    1f74:	ee 0f       	add	r30, r30
    1f76:	ff 1f       	adc	r31, r31
    1f78:	ee 0f       	add	r30, r30
    1f7a:	ff 1f       	adc	r31, r31
    1f7c:	ee 0f       	add	r30, r30
    1f7e:	ff 1f       	adc	r31, r31
    1f80:	ec 5b       	subi	r30, 0xBC	; 188
    1f82:	fc 4d       	sbci	r31, 0xDC	; 220
    1f84:	16 8a       	std	Z+22, r1	; 0x16
    1f86:	17 8a       	std	Z+23, r1	; 0x17
    1f88:	28 15       	cp	r18, r8
    1f8a:	39 05       	cpc	r19, r9
    1f8c:	00 f5       	brcc	.+64     	; 0x1fce <udd_ep_trans_complet+0x27e>
    1f8e:	d8 01       	movw	r26, r16
    1f90:	8c 91       	ld	r24, X
    1f92:	84 60       	ori	r24, 0x04	; 4
    1f94:	8c 93       	st	X, r24
    1f96:	b0 e4       	ldi	r27, 0x40	; 64
    1f98:	db 9e       	mul	r13, r27
    1f9a:	c0 01       	movw	r24, r0
    1f9c:	11 24       	eor	r1, r1
    1f9e:	81 55       	subi	r24, 0x51	; 81
    1fa0:	9e 4d       	sbci	r25, 0xDE	; 222
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	ee 0f       	add	r30, r30
    1fa6:	ff 1f       	adc	r31, r31
    1fa8:	ee 0f       	add	r30, r30
    1faa:	ff 1f       	adc	r31, r31
    1fac:	ee 0f       	add	r30, r30
    1fae:	ff 1f       	adc	r31, r31
    1fb0:	e4 5a       	subi	r30, 0xA4	; 164
    1fb2:	fc 4d       	sbci	r31, 0xDC	; 220
    1fb4:	80 83       	st	Z, r24
    1fb6:	91 83       	std	Z+1, r25	; 0x01
    1fb8:	cc 0f       	add	r28, r28
    1fba:	dd 1f       	adc	r29, r29
    1fbc:	cc 0f       	add	r28, r28
    1fbe:	dd 1f       	adc	r29, r29
    1fc0:	cc 0f       	add	r28, r28
    1fc2:	dd 1f       	adc	r29, r29
    1fc4:	cc 5b       	subi	r28, 0xBC	; 188
    1fc6:	dc 4d       	sbci	r29, 0xDC	; 220
    1fc8:	8a 8e       	std	Y+26, r8	; 0x1a
    1fca:	9b 8e       	std	Y+27, r9	; 0x1b
    1fcc:	1c c0       	rjmp	.+56     	; 0x2006 <udd_ep_trans_complet+0x2b6>
    1fce:	f8 01       	movw	r30, r16
    1fd0:	41 81       	ldd	r20, Z+1	; 0x01
    1fd2:	52 81       	ldd	r21, Z+2	; 0x02
    1fd4:	85 81       	ldd	r24, Z+5	; 0x05
    1fd6:	96 81       	ldd	r25, Z+6	; 0x06
    1fd8:	84 0f       	add	r24, r20
    1fda:	95 1f       	adc	r25, r21
    1fdc:	fe 01       	movw	r30, r28
    1fde:	ee 0f       	add	r30, r30
    1fe0:	ff 1f       	adc	r31, r31
    1fe2:	ee 0f       	add	r30, r30
    1fe4:	ff 1f       	adc	r31, r31
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	ff 1f       	adc	r31, r31
    1fea:	e4 5a       	subi	r30, 0xA4	; 164
    1fec:	fc 4d       	sbci	r31, 0xDC	; 220
    1fee:	80 83       	st	Z, r24
    1ff0:	91 83       	std	Z+1, r25	; 0x01
    1ff2:	cc 0f       	add	r28, r28
    1ff4:	dd 1f       	adc	r29, r29
    1ff6:	cc 0f       	add	r28, r28
    1ff8:	dd 1f       	adc	r29, r29
    1ffa:	cc 0f       	add	r28, r28
    1ffc:	dd 1f       	adc	r29, r29
    1ffe:	cc 5b       	subi	r28, 0xBC	; 188
    2000:	dc 4d       	sbci	r29, 0xDC	; 220
    2002:	2a 8f       	std	Y+26, r18	; 0x1a
    2004:	3b 8f       	std	Y+27, r19	; 0x1b
    2006:	f7 01       	movw	r30, r14
    2008:	02 e0       	ldi	r16, 0x02	; 2
    200a:	06 93       	lac	Z, r16
    200c:	13 c0       	rjmp	.+38     	; 0x2034 <udd_ep_trans_complet+0x2e4>
    200e:	d8 01       	movw	r26, r16
    2010:	8c 91       	ld	r24, X
    2012:	80 ff       	sbrs	r24, 0
    2014:	0f c0       	rjmp	.+30     	; 0x2034 <udd_ep_trans_complet+0x2e4>
    2016:	8e 7f       	andi	r24, 0xFE	; 254
    2018:	8c 93       	st	X, r24
    201a:	17 96       	adiw	r26, 0x07	; 7
    201c:	ed 91       	ld	r30, X+
    201e:	fc 91       	ld	r31, X
    2020:	18 97       	sbiw	r26, 0x08	; 8
    2022:	30 97       	sbiw	r30, 0x00	; 0
    2024:	39 f0       	breq	.+14     	; 0x2034 <udd_ep_trans_complet+0x2e4>
    2026:	15 96       	adiw	r26, 0x05	; 5
    2028:	6d 91       	ld	r22, X+
    202a:	7c 91       	ld	r23, X
    202c:	16 97       	sbiw	r26, 0x06	; 6
    202e:	4d 2d       	mov	r20, r13
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	19 95       	eicall
    2034:	df 91       	pop	r29
    2036:	cf 91       	pop	r28
    2038:	1f 91       	pop	r17
    203a:	0f 91       	pop	r16
    203c:	ff 90       	pop	r15
    203e:	ef 90       	pop	r14
    2040:	df 90       	pop	r13
    2042:	bf 90       	pop	r11
    2044:	af 90       	pop	r10
    2046:	9f 90       	pop	r9
    2048:	8f 90       	pop	r8
    204a:	08 95       	ret

0000204c <udd_attach>:
    204c:	1f 93       	push	r17
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	1f 92       	push	r1
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	8f b7       	in	r24, 0x3f	; 63
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	f8 94       	cli
    205e:	19 81       	ldd	r17, Y+1	; 0x01
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	d5 dc       	rcall	.-1622   	; 0x1a0e <udd_sleep_mode>
    2064:	ea ec       	ldi	r30, 0xCA	; 202
    2066:	f4 e0       	ldi	r31, 0x04	; 4
    2068:	80 e4       	ldi	r24, 0x40	; 64
    206a:	80 83       	st	Z, r24
    206c:	80 e2       	ldi	r24, 0x20	; 32
    206e:	80 83       	st	Z, r24
    2070:	e1 ec       	ldi	r30, 0xC1	; 193
    2072:	f4 e0       	ldi	r31, 0x04	; 4
    2074:	80 81       	ld	r24, Z
    2076:	81 60       	ori	r24, 0x01	; 1
    2078:	80 83       	st	Z, r24
    207a:	a9 ec       	ldi	r26, 0xC9	; 201
    207c:	b4 e0       	ldi	r27, 0x04	; 4
    207e:	8c 91       	ld	r24, X
    2080:	82 60       	ori	r24, 0x02	; 2
    2082:	8c 93       	st	X, r24
    2084:	e8 ec       	ldi	r30, 0xC8	; 200
    2086:	f4 e0       	ldi	r31, 0x04	; 4
    2088:	80 81       	ld	r24, Z
    208a:	80 64       	ori	r24, 0x40	; 64
    208c:	80 83       	st	Z, r24
    208e:	8c 91       	ld	r24, X
    2090:	81 60       	ori	r24, 0x01	; 1
    2092:	8c 93       	st	X, r24
    2094:	80 81       	ld	r24, Z
    2096:	80 68       	ori	r24, 0x80	; 128
    2098:	80 83       	st	Z, r24
    209a:	1f bf       	out	0x3f, r17	; 63
    209c:	0f 90       	pop	r0
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	1f 91       	pop	r17
    20a4:	08 95       	ret

000020a6 <udd_enable>:
    20a6:	0f 93       	push	r16
    20a8:	1f 93       	push	r17
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
    20ae:	1f 92       	push	r1
    20b0:	1f 92       	push	r1
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	00 e6       	ldi	r16, 0x60	; 96
    20b8:	10 e0       	ldi	r17, 0x00	; 0
    20ba:	f8 01       	movw	r30, r16
    20bc:	10 82       	st	Z, r1
    20be:	80 e3       	ldi	r24, 0x30	; 48
    20c0:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <sysclk_enable_usb>
    20c4:	e0 ec       	ldi	r30, 0xC0	; 192
    20c6:	f4 e0       	ldi	r31, 0x04	; 4
    20c8:	80 81       	ld	r24, Z
    20ca:	80 64       	ori	r24, 0x40	; 64
    20cc:	80 83       	st	Z, r24
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	f8 01       	movw	r30, r16
    20d2:	80 83       	st	Z, r24
    20d4:	8f b7       	in	r24, 0x3f	; 63
    20d6:	8a 83       	std	Y+2, r24	; 0x02
    20d8:	f8 94       	cli
    20da:	1a 81       	ldd	r17, Y+2	; 0x02
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	fc 01       	movw	r30, r24
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	ee 0f       	add	r30, r30
    20e8:	ff 1f       	adc	r31, r31
    20ea:	ee 0f       	add	r30, r30
    20ec:	ff 1f       	adc	r31, r31
    20ee:	ec 5b       	subi	r30, 0xBC	; 188
    20f0:	fc 4d       	sbci	r31, 0xDC	; 220
    20f2:	15 8a       	std	Z+21, r1	; 0x15
    20f4:	01 96       	adiw	r24, 0x01	; 1
    20f6:	8a 30       	cpi	r24, 0x0A	; 10
    20f8:	91 05       	cpc	r25, r1
    20fa:	91 f7       	brne	.-28     	; 0x20e0 <udd_enable+0x3a>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	fc 01       	movw	r30, r24
    2102:	ee 0f       	add	r30, r30
    2104:	ff 1f       	adc	r31, r31
    2106:	ee 0f       	add	r30, r30
    2108:	ff 1f       	adc	r31, r31
    210a:	ee 0f       	add	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	e8 0f       	add	r30, r24
    2110:	f9 1f       	adc	r31, r25
    2112:	e1 51       	subi	r30, 0x11	; 17
    2114:	fd 4d       	sbci	r31, 0xDD	; 221
    2116:	20 81       	ld	r18, Z
    2118:	2e 7f       	andi	r18, 0xFE	; 254
    211a:	20 83       	st	Z, r18
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	88 30       	cpi	r24, 0x08	; 8
    2120:	91 05       	cpc	r25, r1
    2122:	71 f7       	brne	.-36     	; 0x2100 <udd_enable+0x5a>
    2124:	6a e1       	ldi	r22, 0x1A	; 26
    2126:	70 e0       	ldi	r23, 0x00	; 0
    2128:	82 e0       	ldi	r24, 0x02	; 2
    212a:	61 dc       	rcall	.-1854   	; 0x19ee <nvm_read_byte>
    212c:	8f 3f       	cpi	r24, 0xFF	; 255
    212e:	19 f0       	breq	.+6      	; 0x2136 <udd_enable+0x90>
    2130:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    2134:	03 c0       	rjmp	.+6      	; 0x213c <udd_enable+0x96>
    2136:	8f e1       	ldi	r24, 0x1F	; 31
    2138:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    213c:	6b e1       	ldi	r22, 0x1B	; 27
    213e:	70 e0       	ldi	r23, 0x00	; 0
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	55 dc       	rcall	.-1878   	; 0x19ee <nvm_read_byte>
    2144:	8f 3f       	cpi	r24, 0xFF	; 255
    2146:	19 f0       	breq	.+6      	; 0x214e <udd_enable+0xa8>
    2148:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    214c:	03 c0       	rjmp	.+6      	; 0x2154 <udd_enable+0xae>
    214e:	8f e1       	ldi	r24, 0x1F	; 31
    2150:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    2154:	e0 ec       	ldi	r30, 0xC0	; 192
    2156:	f4 e0       	ldi	r31, 0x04	; 4
    2158:	80 81       	ld	r24, Z
    215a:	84 60       	ori	r24, 0x04	; 4
    215c:	80 83       	st	Z, r24
    215e:	80 81       	ld	r24, Z
    2160:	80 68       	ori	r24, 0x80	; 128
    2162:	80 83       	st	Z, r24
    2164:	80 81       	ld	r24, Z
    2166:	80 61       	ori	r24, 0x10	; 16
    2168:	80 83       	st	Z, r24
    216a:	88 e5       	ldi	r24, 0x58	; 88
    216c:	93 e2       	ldi	r25, 0x23	; 35
    216e:	86 83       	std	Z+6, r24	; 0x06
    2170:	97 83       	std	Z+7, r25	; 0x07
    2172:	80 81       	ld	r24, Z
    2174:	80 62       	ori	r24, 0x20	; 32
    2176:	80 83       	st	Z, r24
    2178:	8f ef       	ldi	r24, 0xFF	; 255
    217a:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    217e:	e8 ec       	ldi	r30, 0xC8	; 200
    2180:	f4 e0       	ldi	r31, 0x04	; 4
    2182:	80 81       	ld	r24, Z
    2184:	81 60       	ori	r24, 0x01	; 1
    2186:	80 83       	st	Z, r24
    2188:	10 92 ac 23 	sts	0x23AC, r1	; 0x8023ac <udd_b_idle>
    218c:	80 91 b8 23 	lds	r24, 0x23B8	; 0x8023b8 <sleepmgr_locks+0x5>
    2190:	8f 3f       	cpi	r24, 0xFF	; 255
    2192:	09 f4       	brne	.+2      	; 0x2196 <udd_enable+0xf0>
    2194:	ff cf       	rjmp	.-2      	; 0x2194 <udd_enable+0xee>
    2196:	8f b7       	in	r24, 0x3f	; 63
    2198:	89 83       	std	Y+1, r24	; 0x01
    219a:	f8 94       	cli
    219c:	99 81       	ldd	r25, Y+1	; 0x01
    219e:	e3 eb       	ldi	r30, 0xB3	; 179
    21a0:	f3 e2       	ldi	r31, 0x23	; 35
    21a2:	85 81       	ldd	r24, Z+5	; 0x05
    21a4:	8f 5f       	subi	r24, 0xFF	; 255
    21a6:	85 83       	std	Z+5, r24	; 0x05
    21a8:	9f bf       	out	0x3f, r25	; 63
    21aa:	50 df       	rcall	.-352    	; 0x204c <udd_attach>
    21ac:	1f bf       	out	0x3f, r17	; 63
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	df 91       	pop	r29
    21b4:	cf 91       	pop	r28
    21b6:	1f 91       	pop	r17
    21b8:	0f 91       	pop	r16
    21ba:	08 95       	ret

000021bc <udd_set_address>:
    21bc:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    21c0:	08 95       	ret

000021c2 <udd_getaddress>:
    21c2:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    21c6:	08 95       	ret

000021c8 <udd_set_setup_payload>:
    21c8:	e9 eb       	ldi	r30, 0xB9	; 185
    21ca:	f3 e2       	ldi	r31, 0x23	; 35
    21cc:	80 87       	std	Z+8, r24	; 0x08
    21ce:	91 87       	std	Z+9, r25	; 0x09
    21d0:	62 87       	std	Z+10, r22	; 0x0a
    21d2:	73 87       	std	Z+11, r23	; 0x0b
    21d4:	08 95       	ret

000021d6 <udd_ep_alloc>:
    21d6:	28 2f       	mov	r18, r24
    21d8:	2f 70       	andi	r18, 0x0F	; 15
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	22 0f       	add	r18, r18
    21de:	33 1f       	adc	r19, r19
    21e0:	08 2e       	mov	r0, r24
    21e2:	00 0c       	add	r0, r0
    21e4:	99 0b       	sbc	r25, r25
    21e6:	88 27       	eor	r24, r24
    21e8:	99 0f       	add	r25, r25
    21ea:	88 1f       	adc	r24, r24
    21ec:	99 27       	eor	r25, r25
    21ee:	82 0f       	add	r24, r18
    21f0:	93 1f       	adc	r25, r19
    21f2:	fc 01       	movw	r30, r24
    21f4:	ee 0f       	add	r30, r30
    21f6:	ff 1f       	adc	r31, r31
    21f8:	ee 0f       	add	r30, r30
    21fa:	ff 1f       	adc	r31, r31
    21fc:	ee 0f       	add	r30, r30
    21fe:	ff 1f       	adc	r31, r31
    2200:	ec 5b       	subi	r30, 0xBC	; 188
    2202:	fc 4d       	sbci	r31, 0xDC	; 220
    2204:	25 89       	ldd	r18, Z+21	; 0x15
    2206:	20 7c       	andi	r18, 0xC0	; 192
    2208:	09 f0       	breq	.+2      	; 0x220c <udd_ep_alloc+0x36>
    220a:	69 c0       	rjmp	.+210    	; 0x22de <udd_ep_alloc+0x108>
    220c:	63 70       	andi	r22, 0x03	; 3
    220e:	61 30       	cpi	r22, 0x01	; 1
    2210:	11 f0       	breq	.+4      	; 0x2216 <udd_ep_alloc+0x40>
    2212:	18 f4       	brcc	.+6      	; 0x221a <udd_ep_alloc+0x44>
    2214:	04 c0       	rjmp	.+8      	; 0x221e <udd_ep_alloc+0x48>
    2216:	60 ec       	ldi	r22, 0xC0	; 192
    2218:	03 c0       	rjmp	.+6      	; 0x2220 <udd_ep_alloc+0x4a>
    221a:	60 e8       	ldi	r22, 0x80	; 128
    221c:	01 c0       	rjmp	.+2      	; 0x2220 <udd_ep_alloc+0x4a>
    221e:	60 e4       	ldi	r22, 0x40	; 64
    2220:	40 38       	cpi	r20, 0x80	; 128
    2222:	51 05       	cpc	r21, r1
    2224:	e9 f0       	breq	.+58     	; 0x2260 <udd_ep_alloc+0x8a>
    2226:	50 f4       	brcc	.+20     	; 0x223c <udd_ep_alloc+0x66>
    2228:	40 32       	cpi	r20, 0x20	; 32
    222a:	51 05       	cpc	r21, r1
    222c:	a9 f0       	breq	.+42     	; 0x2258 <udd_ep_alloc+0x82>
    222e:	40 34       	cpi	r20, 0x40	; 64
    2230:	51 05       	cpc	r21, r1
    2232:	a1 f0       	breq	.+40     	; 0x225c <udd_ep_alloc+0x86>
    2234:	40 31       	cpi	r20, 0x10	; 16
    2236:	51 05       	cpc	r21, r1
    2238:	d9 f4       	brne	.+54     	; 0x2270 <udd_ep_alloc+0x9a>
    223a:	0c c0       	rjmp	.+24     	; 0x2254 <udd_ep_alloc+0x7e>
    223c:	41 15       	cp	r20, r1
    223e:	22 e0       	ldi	r18, 0x02	; 2
    2240:	52 07       	cpc	r21, r18
    2242:	91 f0       	breq	.+36     	; 0x2268 <udd_ep_alloc+0x92>
    2244:	4f 3f       	cpi	r20, 0xFF	; 255
    2246:	23 e0       	ldi	r18, 0x03	; 3
    2248:	52 07       	cpc	r21, r18
    224a:	81 f0       	breq	.+32     	; 0x226c <udd_ep_alloc+0x96>
    224c:	41 15       	cp	r20, r1
    224e:	51 40       	sbci	r21, 0x01	; 1
    2250:	79 f4       	brne	.+30     	; 0x2270 <udd_ep_alloc+0x9a>
    2252:	08 c0       	rjmp	.+16     	; 0x2264 <udd_ep_alloc+0x8e>
    2254:	21 e0       	ldi	r18, 0x01	; 1
    2256:	0d c0       	rjmp	.+26     	; 0x2272 <udd_ep_alloc+0x9c>
    2258:	22 e0       	ldi	r18, 0x02	; 2
    225a:	0b c0       	rjmp	.+22     	; 0x2272 <udd_ep_alloc+0x9c>
    225c:	23 e0       	ldi	r18, 0x03	; 3
    225e:	09 c0       	rjmp	.+18     	; 0x2272 <udd_ep_alloc+0x9c>
    2260:	24 e0       	ldi	r18, 0x04	; 4
    2262:	07 c0       	rjmp	.+14     	; 0x2272 <udd_ep_alloc+0x9c>
    2264:	25 e0       	ldi	r18, 0x05	; 5
    2266:	05 c0       	rjmp	.+10     	; 0x2272 <udd_ep_alloc+0x9c>
    2268:	26 e0       	ldi	r18, 0x06	; 6
    226a:	03 c0       	rjmp	.+6      	; 0x2272 <udd_ep_alloc+0x9c>
    226c:	27 e0       	ldi	r18, 0x07	; 7
    226e:	01 c0       	rjmp	.+2      	; 0x2272 <udd_ep_alloc+0x9c>
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	fc 01       	movw	r30, r24
    2274:	ee 0f       	add	r30, r30
    2276:	ff 1f       	adc	r31, r31
    2278:	ee 0f       	add	r30, r30
    227a:	ff 1f       	adc	r31, r31
    227c:	ee 0f       	add	r30, r30
    227e:	ff 1f       	adc	r31, r31
    2280:	ec 5b       	subi	r30, 0xBC	; 188
    2282:	fc 4d       	sbci	r31, 0xDC	; 220
    2284:	15 8a       	std	Z+21, r1	; 0x15
    2286:	36 e0       	ldi	r19, 0x06	; 6
    2288:	34 8b       	std	Z+20, r19	; 0x14
    228a:	26 2b       	or	r18, r22
    228c:	25 8b       	std	Z+21, r18	; 0x15
    228e:	fc 01       	movw	r30, r24
    2290:	ee 0f       	add	r30, r30
    2292:	ff 1f       	adc	r31, r31
    2294:	ee 0f       	add	r30, r30
    2296:	ff 1f       	adc	r31, r31
    2298:	ee 0f       	add	r30, r30
    229a:	ff 1f       	adc	r31, r31
    229c:	ec 5b       	subi	r30, 0xBC	; 188
    229e:	fc 4d       	sbci	r31, 0xDC	; 220
    22a0:	25 89       	ldd	r18, Z+21	; 0x15
    22a2:	20 7c       	andi	r18, 0xC0	; 192
    22a4:	20 3c       	cpi	r18, 0xC0	; 192
    22a6:	69 f4       	brne	.+26     	; 0x22c2 <udd_ep_alloc+0xec>
    22a8:	fc 01       	movw	r30, r24
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	ee 0f       	add	r30, r30
    22b0:	ff 1f       	adc	r31, r31
    22b2:	ee 0f       	add	r30, r30
    22b4:	ff 1f       	adc	r31, r31
    22b6:	ec 5b       	subi	r30, 0xBC	; 188
    22b8:	fc 4d       	sbci	r31, 0xDC	; 220
    22ba:	25 89       	ldd	r18, Z+21	; 0x15
    22bc:	27 70       	andi	r18, 0x07	; 7
    22be:	27 30       	cpi	r18, 0x07	; 7
    22c0:	81 f0       	breq	.+32     	; 0x22e2 <udd_ep_alloc+0x10c>
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	fc 01       	movw	r30, r24
    22d0:	ec 5b       	subi	r30, 0xBC	; 188
    22d2:	fc 4d       	sbci	r31, 0xDC	; 220
    22d4:	85 89       	ldd	r24, Z+21	; 0x15
    22d6:	80 62       	ori	r24, 0x20	; 32
    22d8:	85 8b       	std	Z+21, r24	; 0x15
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	08 95       	ret
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	08 95       	ret
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	08 95       	ret

000022e6 <udd_ep_is_halted>:
    22e6:	e8 2f       	mov	r30, r24
    22e8:	ef 70       	andi	r30, 0x0F	; 15
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	ee 0f       	add	r30, r30
    22ee:	ff 1f       	adc	r31, r31
    22f0:	08 2e       	mov	r0, r24
    22f2:	00 0c       	add	r0, r0
    22f4:	99 0b       	sbc	r25, r25
    22f6:	88 27       	eor	r24, r24
    22f8:	99 0f       	add	r25, r25
    22fa:	88 1f       	adc	r24, r24
    22fc:	99 27       	eor	r25, r25
    22fe:	e8 0f       	add	r30, r24
    2300:	f9 1f       	adc	r31, r25
    2302:	ee 0f       	add	r30, r30
    2304:	ff 1f       	adc	r31, r31
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	ee 0f       	add	r30, r30
    230c:	ff 1f       	adc	r31, r31
    230e:	ec 5b       	subi	r30, 0xBC	; 188
    2310:	fc 4d       	sbci	r31, 0xDC	; 220
    2312:	85 89       	ldd	r24, Z+21	; 0x15
    2314:	82 fb       	bst	r24, 2
    2316:	88 27       	eor	r24, r24
    2318:	80 f9       	bld	r24, 0
    231a:	08 95       	ret

0000231c <udd_ep_clear_halt>:
    231c:	0f 93       	push	r16
    231e:	28 2f       	mov	r18, r24
    2320:	2f 70       	andi	r18, 0x0F	; 15
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	a9 01       	movw	r20, r18
    2326:	44 0f       	add	r20, r20
    2328:	55 1f       	adc	r21, r21
    232a:	28 2f       	mov	r18, r24
    232c:	08 2e       	mov	r0, r24
    232e:	00 0c       	add	r0, r0
    2330:	33 0b       	sbc	r19, r19
    2332:	22 27       	eor	r18, r18
    2334:	33 0f       	add	r19, r19
    2336:	22 1f       	adc	r18, r18
    2338:	33 27       	eor	r19, r19
    233a:	24 0f       	add	r18, r20
    233c:	35 1f       	adc	r19, r21
    233e:	a9 01       	movw	r20, r18
    2340:	44 0f       	add	r20, r20
    2342:	55 1f       	adc	r21, r21
    2344:	44 0f       	add	r20, r20
    2346:	55 1f       	adc	r21, r21
    2348:	44 0f       	add	r20, r20
    234a:	55 1f       	adc	r21, r21
    234c:	fa 01       	movw	r30, r20
    234e:	e8 5a       	subi	r30, 0xA8	; 168
    2350:	fc 4d       	sbci	r31, 0xDC	; 220
    2352:	01 e0       	ldi	r16, 0x01	; 1
    2354:	06 93       	lac	Z, r16
    2356:	fa 01       	movw	r30, r20
    2358:	ec 5b       	subi	r30, 0xBC	; 188
    235a:	fc 4d       	sbci	r31, 0xDC	; 220
    235c:	95 89       	ldd	r25, Z+21	; 0x15
    235e:	92 ff       	sbrs	r25, 2
    2360:	11 c0       	rjmp	.+34     	; 0x2384 <udd_ep_clear_halt+0x68>
    2362:	fa 01       	movw	r30, r20
    2364:	ec 5b       	subi	r30, 0xBC	; 188
    2366:	fc 4d       	sbci	r31, 0xDC	; 220
    2368:	95 89       	ldd	r25, Z+21	; 0x15
    236a:	9b 7f       	andi	r25, 0xFB	; 251
    236c:	95 8b       	std	Z+21, r25	; 0x15
    236e:	64 dc       	rcall	.-1848   	; 0x1c38 <udd_ep_get_job>
    2370:	fc 01       	movw	r30, r24
    2372:	80 81       	ld	r24, Z
    2374:	80 ff       	sbrs	r24, 0
    2376:	06 c0       	rjmp	.+12     	; 0x2384 <udd_ep_clear_halt+0x68>
    2378:	8e 7f       	andi	r24, 0xFE	; 254
    237a:	80 83       	st	Z, r24
    237c:	07 80       	ldd	r0, Z+7	; 0x07
    237e:	f0 85       	ldd	r31, Z+8	; 0x08
    2380:	e0 2d       	mov	r30, r0
    2382:	19 95       	eicall
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	0f 91       	pop	r16
    2388:	08 95       	ret

0000238a <udd_ep_run>:
    238a:	6f 92       	push	r6
    238c:	7f 92       	push	r7
    238e:	8f 92       	push	r8
    2390:	9f 92       	push	r9
    2392:	af 92       	push	r10
    2394:	bf 92       	push	r11
    2396:	cf 92       	push	r12
    2398:	df 92       	push	r13
    239a:	ef 92       	push	r14
    239c:	ff 92       	push	r15
    239e:	0f 93       	push	r16
    23a0:	1f 93       	push	r17
    23a2:	cf 93       	push	r28
    23a4:	df 93       	push	r29
    23a6:	1f 92       	push	r1
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	78 2e       	mov	r7, r24
    23ae:	66 2e       	mov	r6, r22
    23b0:	4a 01       	movw	r8, r20
    23b2:	59 01       	movw	r10, r18
    23b4:	41 dc       	rcall	.-1918   	; 0x1c38 <udd_ep_get_job>
    23b6:	6c 01       	movw	r12, r24
    23b8:	27 2d       	mov	r18, r7
    23ba:	87 2d       	mov	r24, r7
    23bc:	8f 70       	andi	r24, 0x0F	; 15
    23be:	e8 2e       	mov	r14, r24
    23c0:	f1 2c       	mov	r15, r1
    23c2:	c7 01       	movw	r24, r14
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	e7 2c       	mov	r14, r7
    23ca:	07 2c       	mov	r0, r7
    23cc:	00 0c       	add	r0, r0
    23ce:	ff 08       	sbc	r15, r15
    23d0:	ee 24       	eor	r14, r14
    23d2:	ff 0c       	add	r15, r15
    23d4:	ee 1c       	adc	r14, r14
    23d6:	ff 24       	eor	r15, r15
    23d8:	e8 0e       	add	r14, r24
    23da:	f9 1e       	adc	r15, r25
    23dc:	f7 01       	movw	r30, r14
    23de:	ee 0f       	add	r30, r30
    23e0:	ff 1f       	adc	r31, r31
    23e2:	ee 0f       	add	r30, r30
    23e4:	ff 1f       	adc	r31, r31
    23e6:	ee 0f       	add	r30, r30
    23e8:	ff 1f       	adc	r31, r31
    23ea:	ec 5b       	subi	r30, 0xBC	; 188
    23ec:	fc 4d       	sbci	r31, 0xDC	; 220
    23ee:	85 89       	ldd	r24, Z+21	; 0x15
    23f0:	80 7c       	andi	r24, 0xC0	; 192
    23f2:	09 f4       	brne	.+2      	; 0x23f6 <udd_ep_run+0x6c>
    23f4:	81 c0       	rjmp	.+258    	; 0x24f8 <udd_ep_run+0x16e>
    23f6:	f7 01       	movw	r30, r14
    23f8:	ee 0f       	add	r30, r30
    23fa:	ff 1f       	adc	r31, r31
    23fc:	ee 0f       	add	r30, r30
    23fe:	ff 1f       	adc	r31, r31
    2400:	ee 0f       	add	r30, r30
    2402:	ff 1f       	adc	r31, r31
    2404:	ec 5b       	subi	r30, 0xBC	; 188
    2406:	fc 4d       	sbci	r31, 0xDC	; 220
    2408:	85 89       	ldd	r24, Z+21	; 0x15
    240a:	80 7c       	andi	r24, 0xC0	; 192
    240c:	80 3c       	cpi	r24, 0xC0	; 192
    240e:	61 f0       	breq	.+24     	; 0x2428 <udd_ep_run+0x9e>
    2410:	f7 01       	movw	r30, r14
    2412:	ee 0f       	add	r30, r30
    2414:	ff 1f       	adc	r31, r31
    2416:	ee 0f       	add	r30, r30
    2418:	ff 1f       	adc	r31, r31
    241a:	ee 0f       	add	r30, r30
    241c:	ff 1f       	adc	r31, r31
    241e:	ec 5b       	subi	r30, 0xBC	; 188
    2420:	fc 4d       	sbci	r31, 0xDC	; 220
    2422:	85 89       	ldd	r24, Z+21	; 0x15
    2424:	82 fd       	sbrc	r24, 2
    2426:	6a c0       	rjmp	.+212    	; 0x24fc <udd_ep_run+0x172>
    2428:	8f b7       	in	r24, 0x3f	; 63
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	f8 94       	cli
    242e:	89 81       	ldd	r24, Y+1	; 0x01
    2430:	f6 01       	movw	r30, r12
    2432:	90 81       	ld	r25, Z
    2434:	90 ff       	sbrs	r25, 0
    2436:	03 c0       	rjmp	.+6      	; 0x243e <udd_ep_run+0xb4>
    2438:	8f bf       	out	0x3f, r24	; 63
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	60 c0       	rjmp	.+192    	; 0x24fe <udd_ep_run+0x174>
    243e:	f6 01       	movw	r30, r12
    2440:	90 81       	ld	r25, Z
    2442:	91 60       	ori	r25, 0x01	; 1
    2444:	90 83       	st	Z, r25
    2446:	8f bf       	out	0x3f, r24	; 63
    2448:	81 82       	std	Z+1, r8	; 0x01
    244a:	92 82       	std	Z+2, r9	; 0x02
    244c:	a3 82       	std	Z+3, r10	; 0x03
    244e:	b4 82       	std	Z+4, r11	; 0x04
    2450:	15 82       	std	Z+5, r1	; 0x05
    2452:	16 82       	std	Z+6, r1	; 0x06
    2454:	07 83       	std	Z+7, r16	; 0x07
    2456:	10 87       	std	Z+8, r17	; 0x08
    2458:	61 10       	cpse	r6, r1
    245a:	06 c0       	rjmp	.+12     	; 0x2468 <udd_ep_run+0xde>
    245c:	91 e0       	ldi	r25, 0x01	; 1
    245e:	a1 14       	cp	r10, r1
    2460:	b1 04       	cpc	r11, r1
    2462:	19 f0       	breq	.+6      	; 0x246a <udd_ep_run+0xe0>
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	01 c0       	rjmp	.+2      	; 0x246a <udd_ep_run+0xe0>
    2468:	91 e0       	ldi	r25, 0x01	; 1
    246a:	f6 01       	movw	r30, r12
    246c:	80 81       	ld	r24, Z
    246e:	90 fb       	bst	r25, 0
    2470:	81 f9       	bld	r24, 1
    2472:	8b 7f       	andi	r24, 0xFB	; 251
    2474:	80 83       	st	Z, r24
    2476:	22 23       	and	r18, r18
    2478:	64 f4       	brge	.+24     	; 0x2492 <udd_ep_run+0x108>
    247a:	f7 01       	movw	r30, r14
    247c:	ee 0f       	add	r30, r30
    247e:	ff 1f       	adc	r31, r31
    2480:	ee 0f       	add	r30, r30
    2482:	ff 1f       	adc	r31, r31
    2484:	ee 0f       	add	r30, r30
    2486:	ff 1f       	adc	r31, r31
    2488:	ec 5b       	subi	r30, 0xBC	; 188
    248a:	fc 4d       	sbci	r31, 0xDC	; 220
    248c:	12 8e       	std	Z+26, r1	; 0x1a
    248e:	13 8e       	std	Z+27, r1	; 0x1b
    2490:	2f c0       	rjmp	.+94     	; 0x24f0 <udd_ep_run+0x166>
    2492:	f7 01       	movw	r30, r14
    2494:	ee 0f       	add	r30, r30
    2496:	ff 1f       	adc	r31, r31
    2498:	ee 0f       	add	r30, r30
    249a:	ff 1f       	adc	r31, r31
    249c:	ee 0f       	add	r30, r30
    249e:	ff 1f       	adc	r31, r31
    24a0:	ec 5b       	subi	r30, 0xBC	; 188
    24a2:	fc 4d       	sbci	r31, 0xDC	; 220
    24a4:	85 89       	ldd	r24, Z+21	; 0x15
    24a6:	80 7c       	andi	r24, 0xC0	; 192
    24a8:	80 3c       	cpi	r24, 0xC0	; 192
    24aa:	a9 f4       	brne	.+42     	; 0x24d6 <udd_ep_run+0x14c>
    24ac:	c7 01       	movw	r24, r14
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	88 5a       	subi	r24, 0xA8	; 168
    24bc:	9c 4d       	sbci	r25, 0xDC	; 220
    24be:	94 db       	rcall	.-2264   	; 0x1be8 <udd_ep_get_size>
    24c0:	bc 01       	movw	r22, r24
    24c2:	c5 01       	movw	r24, r10
    24c4:	ac d2       	rcall	.+1368   	; 0x2a1e <__udivmodhi4>
    24c6:	89 2b       	or	r24, r25
    24c8:	31 f0       	breq	.+12     	; 0x24d6 <udd_ep_run+0x14c>
    24ca:	f6 01       	movw	r30, r12
    24cc:	80 81       	ld	r24, Z
    24ce:	8e 7f       	andi	r24, 0xFE	; 254
    24d0:	80 83       	st	Z, r24
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	14 c0       	rjmp	.+40     	; 0x24fe <udd_ep_run+0x174>
    24d6:	f7 01       	movw	r30, r14
    24d8:	ee 0f       	add	r30, r30
    24da:	ff 1f       	adc	r31, r31
    24dc:	ee 0f       	add	r30, r30
    24de:	ff 1f       	adc	r31, r31
    24e0:	ee 0f       	add	r30, r30
    24e2:	ff 1f       	adc	r31, r31
    24e4:	ec 5b       	subi	r30, 0xBC	; 188
    24e6:	fc 4d       	sbci	r31, 0xDC	; 220
    24e8:	16 8a       	std	Z+22, r1	; 0x16
    24ea:	17 8a       	std	Z+23, r1	; 0x17
    24ec:	12 8e       	std	Z+26, r1	; 0x1a
    24ee:	13 8e       	std	Z+27, r1	; 0x1b
    24f0:	87 2d       	mov	r24, r7
    24f2:	2e dc       	rcall	.-1956   	; 0x1d50 <udd_ep_trans_complet>
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	03 c0       	rjmp	.+6      	; 0x24fe <udd_ep_run+0x174>
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	01 c0       	rjmp	.+2      	; 0x24fe <udd_ep_run+0x174>
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	0f 90       	pop	r0
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	1f 91       	pop	r17
    2506:	0f 91       	pop	r16
    2508:	ff 90       	pop	r15
    250a:	ef 90       	pop	r14
    250c:	df 90       	pop	r13
    250e:	cf 90       	pop	r12
    2510:	bf 90       	pop	r11
    2512:	af 90       	pop	r10
    2514:	9f 90       	pop	r9
    2516:	8f 90       	pop	r8
    2518:	7f 90       	pop	r7
    251a:	6f 90       	pop	r6
    251c:	08 95       	ret

0000251e <udd_ep_abort>:
    251e:	ff 92       	push	r15
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	18 2f       	mov	r17, r24
    252a:	c8 2f       	mov	r28, r24
    252c:	cf 70       	andi	r28, 0x0F	; 15
    252e:	d0 e0       	ldi	r29, 0x00	; 0
    2530:	ce 01       	movw	r24, r28
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	c1 2f       	mov	r28, r17
    2538:	01 2e       	mov	r0, r17
    253a:	00 0c       	add	r0, r0
    253c:	dd 0b       	sbc	r29, r29
    253e:	cc 27       	eor	r28, r28
    2540:	dd 0f       	add	r29, r29
    2542:	cc 1f       	adc	r28, r28
    2544:	dd 27       	eor	r29, r29
    2546:	c8 0f       	add	r28, r24
    2548:	d9 1f       	adc	r29, r25
    254a:	81 2f       	mov	r24, r17
    254c:	75 db       	rcall	.-2326   	; 0x1c38 <udd_ep_get_job>
    254e:	dc 01       	movw	r26, r24
    2550:	fe 01       	movw	r30, r28
    2552:	ee 0f       	add	r30, r30
    2554:	ff 1f       	adc	r31, r31
    2556:	ee 0f       	add	r30, r30
    2558:	ff 1f       	adc	r31, r31
    255a:	ee 0f       	add	r30, r30
    255c:	ff 1f       	adc	r31, r31
    255e:	e8 5a       	subi	r30, 0xA8	; 168
    2560:	fc 4d       	sbci	r31, 0xDC	; 220
    2562:	02 e0       	ldi	r16, 0x02	; 2
    2564:	05 93       	las	Z, r16
    2566:	8c 91       	ld	r24, X
    2568:	80 ff       	sbrs	r24, 0
    256a:	22 c0       	rjmp	.+68     	; 0x25b0 <udd_ep_abort+0x92>
    256c:	8e 7f       	andi	r24, 0xFE	; 254
    256e:	8c 93       	st	X, r24
    2570:	17 96       	adiw	r26, 0x07	; 7
    2572:	ed 91       	ld	r30, X+
    2574:	fc 91       	ld	r31, X
    2576:	18 97       	sbiw	r26, 0x08	; 8
    2578:	30 97       	sbiw	r30, 0x00	; 0
    257a:	d1 f0       	breq	.+52     	; 0x25b0 <udd_ep_abort+0x92>
    257c:	11 23       	and	r17, r17
    257e:	5c f4       	brge	.+22     	; 0x2596 <udd_ep_abort+0x78>
    2580:	cc 0f       	add	r28, r28
    2582:	dd 1f       	adc	r29, r29
    2584:	cc 0f       	add	r28, r28
    2586:	dd 1f       	adc	r29, r29
    2588:	cc 0f       	add	r28, r28
    258a:	dd 1f       	adc	r29, r29
    258c:	cc 5b       	subi	r28, 0xBC	; 188
    258e:	dc 4d       	sbci	r29, 0xDC	; 220
    2590:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2592:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2594:	0a c0       	rjmp	.+20     	; 0x25aa <udd_ep_abort+0x8c>
    2596:	cc 0f       	add	r28, r28
    2598:	dd 1f       	adc	r29, r29
    259a:	cc 0f       	add	r28, r28
    259c:	dd 1f       	adc	r29, r29
    259e:	cc 0f       	add	r28, r28
    25a0:	dd 1f       	adc	r29, r29
    25a2:	cc 5b       	subi	r28, 0xBC	; 188
    25a4:	dc 4d       	sbci	r29, 0xDC	; 220
    25a6:	6e 89       	ldd	r22, Y+22	; 0x16
    25a8:	7f 89       	ldd	r23, Y+23	; 0x17
    25aa:	41 2f       	mov	r20, r17
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	19 95       	eicall
    25b0:	df 91       	pop	r29
    25b2:	cf 91       	pop	r28
    25b4:	1f 91       	pop	r17
    25b6:	0f 91       	pop	r16
    25b8:	ff 90       	pop	r15
    25ba:	08 95       	ret

000025bc <udd_ep_free>:
    25bc:	cf 93       	push	r28
    25be:	c8 2f       	mov	r28, r24
    25c0:	ae df       	rcall	.-164    	; 0x251e <udd_ep_abort>
    25c2:	ec 2f       	mov	r30, r28
    25c4:	ef 70       	andi	r30, 0x0F	; 15
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	ee 0f       	add	r30, r30
    25ca:	ff 1f       	adc	r31, r31
    25cc:	8c 2f       	mov	r24, r28
    25ce:	cc 0f       	add	r28, r28
    25d0:	99 0b       	sbc	r25, r25
    25d2:	88 27       	eor	r24, r24
    25d4:	99 0f       	add	r25, r25
    25d6:	88 1f       	adc	r24, r24
    25d8:	99 27       	eor	r25, r25
    25da:	e8 0f       	add	r30, r24
    25dc:	f9 1f       	adc	r31, r25
    25de:	ee 0f       	add	r30, r30
    25e0:	ff 1f       	adc	r31, r31
    25e2:	ee 0f       	add	r30, r30
    25e4:	ff 1f       	adc	r31, r31
    25e6:	ee 0f       	add	r30, r30
    25e8:	ff 1f       	adc	r31, r31
    25ea:	ec 5b       	subi	r30, 0xBC	; 188
    25ec:	fc 4d       	sbci	r31, 0xDC	; 220
    25ee:	15 8a       	std	Z+21, r1	; 0x15
    25f0:	cf 91       	pop	r28
    25f2:	08 95       	ret

000025f4 <udd_ep_set_halt>:
    25f4:	e8 2f       	mov	r30, r24
    25f6:	ef 70       	andi	r30, 0x0F	; 15
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	ee 0f       	add	r30, r30
    25fc:	ff 1f       	adc	r31, r31
    25fe:	28 2f       	mov	r18, r24
    2600:	08 2e       	mov	r0, r24
    2602:	00 0c       	add	r0, r0
    2604:	33 0b       	sbc	r19, r19
    2606:	22 27       	eor	r18, r18
    2608:	33 0f       	add	r19, r19
    260a:	22 1f       	adc	r18, r18
    260c:	33 27       	eor	r19, r19
    260e:	e2 0f       	add	r30, r18
    2610:	f3 1f       	adc	r31, r19
    2612:	ee 0f       	add	r30, r30
    2614:	ff 1f       	adc	r31, r31
    2616:	ee 0f       	add	r30, r30
    2618:	ff 1f       	adc	r31, r31
    261a:	ee 0f       	add	r30, r30
    261c:	ff 1f       	adc	r31, r31
    261e:	ec 5b       	subi	r30, 0xBC	; 188
    2620:	fc 4d       	sbci	r31, 0xDC	; 220
    2622:	95 89       	ldd	r25, Z+21	; 0x15
    2624:	94 60       	ori	r25, 0x04	; 4
    2626:	95 8b       	std	Z+21, r25	; 0x15
    2628:	7a df       	rcall	.-268    	; 0x251e <udd_ep_abort>
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	08 95       	ret

0000262e <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    262e:	1f 92       	push	r1
    2630:	0f 92       	push	r0
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	0f 92       	push	r0
    2636:	11 24       	eor	r1, r1
    2638:	0b b6       	in	r0, 0x3b	; 59
    263a:	0f 92       	push	r0
    263c:	0f 93       	push	r16
    263e:	2f 93       	push	r18
    2640:	3f 93       	push	r19
    2642:	4f 93       	push	r20
    2644:	5f 93       	push	r21
    2646:	6f 93       	push	r22
    2648:	7f 93       	push	r23
    264a:	8f 93       	push	r24
    264c:	9f 93       	push	r25
    264e:	af 93       	push	r26
    2650:	bf 93       	push	r27
    2652:	cf 93       	push	r28
    2654:	ef 93       	push	r30
    2656:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2658:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    265c:	88 23       	and	r24, r24
    265e:	3c f4       	brge	.+14     	; 0x266e <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    2660:	80 e8       	ldi	r24, 0x80	; 128
    2662:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    2666:	0e 94 29 0a 	call	0x1452	; 0x1452 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    266a:	b1 d1       	rcall	.+866    	; 0x29ce <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    266c:	89 c0       	rjmp	.+274    	; 0x2780 <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    266e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2672:	82 ff       	sbrs	r24, 2
    2674:	20 c0       	rjmp	.+64     	; 0x26b6 <__vector_125+0x88>
		udd_ack_underflow_event();
    2676:	84 e0       	ldi	r24, 0x04	; 4
    2678:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    267c:	80 91 60 23 	lds	r24, 0x2360	; 0x802360 <udd_sram+0x1c>
    2680:	86 ff       	sbrs	r24, 6
    2682:	7e c0       	rjmp	.+252    	; 0x2780 <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2684:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    2688:	81 fd       	sbrc	r24, 1
    268a:	7a c0       	rjmp	.+244    	; 0x2780 <__vector_125+0x152>
    268c:	f0 da       	rcall	.-2592   	; 0x1c6e <udd_ctrl_interrupt_tc_setup>
    268e:	81 11       	cpse	r24, r1
    2690:	77 c0       	rjmp	.+238    	; 0x2780 <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2692:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_ep_control_state>
    2696:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2698:	11 f4       	brne	.+4      	; 0x269e <__vector_125+0x70>
    269a:	24 da       	rcall	.-3000   	; 0x1ae4 <udd_ctrl_send_zlp_in>
    269c:	71 c0       	rjmp	.+226    	; 0x2780 <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    269e:	84 30       	cpi	r24, 0x04	; 4
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <__vector_125+0x76>
    26a2:	6e c0       	rjmp	.+220    	; 0x2780 <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    26a4:	e1 e6       	ldi	r30, 0x61	; 97
    26a6:	f3 e2       	ldi	r31, 0x23	; 35
    26a8:	04 e0       	ldi	r16, 0x04	; 4
    26aa:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    26ac:	e9 e5       	ldi	r30, 0x59	; 89
    26ae:	f3 e2       	ldi	r31, 0x23	; 35
    26b0:	04 e0       	ldi	r16, 0x04	; 4
    26b2:	05 93       	las	Z, r16
    26b4:	65 c0       	rjmp	.+202    	; 0x2780 <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    26b6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    26ba:	81 ff       	sbrs	r24, 1
    26bc:	5c c0       	rjmp	.+184    	; 0x2776 <__vector_125+0x148>
		udd_ack_overflow_event();
    26be:	82 e0       	ldi	r24, 0x02	; 2
    26c0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    26c4:	80 91 58 23 	lds	r24, 0x2358	; 0x802358 <udd_sram+0x14>
    26c8:	86 ff       	sbrs	r24, 6
    26ca:	5a c0       	rjmp	.+180    	; 0x2780 <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    26cc:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    26d0:	81 fd       	sbrc	r24, 1
    26d2:	56 c0       	rjmp	.+172    	; 0x2780 <__vector_125+0x152>
    26d4:	cc da       	rcall	.-2664   	; 0x1c6e <udd_ctrl_interrupt_tc_setup>
    26d6:	81 11       	cpse	r24, r1
    26d8:	53 c0       	rjmp	.+166    	; 0x2780 <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    26da:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_ep_control_state>
    26de:	82 30       	cpi	r24, 0x02	; 2
    26e0:	41 f4       	brne	.+16     	; 0x26f2 <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    26e2:	84 e0       	ldi	r24, 0x04	; 4
    26e4:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    26e8:	e8 e5       	ldi	r30, 0x58	; 88
    26ea:	f3 e2       	ldi	r31, 0x23	; 35
    26ec:	02 e0       	ldi	r16, 0x02	; 2
    26ee:	06 93       	lac	Z, r16
    26f0:	47 c0       	rjmp	.+142    	; 0x2780 <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    26f2:	83 30       	cpi	r24, 0x03	; 3
    26f4:	09 f0       	breq	.+2      	; 0x26f8 <__vector_125+0xca>
    26f6:	44 c0       	rjmp	.+136    	; 0x2780 <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    26f8:	e1 e6       	ldi	r30, 0x61	; 97
    26fa:	f3 e2       	ldi	r31, 0x23	; 35
    26fc:	04 e0       	ldi	r16, 0x04	; 4
    26fe:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2700:	e9 e5       	ldi	r30, 0x59	; 89
    2702:	f3 e2       	ldi	r31, 0x23	; 35
    2704:	04 e0       	ldi	r16, 0x04	; 4
    2706:	05 93       	las	Z, r16
    2708:	3b c0       	rjmp	.+118    	; 0x2780 <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    270a:	80 e1       	ldi	r24, 0x10	; 16
    270c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2710:	c1 e0       	ldi	r28, 0x01	; 1
    2712:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    2714:	04 df       	rcall	.-504    	; 0x251e <udd_ep_abort>
    2716:	8c 2f       	mov	r24, r28
    2718:	80 68       	ori	r24, 0x80	; 128
    271a:	01 df       	rcall	.-510    	; 0x251e <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    271c:	cf 5f       	subi	r28, 0xFF	; 255
    271e:	c5 30       	cpi	r28, 0x05	; 5
    2720:	c1 f7       	brne	.-16     	; 0x2712 <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    2722:	0e 94 ff 09 	call	0x13fe	; 0x13fe <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2726:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    272a:	e4 e4       	ldi	r30, 0x44	; 68
    272c:	f3 e2       	ldi	r31, 0x23	; 35
    272e:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    2730:	96 e0       	ldi	r25, 0x06	; 6
    2732:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2734:	80 e4       	ldi	r24, 0x40	; 64
    2736:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2738:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    273a:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    273c:	85 8f       	std	Z+29, r24	; 0x1d
    273e:	87 e3       	ldi	r24, 0x37	; 55
    2740:	93 e2       	ldi	r25, 0x23	; 35
    2742:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    2744:	91 8f       	std	Z+25, r25	; 0x19
    2746:	9b d9       	rcall	.-3274   	; 0x1a7e <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2748:	1b c0       	rjmp	.+54     	; 0x2780 <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    274a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    274e:	86 ff       	sbrs	r24, 6
    2750:	07 c0       	rjmp	.+14     	; 0x2760 <__vector_125+0x132>
    2752:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2754:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2758:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    275a:	59 d9       	rcall	.-3406   	; 0x1a0e <udd_sleep_mode>
    275c:	36 d1       	rcall	.+620    	; 0x29ca <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    275e:	10 c0       	rjmp	.+32     	; 0x2780 <__vector_125+0x152>
    2760:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    2764:	85 ff       	sbrs	r24, 5
    2766:	0c c0       	rjmp	.+24     	; 0x2780 <__vector_125+0x152>
    2768:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    276a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    276e:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2770:	4e d9       	rcall	.-3428   	; 0x1a0e <udd_sleep_mode>
    2772:	2c d1       	rcall	.+600    	; 0x29cc <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    2774:	05 c0       	rjmp	.+10     	; 0x2780 <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2776:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    277a:	84 fd       	sbrc	r24, 4
    277c:	c6 cf       	rjmp	.-116    	; 0x270a <__vector_125+0xdc>
    277e:	e5 cf       	rjmp	.-54     	; 0x274a <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2780:	ff 91       	pop	r31
    2782:	ef 91       	pop	r30
    2784:	cf 91       	pop	r28
    2786:	bf 91       	pop	r27
    2788:	af 91       	pop	r26
    278a:	9f 91       	pop	r25
    278c:	8f 91       	pop	r24
    278e:	7f 91       	pop	r23
    2790:	6f 91       	pop	r22
    2792:	5f 91       	pop	r21
    2794:	4f 91       	pop	r20
    2796:	3f 91       	pop	r19
    2798:	2f 91       	pop	r18
    279a:	0f 91       	pop	r16
    279c:	0f 90       	pop	r0
    279e:	0b be       	out	0x3b, r0	; 59
    27a0:	0f 90       	pop	r0
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	0f 90       	pop	r0
    27a6:	1f 90       	pop	r1
    27a8:	18 95       	reti

000027aa <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    27aa:	1f 92       	push	r1
    27ac:	0f 92       	push	r0
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	0f 92       	push	r0
    27b2:	11 24       	eor	r1, r1
    27b4:	0b b6       	in	r0, 0x3b	; 59
    27b6:	0f 92       	push	r0
    27b8:	0f 93       	push	r16
    27ba:	1f 93       	push	r17
    27bc:	2f 93       	push	r18
    27be:	3f 93       	push	r19
    27c0:	4f 93       	push	r20
    27c2:	5f 93       	push	r21
    27c4:	6f 93       	push	r22
    27c6:	7f 93       	push	r23
    27c8:	8f 93       	push	r24
    27ca:	9f 93       	push	r25
    27cc:	af 93       	push	r26
    27ce:	bf 93       	push	r27
    27d0:	cf 93       	push	r28
    27d2:	df 93       	push	r29
    27d4:	ef 93       	push	r30
    27d6:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    27d8:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    27dc:	81 fd       	sbrc	r24, 1
    27de:	03 c0       	rjmp	.+6      	; 0x27e6 <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    27e0:	46 da       	rcall	.-2932   	; 0x1c6e <udd_ctrl_interrupt_tc_setup>
    27e2:	81 11       	cpse	r24, r1
    27e4:	c3 c0       	rjmp	.+390    	; 0x296c <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    27e6:	82 e0       	ldi	r24, 0x02	; 2
    27e8:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    27ec:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    27f0:	81 95       	neg	r24
    27f2:	88 0f       	add	r24, r24
    27f4:	e8 e5       	ldi	r30, 0x58	; 88
    27f6:	f3 e2       	ldi	r31, 0x23	; 35
    27f8:	e8 1b       	sub	r30, r24
    27fa:	f1 09       	sbc	r31, r1
    27fc:	20 81       	ld	r18, Z
    27fe:	31 81       	ldd	r19, Z+1	; 0x01
    2800:	28 55       	subi	r18, 0x58	; 88
    2802:	33 42       	sbci	r19, 0x23	; 35
    2804:	36 95       	lsr	r19
    2806:	27 95       	ror	r18
    2808:	36 95       	lsr	r19
    280a:	27 95       	ror	r18
    280c:	36 95       	lsr	r19
    280e:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2810:	82 2f       	mov	r24, r18
    2812:	86 95       	lsr	r24
    2814:	20 fd       	sbrc	r18, 0
    2816:	02 c0       	rjmp	.+4      	; 0x281c <__vector_126+0x72>
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	01 c0       	rjmp	.+2      	; 0x281e <__vector_126+0x74>
    281c:	90 e8       	ldi	r25, 0x80	; 128
    281e:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2820:	e8 2f       	mov	r30, r24
    2822:	ef 70       	andi	r30, 0x0F	; 15
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	ee 0f       	add	r30, r30
    2828:	ff 1f       	adc	r31, r31
    282a:	28 2f       	mov	r18, r24
    282c:	08 2e       	mov	r0, r24
    282e:	00 0c       	add	r0, r0
    2830:	33 0b       	sbc	r19, r19
    2832:	22 27       	eor	r18, r18
    2834:	33 0f       	add	r19, r19
    2836:	22 1f       	adc	r18, r18
    2838:	33 27       	eor	r19, r19
    283a:	e2 0f       	add	r30, r18
    283c:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    283e:	df 01       	movw	r26, r30
    2840:	aa 0f       	add	r26, r26
    2842:	bb 1f       	adc	r27, r27
    2844:	aa 0f       	add	r26, r26
    2846:	bb 1f       	adc	r27, r27
    2848:	aa 0f       	add	r26, r26
    284a:	bb 1f       	adc	r27, r27
    284c:	ac 5b       	subi	r26, 0xBC	; 188
    284e:	bc 4d       	sbci	r27, 0xDC	; 220
    2850:	54 96       	adiw	r26, 0x14	; 20
    2852:	9c 91       	ld	r25, X
    2854:	95 ff       	sbrs	r25, 5
    2856:	8a c0       	rjmp	.+276    	; 0x296c <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2858:	ee 0f       	add	r30, r30
    285a:	ff 1f       	adc	r31, r31
    285c:	ee 0f       	add	r30, r30
    285e:	ff 1f       	adc	r31, r31
    2860:	ee 0f       	add	r30, r30
    2862:	ff 1f       	adc	r31, r31
    2864:	e8 5a       	subi	r30, 0xA8	; 168
    2866:	fc 4d       	sbci	r31, 0xDC	; 220
    2868:	00 e2       	ldi	r16, 0x20	; 32
    286a:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    286c:	81 11       	cpse	r24, r1
    286e:	79 c0       	rjmp	.+242    	; 0x2962 <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2870:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_ep_control_state>
    2874:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2876:	19 f4       	brne	.+6      	; 0x287e <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2878:	43 d9       	rcall	.-3450   	; 0x1b00 <udd_ctrl_endofrequest>
    287a:	01 d9       	rcall	.-3582   	; 0x1a7e <udd_ctrl_init>
    287c:	77 c0       	rjmp	.+238    	; 0x296c <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    287e:	00 91 5a 23 	lds	r16, 0x235A	; 0x80235a <udd_sram+0x16>
    2882:	10 91 5b 23 	lds	r17, 0x235B	; 0x80235b <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2886:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    288a:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    288e:	c0 91 3f 23 	lds	r28, 0x233F	; 0x80233f <udd_ctrl_payload_nb_trans>
    2892:	d0 91 40 23 	lds	r29, 0x2340	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    2896:	98 01       	movw	r18, r16
    2898:	2c 0f       	add	r18, r28
    289a:	3d 1f       	adc	r19, r29
    289c:	82 17       	cp	r24, r18
    289e:	93 07       	cpc	r25, r19
    28a0:	18 f4       	brcc	.+6      	; 0x28a8 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    28a2:	8c 01       	movw	r16, r24
    28a4:	0c 1b       	sub	r16, r28
    28a6:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    28a8:	80 91 c1 23 	lds	r24, 0x23C1	; 0x8023c1 <udd_g_ctrlreq+0x8>
    28ac:	90 91 c2 23 	lds	r25, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x9>
    28b0:	a8 01       	movw	r20, r16
    28b2:	67 e3       	ldi	r22, 0x37	; 55
    28b4:	73 e2       	ldi	r23, 0x23	; 35
    28b6:	8c 0f       	add	r24, r28
    28b8:	9d 1f       	adc	r25, r29
    28ba:	cd d0       	rcall	.+410    	; 0x2a56 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    28bc:	c0 0f       	add	r28, r16
    28be:	d1 1f       	adc	r29, r17
    28c0:	c0 93 3f 23 	sts	0x233F, r28	; 0x80233f <udd_ctrl_payload_nb_trans>
    28c4:	d0 93 40 23 	sts	0x2340, r29	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    28c8:	08 30       	cpi	r16, 0x08	; 8
    28ca:	11 05       	cpc	r17, r1
    28cc:	69 f4       	brne	.+26     	; 0x28e8 <__vector_126+0x13e>
    28ce:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    28d2:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    28d6:	8c 0f       	add	r24, r28
    28d8:	9d 1f       	adc	r25, r29
    28da:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    28de:	30 91 c0 23 	lds	r19, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    28e2:	82 17       	cp	r24, r18
    28e4:	93 07       	cpc	r25, r19
    28e6:	80 f0       	brcs	.+32     	; 0x2908 <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    28e8:	e9 eb       	ldi	r30, 0xB9	; 185
    28ea:	f3 e2       	ldi	r31, 0x23	; 35
    28ec:	c2 87       	std	Z+10, r28	; 0x0a
    28ee:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    28f0:	06 84       	ldd	r0, Z+14	; 0x0e
    28f2:	f7 85       	ldd	r31, Z+15	; 0x0f
    28f4:	e0 2d       	mov	r30, r0
    28f6:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    28f8:	29 f0       	breq	.+10     	; 0x2904 <__vector_126+0x15a>
    28fa:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    28fc:	81 11       	cpse	r24, r1
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <__vector_126+0x15a>
    2900:	e3 d8       	rcall	.-3642   	; 0x1ac8 <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2902:	34 c0       	rjmp	.+104    	; 0x296c <__vector_126+0x1c2>
    2904:	ef d8       	rcall	.-3618   	; 0x1ae4 <udd_ctrl_send_zlp_in>
    2906:	32 c0       	rjmp	.+100    	; 0x296c <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2908:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    290c:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    2910:	c8 17       	cp	r28, r24
    2912:	d9 07       	cpc	r29, r25
    2914:	f9 f4       	brne	.+62     	; 0x2954 <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2916:	e0 91 c7 23 	lds	r30, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0xe>
    291a:	f0 91 c8 23 	lds	r31, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0xf>
    291e:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2920:	11 f4       	brne	.+4      	; 0x2926 <__vector_126+0x17c>
    2922:	d2 d8       	rcall	.-3676   	; 0x1ac8 <udd_ctrl_stall_data>
    2924:	23 c0       	rjmp	.+70     	; 0x296c <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2926:	19 95       	eicall
    2928:	81 11       	cpse	r24, r1
    292a:	02 c0       	rjmp	.+4      	; 0x2930 <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    292c:	cd d8       	rcall	.-3686   	; 0x1ac8 <udd_ctrl_stall_data>
    292e:	1e c0       	rjmp	.+60     	; 0x296c <__vector_126+0x1c2>
    2930:	20 91 41 23 	lds	r18, 0x2341	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2934:	30 91 42 23 	lds	r19, 0x2342	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    2938:	80 91 3f 23 	lds	r24, 0x233F	; 0x80233f <udd_ctrl_payload_nb_trans>
    293c:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    2940:	82 0f       	add	r24, r18
    2942:	93 1f       	adc	r25, r19
    2944:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    2948:	90 93 42 23 	sts	0x2342, r25	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    294c:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2950:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    2954:	e8 e5       	ldi	r30, 0x58	; 88
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2956:	f3 e2       	ldi	r31, 0x23	; 35
    2958:	02 e0       	ldi	r16, 0x02	; 2
    295a:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    295c:	00 e2       	ldi	r16, 0x20	; 32
    295e:	06 93       	lac	Z, r16
    2960:	05 c0       	rjmp	.+10     	; 0x296c <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2962:	80 38       	cpi	r24, 0x80	; 128
		udd_ctrl_in_sent();
    2964:	11 f4       	brne	.+4      	; 0x296a <__vector_126+0x1c0>
    2966:	d4 d8       	rcall	.-3672   	; 0x1b10 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2968:	01 c0       	rjmp	.+2      	; 0x296c <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    296a:	f2 d9       	rcall	.-3100   	; 0x1d50 <udd_ep_trans_complet>
    296c:	ff 91       	pop	r31
	}
#endif

udd_interrupt_tc_end:
	return;
}
    296e:	ef 91       	pop	r30
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	bf 91       	pop	r27
    2976:	af 91       	pop	r26
    2978:	9f 91       	pop	r25
    297a:	8f 91       	pop	r24
    297c:	7f 91       	pop	r23
    297e:	6f 91       	pop	r22
    2980:	5f 91       	pop	r21
    2982:	4f 91       	pop	r20
    2984:	3f 91       	pop	r19
    2986:	2f 91       	pop	r18
    2988:	1f 91       	pop	r17
    298a:	0f 91       	pop	r16
    298c:	0f 90       	pop	r0
    298e:	0b be       	out	0x3b, r0	; 59
    2990:	0f 90       	pop	r0
    2992:	0f be       	out	0x3f, r0	; 63
    2994:	0f 90       	pop	r0
    2996:	1f 90       	pop	r1
    2998:	18 95       	reti

0000299a <main>:
static volatile bool main_b_led_enable = false;


int main (void)
{
	irq_initialize_vectors();  // initializes vector table
    299a:	87 e0       	ldi	r24, 0x07	; 7
    299c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();          // enables CPU interrupts
    29a0:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    29a2:	e3 eb       	ldi	r30, 0xB3	; 179
    29a4:	f3 e2       	ldi	r31, 0x23	; 35
    29a6:	10 82       	st	Z, r1
    29a8:	11 82       	std	Z+1, r1	; 0x01
    29aa:	12 82       	std	Z+2, r1	; 0x02
    29ac:	13 82       	std	Z+3, r1	; 0x03
    29ae:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();           // initialize sleep manager
	sysclk_init();             // initialize clock
    29b4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <sysclk_init>

	io_init();                 // initializes board i/o pins
    29b8:	0e 94 8c 01 	call	0x318	; 0x318 <io_init>

	udc_start();               // starts USB device controller
    29bc:	0e 94 fd 09 	call	0x13fa	; 0x13fa <udc_start>

	startupSequence(4);        // pick preferred sequence (1-5)
    29c0:	84 e0       	ldi	r24, 0x04	; 4
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	0e 94 3a 04 	call	0x874	; 0x874 <startupSequence>
    29c8:	ff cf       	rjmp	.-2      	; 0x29c8 <main+0x2e>

000029ca <main_suspend_action>:

	while (true) { }
}

/* -------------------------------- USB -------------------------------- */
void main_suspend_action(void) { }
    29ca:	08 95       	ret

000029cc <main_resume_action>:
void main_resume_action(void) { }
    29cc:	08 95       	ret

000029ce <main_sof_action>:

void main_sof_action(void) {	// called each Start of Frame event (1 ms)
	if (!main_b_kbd_enable)
    29ce:	80 91 af 23 	lds	r24, 0x23AF	; 0x8023af <main_b_kbd_enable>
    29d2:	88 23       	and	r24, r24
    29d4:	39 f0       	breq	.+14     	; 0x29e4 <main_sof_action+0x16>
	return;
	kbd_ui_process();
    29d6:	0e 94 67 06 	call	0xcce	; 0xcce <kbd_ui_process>

	if (!main_b_generic_enable)
    29da:	80 91 ae 23 	lds	r24, 0x23AE	; 0x8023ae <main_b_generic_enable>
    29de:	81 11       	cpse	r24, r1
		return;
	jstk_ui_process();
    29e0:	0c 94 65 06 	jmp	0xcca	; 0xcca <jstk_ui_process>
    29e4:	08 95       	ret

000029e6 <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    29e6:	08 95       	ret

000029e8 <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    29e8:	08 95       	ret

000029ea <main_kbd_enable>:

/* ----------------------------- keyboard ------------------------------ */
bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	80 93 af 23 	sts	0x23AF, r24	; 0x8023af <main_b_kbd_enable>
	return true;
}
    29f0:	08 95       	ret

000029f2 <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    29f2:	10 92 af 23 	sts	0x23AF, r1	; 0x8023af <main_b_kbd_enable>
    29f6:	08 95       	ret

000029f8 <main_generic_enable>:
}

/* ----------------------------- joystick ------------------------------ */
bool main_generic_enable(void) {
	main_b_generic_enable = true;
    29f8:	81 e0       	ldi	r24, 0x01	; 1
    29fa:	80 93 ae 23 	sts	0x23AE, r24	; 0x8023ae <main_b_generic_enable>
	return true;
}
    29fe:	08 95       	ret

00002a00 <main_generic_disable>:

void main_generic_disable(void) {
	main_b_generic_enable = false;
    2a00:	10 92 ae 23 	sts	0x23AE, r1	; 0x8023ae <main_b_generic_enable>
    2a04:	08 95       	ret

00002a06 <main_led_enable>:
}

/* ------------------------------- LEDs -------------------------------- */
bool main_led_enable(void) {
	main_b_led_enable = true;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	80 93 ad 23 	sts	0x23AD, r24	; 0x8023ad <main_b_led_enable>
	return true;
}
    2a0c:	08 95       	ret

00002a0e <main_led_disable>:

void main_led_disable(void) {
	main_b_led_enable = false;
    2a0e:	10 92 ad 23 	sts	0x23AD, r1	; 0x8023ad <main_b_led_enable>
    2a12:	08 95       	ret

00002a14 <main_led_report_out>:
}

void main_led_report_out(uint8_t const *report) {
	led_ui_process(report[0]);
    2a14:	fc 01       	movw	r30, r24
    2a16:	80 81       	ld	r24, Z
    2a18:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <led_ui_process>
    2a1c:	08 95       	ret

00002a1e <__udivmodhi4>:
    2a1e:	aa 1b       	sub	r26, r26
    2a20:	bb 1b       	sub	r27, r27
    2a22:	51 e1       	ldi	r21, 0x11	; 17
    2a24:	07 c0       	rjmp	.+14     	; 0x2a34 <__udivmodhi4_ep>

00002a26 <__udivmodhi4_loop>:
    2a26:	aa 1f       	adc	r26, r26
    2a28:	bb 1f       	adc	r27, r27
    2a2a:	a6 17       	cp	r26, r22
    2a2c:	b7 07       	cpc	r27, r23
    2a2e:	10 f0       	brcs	.+4      	; 0x2a34 <__udivmodhi4_ep>
    2a30:	a6 1b       	sub	r26, r22
    2a32:	b7 0b       	sbc	r27, r23

00002a34 <__udivmodhi4_ep>:
    2a34:	88 1f       	adc	r24, r24
    2a36:	99 1f       	adc	r25, r25
    2a38:	5a 95       	dec	r21
    2a3a:	a9 f7       	brne	.-22     	; 0x2a26 <__udivmodhi4_loop>
    2a3c:	80 95       	com	r24
    2a3e:	90 95       	com	r25
    2a40:	bc 01       	movw	r22, r24
    2a42:	cd 01       	movw	r24, r26
    2a44:	08 95       	ret

00002a46 <__tablejump2__>:
    2a46:	ee 0f       	add	r30, r30
    2a48:	ff 1f       	adc	r31, r31
    2a4a:	88 1f       	adc	r24, r24
    2a4c:	8b bf       	out	0x3b, r24	; 59
    2a4e:	07 90       	elpm	r0, Z+
    2a50:	f6 91       	elpm	r31, Z
    2a52:	e0 2d       	mov	r30, r0
    2a54:	19 94       	eijmp

00002a56 <memcpy>:
    2a56:	fb 01       	movw	r30, r22
    2a58:	dc 01       	movw	r26, r24
    2a5a:	02 c0       	rjmp	.+4      	; 0x2a60 <memcpy+0xa>
    2a5c:	01 90       	ld	r0, Z+
    2a5e:	0d 92       	st	X+, r0
    2a60:	41 50       	subi	r20, 0x01	; 1
    2a62:	50 40       	sbci	r21, 0x00	; 0
    2a64:	d8 f7       	brcc	.-10     	; 0x2a5c <memcpy+0x6>
    2a66:	08 95       	ret

00002a68 <_exit>:
    2a68:	f8 94       	cli

00002a6a <__stop_program>:
    2a6a:	ff cf       	rjmp	.-2      	; 0x2a6a <__stop_program>
