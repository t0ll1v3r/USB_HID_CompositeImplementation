
CompositeImplementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000198  00802000  00002a84  00002b18  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000231  00802198  00802198  00002cb0  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002cb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ce0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000568  00000000  00000000  00002d20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b013  00000000  00000000  00003288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005298  00000000  00000000  0000e29b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a202  00000000  00000000  00013533  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c08  00000000  00000000  0001d738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00036beb  00000000  00000000  0001e340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000337a  00000000  00000000  00054f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c8  00000000  00000000  000582a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000d3ee  00000000  00000000  00058970  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0d c1       	rjmp	.+538    	; 0x21c <__ctors_end>
       2:	00 00       	nop
       4:	2c c1       	rjmp	.+600    	; 0x25e <__bad_interrupt>
       6:	00 00       	nop
       8:	2a c1       	rjmp	.+596    	; 0x25e <__bad_interrupt>
       a:	00 00       	nop
       c:	28 c1       	rjmp	.+592    	; 0x25e <__bad_interrupt>
       e:	00 00       	nop
      10:	26 c1       	rjmp	.+588    	; 0x25e <__bad_interrupt>
      12:	00 00       	nop
      14:	24 c1       	rjmp	.+584    	; 0x25e <__bad_interrupt>
      16:	00 00       	nop
      18:	22 c1       	rjmp	.+580    	; 0x25e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	20 c1       	rjmp	.+576    	; 0x25e <__bad_interrupt>
      1e:	00 00       	nop
      20:	1e c1       	rjmp	.+572    	; 0x25e <__bad_interrupt>
      22:	00 00       	nop
      24:	1c c1       	rjmp	.+568    	; 0x25e <__bad_interrupt>
      26:	00 00       	nop
      28:	1a c1       	rjmp	.+564    	; 0x25e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	18 c1       	rjmp	.+560    	; 0x25e <__bad_interrupt>
      2e:	00 00       	nop
      30:	16 c1       	rjmp	.+556    	; 0x25e <__bad_interrupt>
      32:	00 00       	nop
      34:	14 c1       	rjmp	.+552    	; 0x25e <__bad_interrupt>
      36:	00 00       	nop
      38:	12 c1       	rjmp	.+548    	; 0x25e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	10 c1       	rjmp	.+544    	; 0x25e <__bad_interrupt>
      3e:	00 00       	nop
      40:	0e c1       	rjmp	.+540    	; 0x25e <__bad_interrupt>
      42:	00 00       	nop
      44:	0c c1       	rjmp	.+536    	; 0x25e <__bad_interrupt>
      46:	00 00       	nop
      48:	0a c1       	rjmp	.+532    	; 0x25e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	08 c1       	rjmp	.+528    	; 0x25e <__bad_interrupt>
      4e:	00 00       	nop
      50:	06 c1       	rjmp	.+524    	; 0x25e <__bad_interrupt>
      52:	00 00       	nop
      54:	04 c1       	rjmp	.+520    	; 0x25e <__bad_interrupt>
      56:	00 00       	nop
      58:	02 c1       	rjmp	.+516    	; 0x25e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	00 c1       	rjmp	.+512    	; 0x25e <__bad_interrupt>
      5e:	00 00       	nop
      60:	fe c0       	rjmp	.+508    	; 0x25e <__bad_interrupt>
      62:	00 00       	nop
      64:	fc c0       	rjmp	.+504    	; 0x25e <__bad_interrupt>
      66:	00 00       	nop
      68:	fa c0       	rjmp	.+500    	; 0x25e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f8 c0       	rjmp	.+496    	; 0x25e <__bad_interrupt>
      6e:	00 00       	nop
      70:	f6 c0       	rjmp	.+492    	; 0x25e <__bad_interrupt>
      72:	00 00       	nop
      74:	f4 c0       	rjmp	.+488    	; 0x25e <__bad_interrupt>
      76:	00 00       	nop
      78:	f2 c0       	rjmp	.+484    	; 0x25e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f0 c0       	rjmp	.+480    	; 0x25e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ee c0       	rjmp	.+476    	; 0x25e <__bad_interrupt>
      82:	00 00       	nop
      84:	ec c0       	rjmp	.+472    	; 0x25e <__bad_interrupt>
      86:	00 00       	nop
      88:	ea c0       	rjmp	.+468    	; 0x25e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e8 c0       	rjmp	.+464    	; 0x25e <__bad_interrupt>
      8e:	00 00       	nop
      90:	e6 c0       	rjmp	.+460    	; 0x25e <__bad_interrupt>
      92:	00 00       	nop
      94:	e4 c0       	rjmp	.+456    	; 0x25e <__bad_interrupt>
      96:	00 00       	nop
      98:	e2 c0       	rjmp	.+452    	; 0x25e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e0 c0       	rjmp	.+448    	; 0x25e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	de c0       	rjmp	.+444    	; 0x25e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	dc c0       	rjmp	.+440    	; 0x25e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	da c0       	rjmp	.+436    	; 0x25e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d8 c0       	rjmp	.+432    	; 0x25e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d6 c0       	rjmp	.+428    	; 0x25e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d4 c0       	rjmp	.+424    	; 0x25e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d2 c0       	rjmp	.+420    	; 0x25e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d0 c0       	rjmp	.+416    	; 0x25e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ce c0       	rjmp	.+412    	; 0x25e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	cc c0       	rjmp	.+408    	; 0x25e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ca c0       	rjmp	.+404    	; 0x25e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c8 c0       	rjmp	.+400    	; 0x25e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c6 c0       	rjmp	.+396    	; 0x25e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c4 c0       	rjmp	.+392    	; 0x25e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c2 c0       	rjmp	.+388    	; 0x25e <__bad_interrupt>
      da:	00 00       	nop
      dc:	c0 c0       	rjmp	.+384    	; 0x25e <__bad_interrupt>
      de:	00 00       	nop
      e0:	be c0       	rjmp	.+380    	; 0x25e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bc c0       	rjmp	.+376    	; 0x25e <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ba c0       	rjmp	.+372    	; 0x25e <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b8 c0       	rjmp	.+368    	; 0x25e <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b6 c0       	rjmp	.+364    	; 0x25e <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b4 c0       	rjmp	.+360    	; 0x25e <__bad_interrupt>
      f6:	00 00       	nop
      f8:	b2 c0       	rjmp	.+356    	; 0x25e <__bad_interrupt>
      fa:	00 00       	nop
      fc:	b0 c0       	rjmp	.+352    	; 0x25e <__bad_interrupt>
      fe:	00 00       	nop
     100:	ae c0       	rjmp	.+348    	; 0x25e <__bad_interrupt>
     102:	00 00       	nop
     104:	ac c0       	rjmp	.+344    	; 0x25e <__bad_interrupt>
     106:	00 00       	nop
     108:	aa c0       	rjmp	.+340    	; 0x25e <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a8 c0       	rjmp	.+336    	; 0x25e <__bad_interrupt>
     10e:	00 00       	nop
     110:	a6 c0       	rjmp	.+332    	; 0x25e <__bad_interrupt>
     112:	00 00       	nop
     114:	a4 c0       	rjmp	.+328    	; 0x25e <__bad_interrupt>
     116:	00 00       	nop
     118:	a2 c0       	rjmp	.+324    	; 0x25e <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a0 c0       	rjmp	.+320    	; 0x25e <__bad_interrupt>
     11e:	00 00       	nop
     120:	9e c0       	rjmp	.+316    	; 0x25e <__bad_interrupt>
     122:	00 00       	nop
     124:	9c c0       	rjmp	.+312    	; 0x25e <__bad_interrupt>
     126:	00 00       	nop
     128:	9a c0       	rjmp	.+308    	; 0x25e <__bad_interrupt>
     12a:	00 00       	nop
     12c:	98 c0       	rjmp	.+304    	; 0x25e <__bad_interrupt>
     12e:	00 00       	nop
     130:	96 c0       	rjmp	.+300    	; 0x25e <__bad_interrupt>
     132:	00 00       	nop
     134:	94 c0       	rjmp	.+296    	; 0x25e <__bad_interrupt>
     136:	00 00       	nop
     138:	92 c0       	rjmp	.+292    	; 0x25e <__bad_interrupt>
     13a:	00 00       	nop
     13c:	90 c0       	rjmp	.+288    	; 0x25e <__bad_interrupt>
     13e:	00 00       	nop
     140:	8e c0       	rjmp	.+284    	; 0x25e <__bad_interrupt>
     142:	00 00       	nop
     144:	8c c0       	rjmp	.+280    	; 0x25e <__bad_interrupt>
     146:	00 00       	nop
     148:	8a c0       	rjmp	.+276    	; 0x25e <__bad_interrupt>
     14a:	00 00       	nop
     14c:	88 c0       	rjmp	.+272    	; 0x25e <__bad_interrupt>
     14e:	00 00       	nop
     150:	86 c0       	rjmp	.+268    	; 0x25e <__bad_interrupt>
     152:	00 00       	nop
     154:	84 c0       	rjmp	.+264    	; 0x25e <__bad_interrupt>
     156:	00 00       	nop
     158:	82 c0       	rjmp	.+260    	; 0x25e <__bad_interrupt>
     15a:	00 00       	nop
     15c:	80 c0       	rjmp	.+256    	; 0x25e <__bad_interrupt>
     15e:	00 00       	nop
     160:	7e c0       	rjmp	.+252    	; 0x25e <__bad_interrupt>
     162:	00 00       	nop
     164:	7c c0       	rjmp	.+248    	; 0x25e <__bad_interrupt>
     166:	00 00       	nop
     168:	7a c0       	rjmp	.+244    	; 0x25e <__bad_interrupt>
     16a:	00 00       	nop
     16c:	78 c0       	rjmp	.+240    	; 0x25e <__bad_interrupt>
     16e:	00 00       	nop
     170:	76 c0       	rjmp	.+236    	; 0x25e <__bad_interrupt>
     172:	00 00       	nop
     174:	74 c0       	rjmp	.+232    	; 0x25e <__bad_interrupt>
     176:	00 00       	nop
     178:	72 c0       	rjmp	.+228    	; 0x25e <__bad_interrupt>
     17a:	00 00       	nop
     17c:	70 c0       	rjmp	.+224    	; 0x25e <__bad_interrupt>
     17e:	00 00       	nop
     180:	6e c0       	rjmp	.+220    	; 0x25e <__bad_interrupt>
     182:	00 00       	nop
     184:	6c c0       	rjmp	.+216    	; 0x25e <__bad_interrupt>
     186:	00 00       	nop
     188:	6a c0       	rjmp	.+212    	; 0x25e <__bad_interrupt>
     18a:	00 00       	nop
     18c:	68 c0       	rjmp	.+208    	; 0x25e <__bad_interrupt>
     18e:	00 00       	nop
     190:	66 c0       	rjmp	.+204    	; 0x25e <__bad_interrupt>
     192:	00 00       	nop
     194:	64 c0       	rjmp	.+200    	; 0x25e <__bad_interrupt>
     196:	00 00       	nop
     198:	62 c0       	rjmp	.+196    	; 0x25e <__bad_interrupt>
     19a:	00 00       	nop
     19c:	60 c0       	rjmp	.+192    	; 0x25e <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5e c0       	rjmp	.+188    	; 0x25e <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	5c c0       	rjmp	.+184    	; 0x25e <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	5a c0       	rjmp	.+180    	; 0x25e <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	58 c0       	rjmp	.+176    	; 0x25e <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	56 c0       	rjmp	.+172    	; 0x25e <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	54 c0       	rjmp	.+168    	; 0x25e <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	52 c0       	rjmp	.+164    	; 0x25e <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	50 c0       	rjmp	.+160    	; 0x25e <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4e c0       	rjmp	.+156    	; 0x25e <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	4c c0       	rjmp	.+152    	; 0x25e <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	4a c0       	rjmp	.+148    	; 0x25e <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	48 c0       	rjmp	.+144    	; 0x25e <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	46 c0       	rjmp	.+140    	; 0x25e <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	44 c0       	rjmp	.+136    	; 0x25e <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	42 c0       	rjmp	.+132    	; 0x25e <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	40 c0       	rjmp	.+128    	; 0x25e <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3e c0       	rjmp	.+124    	; 0x25e <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	3c c0       	rjmp	.+120    	; 0x25e <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	3a c0       	rjmp	.+116    	; 0x25e <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	38 c0       	rjmp	.+112    	; 0x25e <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	36 c0       	rjmp	.+108    	; 0x25e <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__vector_125>
     1f8:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__vector_126>
     1fc:	aa 03       	fmulsu	r18, r18
     1fe:	ee 03       	fmulsu	r22, r22
     200:	a0 03       	fmuls	r18, r16
     202:	f0 03       	fmuls	r23, r16
     204:	a2 03       	fmuls	r18, r18
     206:	a4 03       	fmuls	r18, r20
     208:	a6 03       	fmuls	r18, r22
     20a:	a8 03       	fmulsu	r18, r16
     20c:	aa 03       	fmulsu	r18, r18
     20e:	0b 0e       	add	r0, r27
     210:	0e 0e       	add	r0, r30
     212:	11 0e       	add	r1, r17
     214:	14 0e       	add	r1, r20
     216:	17 0e       	add	r1, r23
     218:	1a 0e       	add	r1, r26
     21a:	1d 0e       	add	r1, r29

0000021c <__ctors_end>:
     21c:	11 24       	eor	r1, r1
     21e:	1f be       	out	0x3f, r1	; 63
     220:	cf ef       	ldi	r28, 0xFF	; 255
     222:	cd bf       	out	0x3d, r28	; 61
     224:	df e5       	ldi	r29, 0x5F	; 95
     226:	de bf       	out	0x3e, r29	; 62
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0c bf       	out	0x3c, r16	; 60

0000022c <__do_copy_data>:
     22c:	11 e2       	ldi	r17, 0x21	; 33
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	e4 e8       	ldi	r30, 0x84	; 132
     234:	fa e2       	ldi	r31, 0x2A	; 42
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a8 39       	cpi	r26, 0x98	; 152
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	23 e2       	ldi	r18, 0x23	; 35
     248:	a8 e9       	ldi	r26, 0x98	; 152
     24a:	b1 e2       	ldi	r27, 0x21	; 33
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	a9 3c       	cpi	r26, 0xC9	; 201
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <main>
     25a:	0c 94 40 15 	jmp	0x2a80	; 0x2a80 <_exit>

0000025e <__bad_interrupt>:
     25e:	d0 ce       	rjmp	.-608    	; 0x0 <__vectors>

00000260 <udi_hid_led_getsetting>:
		                 udi_hid_led_setreport);
}

uint8_t udi_hid_led_getsetting(void) {
	return 0;
}
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	08 95       	ret

00000264 <udi_hid_led_setreport>:

static bool udi_hid_led_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8)) &&
     264:	30 91 bb 23 	lds	r19, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
     268:	20 91 bc 23 	lds	r18, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
     26c:	82 2f       	mov	r24, r18
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 97       	sbiw	r24, 0x02	; 2
     272:	c1 f4       	brne	.+48     	; 0x2a4 <udi_hid_led_setreport+0x40>
     274:	31 11       	cpse	r19, r1
     276:	18 c0       	rjmp	.+48     	; 0x2a8 <udi_hid_led_setreport+0x44>
	   (0 == (0xFF & udd_g_ctrlreq.req.wValue))                         &&
     278:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
     27c:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
     280:	01 97       	sbiw	r24, 0x01	; 1
     282:	a1 f4       	brne	.+40     	; 0x2ac <udi_hid_led_setreport+0x48>
	   (UDI_HID_LED_REPORT_OUT_SIZE == udd_g_ctrlreq.req.wLength))
	{
		udd_g_ctrlreq.payload      = udi_hid_led_report_out;
     284:	e9 eb       	ldi	r30, 0xB9	; 185
     286:	f3 e2       	ldi	r31, 0x23	; 35
     288:	88 e9       	ldi	r24, 0x98	; 152
     28a:	91 e2       	ldi	r25, 0x21	; 33
     28c:	80 87       	std	Z+8, r24	; 0x08
     28e:	91 87       	std	Z+9, r25	; 0x09
		udd_g_ctrlreq.payload_size = UDI_HID_LED_REPORT_OUT_SIZE;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	82 87       	std	Z+10, r24	; 0x0a
     296:	93 87       	std	Z+11, r25	; 0x0b
		udd_g_ctrlreq.callback     = udi_hid_led_report_out_received;
     298:	84 e7       	ldi	r24, 0x74	; 116
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	84 87       	std	Z+12, r24	; 0x0c
     29e:	95 87       	std	Z+13, r25	; 0x0d
		return true;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	08 95       	ret
	}
	return false;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 95       	ret
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret
     2ac:	80 e0       	ldi	r24, 0x00	; 0
}
     2ae:	08 95       	ret

000002b0 <udi_hid_led_report_out_enable>:
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
	}
	udi_hid_led_report_out_enable();
}

static bool udi_hid_led_report_out_enable(void) {
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_LED_EP_OUT,
     2b4:	04 e7       	ldi	r16, 0x74	; 116
     2b6:	11 e0       	ldi	r17, 0x01	; 1
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	48 e9       	ldi	r20, 0x98	; 152
     2be:	51 e2       	ldi	r21, 0x21	; 33
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <udd_ep_run>
		              false,
		             (uint8_t *)&udi_hid_led_report_out,
		              UDI_HID_LED_REPORT_OUT_SIZE,
		              udi_hid_led_report_out_received);
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	08 95       	ret

000002ce <udi_hid_led_enable>:
		                                    iram_size_t     nb_received,
		                                    udd_ep_id_t     ep);

static bool udi_hid_led_report_out_enable(void);

bool udi_hid_led_enable(void) {
     2ce:	cf 93       	push	r28
	udi_hid_led_rate = 0;
     2d0:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <udi_hid_led_rate>
	udi_hid_led_protocol = 0;
     2d4:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <__data_end>

	if(!udi_hid_led_report_out_enable())
     2d8:	eb df       	rcall	.-42     	; 0x2b0 <udi_hid_led_report_out_enable>
     2da:	c8 2f       	mov	r28, r24
     2dc:	81 11       	cpse	r24, r1
		return false;
	UDI_HID_LED_ENABLE_EXT();
     2de:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <main_led_enable>
	return true;
}
     2e2:	8c 2f       	mov	r24, r28
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <udi_hid_led_report_out_received>:
static void udi_hid_led_report_out_received(udd_ep_status_t status, 
	                                        iram_size_t     nb_received,
	                                        udd_ep_id_t     ep)
{
	UNUSED(ep);
	if (status == UDD_EP_TRANSFER_OK && 
     2e8:	81 11       	cpse	r24, r1
     2ea:	07 c0       	rjmp	.+14     	; 0x2fa <udi_hid_led_report_out_received+0x12>
     2ec:	61 30       	cpi	r22, 0x01	; 1
     2ee:	71 05       	cpc	r23, r1
     2f0:	21 f4       	brne	.+8      	; 0x2fa <udi_hid_led_report_out_received+0x12>
		nb_received == UDI_HID_LED_REPORT_OUT_SIZE) {
		UDI_HID_LED_REPORT_OUT(udi_hid_led_report_out);
     2f2:	88 e9       	ldi	r24, 0x98	; 152
     2f4:	91 e2       	ldi	r25, 0x21	; 33
     2f6:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <main_led_report_out>
	}
	udi_hid_led_report_out_enable();
     2fa:	da cf       	rjmp	.-76     	; 0x2b0 <udi_hid_led_report_out_enable>
     2fc:	08 95       	ret

000002fe <udi_hid_led_disable>:
	UDI_HID_LED_ENABLE_EXT();
	return true;
}

void udi_hid_led_disable(void) {
	UDI_HID_LED_DISABLE_EXT();
     2fe:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <main_led_disable>
     302:	08 95       	ret

00000304 <udi_hid_led_setup>:
}

bool udi_hid_led_setup(void) {
	return udi_hid_setup(&udi_hid_led_rate,
     304:	22 e3       	ldi	r18, 0x32	; 50
     306:	31 e0       	ldi	r19, 0x01	; 1
     308:	40 e0       	ldi	r20, 0x00	; 0
     30a:	50 e2       	ldi	r21, 0x20	; 32
     30c:	68 e9       	ldi	r22, 0x98	; 152
     30e:	71 e2       	ldi	r23, 0x21	; 33
     310:	8a e9       	ldi	r24, 0x9A	; 154
     312:	91 e2       	ldi	r25, 0x21	; 33
     314:	ec c6       	rjmp	.+3544   	; 0x10ee <udi_hid_setup>
		                 &udi_hid_led_protocol,
		                (uint8_t *) &udi_hid_led_report_desc,
		                 udi_hid_led_setreport);
}
     316:	08 95       	ret

00000318 <io_init>:
{
    // Initializes  PORT A IO bits 7-0 to Outputs.
	//              Bits are LEDs drivers to control the front panel LEDs labeled as 8 to 1.
	//              LEDs Outputs are "On" when Low, LEDs are "Off" when High.

	PORTA.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Port as Output
     318:	e0 e0       	ldi	r30, 0x00	; 0
     31a:	f6 e0       	ldi	r31, 0x06	; 6
     31c:	9f ef       	ldi	r25, 0xFF	; 255
     31e:	91 83       	std	Z+1, r25	; 0x01
	PORTA.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm |PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);    // Turn off outputs by setting to logic 1 (LEDs )
     320:	95 83       	std	Z+5, r25	; 0x05
	// Initialize   Port B IO bit 0 F2-F4 column output for the Keypad key-code scan signal (Front Panel Buttons).
	//              Refer to initialize_PortF_io(void) below for other keypad Key-code signals.


	// (Input Port Pins)
	PORTB.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);  // Declare pins as Inputs
     322:	e0 e2       	ldi	r30, 0x20	; 32
     324:	f6 e0       	ldi	r31, 0x06	; 6
     326:	3f e3       	ldi	r19, 0x3F	; 63
     328:	32 83       	std	Z+2, r19	; 0x02
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     32a:	88 e1       	ldi	r24, 0x18	; 24
     32c:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     32e:	81 8b       	std	Z+17, r24	; 0x11
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     330:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     332:	83 8b       	std	Z+19, r24	; 0x13
	PORTB.PIN4CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     334:	84 8b       	std	Z+20, r24	; 0x14
	PORTB.PIN5CTRL = PORT_OPC_PULLUP_gc;										 // Declare pins with pull ups
     336:	85 8b       	std	Z+21, r24	; 0x15

	// (Output Port Pins)											             // Declare pins as Outputs
	PORTB.DIRSET = (PIN6_bm | PIN7_bm);
     338:	20 ec       	ldi	r18, 0xC0	; 192
     33a:	21 83       	std	Z+1, r18	; 0x01
	PORTB.OUTSET = (PIN6_bm);													 // Set Status LED Output IO pin for LED to be "Off".
     33c:	40 e4       	ldi	r20, 0x40	; 64
     33e:	45 83       	std	Z+5, r20	; 0x05
	PORTB.OUTSET = (PIN7_bm);													 // Set Output pin "F2_F4_COL" for button column to Logic High (Button Disabled).
     340:	40 e8       	ldi	r20, 0x80	; 128
     342:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   PORTC IO bits 1-0 as Outputs with pull-ups enabled. Reserved IO pins for other IO later such as I2C link.
	// Initializes   Vertical Slider Switches port inputs (V_Slider 1 thru 6). (See Port D for remainder of H-Slider switch Positions).
	// Initializes   PORTC IO bits 7-2 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTC.DIRCLR = (PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);	  // Declare pins as Inputs
     344:	e0 e4       	ldi	r30, 0x40	; 64
     346:	f6 e0       	ldi	r31, 0x06	; 6
     348:	4c ef       	ldi	r20, 0xFC	; 252
     34a:	42 83       	std	Z+2, r20	; 0x02
	PORTC.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     34c:	82 8b       	std	Z+18, r24	; 0x12
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     34e:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     350:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     352:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     354:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     356:	87 8b       	std	Z+23, r24	; 0x17

	// (Output Port Pins)
	PORTC.DIRSET = (PIN0_bm | PIN1_bm);											  // Declare pins as Outputs
     358:	43 e0       	ldi	r20, 0x03	; 3
     35a:	41 83       	std	Z+1, r20	; 0x01
	PORTC.OUTSET = (PIN0_bm | PIN1_bm);											  // Declare pins Output levels
     35c:	45 83       	std	Z+5, r20	; 0x05
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PORTD IO bits 5-0 to Inputs with pull-ups enabled
	// Initializes   PORTD IO bits 7-6 to Outputs. Bits reserved for USB communication

	// (Input Port Pins)
	PORTD.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);	  // Declare pins as Inputs
     35e:	e0 e6       	ldi	r30, 0x60	; 96
     360:	f6 e0       	ldi	r31, 0x06	; 6
     362:	32 83       	std	Z+2, r19	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     364:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     366:	81 8b       	std	Z+17, r24	; 0x11
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     368:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36a:	83 8b       	std	Z+19, r24	; 0x13
	PORTD.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36c:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     36e:	85 8b       	std	Z+21, r24	; 0x15
	// PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
	// PORTD.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups

	// (Output Port Pins)
	PORTD.DIRSET = (PIN6_bm | PIN7_bm);											  // Declare pins as Outputs - Declare for USB
     370:	21 83       	std	Z+1, r18	; 0x01
	PORTD.OUTCLR = (PIN6_bm | PIN7_bm);											  // Declare pins Output levels
     372:	26 83       	std	Z+6, r18	; 0x06
	// Initializes all 8 bits of PortE IO as inputs
	// Initializes   Horizontal Slider Switches port inputs (H_Slider 1 thru 8). (See Port B for remainder of H-Slider switch Positions).
	// Initializes   PortE IO bits 7-0 to Inputs with pull-ups enabled

	// (Input Port Pins)
	PORTE.DIRCLR = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);
     374:	e0 e8       	ldi	r30, 0x80	; 128
     376:	f6 e0       	ldi	r31, 0x06	; 6
     378:	92 83       	std	Z+2, r25	; 0x02
	PORTE.PIN0CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     37a:	80 8b       	std	Z+16, r24	; 0x10
	PORTE.PIN1CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     37c:	81 8b       	std	Z+17, r24	; 0x11
	PORTE.PIN2CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     37e:	82 8b       	std	Z+18, r24	; 0x12
	PORTE.PIN3CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     380:	83 8b       	std	Z+19, r24	; 0x13
	PORTE.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     382:	84 8b       	std	Z+20, r24	; 0x14
	PORTE.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     384:	85 8b       	std	Z+21, r24	; 0x15
	PORTE.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     386:	86 8b       	std	Z+22, r24	; 0x16
	PORTE.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     388:	87 8b       	std	Z+23, r24	; 0x17
	// Initializes PortF IO - 4 bits are inputs and 4 bits are output for keypad key-code scanning.
	// One additional keypad key-code scan signal (F2-F4 Column) is also initialized on Port B bit 7. See Inititalize_Port_B_io() above.
	// Bits 3-0 (Keypad Column Signals) are set for output, Bits 7-4 (Keypad Row Pins) are set for input

	// (Input Port Pins)
	PORTF.DIRCLR = (PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm);						  // Keypad Row Pins
     38a:	e0 ea       	ldi	r30, 0xA0	; 160
     38c:	f6 e0       	ldi	r31, 0x06	; 6
     38e:	90 ef       	ldi	r25, 0xF0	; 240
     390:	92 83       	std	Z+2, r25	; 0x02
	PORTF.PIN4CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     392:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     394:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     396:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL = PORT_OPC_PULLUP_gc;										  // Declare pins with pull ups
     398:	87 8b       	std	Z+23, r24	; 0x17


	// (Output Port Pins)
	PORTF.DIRSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Keypad Column Pins
     39a:	8f e0       	ldi	r24, 0x0F	; 15
     39c:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm);						  // Set pins to Logic High (Buttons Disabled)
     39e:	85 83       	std	Z+5, r24	; 0x05
	initialize_PortC_io();		// (Vertical Slider Switch signals), (I2C signals)
	initialize_PortD_io();		// (Vertical Slider Switch signals), (USB signals)
	initialize_PortE_io();		// (Horizontal Slider Switch signals)
	initialize_PortF_io();		// (COLUMN & ROW Keypad Scan Code signals)

	led_init();
     3a0:	27 d2       	rcall	.+1102   	; 0x7f0 <led_init>
	keypad_init();
     3a2:	0d c1       	rjmp	.+538    	; 0x5be <keypad_init>
     3a4:	08 95       	ret

000003a6 <jstk_readVertIndex>:
     3a6:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7be648>

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)
     3aa:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7be668>
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	92 2b       	or	r25, r18
     3b2:	96 95       	lsr	r25
     3b4:	87 95       	ror	r24
     3b6:	96 95       	lsr	r25
     3b8:	87 95       	ror	r24
     3ba:	bc 01       	movw	r22, r24
     3bc:	7f 70       	andi	r23, 0x0F	; 15
     3be:	80 ff       	sbrs	r24, 0
     3c0:	17 c0       	rjmp	.+46     	; 0x3f0 <jstk_readVertIndex+0x4a>
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	e1 e0       	ldi	r30, 0x01	; 1
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	82 2f       	mov	r24, r18
     3cc:	af 01       	movw	r20, r30
     3ce:	02 2e       	mov	r0, r18
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <jstk_readVertIndex+0x30>
     3d2:	44 0f       	add	r20, r20
     3d4:	55 1f       	adc	r21, r21
     3d6:	0a 94       	dec	r0
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <jstk_readVertIndex+0x2c>
     3da:	46 23       	and	r20, r22
     3dc:	57 23       	and	r21, r23
     3de:	45 2b       	or	r20, r21
     3e0:	41 f0       	breq	.+16     	; 0x3f2 <jstk_readVertIndex+0x4c>
     3e2:	2f 5f       	subi	r18, 0xFF	; 255
     3e4:	3f 4f       	sbci	r19, 0xFF	; 255
     3e6:	2c 30       	cpi	r18, 0x0C	; 12
     3e8:	31 05       	cpc	r19, r1
     3ea:	79 f7       	brne	.-34     	; 0x3ca <jstk_readVertIndex+0x24>
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	08 95       	ret
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	08 95       	ret

000003f4 <jstk_readHoriIndex>:
     3f4:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x7be688>
     3f8:	20 91 28 06 	lds	r18, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	92 2b       	or	r25, r18
     400:	bc 01       	movw	r22, r24
     402:	7f 70       	andi	r23, 0x0F	; 15
     404:	80 ff       	sbrs	r24, 0
     406:	17 c0       	rjmp	.+46     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     408:	21 e0       	ldi	r18, 0x01	; 1
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	e1 e0       	ldi	r30, 0x01	; 1
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	82 2f       	mov	r24, r18
     412:	af 01       	movw	r20, r30
     414:	02 2e       	mov	r0, r18
     416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     418:	44 0f       	add	r20, r20
     41a:	55 1f       	adc	r21, r21
     41c:	0a 94       	dec	r0
     41e:	e2 f7       	brpl	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     420:	46 23       	and	r20, r22
     422:	57 23       	and	r21, r23
     424:	45 2b       	or	r20, r21
     426:	41 f0       	breq	.+16     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     428:	2f 5f       	subi	r18, 0xFF	; 255
     42a:	3f 4f       	sbci	r19, 0xFF	; 255
     42c:	2c 30       	cpi	r18, 0x0C	; 12
     42e:	31 05       	cpc	r19, r1
     430:	79 f7       	brne	.-34     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	08 95       	ret
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	08 95       	ret

0000043a <jstk_ledMask>:
    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
     43a:	88 23       	and	r24, r24
     43c:	f4 f1       	brlt	.+124    	; 0x4ba <jstk_ledMask+0x80>
        return 0;

    if (idx == 5 || idx == 6)   // center zone
     43e:	9b ef       	ldi	r25, 0xFB	; 251
     440:	98 0f       	add	r25, r24
     442:	92 30       	cpi	r25, 0x02	; 2
     444:	e0 f1       	brcs	.+120    	; 0x4be <jstk_ledMask+0x84>
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)

    uint8_t d = (idx < 5) ? (5 - idx) : (idx - 6);  // computes 'distance' from center (d)
     446:	85 30       	cpi	r24, 0x05	; 5
     448:	34 f4       	brge	.+12     	; 0x456 <jstk_ledMask+0x1c>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     44a:	95 e0       	ldi	r25, 0x05	; 5
     44c:	98 1b       	sub	r25, r24
     44e:	92 30       	cpi	r25, 0x02	; 2
     450:	08 f0       	brcs	.+2      	; 0x454 <jstk_ledMask+0x1a>
     452:	42 c0       	rjmp	.+132    	; 0x4d8 <jstk_ledMask+0x9e>
     454:	36 c0       	rjmp	.+108    	; 0x4c2 <jstk_ledMask+0x88>
     456:	9a ef       	ldi	r25, 0xFA	; 250
     458:	98 0f       	add	r25, r24
     45a:	92 30       	cpi	r25, 0x02	; 2
     45c:	b0 f5       	brcc	.+108    	; 0x4ca <jstk_ledMask+0x90>
     45e:	31 c0       	rjmp	.+98     	; 0x4c2 <jstk_ledMask+0x88>
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     460:	62 e0       	ldi	r22, 0x02	; 2
     462:	23 e0       	ldi	r18, 0x03	; 3
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
     46a:	e1 e0       	ldi	r30, 0x01	; 1
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	af 01       	movw	r20, r30
     470:	02 2e       	mov	r0, r18
     472:	02 c0       	rjmp	.+4      	; 0x478 <jstk_ledMask+0x3e>
     474:	44 0f       	add	r20, r20
     476:	55 1f       	adc	r21, r21
     478:	0a 94       	dec	r0
     47a:	e2 f7       	brpl	.-8      	; 0x474 <jstk_ledMask+0x3a>
     47c:	84 2b       	or	r24, r20
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     47e:	9f 5f       	subi	r25, 0xFF	; 255
     480:	21 50       	subi	r18, 0x01	; 1
     482:	31 09       	sbc	r19, r1
     484:	96 17       	cp	r25, r22
     486:	98 f3       	brcs	.-26     	; 0x46e <jstk_ledMask+0x34>
     488:	08 95       	ret
     48a:	81 50       	subi	r24, 0x01	; 1
     48c:	48 2f       	mov	r20, r24
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	4b 5f       	subi	r20, 0xFB	; 251
     492:	5f 4f       	sbci	r21, 0xFF	; 255
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     494:	24 e0       	ldi	r18, 0x04	; 4
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	80 e0       	ldi	r24, 0x00	; 0
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
     49a:	e1 e0       	ldi	r30, 0x01	; 1
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	bf 01       	movw	r22, r30
     4a0:	02 2e       	mov	r0, r18
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <jstk_ledMask+0x6e>
     4a4:	66 0f       	add	r22, r22
     4a6:	77 1f       	adc	r23, r23
     4a8:	0a 94       	dec	r0
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <jstk_ledMask+0x6a>
     4ac:	86 2b       	or	r24, r22
     4ae:	2f 5f       	subi	r18, 0xFF	; 255
     4b0:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     4b2:	24 17       	cp	r18, r20
     4b4:	35 07       	cpc	r19, r21
     4b6:	99 f7       	brne	.-26     	; 0x49e <jstk_ledMask+0x64>
     4b8:	08 95       	ret
}   // basically just prioritizes whichever axis is moving more

uint8_t jstk_ledMask(int8_t idx)
{
    if (idx < 0)    // no touch detected
        return 0;
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	08 95       	ret

    if (idx == 5 || idx == 6)   // center zone
        return (1u<<3) | (1u<<4);  // LED4 (bit3) + LED5 (bit4)
     4be:	88 e1       	ldi	r24, 0x18	; 24
     4c0:	08 95       	ret
    d: 1 2 3 4 5
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
     4c2:	85 30       	cpi	r24, 0x05	; 5
     4c4:	6c f2       	brlt	.-102    	; 0x460 <jstk_ledMask+0x26>
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	e0 cf       	rjmp	.-64     	; 0x48a <jstk_ledMask+0x50>
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4ca:	85 50       	subi	r24, 0x05	; 5
     4cc:	85 30       	cpi	r24, 0x05	; 5
     4ce:	08 f0       	brcs	.+2      	; 0x4d2 <jstk_ledMask+0x98>
     4d0:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
     4d2:	81 11       	cpse	r24, r1
     4d4:	da cf       	rjmp	.-76     	; 0x48a <jstk_ledMask+0x50>
     4d6:	08 95       	ret
    /*
    idx: 0 1 2 3 4 | 5 6 | 7 8 9 10 11
    d:   5 4 3 2 1 |  -  | 1 2 3  4  5
    */

    uint8_t N = (d < 2 ? 2 : (d + 1));  // decide how many LED's should activate (N)
     4d8:	66 e0       	ldi	r22, 0x06	; 6
     4da:	68 1b       	sub	r22, r24
     4dc:	65 30       	cpi	r22, 0x05	; 5
     4de:	08 f0       	brcs	.+2      	; 0x4e2 <jstk_ledMask+0xa8>
     4e0:	64 e0       	ldi	r22, 0x04	; 4
    N: 2 3 4 4 4
    */

    uint8_t jstk_mask = 0;
    if (idx < 5)                            // down/left direction
        for (uint8_t i = 0; i < N; i++)
     4e2:	61 11       	cpse	r22, r1
     4e4:	be cf       	rjmp	.-132    	; 0x462 <jstk_ledMask+0x28>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
            jstk_mask |= (1u << (3 - i));   // LED's 3-0
    else                                    // up/right direction
        for (uint8_t i = 0; i < N; i++)
            jstk_mask |= (1u << (4 + i));   // LED's 4-7
    return jstk_mask;
}
     4e8:	08 95       	ret

000004ea <jstk_readMask>:
    return jstk_idx2axis[idx];
}   // conversion runtime is O(1)


uint8_t jstk_readMask(void)
{
     4ea:	cf 93       	push	r28
    int8_t vi = jstk_readVertIndex();       // -1 to 11
     4ec:	5c df       	rcall	.-328    	; 0x3a6 <jstk_readVertIndex>
     4ee:	c8 2f       	mov	r28, r24
    int8_t hi = jstk_readHoriIndex();       // -1 to 11
     4f0:	81 df       	rcall	.-254    	; 0x3f4 <jstk_readHoriIndex>
     4f2:	cc 23       	and	r28, r28

    if (vi < 0 && hi < 0)
     4f4:	24 f4       	brge	.+8      	; 0x4fe <jstk_readMask+0x14>
     4f6:	88 23       	and	r24, r24
     4f8:	c4 f0       	brlt	.+48     	; 0x52a <jstk_readMask+0x40>
     4fa:	90 e0       	ldi	r25, 0x00	; 0
        return 0;                           // no contact

    // decide which slider is moved furthest from center buy computing 'distance' from middle
    uint8_t dV = (vi < 0) ? 0 : (vi > 5 ? vi - 5 : 5 - vi); // vertical slider distance   (dV)
     4fc:	09 c0       	rjmp	.+18     	; 0x510 <jstk_readMask+0x26>
     4fe:	c6 30       	cpi	r28, 0x06	; 6
     500:	1c f0       	brlt	.+6      	; 0x508 <jstk_readMask+0x1e>
     502:	9b ef       	ldi	r25, 0xFB	; 251
     504:	9c 0f       	add	r25, r28
     506:	02 c0       	rjmp	.+4      	; 0x50c <jstk_readMask+0x22>
     508:	95 e0       	ldi	r25, 0x05	; 5
     50a:	9c 1b       	sub	r25, r28
     50c:	88 23       	and	r24, r24
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)
     50e:	54 f0       	brlt	.+20     	; 0x524 <jstk_readMask+0x3a>
     510:	86 30       	cpi	r24, 0x06	; 6
     512:	1c f0       	brlt	.+6      	; 0x51a <jstk_readMask+0x30>
     514:	2b ef       	ldi	r18, 0xFB	; 251
     516:	28 0f       	add	r18, r24
     518:	02 c0       	rjmp	.+4      	; 0x51e <jstk_readMask+0x34>
     51a:	25 e0       	ldi	r18, 0x05	; 5
     51c:	28 1b       	sub	r18, r24
     51e:	92 17       	cp	r25, r18

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins
     520:	08 f4       	brcc	.+2      	; 0x524 <jstk_readMask+0x3a>
     522:	c8 2f       	mov	r28, r24

    return jstk_ledMask(jstk_use);          // convert to bits
     524:	8c 2f       	mov	r24, r28
     526:	89 df       	rcall	.-238    	; 0x43a <jstk_ledMask>
     528:	01 c0       	rjmp	.+2      	; 0x52c <jstk_readMask+0x42>
     52a:	80 e0       	ldi	r24, 0x00	; 0
{
    int8_t vi = jstk_readVertIndex();       // -1 to 11
    int8_t hi = jstk_readHoriIndex();       // -1 to 11

    if (vi < 0 && hi < 0)
        return 0;                           // no contact
     52c:	cf 91       	pop	r28
    uint8_t dH = (hi < 0) ? 0 : (hi > 5 ? hi - 5 : 5 - hi); // horizontal slider distance (dH)

    int8_t jstk_use = (dV >= dH) ? vi : hi; // slider with greatest distance wins

    return jstk_ledMask(jstk_use);          // convert to bits
}   // basically just prioritizes whichever axis is moving more
     52e:	08 95       	ret

00000530 <jstk_usbTask>:
     530:	61 df       	rcall	.-318    	; 0x3f4 <jstk_readHoriIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     532:	88 23       	and	r24, r24
     534:	3c f0       	brlt	.+14     	; 0x544 <jstk_usbTask+0x14>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     536:	e8 2f       	mov	r30, r24
     538:	88 0f       	add	r24, r24
     53a:	ff 0b       	sbc	r31, r31
     53c:	e4 57       	subi	r30, 0x74	; 116
     53e:	fe 4d       	sbci	r31, 0xDE	; 222
     540:	80 81       	ld	r24, Z
     542:	01 c0       	rjmp	.+2      	; 0x546 <jstk_usbTask+0x16>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     544:	80 e8       	ldi	r24, 0x80	; 128
static uint8_t jstk_prevReport[2] = {128, 128};

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
     546:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <jstk_usbReport>
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     54a:	2d df       	rcall	.-422    	; 0x3a6 <jstk_readVertIndex>
    92,     116,    139,    162,
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
     54c:	88 23       	and	r24, r24
     54e:	3c f0       	brlt	.+14     	; 0x55e <jstk_usbTask+0x2e>
        return 128; // return to center when no contact
    return jstk_idx2axis[idx];
     550:	e8 2f       	mov	r30, r24
     552:	88 0f       	add	r24, r24
     554:	ff 0b       	sbc	r31, r31
     556:	e4 57       	subi	r30, 0x74	; 116
     558:	fe 4d       	sbci	r31, 0xDE	; 222
     55a:	80 81       	ld	r24, Z
     55c:	01 c0       	rjmp	.+2      	; 0x560 <jstk_usbTask+0x30>
    185,    208,    231,    255
};  // lookup table for the 12 discrete slider positions to avoid long division

uint8_t jstk_idxToAxis(int8_t idx) {
    if (idx < 0)
        return 128; // return to center when no contact
     55e:	80 e8       	ldi	r24, 0x80	; 128

void jstk_usbTask(void)
{
    // sample current joystick/slider indices
    jstk_usbReport[0] = jstk_idxToAxis(jstk_readHoriIndex());   // x
    jstk_usbReport[1] = jstk_idxToAxis(jstk_readVertIndex());   // y
     560:	ec e9       	ldi	r30, 0x9C	; 156
     562:	f1 e2       	ldi	r31, 0x21	; 33
     564:	81 83       	std	Z+1, r24	; 0x01

    // send if value changed & IN endpoint ready
    if ((jstk_usbReport[0] != jstk_prevReport[0]) || (jstk_usbReport[1] != jstk_prevReport[1])) { // value changed?
     566:	20 81       	ld	r18, Z
     568:	90 91 26 20 	lds	r25, 0x2026	; 0x802026 <jstk_prevReport>
     56c:	29 13       	cpse	r18, r25
     56e:	04 c0       	rjmp	.+8      	; 0x578 <jstk_usbTask+0x48>
     570:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <jstk_prevReport+0x1>
     574:	98 17       	cp	r25, r24
     576:	71 f0       	breq	.+28     	; 0x594 <jstk_usbTask+0x64>
        if (udi_hid_generic_send_report_in(jstk_usbReport)) {   // IN endpoint ready?
     578:	8c e9       	ldi	r24, 0x9C	; 156
     57a:	91 e2       	ldi	r25, 0x21	; 33
     57c:	c7 d4       	rcall	.+2446   	; 0xf0c <udi_hid_generic_send_report_in>
     57e:	88 23       	and	r24, r24
     580:	49 f0       	breq	.+18     	; 0x594 <jstk_usbTask+0x64>
            jstk_prevReport[0] = jstk_usbReport[0];
     582:	e6 e2       	ldi	r30, 0x26	; 38
     584:	f0 e2       	ldi	r31, 0x20	; 32
     586:	ac e9       	ldi	r26, 0x9C	; 156
     588:	b1 e2       	ldi	r27, 0x21	; 33
     58a:	8c 91       	ld	r24, X
     58c:	80 83       	st	Z, r24
            jstk_prevReport[1] = jstk_usbReport[1];
     58e:	11 96       	adiw	r26, 0x01	; 1
     590:	8c 91       	ld	r24, X
     592:	81 83       	std	Z+1, r24	; 0x01
     594:	08 95       	ret

00000596 <joystick>:
    }
}

void joystick(void) 
{
    jstk_mask = jstk_readMask();            // pick LED's
     596:	a9 df       	rcall	.-174    	; 0x4ea <jstk_readMask>
     598:	80 93 b0 23 	sts	0x23B0, r24	; 0x8023b0 <jstk_mask>
    jstk_testMode = PORTB.IN;               // checks switch for testing mode
     59c:	90 91 28 06 	lds	r25, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     5a0:	90 93 b1 23 	sts	0x23B1, r25	; 0x8023b1 <jstk_testMode>

    if ((jstk_testMode & PIN4_bm) == 0) {   // test mode
     5a4:	90 91 b1 23 	lds	r25, 0x23B1	; 0x8023b1 <jstk_testMode>
     5a8:	94 fd       	sbrc	r25, 4
     5aa:	07 c0       	rjmp	.+14     	; 0x5ba <joystick+0x24>
        if (jstk_mask) {
     5ac:	88 23       	and	r24, r24
            led_allOff();
     5ae:	31 f0       	breq	.+12     	; 0x5bc <joystick+0x26>
     5b0:	25 d1       	rcall	.+586    	; 0x7fc <led_allOff>
            led_on(jstk_mask);
     5b2:	80 91 b0 23 	lds	r24, 0x23B0	; 0x8023b0 <jstk_mask>
     5b6:	26 c1       	rjmp	.+588    	; 0x804 <led_on>
        }
    } else {                                // normal mode
        // led_allOff();                       // for testing
        jstk_usbTask();                     // send to USB
     5b8:	08 95       	ret
     5ba:	ba cf       	rjmp	.-140    	; 0x530 <jstk_usbTask>
     5bc:	08 95       	ret

000005be <keypad_init>:
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
}
     5be:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <kpd_keyPressed>
     5c2:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <kpd_currState>
     5c6:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <kpd_prevState>
     5ca:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <kpd_exitTestMode>
     5ce:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <kpd_rowVal>
     5d2:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <kpd_code>
     5d6:	eb ea       	ldi	r30, 0xAB	; 171
     5d8:	f1 e2       	ldi	r31, 0x21	; 33
     5da:	81 e6       	ldi	r24, 0x61	; 97
     5dc:	80 83       	st	Z, r24
     5de:	80 e6       	ldi	r24, 0x60	; 96
     5e0:	81 83       	std	Z+1, r24	; 0x01
     5e2:	12 82       	std	Z+2, r1	; 0x02
     5e4:	13 82       	std	Z+3, r1	; 0x03
     5e6:	8f e5       	ldi	r24, 0x5F	; 95
     5e8:	84 83       	std	Z+4, r24	; 0x04
     5ea:	8e e5       	ldi	r24, 0x5E	; 94
     5ec:	85 83       	std	Z+5, r24	; 0x05
     5ee:	16 82       	std	Z+6, r1	; 0x06
     5f0:	17 82       	std	Z+7, r1	; 0x07
     5f2:	8d e5       	ldi	r24, 0x5D	; 93
     5f4:	80 87       	std	Z+8, r24	; 0x08
     5f6:	11 86       	std	Z+9, r1	; 0x09
     5f8:	12 86       	std	Z+10, r1	; 0x0a
     5fa:	13 86       	std	Z+11, r1	; 0x0b
     5fc:	14 86       	std	Z+12, r1	; 0x0c
     5fe:	15 86       	std	Z+13, r1	; 0x0d
     600:	89 e5       	ldi	r24, 0x59	; 89
     602:	86 87       	std	Z+14, r24	; 0x0e
     604:	8b e5       	ldi	r24, 0x5B	; 91
     606:	87 87       	std	Z+15, r24	; 0x0f
     608:	10 8a       	std	Z+16, r1	; 0x10
     60a:	11 8a       	std	Z+17, r1	; 0x11
     60c:	8a e5       	ldi	r24, 0x5A	; 90
     60e:	82 8b       	std	Z+18, r24	; 0x12
     610:	8c e5       	ldi	r24, 0x5C	; 92
     612:	83 8b       	std	Z+19, r24	; 0x13
     614:	e6 ea       	ldi	r30, 0xA6	; 166
     616:	f1 e2       	ldi	r31, 0x21	; 33
     618:	8e e0       	ldi	r24, 0x0E	; 14
     61a:	80 83       	st	Z, r24
     61c:	8d e0       	ldi	r24, 0x0D	; 13
     61e:	81 83       	std	Z+1, r24	; 0x01
     620:	8b e0       	ldi	r24, 0x0B	; 11
     622:	82 83       	std	Z+2, r24	; 0x02
     624:	87 e0       	ldi	r24, 0x07	; 7
     626:	83 83       	std	Z+3, r24	; 0x03
     628:	8f ef       	ldi	r24, 0xFF	; 255
     62a:	84 83       	std	Z+4, r24	; 0x04
     62c:	08 95       	ret

0000062e <keypad_poll>:
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	45 e0       	ldi	r20, 0x05	; 5
     638:	54 e0       	ldi	r21, 0x04	; 4
     63a:	e0 ea       	ldi	r30, 0xA0	; 160
     63c:	f6 e0       	ldi	r31, 0x06	; 6
     63e:	c0 e2       	ldi	r28, 0x20	; 32
     640:	d6 e0       	ldi	r29, 0x06	; 6
     642:	60 e8       	ldi	r22, 0x80	; 128
     644:	92 2f       	mov	r25, r18
     646:	d9 01       	movw	r26, r18
     648:	aa 55       	subi	r26, 0x5A	; 90
     64a:	be 4d       	sbci	r27, 0xDE	; 222
     64c:	8c 91       	ld	r24, X
     64e:	84 83       	std	Z+4, r24	; 0x04
     650:	24 30       	cpi	r18, 0x04	; 4
     652:	11 f4       	brne	.+4      	; 0x658 <keypad_poll+0x2a>
     654:	6e 83       	std	Y+6, r22	; 0x06
     656:	31 c0       	rjmp	.+98     	; 0x6ba <keypad_poll+0x8c>
     658:	6d 83       	std	Y+5, r22	; 0x05
     65a:	2f c0       	rjmp	.+94     	; 0x6ba <keypad_poll+0x8c>
     65c:	49 2f       	mov	r20, r25
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	2f 5f       	subi	r18, 0xFF	; 255
     662:	3f 4f       	sbci	r19, 0xFF	; 255
     664:	25 30       	cpi	r18, 0x05	; 5
     666:	31 05       	cpc	r19, r1
     668:	69 f7       	brne	.-38     	; 0x644 <keypad_poll+0x16>
     66a:	80 e8       	ldi	r24, 0x80	; 128
     66c:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7be625>
     670:	54 30       	cpi	r21, 0x04	; 4
     672:	e0 f4       	brcc	.+56     	; 0x6ac <keypad_poll+0x7e>
     674:	e4 2f       	mov	r30, r20
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	ee 0f       	add	r30, r30
     67e:	ff 1f       	adc	r31, r31
     680:	e5 55       	subi	r30, 0x55	; 85
     682:	fe 4d       	sbci	r31, 0xDE	; 222
     684:	e5 0f       	add	r30, r21
     686:	f1 1d       	adc	r31, r1
     688:	80 81       	ld	r24, Z
     68a:	90 91 a4 21 	lds	r25, 0x21A4	; 0x8021a4 <kpd_keyPressed>
     68e:	91 11       	cpse	r25, r1
     690:	06 c0       	rjmp	.+12     	; 0x69e <keypad_poll+0x70>
     692:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <kpd_code>
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <kpd_keyPressed>
     69c:	22 c0       	rjmp	.+68     	; 0x6e2 <keypad_poll+0xb4>
     69e:	90 91 a3 21 	lds	r25, 0x21A3	; 0x8021a3 <kpd_code>
     6a2:	89 17       	cp	r24, r25
     6a4:	f1 f0       	breq	.+60     	; 0x6e2 <keypad_poll+0xb4>
     6a6:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <kpd_code>
     6aa:	1b c0       	rjmp	.+54     	; 0x6e2 <keypad_poll+0xb4>
     6ac:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_keyPressed>
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	b9 f4       	brne	.+46     	; 0x6e2 <keypad_poll+0xb4>
     6b4:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <kpd_keyPressed>
     6b8:	14 c0       	rjmp	.+40     	; 0x6e2 <keypad_poll+0xb4>
     6ba:	80 85       	ldd	r24, Z+8	; 0x08
     6bc:	80 7f       	andi	r24, 0xF0	; 240
     6be:	80 3b       	cpi	r24, 0xB0	; 176
     6c0:	49 f0       	breq	.+18     	; 0x6d4 <keypad_poll+0xa6>
     6c2:	18 f4       	brcc	.+6      	; 0x6ca <keypad_poll+0x9c>
     6c4:	80 37       	cpi	r24, 0x70	; 112
     6c6:	51 f0       	breq	.+20     	; 0x6dc <keypad_poll+0xae>
     6c8:	cb cf       	rjmp	.-106    	; 0x660 <keypad_poll+0x32>
     6ca:	80 3d       	cpi	r24, 0xD0	; 208
     6cc:	29 f0       	breq	.+10     	; 0x6d8 <keypad_poll+0xaa>
     6ce:	80 3e       	cpi	r24, 0xE0	; 224
     6d0:	29 f2       	breq	.-118    	; 0x65c <keypad_poll+0x2e>
     6d2:	c6 cf       	rjmp	.-116    	; 0x660 <keypad_poll+0x32>
     6d4:	52 e0       	ldi	r21, 0x02	; 2
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <keypad_poll+0xb0>
     6d8:	51 e0       	ldi	r21, 0x01	; 1
     6da:	01 c0       	rjmp	.+2      	; 0x6de <keypad_poll+0xb0>
     6dc:	53 e0       	ldi	r21, 0x03	; 3
     6de:	49 2f       	mov	r20, r25
     6e0:	bf cf       	rjmp	.-130    	; 0x660 <keypad_poll+0x32>
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret

000006e8 <keypad_getState>:
     6e8:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_keyPressed>
     6ec:	08 95       	ret

000006ee <keypad_report>:

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
     6ee:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <__TEXT_REGION_LENGTH__+0x7be628>
     6f2:	80 93 b2 23 	sts	0x23B2, r24	; 0x8023b2 <kpd_testMode>
	}
}

// get current press state
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
     6f6:	80 91 a4 21 	lds	r24, 0x21A4	; 0x8021a4 <kpd_keyPressed>

// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
     6fa:	80 93 a1 21 	sts	0x21A1, r24	; 0x8021a1 <kpd_currState>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     6fe:	80 91 a3 21 	lds	r24, 0x21A3	; 0x8021a3 <kpd_code>
// toggles LED's in test mode, sends HID code over USB in normal mode
void keypad_report(void)
{	
	kpd_testMode = PORTB.IN;           // read test mode switch
	kpd_currState = keypad_getState(); // feel like this one's select explanatory
	kpd_codeOut = keypad_getCode();    // current code to be outputed
     702:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <kpd_codeOut>

	if ((kpd_testMode & 0x010) == 0)   // test mode enabled
     706:	80 91 b2 23 	lds	r24, 0x23B2	; 0x8023b2 <kpd_testMode>
     70a:	84 fd       	sbrc	r24, 4
     70c:	29 c0       	rjmp	.+82     	; 0x760 <keypad_report+0x72>
	{
		// on press edge, toggle corresponding LED
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
     70e:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <kpd_currState>
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	09 f0       	breq	.+2      	; 0x718 <keypad_report+0x2a>
     716:	52 c0       	rjmp	.+164    	; 0x7bc <keypad_report+0xce>
     718:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <kpd_prevState>
     71c:	81 11       	cpse	r24, r1
     71e:	4e c0       	rjmp	.+156    	; 0x7bc <keypad_report+0xce>
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
     720:	e0 91 a0 21 	lds	r30, 0x21A0	; 0x8021a0 <kpd_codeOut>
     724:	8e 2f       	mov	r24, r30
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	fc 01       	movw	r30, r24
     72a:	e9 55       	subi	r30, 0x59	; 89
     72c:	f1 09       	sbc	r31, r1
     72e:	e9 30       	cpi	r30, 0x09	; 9
     730:	f1 05       	cpc	r31, r1
     732:	90 f4       	brcc	.+36     	; 0x758 <keypad_report+0x6a>
     734:	88 27       	eor	r24, r24
     736:	e2 50       	subi	r30, 0x02	; 2
     738:	ff 4f       	sbci	r31, 0xFF	; 255
     73a:	8f 4f       	sbci	r24, 0xFF	; 255
     73c:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__tablejump2__>
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
     740:	84 e0       	ldi	r24, 0x04	; 4
     742:	09 c0       	rjmp	.+18     	; 0x756 <keypad_report+0x68>
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
				case HID_KEYPAD_5:	kpd_testMask = LED5_PIN;	break;	// Display
     744:	80 e1       	ldi	r24, 0x10	; 16
     746:	07 c0       	rjmp	.+14     	; 0x756 <keypad_report+0x68>
				case HID_KEYPAD_6:	kpd_testMask = LED6_PIN;	break;	// Cancel
     748:	80 e2       	ldi	r24, 0x20	; 32
     74a:	05 c0       	rjmp	.+10     	; 0x756 <keypad_report+0x68>
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
     74c:	80 e4       	ldi	r24, 0x40	; 64
     74e:	03 c0       	rjmp	.+6      	; 0x756 <keypad_report+0x68>
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
     750:	80 e8       	ldi	r24, 0x80	; 128
     752:	01 c0       	rjmp	.+2      	; 0x756 <keypad_report+0x68>
		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED)
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
     754:	81 e0       	ldi	r24, 0x01	; 1
				case HID_KEYPAD_7:	kpd_testMask = LED7_PIN;	break;	// Enter
				case HID_KEYPAD_8:	kpd_testMask = LED8_PIN;	break;	// Clear
				case HID_KEYPAD_9:	kpd_testMask = LED1_PIN;	break;	// Null
				default:			kpd_testMask = 0;			break;
			}
			if (kpd_testMask) led_toggle(kpd_testMask);
     756:	5c d0       	rcall	.+184    	; 0x810 <led_toggle>
			kpd_exitTestMode = 1;	// flag for exiting test mode
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	80 93 9f 21 	sts	0x219F, r24	; 0x80219f <kpd_exitTestMode>
     75e:	2e c0       	rjmp	.+92     	; 0x7bc <keypad_report+0xce>
uint8_t keypad_getState(void) {
	return(kpd_keyPressed);
}
// get last detected HID code
uint8_t keypad_getCode(void) {
	return(kpd_code);
     760:	60 91 a3 21 	lds	r22, 0x21A3	; 0x8021a3 <kpd_code>
		// 	kpd_codeOut = keypad_getCode();
		// }
		static uint8_t kpd_prevCode = 0;
		uint8_t currCode = keypad_getCode();

		if (kpd_currState == KEYPAD_PRESSED && kpd_prevState == KEYPAD_RELEASED) {
     764:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <kpd_currState>
     768:	81 30       	cpi	r24, 0x01	; 1
     76a:	59 f4       	brne	.+22     	; 0x782 <keypad_report+0x94>
     76c:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <kpd_prevState>
     770:	81 11       	cpse	r24, r1
     772:	07 c0       	rjmp	.+14     	; 0x782 <keypad_report+0x94>
			kpd_prevCode = currCode;
     774:	60 93 9e 21 	sts	0x219E, r22	; 0x80219e <kpd_prevCode.5347>
			BD76319_KeyToReport(KEYPAD_PRESSED, currCode);
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	7c d2       	rcall	.+1272   	; 0xc78 <BD76319_KeyToReport>
     780:	1d c0       	rjmp	.+58     	; 0x7bc <keypad_report+0xce>
		} else if (kpd_currState == KEYPAD_PRESSED && currCode != kpd_prevCode) {
     782:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <kpd_currState>
     786:	81 30       	cpi	r24, 0x01	; 1
     788:	59 f4       	brne	.+22     	; 0x7a0 <keypad_report+0xb2>
     78a:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <kpd_prevCode.5347>
     78e:	68 17       	cp	r22, r24
     790:	39 f0       	breq	.+14     	; 0x7a0 <keypad_report+0xb2>
			// BD76319_KeyToReport(KEYPAD_RELEASED, kpd_prevCode);
			kpd_prevCode = currCode;
     792:	60 93 9e 21 	sts	0x219E, r22	; 0x80219e <kpd_prevCode.5347>
			BD76319_KeyToReport(KEYPAD_PRESSED, currCode);
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	6d d2       	rcall	.+1242   	; 0xc78 <BD76319_KeyToReport>
     79e:	0e c0       	rjmp	.+28     	; 0x7bc <keypad_report+0xce>
		} else if (kpd_currState == KEYPAD_RELEASED && kpd_prevState == KEYPAD_PRESSED) {
     7a0:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <kpd_currState>
     7a4:	81 11       	cpse	r24, r1
     7a6:	0a c0       	rjmp	.+20     	; 0x7bc <keypad_report+0xce>
     7a8:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <kpd_prevState>
     7ac:	81 30       	cpi	r24, 0x01	; 1
     7ae:	31 f4       	brne	.+12     	; 0x7bc <keypad_report+0xce>
			BD76319_KeyToReport(KEYPAD_RELEASED, kpd_prevCode);
     7b0:	60 91 9e 21 	lds	r22, 0x219E	; 0x80219e <kpd_prevCode.5347>
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	5e d2       	rcall	.+1212   	; 0xc78 <BD76319_KeyToReport>
		}
	}
	
	// clears LEDs when exiting test mode
	if (((kpd_testMode & 0x010) != 0) && (kpd_exitTestMode == 1)) {
     7bc:	80 91 b2 23 	lds	r24, 0x23B2	; 0x8023b2 <kpd_testMode>
     7c0:	84 ff       	sbrs	r24, 4
     7c2:	07 c0       	rjmp	.+14     	; 0x7d2 <keypad_report+0xe4>
     7c4:	80 91 9f 21 	lds	r24, 0x219F	; 0x80219f <kpd_exitTestMode>
     7c8:	81 30       	cpi	r24, 0x01	; 1
		led_allOff();
     7ca:	19 f4       	brne	.+6      	; 0x7d2 <keypad_report+0xe4>
     7cc:	17 d0       	rcall	.+46     	; 0x7fc <led_allOff>
		kpd_exitTestMode = 0;
     7ce:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <kpd_exitTestMode>
	}
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
     7d2:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <kpd_currState>
     7d6:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <kpd_prevState>
}
     7da:	08 95       	ret
		{
			uint8_t kpd_testMask = 0;
			switch (kpd_codeOut) 
			{
				case HID_KEYPAD_1:	kpd_testMask = LED1_PIN;	break;	// F1
				case HID_KEYPAD_2:	kpd_testMask = LED2_PIN;	break;	// F2
     7dc:	82 e0       	ldi	r24, 0x02	; 2
     7de:	bb cf       	rjmp	.-138    	; 0x756 <keypad_report+0x68>
				case HID_KEYPAD_3:	kpd_testMask = LED3_PIN;	break;	// F3
				case HID_KEYPAD_4:	kpd_testMask = LED4_PIN;	break;	// F4
     7e0:	88 e0       	ldi	r24, 0x08	; 8
     7e2:	b9 cf       	rjmp	.-142    	; 0x756 <keypad_report+0x68>

000007e4 <keypad>:
	// update previous state for next cycle
	kpd_prevState = kpd_currState;
}

void keypad(void) {
	keypad_poll();
     7e4:	24 df       	rcall	.-440    	; 0x62e <keypad_poll>
	keypad_report();
     7e6:	83 df       	rcall	.-250    	; 0x6ee <keypad_report>
     7e8:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <udd_get_frame_number>
	BD76319_ui_process(udd_get_frame_number());
     7ec:	4a c2       	rjmp	.+1172   	; 0xc82 <BD76319_ui_process>
     7ee:	08 95       	ret

000007f0 <led_init>:
     7f0:	e0 e0       	ldi	r30, 0x00	; 0
    LED_PORT.DIRSET = LED_MASK;	// outputs
    LED_PORT.OUTSET = LED_MASK;
}

void led_allOn(void) {			// turns all LED's on
	LED_PORT.OUTCLR = LED_MASK;
     7f2:	f6 e0       	ldi	r31, 0x06	; 6
     7f4:	8f ef       	ldi	r24, 0xFF	; 255
     7f6:	81 83       	std	Z+1, r24	; 0x01
     7f8:	85 83       	std	Z+5, r24	; 0x05
     7fa:	08 95       	ret

000007fc <led_allOff>:
}

void led_allOff(void) {			// turns all LED's off
	LED_PORT.OUTSET = LED_MASK;
     7fc:	8f ef       	ldi	r24, 0xFF	; 255
     7fe:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     802:	08 95       	ret

00000804 <led_on>:
}

void led_on(uint8_t mask) {		// LED on
    LED_PORT.OUTCLR = mask;		// drive low (on)
     804:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7be606>
     808:	08 95       	ret

0000080a <led_off>:
}

void led_off(uint8_t mask) {	// LED off
    LED_PORT.OUTSET = mask;		// drive high (off)
     80a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7be605>
     80e:	08 95       	ret

00000810 <led_toggle>:
}

void led_toggle(uint8_t mask) {	// toggle LED
    LED_PORT.OUTTGL = mask;
     810:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7be607>
     814:	08 95       	ret

00000816 <led_setStatus>:
}

void led_setStatus(uint8_t mask) {
    LED_PORT.OUTSET = LED_MASK;
     816:	e0 e0       	ldi	r30, 0x00	; 0
     818:	f6 e0       	ldi	r31, 0x06	; 6
     81a:	9f ef       	ldi	r25, 0xFF	; 255
     81c:	95 83       	std	Z+5, r25	; 0x05
    LED_PORT.OUTCLR = mask;
     81e:	86 83       	std	Z+6, r24	; 0x06
     820:	08 95       	ret

00000822 <startupSequence>:
#include "startup.h"
#include "joystick.h"


void startupSequence(int sequence)
{
     822:	6f 92       	push	r6
     824:	7f 92       	push	r7
     826:	8f 92       	push	r8
     828:	9f 92       	push	r9
     82a:	af 92       	push	r10
     82c:	bf 92       	push	r11
     82e:	cf 92       	push	r12
     830:	df 92       	push	r13
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	cd b7       	in	r28, 0x3d	; 61
     840:	de b7       	in	r29, 0x3e	; 62
     842:	29 97       	sbiw	r28, 0x09	; 9
     844:	cd bf       	out	0x3d, r28	; 61
     846:	de bf       	out	0x3e, r29	; 62
	const uint8_t seq[8] = {
     848:	28 e0       	ldi	r18, 0x08	; 8
     84a:	e4 e8       	ldi	r30, 0x84	; 132
     84c:	f1 e2       	ldi	r31, 0x21	; 33
     84e:	de 01       	movw	r26, r28
     850:	11 96       	adiw	r26, 0x01	; 1
     852:	01 90       	ld	r0, Z+
     854:	0d 92       	st	X+, r0
     856:	2a 95       	dec	r18
     858:	e1 f7       	brne	.-8      	; 0x852 <startupSequence+0x30>
		LED5_PIN,
		LED6_PIN,
		LED7_PIN,
		LED8_PIN
	};
	volatile bool user_active = false;
     85a:	19 86       	std	Y+9, r1	; 0x09

	switch (sequence) {
     85c:	83 30       	cpi	r24, 0x03	; 3
     85e:	91 05       	cpc	r25, r1
     860:	09 f4       	brne	.+2      	; 0x864 <startupSequence+0x42>
     862:	09 c1       	rjmp	.+530    	; 0xa76 <startupSequence+0x254>
     864:	44 f4       	brge	.+16     	; 0x876 <startupSequence+0x54>
     866:	81 30       	cpi	r24, 0x01	; 1
     868:	91 05       	cpc	r25, r1
     86a:	09 f4       	brne	.+2      	; 0x86e <startupSequence+0x4c>
     86c:	4b c0       	rjmp	.+150    	; 0x904 <startupSequence+0xe2>
     86e:	02 97       	sbiw	r24, 0x02	; 2
     870:	09 f4       	brne	.+2      	; 0x874 <startupSequence+0x52>
     872:	aa c0       	rjmp	.+340    	; 0x9c8 <startupSequence+0x1a6>
     874:	ef c1       	rjmp	.+990    	; 0xc54 <startupSequence+0x432>
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	91 05       	cpc	r25, r1
     87a:	09 f4       	brne	.+2      	; 0x87e <startupSequence+0x5c>
     87c:	54 c1       	rjmp	.+680    	; 0xb26 <startupSequence+0x304>
     87e:	05 97       	sbiw	r24, 0x05	; 5
     880:	09 f4       	brne	.+2      	; 0x884 <startupSequence+0x62>
     882:	a5 c1       	rjmp	.+842    	; 0xbce <startupSequence+0x3ac>
     884:	e7 c1       	rjmp	.+974    	; 0xc54 <startupSequence+0x432>
		case 1:
			/* ---------------- sequential ----------------- */
			while (!user_active) {
				for (int i = 0; i < 8 && !user_active; i++) {
					led_on(seq[i]);
     886:	f8 01       	movw	r30, r16
     888:	f1 90       	ld	r15, Z+
     88a:	8f 01       	movw	r16, r30
     88c:	8f 2d       	mov	r24, r15
     88e:	ba df       	rcall	.-140    	; 0x804 <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     890:	ff e0       	ldi	r31, 0x0F	; 15
     892:	28 e9       	ldi	r18, 0x98	; 152
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	f1 50       	subi	r31, 0x01	; 1
     898:	20 40       	sbci	r18, 0x00	; 0
     89a:	80 40       	sbci	r24, 0x00	; 0
     89c:	e1 f7       	brne	.-8      	; 0x896 <startupSequence+0x74>
     89e:	00 c0       	rjmp	.+0      	; 0x8a0 <startupSequence+0x7e>
     8a0:	00 00       	nop
					_delay_ms(850);
					led_off(seq[i]);
     8a2:	8f 2d       	mov	r24, r15

					keypad_poll();
     8a4:	b2 df       	rcall	.-156    	; 0x80a <led_off>
     8a6:	c3 de       	rcall	.-634    	; 0x62e <keypad_poll>
					if (keypad_getState() == KEYPAD_PRESSED)
     8a8:	1f df       	rcall	.-450    	; 0x6e8 <keypad_getState>
     8aa:	81 30       	cpi	r24, 0x01	; 1
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <startupSequence+0x8e>
						user_active = true;
     8ae:	e9 86       	std	Y+9, r14	; 0x09
					if (jstk_readMask() != 0)
     8b0:	1c de       	rcall	.-968    	; 0x4ea <jstk_readMask>
     8b2:	81 11       	cpse	r24, r1
     8b4:	e9 86       	std	Y+9, r14	; 0x09
						user_active = true;
     8b6:	a0 16       	cp	r10, r16

	switch (sequence) {
		case 1:
			/* ---------------- sequential ----------------- */
			while (!user_active) {
				for (int i = 0; i < 8 && !user_active; i++) {
     8b8:	b1 06       	cpc	r11, r17
     8ba:	09 f4       	brne	.+2      	; 0x8be <startupSequence+0x9c>
     8bc:	9d c1       	rjmp	.+826    	; 0xbf8 <startupSequence+0x3d6>
     8be:	89 85       	ldd	r24, Y+9	; 0x09
     8c0:	88 23       	and	r24, r24
     8c2:	09 f3       	breq	.-62     	; 0x886 <startupSequence+0x64>
     8c4:	99 c1       	rjmp	.+818    	; 0xbf8 <startupSequence+0x3d6>
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 7; i >= 0 && !user_active; i--) {
					led_on(seq[i]);
     8c6:	f8 01       	movw	r30, r16
     8c8:	f2 90       	ld	r15, -Z
     8ca:	8f 01       	movw	r16, r30
     8cc:	8f 2d       	mov	r24, r15
     8ce:	9a df       	rcall	.-204    	; 0x804 <led_on>
     8d0:	ff e0       	ldi	r31, 0x0F	; 15
     8d2:	28 e9       	ldi	r18, 0x98	; 152
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	f1 50       	subi	r31, 0x01	; 1
     8d8:	20 40       	sbci	r18, 0x00	; 0
     8da:	80 40       	sbci	r24, 0x00	; 0
     8dc:	e1 f7       	brne	.-8      	; 0x8d6 <startupSequence+0xb4>
					_delay_ms(850);
					led_off(seq[i]);
     8de:	00 c0       	rjmp	.+0      	; 0x8e0 <startupSequence+0xbe>
     8e0:	00 00       	nop

					keypad_poll();
     8e2:	8f 2d       	mov	r24, r15
     8e4:	92 df       	rcall	.-220    	; 0x80a <led_off>
					if (keypad_getState() == KEYPAD_PRESSED)
     8e6:	a3 de       	rcall	.-698    	; 0x62e <keypad_poll>
     8e8:	ff de       	rcall	.-514    	; 0x6e8 <keypad_getState>
     8ea:	81 30       	cpi	r24, 0x01	; 1
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <startupSequence+0xce>
						user_active = true;
     8ee:	e9 86       	std	Y+9, r14	; 0x09
					if (jstk_readMask() != 0)
     8f0:	fc dd       	rcall	.-1032   	; 0x4ea <jstk_readMask>
     8f2:	81 11       	cpse	r24, r1
     8f4:	e9 86       	std	Y+9, r14	; 0x09
						user_active = true;
     8f6:	0c 15       	cp	r16, r12
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 7; i >= 0 && !user_active; i--) {
     8f8:	1d 05       	cpc	r17, r13
     8fa:	69 f0       	breq	.+26     	; 0x916 <startupSequence+0xf4>
     8fc:	89 85       	ldd	r24, Y+9	; 0x09
     8fe:	88 23       	and	r24, r24
     900:	11 f3       	breq	.-60     	; 0x8c6 <startupSequence+0xa4>
     902:	09 c0       	rjmp	.+18     	; 0x916 <startupSequence+0xf4>
     904:	5e 01       	movw	r10, r28
     906:	99 e0       	ldi	r25, 0x09	; 9
     908:	a9 0e       	add	r10, r25
     90a:	b1 1c       	adc	r11, r1
     90c:	ee 24       	eor	r14, r14

					keypad_poll();
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
     90e:	e3 94       	inc	r14
     910:	fe 01       	movw	r30, r28
     912:	31 96       	adiw	r30, 0x01	; 1
     914:	6f 01       	movw	r12, r30
     916:	89 85       	ldd	r24, Y+9	; 0x09
	volatile bool user_active = false;

	switch (sequence) {
		case 1:
			/* ---------------- sequential ----------------- */
			while (!user_active) {
     918:	81 11       	cpse	r24, r1
     91a:	07 c0       	rjmp	.+14     	; 0x92a <startupSequence+0x108>
				for (int i = 0; i < 8 && !user_active; i++) {
     91c:	89 85       	ldd	r24, Y+9	; 0x09
     91e:	81 11       	cpse	r24, r1
     920:	6b c1       	rjmp	.+726    	; 0xbf8 <startupSequence+0x3d6>
     922:	8e 01       	movw	r16, r28
     924:	0f 5f       	subi	r16, 0xFF	; 255
     926:	1f 4f       	sbci	r17, 0xFF	; 255
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
			}
			led_allOff();
     928:	ae cf       	rjmp	.-164    	; 0x886 <startupSequence+0x64>
			break;
     92a:	68 df       	rcall	.-304    	; 0x7fc <led_allOff>
			/* ---------------- out-n-back ----------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
					int left = 3 - i;
					int right = 4 + i;
					led_on(seq[left]);
     92c:	93 c1       	rjmp	.+806    	; 0xc54 <startupSequence+0x432>
     92e:	f8 01       	movw	r30, r16
     930:	72 90       	ld	r7, -Z
     932:	8f 01       	movw	r16, r30
     934:	87 2d       	mov	r24, r7
     936:	66 df       	rcall	.-308    	; 0x804 <led_on>
					led_on(seq[right]);
     938:	f6 01       	movw	r30, r12
     93a:	f1 90       	ld	r15, Z+
     93c:	6f 01       	movw	r12, r30
     93e:	8f 2d       	mov	r24, r15
     940:	61 df       	rcall	.-318    	; 0x804 <led_on>
     942:	ff e1       	ldi	r31, 0x1F	; 31
     944:	2f eb       	ldi	r18, 0xBF	; 191
     946:	82 e0       	ldi	r24, 0x02	; 2
     948:	f1 50       	subi	r31, 0x01	; 1
     94a:	20 40       	sbci	r18, 0x00	; 0
     94c:	80 40       	sbci	r24, 0x00	; 0
					_delay_ms(900);
					led_off(seq[left]);
     94e:	e1 f7       	brne	.-8      	; 0x948 <startupSequence+0x126>
     950:	00 c0       	rjmp	.+0      	; 0x952 <startupSequence+0x130>
     952:	00 00       	nop
					led_off(seq[right]);
     954:	87 2d       	mov	r24, r7
     956:	59 df       	rcall	.-334    	; 0x80a <led_off>
     958:	8f 2d       	mov	r24, r15

					keypad_poll();
     95a:	57 df       	rcall	.-338    	; 0x80a <led_off>
     95c:	68 de       	rcall	.-816    	; 0x62e <keypad_poll>
					if (keypad_getState() == KEYPAD_PRESSED)
     95e:	c4 de       	rcall	.-632    	; 0x6e8 <keypad_getState>
     960:	81 30       	cpi	r24, 0x01	; 1
     962:	09 f4       	brne	.+2      	; 0x966 <startupSequence+0x144>
						user_active = true;
     964:	e9 86       	std	Y+9, r14	; 0x09
					if (jstk_readMask() != 0)
     966:	c1 dd       	rcall	.-1150   	; 0x4ea <jstk_readMask>
     968:	81 11       	cpse	r24, r1
     96a:	e9 86       	std	Y+9, r14	; 0x09
			led_allOff();
			break;
		case 2:
			/* ---------------- out-n-back ----------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
     96c:	80 16       	cp	r8, r16
     96e:	91 06       	cpc	r9, r17
     970:	09 f4       	brne	.+2      	; 0x974 <startupSequence+0x152>
     972:	49 c1       	rjmp	.+658    	; 0xc06 <startupSequence+0x3e4>
     974:	89 85       	ldd	r24, Y+9	; 0x09
     976:	88 23       	and	r24, r24
     978:	d1 f2       	breq	.-76     	; 0x92e <startupSequence+0x10c>
     97a:	45 c1       	rjmp	.+650    	; 0xc06 <startupSequence+0x3e4>
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
					int left = 3 - i;
					int right = 4 + i;
					led_on(seq[left]);
     97c:	f3 01       	movw	r30, r6
     97e:	d1 90       	ld	r13, Z+
     980:	3f 01       	movw	r6, r30
     982:	8d 2d       	mov	r24, r13
					led_on(seq[right]);
     984:	3f df       	rcall	.-386    	; 0x804 <led_on>
     986:	f8 01       	movw	r30, r16
     988:	f2 90       	ld	r15, -Z
     98a:	8f 01       	movw	r16, r30
     98c:	8f 2d       	mov	r24, r15
     98e:	3a df       	rcall	.-396    	; 0x804 <led_on>
     990:	ff e1       	ldi	r31, 0x1F	; 31
     992:	2f eb       	ldi	r18, 0xBF	; 191
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	f1 50       	subi	r31, 0x01	; 1
     998:	20 40       	sbci	r18, 0x00	; 0
     99a:	80 40       	sbci	r24, 0x00	; 0
     99c:	e1 f7       	brne	.-8      	; 0x996 <startupSequence+0x174>
					_delay_ms(900);
					led_off(seq[left]);
     99e:	00 c0       	rjmp	.+0      	; 0x9a0 <startupSequence+0x17e>
     9a0:	00 00       	nop
     9a2:	8d 2d       	mov	r24, r13
					led_off(seq[right]);
     9a4:	32 df       	rcall	.-412    	; 0x80a <led_off>
     9a6:	8f 2d       	mov	r24, r15
     9a8:	30 df       	rcall	.-416    	; 0x80a <led_off>

					keypad_poll();
     9aa:	41 de       	rcall	.-894    	; 0x62e <keypad_poll>
     9ac:	9d de       	rcall	.-710    	; 0x6e8 <keypad_getState>
					if (keypad_getState() == KEYPAD_PRESSED)
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	09 f4       	brne	.+2      	; 0x9b4 <startupSequence+0x192>
     9b2:	e9 86       	std	Y+9, r14	; 0x09
     9b4:	9a dd       	rcall	.-1228   	; 0x4ea <jstk_readMask>
						user_active = true;
     9b6:	81 11       	cpse	r24, r1
					if (jstk_readMask() != 0)
     9b8:	e9 86       	std	Y+9, r14	; 0x09
     9ba:	0a 15       	cp	r16, r10
     9bc:	1b 05       	cpc	r17, r11
						user_active = true;
     9be:	69 f0       	breq	.+26     	; 0x9da <startupSequence+0x1b8>
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     9c0:	89 85       	ldd	r24, Y+9	; 0x09
     9c2:	88 23       	and	r24, r24
     9c4:	d9 f2       	breq	.-74     	; 0x97c <startupSequence+0x15a>
     9c6:	09 c0       	rjmp	.+18     	; 0x9da <startupSequence+0x1b8>
     9c8:	fe 01       	movw	r30, r28
     9ca:	31 96       	adiw	r30, 0x01	; 1
     9cc:	4f 01       	movw	r8, r30
     9ce:	ee 24       	eor	r14, r14

					keypad_poll();
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
     9d0:	e3 94       	inc	r14
     9d2:	5e 01       	movw	r10, r28
     9d4:	f5 e0       	ldi	r31, 0x05	; 5
     9d6:	af 0e       	add	r10, r31
     9d8:	b1 1c       	adc	r11, r1
			}
			led_allOff();
			break;
		case 2:
			/* ---------------- out-n-back ----------------- */
			while (!user_active) {
     9da:	89 85       	ldd	r24, Y+9	; 0x09
     9dc:	81 11       	cpse	r24, r1
     9de:	08 c0       	rjmp	.+16     	; 0x9f0 <startupSequence+0x1ce>
				for (int i = 0; i < 4 && !user_active; i++) {
     9e0:	89 85       	ldd	r24, Y+9	; 0x09
     9e2:	81 11       	cpse	r24, r1
     9e4:	10 c1       	rjmp	.+544    	; 0xc06 <startupSequence+0x3e4>
     9e6:	8e 01       	movw	r16, r28
     9e8:	0b 5f       	subi	r16, 0xFB	; 251
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
			}
			led_allOff();
     9ea:	1f 4f       	sbci	r17, 0xFF	; 255
     9ec:	68 01       	movw	r12, r16
			break;
     9ee:	9f cf       	rjmp	.-194    	; 0x92e <startupSequence+0x10c>
			/* --------------- grow-n-shrink ---------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
					int left = 3 - i;
					int right = 4 + i;
					led_on(seq[left]);
     9f0:	05 df       	rcall	.-502    	; 0x7fc <led_allOff>
     9f2:	30 c1       	rjmp	.+608    	; 0xc54 <startupSequence+0x432>
     9f4:	f8 01       	movw	r30, r16
     9f6:	82 91       	ld	r24, -Z
     9f8:	8f 01       	movw	r16, r30
					led_on(seq[right]);
     9fa:	04 df       	rcall	.-504    	; 0x804 <led_on>
     9fc:	f7 01       	movw	r30, r14
     9fe:	81 91       	ld	r24, Z+
     a00:	7f 01       	movw	r14, r30
     a02:	00 df       	rcall	.-512    	; 0x804 <led_on>
     a04:	ff e2       	ldi	r31, 0x2F	; 47
     a06:	27 e5       	ldi	r18, 0x57	; 87
     a08:	85 e0       	ldi	r24, 0x05	; 5
     a0a:	f1 50       	subi	r31, 0x01	; 1
     a0c:	20 40       	sbci	r18, 0x00	; 0
     a0e:	80 40       	sbci	r24, 0x00	; 0
     a10:	e1 f7       	brne	.-8      	; 0xa0a <startupSequence+0x1e8>
					_delay_ms(1750);

					keypad_poll();
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <startupSequence+0x1f2>
     a14:	00 00       	nop
					if (keypad_getState() == KEYPAD_PRESSED)
     a16:	0b de       	rcall	.-1002   	; 0x62e <keypad_poll>
     a18:	67 de       	rcall	.-818    	; 0x6e8 <keypad_getState>
     a1a:	81 30       	cpi	r24, 0x01	; 1
						user_active = true;
					if (jstk_readMask() != 0)
     a1c:	09 f4       	brne	.+2      	; 0xa20 <startupSequence+0x1fe>
     a1e:	99 86       	std	Y+9, r9	; 0x09
     a20:	64 dd       	rcall	.-1336   	; 0x4ea <jstk_readMask>
			led_allOff();
			break;
		case 3:
			/* --------------- grow-n-shrink ---------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
     a22:	81 11       	cpse	r24, r1
     a24:	99 86       	std	Y+9, r9	; 0x09
     a26:	a0 16       	cp	r10, r16
     a28:	b1 06       	cpc	r11, r17
     a2a:	09 f4       	brne	.+2      	; 0xa2e <startupSequence+0x20c>
     a2c:	f6 c0       	rjmp	.+492    	; 0xc1a <startupSequence+0x3f8>
     a2e:	89 85       	ldd	r24, Y+9	; 0x09
     a30:	88 23       	and	r24, r24
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
					int left = 3 - i;
					int right = 4 + i;
					led_off(seq[left]);
     a32:	01 f3       	breq	.-64     	; 0x9f4 <startupSequence+0x1d2>
     a34:	f2 c0       	rjmp	.+484    	; 0xc1a <startupSequence+0x3f8>
     a36:	f7 01       	movw	r30, r14
     a38:	81 91       	ld	r24, Z+
     a3a:	7f 01       	movw	r14, r30
					led_off(seq[right]);
     a3c:	e6 de       	rcall	.-564    	; 0x80a <led_off>
     a3e:	f8 01       	movw	r30, r16
     a40:	82 91       	ld	r24, -Z
     a42:	8f 01       	movw	r16, r30
     a44:	e2 de       	rcall	.-572    	; 0x80a <led_off>
     a46:	ff e2       	ldi	r31, 0x2F	; 47
     a48:	27 e5       	ldi	r18, 0x57	; 87
     a4a:	85 e0       	ldi	r24, 0x05	; 5
     a4c:	f1 50       	subi	r31, 0x01	; 1
     a4e:	20 40       	sbci	r18, 0x00	; 0
     a50:	80 40       	sbci	r24, 0x00	; 0
     a52:	e1 f7       	brne	.-8      	; 0xa4c <startupSequence+0x22a>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <startupSequence+0x234>
     a56:	00 00       	nop
					_delay_ms(1750);

					keypad_poll();
     a58:	ea dd       	rcall	.-1068   	; 0x62e <keypad_poll>
     a5a:	46 de       	rcall	.-884    	; 0x6e8 <keypad_getState>
					if (keypad_getState() == KEYPAD_PRESSED)
     a5c:	81 30       	cpi	r24, 0x01	; 1
     a5e:	09 f4       	brne	.+2      	; 0xa62 <startupSequence+0x240>
     a60:	99 86       	std	Y+9, r9	; 0x09
						user_active = true;
     a62:	43 dd       	rcall	.-1402   	; 0x4ea <jstk_readMask>
					if (jstk_readMask() != 0)
     a64:	81 11       	cpse	r24, r1
     a66:	99 86       	std	Y+9, r9	; 0x09
						user_active = true;
     a68:	0c 15       	cp	r16, r12
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     a6a:	1d 05       	cpc	r17, r13
     a6c:	69 f0       	breq	.+26     	; 0xa88 <startupSequence+0x266>
     a6e:	89 85       	ldd	r24, Y+9	; 0x09
     a70:	88 23       	and	r24, r24
     a72:	09 f3       	breq	.-62     	; 0xa36 <startupSequence+0x214>
     a74:	09 c0       	rjmp	.+18     	; 0xa88 <startupSequence+0x266>
     a76:	fe 01       	movw	r30, r28
     a78:	31 96       	adiw	r30, 0x01	; 1
     a7a:	5f 01       	movw	r10, r30

					keypad_poll();
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
     a7c:	99 24       	eor	r9, r9
     a7e:	93 94       	inc	r9
     a80:	6e 01       	movw	r12, r28
     a82:	f5 e0       	ldi	r31, 0x05	; 5
			}
			led_allOff();
			break;
		case 3:
			/* --------------- grow-n-shrink ---------------- */
			while (!user_active) {
     a84:	cf 0e       	add	r12, r31
     a86:	d1 1c       	adc	r13, r1
				for (int i = 0; i < 4 && !user_active; i++) {
     a88:	89 85       	ldd	r24, Y+9	; 0x09
     a8a:	81 11       	cpse	r24, r1
     a8c:	09 c0       	rjmp	.+18     	; 0xaa0 <startupSequence+0x27e>
     a8e:	89 85       	ldd	r24, Y+9	; 0x09
     a90:	81 11       	cpse	r24, r1
     a92:	c3 c0       	rjmp	.+390    	; 0xc1a <startupSequence+0x3f8>
     a94:	7e 01       	movw	r14, r28
     a96:	25 e0       	ldi	r18, 0x05	; 5
     a98:	e2 0e       	add	r14, r18
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
			}
			led_allOff();
     a9a:	f1 1c       	adc	r15, r1
     a9c:	87 01       	movw	r16, r14
			/* --------------- outward waves --------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
					int left = 3 - i;
					int right = 4 + i;
					led_on(seq[left]);
     a9e:	aa cf       	rjmp	.-172    	; 0x9f4 <startupSequence+0x1d2>
     aa0:	ad de       	rcall	.-678    	; 0x7fc <led_allOff>
     aa2:	d8 c0       	rjmp	.+432    	; 0xc54 <startupSequence+0x432>
     aa4:	f8 01       	movw	r30, r16
					led_on(seq[right]);
     aa6:	82 91       	ld	r24, -Z
     aa8:	8f 01       	movw	r16, r30
     aaa:	ac de       	rcall	.-680    	; 0x804 <led_on>
     aac:	f7 01       	movw	r30, r14
     aae:	81 91       	ld	r24, Z+
     ab0:	7f 01       	movw	r14, r30
     ab2:	a8 de       	rcall	.-688    	; 0x804 <led_on>
     ab4:	ff e2       	ldi	r31, 0x2F	; 47
     ab6:	27 e5       	ldi	r18, 0x57	; 87
     ab8:	85 e0       	ldi	r24, 0x05	; 5
     aba:	f1 50       	subi	r31, 0x01	; 1
     abc:	20 40       	sbci	r18, 0x00	; 0
					_delay_ms(1750);

					keypad_poll();
     abe:	80 40       	sbci	r24, 0x00	; 0
     ac0:	e1 f7       	brne	.-8      	; 0xaba <startupSequence+0x298>
					if (keypad_getState() == KEYPAD_PRESSED)
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <startupSequence+0x2a2>
     ac4:	00 00       	nop
     ac6:	b3 dd       	rcall	.-1178   	; 0x62e <keypad_poll>
     ac8:	0f de       	rcall	.-994    	; 0x6e8 <keypad_getState>
						user_active = true;
     aca:	81 30       	cpi	r24, 0x01	; 1
					if (jstk_readMask() != 0)
     acc:	09 f4       	brne	.+2      	; 0xad0 <startupSequence+0x2ae>
     ace:	b9 86       	std	Y+9, r11	; 0x09
     ad0:	0c dd       	rcall	.-1512   	; 0x4ea <jstk_readMask>
						user_active = true;
     ad2:	81 11       	cpse	r24, r1
			led_allOff();
			break;
		case 4:
			/* --------------- outward waves --------------- */
			while (!user_active) {
				for (int i = 0; i < 4 && !user_active; i++) {
     ad4:	b9 86       	std	Y+9, r11	; 0x09
     ad6:	c0 16       	cp	r12, r16
     ad8:	d1 06       	cpc	r13, r17
     ada:	09 f4       	brne	.+2      	; 0xade <startupSequence+0x2bc>
     adc:	a8 c0       	rjmp	.+336    	; 0xc2e <startupSequence+0x40c>
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	88 23       	and	r24, r24
     ae2:	01 f3       	breq	.-64     	; 0xaa4 <startupSequence+0x282>
						user_active = true;
				}
				for (int i = 0; i < 4 && !user_active; i++) {
					int left = 3 - i;
					int right = 4 + i;
					led_off(seq[left]);
     ae4:	a4 c0       	rjmp	.+328    	; 0xc2e <startupSequence+0x40c>
     ae6:	f8 01       	movw	r30, r16
     ae8:	82 91       	ld	r24, -Z
     aea:	8f 01       	movw	r16, r30
     aec:	8e de       	rcall	.-740    	; 0x80a <led_off>
					led_off(seq[right]);
     aee:	f7 01       	movw	r30, r14
     af0:	81 91       	ld	r24, Z+
     af2:	7f 01       	movw	r14, r30
     af4:	8a de       	rcall	.-748    	; 0x80a <led_off>
     af6:	ff e2       	ldi	r31, 0x2F	; 47
     af8:	27 e5       	ldi	r18, 0x57	; 87
     afa:	85 e0       	ldi	r24, 0x05	; 5
     afc:	f1 50       	subi	r31, 0x01	; 1
     afe:	20 40       	sbci	r18, 0x00	; 0
     b00:	80 40       	sbci	r24, 0x00	; 0
     b02:	e1 f7       	brne	.-8      	; 0xafc <startupSequence+0x2da>
					_delay_ms(1750);

					keypad_poll();
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <startupSequence+0x2e4>
     b06:	00 00       	nop
					if (keypad_getState() == KEYPAD_PRESSED)
     b08:	92 dd       	rcall	.-1244   	; 0x62e <keypad_poll>
     b0a:	ee dd       	rcall	.-1060   	; 0x6e8 <keypad_getState>
     b0c:	81 30       	cpi	r24, 0x01	; 1
     b0e:	09 f4       	brne	.+2      	; 0xb12 <startupSequence+0x2f0>
						user_active = true;
     b10:	b9 86       	std	Y+9, r11	; 0x09
					if (jstk_readMask() != 0)
     b12:	eb dc       	rcall	.-1578   	; 0x4ea <jstk_readMask>
						user_active = true;
     b14:	81 11       	cpse	r24, r1
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 0; i < 4 && !user_active; i++) {
     b16:	b9 86       	std	Y+9, r11	; 0x09
     b18:	c0 16       	cp	r12, r16
     b1a:	d1 06       	cpc	r13, r17
     b1c:	49 f0       	breq	.+18     	; 0xb30 <startupSequence+0x30e>
     b1e:	89 85       	ldd	r24, Y+9	; 0x09
     b20:	88 23       	and	r24, r24
     b22:	09 f3       	breq	.-62     	; 0xae6 <startupSequence+0x2c4>
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <startupSequence+0x30e>
     b26:	fe 01       	movw	r30, r28

					keypad_poll();
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
     b28:	31 96       	adiw	r30, 0x01	; 1
     b2a:	6f 01       	movw	r12, r30
			}
			led_allOff();
			break;
		case 4:
			/* --------------- outward waves --------------- */
			while (!user_active) {
     b2c:	bb 24       	eor	r11, r11
     b2e:	b3 94       	inc	r11
     b30:	89 85       	ldd	r24, Y+9	; 0x09
				for (int i = 0; i < 4 && !user_active; i++) {
     b32:	81 11       	cpse	r24, r1
     b34:	09 c0       	rjmp	.+18     	; 0xb48 <startupSequence+0x326>
     b36:	89 85       	ldd	r24, Y+9	; 0x09
     b38:	81 11       	cpse	r24, r1
     b3a:	79 c0       	rjmp	.+242    	; 0xc2e <startupSequence+0x40c>
     b3c:	7e 01       	movw	r14, r28
     b3e:	f5 e0       	ldi	r31, 0x05	; 5
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
			}
			led_allOff();
     b40:	ef 0e       	add	r14, r31
     b42:	f1 1c       	adc	r15, r1
			break;
     b44:	87 01       	movw	r16, r14
			/* ---------------- inward waves --------------- */
			while (!user_active) {
				for (int i = 3; i >= 0 && !user_active; i--) {
					int left = 3 - i;
					int right = 4 + i;
					led_on(seq[left]);
     b46:	ae cf       	rjmp	.-164    	; 0xaa4 <startupSequence+0x282>
     b48:	59 de       	rcall	.-846    	; 0x7fc <led_allOff>
     b4a:	84 c0       	rjmp	.+264    	; 0xc54 <startupSequence+0x432>
					led_on(seq[right]);
     b4c:	f7 01       	movw	r30, r14
     b4e:	81 91       	ld	r24, Z+
     b50:	7f 01       	movw	r14, r30
     b52:	58 de       	rcall	.-848    	; 0x804 <led_on>
     b54:	f8 01       	movw	r30, r16
     b56:	82 91       	ld	r24, -Z
     b58:	8f 01       	movw	r16, r30
     b5a:	54 de       	rcall	.-856    	; 0x804 <led_on>
     b5c:	ff e2       	ldi	r31, 0x2F	; 47
     b5e:	27 e5       	ldi	r18, 0x57	; 87
     b60:	85 e0       	ldi	r24, 0x05	; 5
     b62:	f1 50       	subi	r31, 0x01	; 1
     b64:	20 40       	sbci	r18, 0x00	; 0
					_delay_ms(1750);

					keypad_poll();
     b66:	80 40       	sbci	r24, 0x00	; 0
     b68:	e1 f7       	brne	.-8      	; 0xb62 <startupSequence+0x340>
					if (keypad_getState() == KEYPAD_PRESSED)
     b6a:	00 c0       	rjmp	.+0      	; 0xb6c <startupSequence+0x34a>
     b6c:	00 00       	nop
     b6e:	5f dd       	rcall	.-1346   	; 0x62e <keypad_poll>
     b70:	bb dd       	rcall	.-1162   	; 0x6e8 <keypad_getState>
						user_active = true;
     b72:	81 30       	cpi	r24, 0x01	; 1
					if (jstk_readMask() != 0)
     b74:	09 f4       	brne	.+2      	; 0xb78 <startupSequence+0x356>
     b76:	b9 86       	std	Y+9, r11	; 0x09
     b78:	b8 dc       	rcall	.-1680   	; 0x4ea <jstk_readMask>
						user_active = true;
     b7a:	81 11       	cpse	r24, r1
			led_allOff();
			break;
		case 5:
			/* ---------------- inward waves --------------- */
			while (!user_active) {
				for (int i = 3; i >= 0 && !user_active; i--) {
     b7c:	b9 86       	std	Y+9, r11	; 0x09
     b7e:	0c 15       	cp	r16, r12
     b80:	1d 05       	cpc	r17, r13
     b82:	09 f4       	brne	.+2      	; 0xb86 <startupSequence+0x364>
     b84:	5d c0       	rjmp	.+186    	; 0xc40 <startupSequence+0x41e>
     b86:	89 85       	ldd	r24, Y+9	; 0x09
     b88:	88 23       	and	r24, r24
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
					int left = 3 - i;
					int right = 4 + i;
					led_off(seq[left]);
     b8a:	01 f3       	breq	.-64     	; 0xb4c <startupSequence+0x32a>
     b8c:	59 c0       	rjmp	.+178    	; 0xc40 <startupSequence+0x41e>
     b8e:	f7 01       	movw	r30, r14
     b90:	81 91       	ld	r24, Z+
     b92:	7f 01       	movw	r14, r30
					led_off(seq[right]);
     b94:	3a de       	rcall	.-908    	; 0x80a <led_off>
     b96:	f8 01       	movw	r30, r16
     b98:	82 91       	ld	r24, -Z
     b9a:	8f 01       	movw	r16, r30
     b9c:	36 de       	rcall	.-916    	; 0x80a <led_off>
     b9e:	ff e2       	ldi	r31, 0x2F	; 47
     ba0:	27 e5       	ldi	r18, 0x57	; 87
     ba2:	85 e0       	ldi	r24, 0x05	; 5
     ba4:	f1 50       	subi	r31, 0x01	; 1
     ba6:	20 40       	sbci	r18, 0x00	; 0
     ba8:	80 40       	sbci	r24, 0x00	; 0
     baa:	e1 f7       	brne	.-8      	; 0xba4 <startupSequence+0x382>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <startupSequence+0x38c>
     bae:	00 00       	nop
					_delay_ms(1750);

					keypad_poll();
     bb0:	3e dd       	rcall	.-1412   	; 0x62e <keypad_poll>
     bb2:	9a dd       	rcall	.-1228   	; 0x6e8 <keypad_getState>
					if (keypad_getState() == KEYPAD_PRESSED)
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	09 f4       	brne	.+2      	; 0xbba <startupSequence+0x398>
     bb8:	b9 86       	std	Y+9, r11	; 0x09
     bba:	97 dc       	rcall	.-1746   	; 0x4ea <jstk_readMask>
						user_active = true;
     bbc:	81 11       	cpse	r24, r1
					if (jstk_readMask() != 0)
     bbe:	b9 86       	std	Y+9, r11	; 0x09
     bc0:	0c 15       	cp	r16, r12
     bc2:	1d 05       	cpc	r17, r13
						user_active = true;
     bc4:	51 f0       	breq	.+20     	; 0xbda <startupSequence+0x3b8>
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     bc6:	89 85       	ldd	r24, Y+9	; 0x09
     bc8:	88 23       	and	r24, r24
     bca:	09 f3       	breq	.-62     	; 0xb8e <startupSequence+0x36c>
     bcc:	06 c0       	rjmp	.+12     	; 0xbda <startupSequence+0x3b8>
     bce:	6e 01       	movw	r12, r28
     bd0:	95 e0       	ldi	r25, 0x05	; 5
     bd2:	c9 0e       	add	r12, r25
     bd4:	d1 1c       	adc	r13, r1
     bd6:	bb 24       	eor	r11, r11
     bd8:	b3 94       	inc	r11
     bda:	89 85       	ldd	r24, Y+9	; 0x09

					keypad_poll();
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
     bdc:	81 11       	cpse	r24, r1
     bde:	0a c0       	rjmp	.+20     	; 0xbf4 <startupSequence+0x3d2>
			}
			led_allOff();
			break;
		case 5:
			/* ---------------- inward waves --------------- */
			while (!user_active) {
     be0:	89 85       	ldd	r24, Y+9	; 0x09
     be2:	81 11       	cpse	r24, r1
     be4:	2d c0       	rjmp	.+90     	; 0xc40 <startupSequence+0x41e>
				for (int i = 3; i >= 0 && !user_active; i--) {
     be6:	fe 01       	movw	r30, r28
     be8:	31 96       	adiw	r30, 0x01	; 1
     bea:	7f 01       	movw	r14, r30
     bec:	8e 01       	movw	r16, r28
     bee:	07 5f       	subi	r16, 0xF7	; 247
     bf0:	1f 4f       	sbci	r17, 0xFF	; 255
     bf2:	ac cf       	rjmp	.-168    	; 0xb4c <startupSequence+0x32a>
     bf4:	03 de       	rcall	.-1018   	; 0x7fc <led_allOff>
     bf6:	2e c0       	rjmp	.+92     	; 0xc54 <startupSequence+0x432>
     bf8:	89 85       	ldd	r24, Y+9	; 0x09
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
			}
			led_allOff();
     bfa:	81 11       	cpse	r24, r1
     bfc:	8c ce       	rjmp	.-744    	; 0x916 <startupSequence+0xf4>
			break;
		default:
			break;
	}
     bfe:	8e 01       	movw	r16, r28
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 7; i >= 0 && !user_active; i--) {
     c00:	07 5f       	subi	r16, 0xF7	; 247
     c02:	1f 4f       	sbci	r17, 0xFF	; 255
     c04:	60 ce       	rjmp	.-832    	; 0x8c6 <startupSequence+0xa4>
     c06:	89 85       	ldd	r24, Y+9	; 0x09
     c08:	81 11       	cpse	r24, r1
     c0a:	e7 ce       	rjmp	.-562    	; 0x9da <startupSequence+0x1b8>
     c0c:	ce 01       	movw	r24, r28
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	3c 01       	movw	r6, r24
     c12:	8e 01       	movw	r16, r28
     c14:	07 5f       	subi	r16, 0xF7	; 247
     c16:	1f 4f       	sbci	r17, 0xFF	; 255
     c18:	b1 ce       	rjmp	.-670    	; 0x97c <startupSequence+0x15a>
     c1a:	89 85       	ldd	r24, Y+9	; 0x09
     c1c:	81 11       	cpse	r24, r1
     c1e:	34 cf       	rjmp	.-408    	; 0xa88 <startupSequence+0x266>
     c20:	fe 01       	movw	r30, r28
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     c22:	31 96       	adiw	r30, 0x01	; 1
     c24:	7f 01       	movw	r14, r30
     c26:	8e 01       	movw	r16, r28
     c28:	07 5f       	subi	r16, 0xF7	; 247
     c2a:	1f 4f       	sbci	r17, 0xFF	; 255
     c2c:	04 cf       	rjmp	.-504    	; 0xa36 <startupSequence+0x214>
     c2e:	89 85       	ldd	r24, Y+9	; 0x09
     c30:	81 11       	cpse	r24, r1
     c32:	7e cf       	rjmp	.-260    	; 0xb30 <startupSequence+0x30e>
     c34:	7e 01       	movw	r14, r28
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 0; i < 4 && !user_active; i++) {
     c36:	f5 e0       	ldi	r31, 0x05	; 5
     c38:	ef 0e       	add	r14, r31
     c3a:	f1 1c       	adc	r15, r1
     c3c:	87 01       	movw	r16, r14
     c3e:	53 cf       	rjmp	.-346    	; 0xae6 <startupSequence+0x2c4>
     c40:	89 85       	ldd	r24, Y+9	; 0x09
     c42:	81 11       	cpse	r24, r1
     c44:	ca cf       	rjmp	.-108    	; 0xbda <startupSequence+0x3b8>
     c46:	ce 01       	movw	r24, r28
					if (keypad_getState() == KEYPAD_PRESSED)
						user_active = true;
					if (jstk_readMask() != 0)
						user_active = true;
				}
				for (int i = 3; i >= 0 && !user_active; i--) {
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	7c 01       	movw	r14, r24
     c4c:	8e 01       	movw	r16, r28
     c4e:	07 5f       	subi	r16, 0xF7	; 247
     c50:	1f 4f       	sbci	r17, 0xFF	; 255
     c52:	9d cf       	rjmp	.-198    	; 0xb8e <startupSequence+0x36c>
     c54:	29 96       	adiw	r28, 0x09	; 9
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	df 91       	pop	r29
			led_allOff();
			break;
		default:
			break;
	}
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	df 90       	pop	r13
     c68:	cf 90       	pop	r12
     c6a:	bf 90       	pop	r11
     c6c:	af 90       	pop	r10
     c6e:	9f 90       	pop	r9
     c70:	8f 90       	pop	r8
     c72:	7f 90       	pop	r7
     c74:	6f 90       	pop	r6
     c76:	08 95       	ret

00000c78 <BD76319_KeyToReport>:
// }

void BD76319_KeyToReport(uint16_t pui_KeyStatus, uint16_t pui_KeyValue)
{

	ui_KeyStatusToReport = pui_KeyStatus;
     c78:	80 93 c2 21 	sts	0x21C2, r24	; 0x8021c2 <ui_KeyStatusToReport>
	ui_KeyToReport = pui_KeyValue;
     c7c:	60 93 c1 21 	sts	0x21C1, r22	; 0x8021c1 <ui_KeyToReport>
     c80:	08 95       	ret

00000c82 <BD76319_ui_process>:
// 	key_was_down = key_down;
// 	last_val = key_val;
// }

void BD76319_ui_process(uint16_t pui_framenumber)
{
     c82:	cf 93       	push	r28
	static bool key_was_down = false;
	static uint8_t active_key = 0;

	bool key_down = ui_KeyStatusToReport;
     c84:	80 91 c2 21 	lds	r24, 0x21C2	; 0x8021c2 <ui_KeyStatusToReport>
     c88:	c1 e0       	ldi	r28, 0x01	; 1
     c8a:	81 11       	cpse	r24, r1
     c8c:	01 c0       	rjmp	.+2      	; 0xc90 <BD76319_ui_process+0xe>
     c8e:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t key_val = ui_KeyToReport;

	if (key_down) {
     c90:	88 23       	and	r24, r24
     c92:	81 f0       	breq	.+32     	; 0xcb4 <BD76319_ui_process+0x32>
{
	static bool key_was_down = false;
	static uint8_t active_key = 0;

	bool key_down = ui_KeyStatusToReport;
	uint8_t key_val = ui_KeyToReport;
     c94:	80 91 c1 21 	lds	r24, 0x21C1	; 0x8021c1 <ui_KeyToReport>

	if (key_down) {
		if (!key_was_down)
     c98:	90 91 c0 21 	lds	r25, 0x21C0	; 0x8021c0 <key_was_down.5315>
     c9c:	91 11       	cpse	r25, r1
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <BD76319_ui_process+0x24>
			active_key = key_val;
     ca0:	80 93 bf 21 	sts	0x21BF, r24	; 0x8021bf <active_key.5316>
     ca4:	15 c0       	rjmp	.+42     	; 0xcd0 <BD76319_ui_process+0x4e>
		else if (key_val != active_key)
     ca6:	90 91 bf 21 	lds	r25, 0x21BF	; 0x8021bf <active_key.5316>
     caa:	89 17       	cp	r24, r25
     cac:	89 f0       	breq	.+34     	; 0xcd0 <BD76319_ui_process+0x4e>
			active_key = key_val;
     cae:	80 93 bf 21 	sts	0x21BF, r24	; 0x8021bf <active_key.5316>
     cb2:	0e c0       	rjmp	.+28     	; 0xcd0 <BD76319_ui_process+0x4e>
	} else if (key_was_down) {
     cb4:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <key_was_down.5315>
     cb8:	88 23       	and	r24, r24
     cba:	51 f0       	breq	.+20     	; 0xcd0 <BD76319_ui_process+0x4e>
		if (active_key) {
     cbc:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <active_key.5316>
     cc0:	88 23       	and	r24, r24
     cc2:	21 f0       	breq	.+8      	; 0xccc <BD76319_ui_process+0x4a>
			udi_hid_kbd_down(active_key);
     cc4:	e0 d1       	rcall	.+960    	; 0x1086 <udi_hid_kbd_down>
			udi_hid_kbd_up(active_key);
     cc6:	80 91 bf 21 	lds	r24, 0x21BF	; 0x8021bf <active_key.5316>
     cca:	a1 d1       	rcall	.+834    	; 0x100e <udi_hid_kbd_up>
		}
		active_key = 0;
     ccc:	10 92 bf 21 	sts	0x21BF, r1	; 0x8021bf <active_key.5316>
	}
	key_was_down = key_down;
     cd0:	c0 93 c0 21 	sts	0x21C0, r28	; 0x8021c0 <key_was_down.5315>
}
     cd4:	cf 91       	pop	r28
     cd6:	08 95       	ret

00000cd8 <jstk_ui_process>:
// 	// Write Alarm information to Alarm LEDs
// 	PORTA.OUT = ~value;
// }

void jstk_ui_process(void) {
	joystick();
     cd8:	5e cc       	rjmp	.-1860   	; 0x596 <joystick>
     cda:	08 95       	ret

00000cdc <kbd_ui_process>:
}

void kbd_ui_process(void) {
	keypad();
     cdc:	83 cd       	rjmp	.-1274   	; 0x7e4 <keypad>
     cde:	08 95       	ret

00000ce0 <led_ui_process>:
}

void led_ui_process(uint8_t mask) {
	led_setStatus(mask);
     ce0:	9a cd       	rjmp	.-1228   	; 0x816 <led_setStatus>
     ce2:	08 95       	ret

00000ce4 <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	27 97       	sbiw	r28, 0x07	; 7
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
     cfc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
     d00:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
     d04:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
     d08:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
     d0c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
     d10:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
     d14:	65 e0       	ldi	r22, 0x05	; 5
     d16:	81 e4       	ldi	r24, 0x41	; 65
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	7a d6       	rcall	.+3316   	; 0x1a10 <ccp_write_io>
     d1c:	6c e1       	ldi	r22, 0x1C	; 28
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	6c d6       	rcall	.+3288   	; 0x19fc <nvm_read_byte>
     d24:	8a 83       	std	Y+2, r24	; 0x02
     d26:	6d e1       	ldi	r22, 0x1D	; 29
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	67 d6       	rcall	.+3278   	; 0x19fc <nvm_read_byte>
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	9a 81       	ldd	r25, Y+2	; 0x02
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	21 f4       	brne	.+8      	; 0xd40 <sysclk_init+0x5c>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	93 e2       	ldi	r25, 0x23	; 35
     d3c:	89 83       	std	Y+1, r24	; 0x01
     d3e:	9a 83       	std	Y+2, r25	; 0x02
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	8b 83       	std	Y+3, r24	; 0x03
     d46:	9c 83       	std	Y+4, r25	; 0x04
     d48:	e0 e6       	ldi	r30, 0x60	; 96
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	82 83       	std	Z+2, r24	; 0x02
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04
     d50:	83 83       	std	Z+3, r24	; 0x03
     d52:	8f b7       	in	r24, 0x3f	; 63
     d54:	8e 83       	std	Y+6, r24	; 0x06
     d56:	f8 94       	cli
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	e0 e5       	ldi	r30, 0x50	; 80
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	82 60       	ori	r24, 0x02	; 2
     d62:	80 83       	st	Z, r24
     d64:	9f bf       	out	0x3f, r25	; 63
     d66:	81 81       	ldd	r24, Z+1	; 0x01
     d68:	81 ff       	sbrs	r24, 1
     d6a:	fd cf       	rjmp	.-6      	; 0xd66 <sysclk_init+0x82>
     d6c:	8f b7       	in	r24, 0x3f	; 63
     d6e:	8f 83       	std	Y+7, r24	; 0x07
     d70:	f8 94       	cli
     d72:	9f 81       	ldd	r25, Y+7	; 0x07
     d74:	00 e5       	ldi	r16, 0x50	; 80
     d76:	10 e0       	ldi	r17, 0x00	; 0
     d78:	d8 01       	movw	r26, r16
     d7a:	16 96       	adiw	r26, 0x06	; 6
     d7c:	8c 91       	ld	r24, X
     d7e:	16 97       	sbiw	r26, 0x06	; 6
     d80:	89 7f       	andi	r24, 0xF9	; 249
     d82:	16 96       	adiw	r26, 0x06	; 6
     d84:	8c 93       	st	X, r24
     d86:	16 97       	sbiw	r26, 0x06	; 6
     d88:	e0 e6       	ldi	r30, 0x60	; 96
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 e8       	ldi	r24, 0x80	; 128
     d8e:	85 83       	std	Z+5, r24	; 0x05
     d90:	8b eb       	ldi	r24, 0xBB	; 187
     d92:	86 83       	std	Z+6, r24	; 0x06
     d94:	16 96       	adiw	r26, 0x06	; 6
     d96:	8c 91       	ld	r24, X
     d98:	16 97       	sbiw	r26, 0x06	; 6
     d9a:	84 60       	ori	r24, 0x04	; 4
     d9c:	16 96       	adiw	r26, 0x06	; 6
     d9e:	8c 93       	st	X, r24
     da0:	80 81       	ld	r24, Z
     da2:	81 60       	ori	r24, 0x01	; 1
     da4:	80 83       	st	Z, r24
     da6:	9f bf       	out	0x3f, r25	; 63
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	80 e4       	ldi	r24, 0x40	; 64
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	30 d6       	rcall	.+3168   	; 0x1a10 <ccp_write_io>
     db0:	8f b7       	in	r24, 0x3f	; 63
     db2:	8d 83       	std	Y+5, r24	; 0x05
     db4:	f8 94       	cli
     db6:	9d 81       	ldd	r25, Y+5	; 0x05
     db8:	f8 01       	movw	r30, r16
     dba:	80 81       	ld	r24, Z
     dbc:	8e 7f       	andi	r24, 0xFE	; 254
     dbe:	80 83       	st	Z, r24
     dc0:	9f bf       	out	0x3f, r25	; 63
     dc2:	27 96       	adiw	r28, 0x07	; 7
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	08 95       	ret

00000dd2 <sysclk_enable_module>:
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	1f 92       	push	r1
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	9f b7       	in	r25, 0x3f	; 63
     dde:	99 83       	std	Y+1, r25	; 0x01
     de0:	f8 94       	cli
     de2:	99 81       	ldd	r25, Y+1	; 0x01
     de4:	e8 2f       	mov	r30, r24
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	e0 59       	subi	r30, 0x90	; 144
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	60 95       	com	r22
     dee:	80 81       	ld	r24, Z
     df0:	68 23       	and	r22, r24
     df2:	60 83       	st	Z, r22
     df4:	9f bf       	out	0x3f, r25	; 63
     df6:	0f 90       	pop	r0
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	1f 92       	push	r1
     e04:	1f 92       	push	r1
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     e0a:	86 30       	cpi	r24, 0x06	; 6
     e0c:	11 f0       	breq	.+4      	; 0xe12 <sysclk_enable_usb+0x14>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <sysclk_enable_usb+0x16>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     e12:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     e14:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7be051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     e18:	81 fd       	sbrc	r24, 1
     e1a:	2a c0       	rjmp	.+84     	; 0xe70 <sysclk_enable_usb+0x72>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e1c:	8f b7       	in	r24, 0x3f	; 63
     e1e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     e20:	f8 94       	cli
	return flags;
     e22:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     e24:	e0 e5       	ldi	r30, 0x50	; 80
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	82 60       	ori	r24, 0x02	; 2
     e2c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e2e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     e30:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     e32:	81 ff       	sbrs	r24, 1
     e34:	fd cf       	rjmp	.-6      	; 0xe30 <sysclk_enable_usb+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e36:	8f b7       	in	r24, 0x3f	; 63
     e38:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     e3a:	f8 94       	cli
	return flags;
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     e3e:	a0 e5       	ldi	r26, 0x50	; 80
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	16 96       	adiw	r26, 0x06	; 6
     e44:	8c 91       	ld	r24, X
     e46:	16 97       	sbiw	r26, 0x06	; 6
     e48:	89 7f       	andi	r24, 0xF9	; 249
     e4a:	16 96       	adiw	r26, 0x06	; 6
     e4c:	8c 93       	st	X, r24
     e4e:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     e50:	e0 e6       	ldi	r30, 0x60	; 96
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 e8       	ldi	r24, 0x80	; 128
     e56:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     e58:	8b eb       	ldi	r24, 0xBB	; 187
     e5a:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     e5c:	16 96       	adiw	r26, 0x06	; 6
     e5e:	8c 91       	ld	r24, X
     e60:	16 97       	sbiw	r26, 0x06	; 6
     e62:	84 60       	ori	r24, 0x04	; 4
     e64:	16 96       	adiw	r26, 0x06	; 6
     e66:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     e68:	80 81       	ld	r24, Z
     e6a:	81 60       	ori	r24, 0x01	; 1
     e6c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e6e:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     e70:	63 60       	ori	r22, 0x03	; 3
     e72:	84 e4       	ldi	r24, 0x44	; 68
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	cc d5       	rcall	.+2968   	; 0x1a10 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     e78:	60 e4       	ldi	r22, 0x40	; 64
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	aa df       	rcall	.-172    	; 0xdd2 <sysclk_enable_module>
}
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	08 95       	ret

00000e8c <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     e8c:	30 91 bb 23 	lds	r19, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
     e90:	20 91 bc 23 	lds	r18, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
     e94:	82 2f       	mov	r24, r18
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	03 97       	sbiw	r24, 0x03	; 3
     e9a:	b1 f4       	brne	.+44     	; 0xec8 <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     e9c:	31 11       	cpse	r19, r1
     e9e:	16 c0       	rjmp	.+44     	; 0xecc <udi_hid_generic_setreport+0x40>
			&& (sizeof(udi_hid_generic_report_feature) ==
     ea0:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
     ea4:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
     ea8:	89 2b       	or	r24, r25
     eaa:	91 f4       	brne	.+36     	; 0xed0 <udi_hid_generic_setreport+0x44>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     eac:	e9 eb       	ldi	r30, 0xB9	; 185
     eae:	f3 e2       	ldi	r31, 0x23	; 35
     eb0:	84 ec       	ldi	r24, 0xC4	; 196
     eb2:	91 e2       	ldi	r25, 0x21	; 33
     eb4:	80 87       	std	Z+8, r24	; 0x08
     eb6:	91 87       	std	Z+9, r25	; 0x09
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     eb8:	8a e6       	ldi	r24, 0x6A	; 106
     eba:	97 e0       	ldi	r25, 0x07	; 7
     ebc:	84 87       	std	Z+12, r24	; 0x0c
     ebe:	95 87       	std	Z+13, r25	; 0x0d
		udd_g_ctrlreq.payload_size =
     ec0:	12 86       	std	Z+10, r1	; 0x0a
     ec2:	13 86       	std	Z+11, r1	; 0x0b
				sizeof(udi_hid_generic_report_feature);
		return true;
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	08 95       	ret
	}
	return false;
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	08 95       	ret
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	08 95       	ret
     ed0:	80 e0       	ldi	r24, 0x00	; 0
}
     ed2:	08 95       	ret

00000ed4 <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
     ed4:	08 95       	ret

00000ed6 <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <udi_hid_generic_b_report_in_free>
     edc:	08 95       	ret

00000ede <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
     ede:	10 92 ca 21 	sts	0x21CA, r1	; 0x8021ca <udi_hid_generic_rate>
	udi_hid_generic_protocol = 0;
     ee2:	10 92 c8 21 	sts	0x21C8, r1	; 0x8021c8 <udi_hid_generic_protocol>
	udi_hid_generic_b_report_in_free = true;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <udi_hid_generic_b_report_in_free>
	// if (!udi_hid_generic_report_out_enable())
	// 	return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
     eec:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <main_generic_enable>
}
     ef0:	08 95       	ret

00000ef2 <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
     ef2:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <main_generic_disable>
     ef6:	08 95       	ret

00000ef8 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
     ef8:	26 e4       	ldi	r18, 0x46	; 70
     efa:	37 e0       	ldi	r19, 0x07	; 7
     efc:	46 ea       	ldi	r20, 0xA6	; 166
     efe:	50 e2       	ldi	r21, 0x20	; 32
     f00:	68 ec       	ldi	r22, 0xC8	; 200
     f02:	71 e2       	ldi	r23, 0x21	; 33
     f04:	8a ec       	ldi	r24, 0xCA	; 202
     f06:	91 e2       	ldi	r25, 0x21	; 33
     f08:	f2 c0       	rjmp	.+484    	; 0x10ee <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
     f0a:	08 95       	ret

00000f0c <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	1f 92       	push	r1
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	9c 01       	movw	r18, r24
	if (!udi_hid_generic_b_report_in_free)
     f1e:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <udi_hid_generic_b_report_in_free>
     f22:	88 23       	and	r24, r24
     f24:	09 f1       	breq	.+66     	; 0xf68 <udi_hid_generic_send_report_in+0x5c>
     f26:	f9 01       	movw	r30, r18

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     f28:	8f b7       	in	r24, 0x3f	; 63
     f2a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     f2c:	f8 94       	cli
	return flags;
     f2e:	f9 80       	ldd	r15, Y+1	; 0x01
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
     f30:	10 92 c4 21 	sts	0x21C4, r1	; 0x8021c4 <udi_hid_generic_report_feature>
     f34:	10 92 c5 21 	sts	0x21C5, r1	; 0x8021c5 <udi_hid_generic_report_feature+0x1>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
     f38:	80 81       	ld	r24, Z
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
     f3c:	80 93 c4 21 	sts	0x21C4, r24	; 0x8021c4 <udi_hid_generic_report_feature>
     f40:	90 93 c5 21 	sts	0x21C5, r25	; 0x8021c5 <udi_hid_generic_report_feature+0x1>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     f44:	0b e6       	ldi	r16, 0x6B	; 107
     f46:	17 e0       	ldi	r17, 0x07	; 7
     f48:	22 e0       	ldi	r18, 0x02	; 2
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	44 ec       	ldi	r20, 0xC4	; 196
     f4e:	51 e2       	ldi	r21, 0x21	; 33
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	82 e8       	ldi	r24, 0x82	; 130
     f54:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <udd_ep_run>
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	89 27       	eor	r24, r25
     f5c:	80 93 c6 21 	sts	0x21C6, r24	; 0x8021c6 <udi_hid_generic_b_report_in_free>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     f60:	ff be       	out	0x3f, r15	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
     f62:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <udi_hid_generic_b_report_in_free>
     f66:	89 27       	eor	r24, r25

}
     f68:	0f 90       	pop	r0
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	08 95       	ret

00000f76 <udi_hid_kbd_getsetting>:
	// Send report
	udi_hid_kbd_send_report();

	cpu_irq_restore(flags);
	return true;
}
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	08 95       	ret

00000f7a <udi_hid_kbd_setreport>:
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	08 95       	ret

00000f7e <udi_hid_kbd_enable>:
     f7e:	10 92 e0 21 	sts	0x21E0, r1	; 0x8021e0 <udi_hid_kbd_rate>
     f82:	10 92 de 21 	sts	0x21DE, r1	; 0x8021de <udi_hid_kbd_protocol>
     f86:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <udi_hid_kbd_b_report_trans_ongoing>
     f8a:	88 e0       	ldi	r24, 0x08	; 8
     f8c:	e5 ed       	ldi	r30, 0xD5	; 213
     f8e:	f1 e2       	ldi	r31, 0x21	; 33
     f90:	df 01       	movw	r26, r30
     f92:	1d 92       	st	X+, r1
     f94:	8a 95       	dec	r24
     f96:	e9 f7       	brne	.-6      	; 0xf92 <udi_hid_kbd_enable+0x14>
     f98:	10 92 dd 21 	sts	0x21DD, r1	; 0x8021dd <udi_hid_kbd_b_report_valid>
     f9c:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <main_kbd_enable>
     fa0:	08 95       	ret

00000fa2 <udi_hid_kbd_disable>:
     fa2:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <main_kbd_disable>
     fa6:	08 95       	ret

00000fa8 <udi_hid_kbd_setup>:
     fa8:	2d eb       	ldi	r18, 0xBD	; 189
     faa:	37 e0       	ldi	r19, 0x07	; 7
     fac:	4b ec       	ldi	r20, 0xCB	; 203
     fae:	50 e2       	ldi	r21, 0x20	; 32
     fb0:	6e ed       	ldi	r22, 0xDE	; 222
     fb2:	71 e2       	ldi	r23, 0x21	; 33
     fb4:	80 ee       	ldi	r24, 0xE0	; 224
     fb6:	91 e2       	ldi	r25, 0x21	; 33
     fb8:	9a c0       	rjmp	.+308    	; 0x10ee <udi_hid_setup>
     fba:	08 95       	ret

00000fbc <udi_hid_kbd_send_report>:
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
     fc0:	80 91 d4 21 	lds	r24, 0x21D4	; 0x8021d4 <udi_hid_kbd_b_report_trans_ongoing>
     fc4:	81 11       	cpse	r24, r1
     fc6:	18 c0       	rjmp	.+48     	; 0xff8 <udi_hid_kbd_send_report+0x3c>
     fc8:	88 e0       	ldi	r24, 0x08	; 8
     fca:	e5 ed       	ldi	r30, 0xD5	; 213
     fcc:	f1 e2       	ldi	r31, 0x21	; 33
     fce:	ac ec       	ldi	r26, 0xCC	; 204
     fd0:	b1 e2       	ldi	r27, 0x21	; 33
     fd2:	01 90       	ld	r0, Z+
     fd4:	0d 92       	st	X+, r0
     fd6:	8a 95       	dec	r24
     fd8:	e1 f7       	brne	.-8      	; 0xfd2 <udi_hid_kbd_send_report+0x16>
     fda:	10 92 dd 21 	sts	0x21DD, r1	; 0x8021dd <udi_hid_kbd_b_report_valid>
     fde:	00 e0       	ldi	r16, 0x00	; 0
     fe0:	18 e0       	ldi	r17, 0x08	; 8
     fe2:	28 e0       	ldi	r18, 0x08	; 8
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	4c ec       	ldi	r20, 0xCC	; 204
     fe8:	51 e2       	ldi	r21, 0x21	; 33
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	81 e8       	ldi	r24, 0x81	; 129
     fee:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <udd_ep_run>
     ff2:	80 93 d4 21 	sts	0x21D4, r24	; 0x8021d4 <udi_hid_kbd_b_report_trans_ongoing>
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <udi_hid_kbd_send_report+0x3e>
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	08 95       	ret

00001000 <udi_hid_kbd_report_sent>:
    1000:	10 92 d4 21 	sts	0x21D4, r1	; 0x8021d4 <udi_hid_kbd_b_report_trans_ongoing>
    1004:	80 91 dd 21 	lds	r24, 0x21DD	; 0x8021dd <udi_hid_kbd_b_report_valid>
    1008:	81 11       	cpse	r24, r1
    100a:	d8 cf       	rjmp	.-80     	; 0xfbc <udi_hid_kbd_send_report>
    100c:	08 95       	ret

0000100e <udi_hid_kbd_up>:


bool udi_hid_kbd_up(uint8_t key_id)
{
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	1f 92       	push	r1
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    101a:	9f b7       	in	r25, 0x3f	; 63
    101c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    101e:	f8 94       	cli
	return flags;
    1020:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
    1022:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <udi_hid_kbd_report+0x2>
    1026:	99 23       	and	r25, r25
    1028:	41 f0       	breq	.+16     	; 0x103a <udi_hid_kbd_up+0x2c>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
    102a:	89 17       	cp	r24, r25
    102c:	a9 f0       	breq	.+42     	; 0x1058 <udi_hid_kbd_up+0x4a>
    102e:	e8 ed       	ldi	r30, 0xD8	; 216
    1030:	f1 e2       	ldi	r31, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1032:	93 e0       	ldi	r25, 0x03	; 3
		if (0 == udi_hid_kbd_report[i]) {
    1034:	21 91       	ld	r18, Z+
    1036:	21 11       	cpse	r18, r1
    1038:	02 c0       	rjmp	.+4      	; 0x103e <udi_hid_kbd_up+0x30>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    103a:	1f bf       	out	0x3f, r17	; 63
			// Already removed
			cpu_irq_restore(flags);
			return true;
    103c:	1e c0       	rjmp	.+60     	; 0x107a <udi_hid_kbd_up+0x6c>
		}
		if (key_id == udi_hid_kbd_report[i])
    103e:	28 17       	cp	r18, r24
    1040:	21 f0       	breq	.+8      	; 0x104a <udi_hid_kbd_up+0x3c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1042:	9f 5f       	subi	r25, 0xFF	; 255
    1044:	98 30       	cpi	r25, 0x08	; 8
    1046:	b1 f7       	brne	.-20     	; 0x1034 <udi_hid_kbd_up+0x26>
    1048:	05 c0       	rjmp	.+10     	; 0x1054 <udi_hid_kbd_up+0x46>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
    104a:	98 30       	cpi	r25, 0x08	; 8
    104c:	19 f0       	breq	.+6      	; 0x1054 <udi_hid_kbd_up+0x46>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    104e:	97 30       	cpi	r25, 0x07	; 7
    1050:	20 f0       	brcs	.+8      	; 0x105a <udi_hid_kbd_up+0x4c>
    1052:	0c c0       	rjmp	.+24     	; 0x106c <udi_hid_kbd_up+0x5e>
    1054:	1f bf       	out	0x3f, r17	; 63
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
    1056:	11 c0       	rjmp	.+34     	; 0x107a <udi_hid_kbd_up+0x6c>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    1058:	92 e0       	ldi	r25, 0x02	; 2
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
    105a:	e9 2f       	mov	r30, r25
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	eb 52       	subi	r30, 0x2B	; 43
    1060:	fe 4d       	sbci	r31, 0xDE	; 222
    1062:	81 81       	ldd	r24, Z+1	; 0x01
    1064:	80 83       	st	Z, r24
		i++;
    1066:	9f 5f       	subi	r25, 0xFF	; 255
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
    1068:	97 30       	cpi	r25, 0x07	; 7
    106a:	b9 f7       	brne	.-18     	; 0x105a <udi_hid_kbd_up+0x4c>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
    106c:	10 92 dc 21 	sts	0x21DC, r1	; 0x8021dc <udi_hid_kbd_report+0x7>
	udi_hid_kbd_b_report_valid = true;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	80 93 dd 21 	sts	0x21DD, r24	; 0x8021dd <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    1076:	a2 df       	rcall	.-188    	; 0xfbc <udi_hid_kbd_send_report>
    1078:	1f bf       	out	0x3f, r17	; 63

	cpu_irq_restore(flags);
	return true;
}
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	0f 90       	pop	r0
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	08 95       	ret

00001086 <udi_hid_kbd_down>:


bool udi_hid_kbd_down(uint8_t key_id)
{
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	1f 92       	push	r1
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1092:	9f b7       	in	r25, 0x3f	; 63
    1094:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1096:	f8 94       	cli
	return flags;
    1098:	19 81       	ldd	r17, Y+1	; 0x01

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
    109a:	90 91 d7 21 	lds	r25, 0x21D7	; 0x8021d7 <udi_hid_kbd_report+0x2>
    109e:	99 23       	and	r25, r25
    10a0:	b1 f0       	breq	.+44     	; 0x10ce <udi_hid_kbd_down+0x48>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    10a2:	89 17       	cp	r24, r25
    10a4:	41 f0       	breq	.+16     	; 0x10b6 <udi_hid_kbd_down+0x30>
    10a6:	a8 ed       	ldi	r26, 0xD8	; 216
    10a8:	b1 e2       	ldi	r27, 0x21	; 33
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    10aa:	e3 e0       	ldi	r30, 0x03	; 3
		if (0 == udi_hid_kbd_report[i])
    10ac:	9d 91       	ld	r25, X+
    10ae:	99 23       	and	r25, r25
    10b0:	49 f0       	breq	.+18     	; 0x10c4 <udi_hid_kbd_down+0x3e>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
    10b2:	98 13       	cpse	r25, r24
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <udi_hid_kbd_down+0x36>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    10b6:	1f bf       	out	0x3f, r17	; 63
			// Already in array
			cpu_irq_restore(flags);
			return true;
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	14 c0       	rjmp	.+40     	; 0x10e4 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    10bc:	ef 5f       	subi	r30, 0xFF	; 255
    10be:	e8 30       	cpi	r30, 0x08	; 8
    10c0:	a9 f7       	brne	.-22     	; 0x10ac <udi_hid_kbd_down+0x26>
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <udi_hid_kbd_down+0x42>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
    10c4:	e8 30       	cpi	r30, 0x08	; 8
    10c6:	21 f4       	brne	.+8      	; 0x10d0 <udi_hid_kbd_down+0x4a>
    10c8:	1f bf       	out	0x3f, r17	; 63
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	0b c0       	rjmp	.+22     	; 0x10e4 <udi_hid_kbd_down+0x5e>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
    10ce:	e2 e0       	ldi	r30, 0x02	; 2
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	eb 52       	subi	r30, 0x2B	; 43
    10d4:	fe 4d       	sbci	r31, 0xDE	; 222
    10d6:	80 83       	st	Z, r24
	udi_hid_kbd_b_report_valid = true;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	80 93 dd 21 	sts	0x21DD, r24	; 0x8021dd <udi_hid_kbd_b_report_valid>

	// Send report
	udi_hid_kbd_send_report();
    10de:	6e df       	rcall	.-292    	; 0xfbc <udi_hid_kbd_send_report>
    10e0:	1f bf       	out	0x3f, r17	; 63

	// Enable IT
	cpu_irq_restore(flags);
	return true;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
}
    10e4:	0f 90       	pop	r0
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	08 95       	ret

000010ee <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	dc 01       	movw	r26, r24
    10f4:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    10f6:	90 91 b9 23 	lds	r25, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    10fa:	99 23       	and	r25, r25
    10fc:	0c f0       	brlt	.+2      	; 0x1100 <udi_hid_setup+0x12>
    10fe:	68 c0       	rjmp	.+208    	; 0x11d0 <udi_hid_setup+0xe2>
    1100:	90 76       	andi	r25, 0x60	; 96
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1102:	09 f0       	breq	.+2      	; 0x1106 <udi_hid_setup+0x18>
    1104:	45 c0       	rjmp	.+138    	; 0x1190 <udi_hid_setup+0xa2>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1106:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    110a:	86 30       	cpi	r24, 0x06	; 6
    110c:	09 f0       	breq	.+2      	; 0x1110 <udi_hid_setup+0x22>
    110e:	40 c0       	rjmp	.+128    	; 0x1190 <udi_hid_setup+0xa2>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    1110:	76 d1       	rcall	.+748    	; 0x13fe <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1112:	dc 01       	movw	r26, r24
    1114:	1a 96       	adiw	r26, 0x0a	; 10
    1116:	2c 91       	ld	r18, X
    1118:	1a 97       	sbiw	r26, 0x0a	; 10
    111a:	21 32       	cpi	r18, 0x21	; 33
    111c:	09 f0       	breq	.+2      	; 0x1120 <udi_hid_setup+0x32>
    111e:	77 c0       	rjmp	.+238    	; 0x120e <udi_hid_setup+0x120>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1120:	20 91 bc 23 	lds	r18, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	21 32       	cpi	r18, 0x21	; 33
    1128:	31 05       	cpc	r19, r1
    112a:	b1 f4       	brne	.+44     	; 0x1158 <udi_hid_setup+0x6a>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    112c:	9c 01       	movw	r18, r24
    112e:	27 5f       	subi	r18, 0xF7	; 247
    1130:	3f 4f       	sbci	r19, 0xFF	; 255
    1132:	20 93 c1 23 	sts	0x23C1, r18	; 0x8023c1 <udd_g_ctrlreq+0x8>
    1136:	30 93 c2 23 	sts	0x23C2, r19	; 0x8023c2 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    113a:	e9 eb       	ldi	r30, 0xB9	; 185
    113c:	f3 e2       	ldi	r31, 0x23	; 35
    113e:	19 96       	adiw	r26, 0x09	; 9
    1140:	8c 91       	ld	r24, X
    1142:	26 81       	ldd	r18, Z+6	; 0x06
    1144:	37 81       	ldd	r19, Z+7	; 0x07
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	28 17       	cp	r18, r24
    114a:	39 07       	cpc	r19, r25
    114c:	08 f4       	brcc	.+2      	; 0x1150 <udi_hid_setup+0x62>
    114e:	c9 01       	movw	r24, r18
    1150:	82 87       	std	Z+10, r24	; 0x0a
    1152:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	68 c0       	rjmp	.+208    	; 0x1228 <udi_hid_setup+0x13a>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    1158:	fc 01       	movw	r30, r24
    115a:	47 85       	ldd	r20, Z+15	; 0x0f
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	42 17       	cp	r20, r18
    1160:	53 07       	cpc	r21, r19
    1162:	09 f0       	breq	.+2      	; 0x1166 <udi_hid_setup+0x78>
    1164:	56 c0       	rjmp	.+172    	; 0x1212 <udi_hid_setup+0x124>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    1166:	c0 93 c1 23 	sts	0x23C1, r28	; 0x8023c1 <udd_g_ctrlreq+0x8>
    116a:	d0 93 c2 23 	sts	0x23C2, r29	; 0x8023c2 <udd_g_ctrlreq+0x9>
		udd_g_ctrlreq.payload_size =
    116e:	e9 eb       	ldi	r30, 0xB9	; 185
    1170:	f3 e2       	ldi	r31, 0x23	; 35
    1172:	26 81       	ldd	r18, Z+6	; 0x06
    1174:	37 81       	ldd	r19, Z+7	; 0x07
    1176:	dc 01       	movw	r26, r24
    1178:	50 96       	adiw	r26, 0x10	; 16
    117a:	8d 91       	ld	r24, X+
    117c:	9c 91       	ld	r25, X
    117e:	51 97       	sbiw	r26, 0x11	; 17
    1180:	28 17       	cp	r18, r24
    1182:	39 07       	cpc	r19, r25
    1184:	08 f4       	brcc	.+2      	; 0x1188 <udi_hid_setup+0x9a>
    1186:	c9 01       	movw	r24, r18
    1188:	82 87       	std	Z+10, r24	; 0x0a
    118a:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	4c c0       	rjmp	.+152    	; 0x1228 <udi_hid_setup+0x13a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1190:	90 32       	cpi	r25, 0x20	; 32
    1192:	09 f0       	breq	.+2      	; 0x1196 <udi_hid_setup+0xa8>
    1194:	40 c0       	rjmp	.+128    	; 0x1216 <udi_hid_setup+0x128>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1196:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    119a:	82 30       	cpi	r24, 0x02	; 2
    119c:	39 f0       	breq	.+14     	; 0x11ac <udi_hid_setup+0xbe>
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	71 f0       	breq	.+28     	; 0x11be <udi_hid_setup+0xd0>
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	d1 f5       	brne	.+116    	; 0x121a <udi_hid_setup+0x12c>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    11a6:	f9 01       	movw	r30, r18
    11a8:	19 95       	eicall
    11aa:	3e c0       	rjmp	.+124    	; 0x1228 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    11ac:	e9 eb       	ldi	r30, 0xB9	; 185
    11ae:	f3 e2       	ldi	r31, 0x23	; 35
    11b0:	a0 87       	std	Z+8, r26	; 0x08
    11b2:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	82 87       	std	Z+10, r24	; 0x0a
    11ba:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    11bc:	35 c0       	rjmp	.+106    	; 0x1228 <udi_hid_setup+0x13a>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    11be:	e9 eb       	ldi	r30, 0xB9	; 185
    11c0:	f3 e2       	ldi	r31, 0x23	; 35
    11c2:	60 87       	std	Z+8, r22	; 0x08
    11c4:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	82 87       	std	Z+10, r24	; 0x0a
    11cc:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    11ce:	2c c0       	rjmp	.+88     	; 0x1228 <udi_hid_setup+0x13a>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    11d0:	90 76       	andi	r25, 0x60	; 96
    11d2:	90 32       	cpi	r25, 0x20	; 32
    11d4:	21 f5       	brne	.+72     	; 0x121e <udi_hid_setup+0x130>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    11d6:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    11da:	8a 30       	cpi	r24, 0x0A	; 10
    11dc:	39 f0       	breq	.+14     	; 0x11ec <udi_hid_setup+0xfe>
    11de:	8b 30       	cpi	r24, 0x0B	; 11
    11e0:	51 f0       	breq	.+20     	; 0x11f6 <udi_hid_setup+0x108>
    11e2:	89 30       	cpi	r24, 0x09	; 9
    11e4:	f1 f4       	brne	.+60     	; 0x1222 <udi_hid_setup+0x134>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    11e6:	f9 01       	movw	r30, r18
    11e8:	19 95       	eicall
    11ea:	1e c0       	rjmp	.+60     	; 0x1228 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    11ec:	80 91 bc 23 	lds	r24, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    11f0:	8c 93       	st	X, r24
				return true;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	19 c0       	rjmp	.+50     	; 0x1228 <udi_hid_setup+0x13a>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    11f6:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    11fa:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    11fe:	89 2b       	or	r24, r25
    1200:	91 f4       	brne	.+36     	; 0x1226 <udi_hid_setup+0x138>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    1202:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1206:	db 01       	movw	r26, r22
    1208:	8c 93       	st	X, r24
				return true;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	0d c0       	rjmp	.+26     	; 0x1228 <udi_hid_setup+0x13a>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	0b c0       	rjmp	.+22     	; 0x1228 <udi_hid_setup+0x13a>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	09 c0       	rjmp	.+18     	; 0x1228 <udi_hid_setup+0x13a>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	07 c0       	rjmp	.+14     	; 0x1228 <udi_hid_setup+0x13a>
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	05 c0       	rjmp	.+10     	; 0x1228 <udi_hid_setup+0x13a>
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	03 c0       	rjmp	.+6      	; 0x1228 <udi_hid_setup+0x13a>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	01 c0       	rjmp	.+2      	; 0x1228 <udi_hid_setup+0x13a>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    1226:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	08 95       	ret

0000122e <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    122e:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    1232:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1236:	01 90       	ld	r0, Z+
    1238:	f0 81       	ld	r31, Z
    123a:	e0 2d       	mov	r30, r0
    123c:	22 81       	ldd	r18, Z+2	; 0x02
    123e:	33 81       	ldd	r19, Z+3	; 0x03
    1240:	2e 0f       	add	r18, r30
    1242:	3f 1f       	adc	r19, r31
    1244:	fc 01       	movw	r30, r24
    1246:	40 81       	ld	r20, Z
    1248:	e4 0f       	add	r30, r20
    124a:	f1 1d       	adc	r31, r1
    124c:	e2 17       	cp	r30, r18
    124e:	f3 07       	cpc	r31, r19
    1250:	a0 f4       	brcc	.+40     	; 0x127a <udc_next_desc_in_iface+0x4c>
    1252:	81 81       	ldd	r24, Z+1	; 0x01
    1254:	84 30       	cpi	r24, 0x04	; 4
    1256:	a1 f0       	breq	.+40     	; 0x1280 <udc_next_desc_in_iface+0x52>
    1258:	86 13       	cpse	r24, r22
    125a:	06 c0       	rjmp	.+12     	; 0x1268 <udc_next_desc_in_iface+0x3a>
    125c:	14 c0       	rjmp	.+40     	; 0x1286 <udc_next_desc_in_iface+0x58>
    125e:	81 81       	ldd	r24, Z+1	; 0x01
    1260:	84 30       	cpi	r24, 0x04	; 4
    1262:	a1 f0       	breq	.+40     	; 0x128c <udc_next_desc_in_iface+0x5e>
    1264:	86 17       	cp	r24, r22
    1266:	a9 f0       	breq	.+42     	; 0x1292 <udc_next_desc_in_iface+0x64>
    1268:	80 81       	ld	r24, Z
    126a:	e8 0f       	add	r30, r24
    126c:	f1 1d       	adc	r31, r1
    126e:	e2 17       	cp	r30, r18
    1270:	f3 07       	cpc	r31, r19
    1272:	a8 f3       	brcs	.-22     	; 0x125e <udc_next_desc_in_iface+0x30>
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	08 95       	ret
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	08 95       	ret
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	08 95       	ret
    1286:	8e 2f       	mov	r24, r30
    1288:	9f 2f       	mov	r25, r31
    128a:	08 95       	ret
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	08 95       	ret
    1292:	8e 2f       	mov	r24, r30
    1294:	9f 2f       	mov	r25, r31
    1296:	08 95       	ret

00001298 <udc_valid_address>:
    1298:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    129c:	8f 77       	andi	r24, 0x7F	; 127
    129e:	95 c7       	rjmp	.+3882   	; 0x21ca <udd_set_address>
    12a0:	08 95       	ret

000012a2 <udc_update_iface_desc>:
    12a2:	90 91 e8 21 	lds	r25, 0x21E8	; 0x8021e8 <udc_num_configuration>
    12a6:	99 23       	and	r25, r25
    12a8:	81 f1       	breq	.+96     	; 0x130a <udc_update_iface_desc+0x68>
    12aa:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    12ae:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    12b2:	01 90       	ld	r0, Z+
    12b4:	f0 81       	ld	r31, Z
    12b6:	e0 2d       	mov	r30, r0
    12b8:	94 81       	ldd	r25, Z+4	; 0x04
    12ba:	89 17       	cp	r24, r25
    12bc:	40 f5       	brcc	.+80     	; 0x130e <udc_update_iface_desc+0x6c>
    12be:	e0 93 e4 21 	sts	0x21E4, r30	; 0x8021e4 <udc_ptr_iface>
    12c2:	f0 93 e5 21 	sts	0x21E5, r31	; 0x8021e5 <udc_ptr_iface+0x1>
    12c6:	22 81       	ldd	r18, Z+2	; 0x02
    12c8:	33 81       	ldd	r19, Z+3	; 0x03
    12ca:	2e 0f       	add	r18, r30
    12cc:	3f 1f       	adc	r19, r31
    12ce:	e2 17       	cp	r30, r18
    12d0:	f3 07       	cpc	r31, r19
    12d2:	f8 f4       	brcc	.+62     	; 0x1312 <udc_update_iface_desc+0x70>
    12d4:	91 81       	ldd	r25, Z+1	; 0x01
    12d6:	94 30       	cpi	r25, 0x04	; 4
    12d8:	61 f4       	brne	.+24     	; 0x12f2 <udc_update_iface_desc+0x50>
    12da:	92 81       	ldd	r25, Z+2	; 0x02
    12dc:	89 13       	cpse	r24, r25
    12de:	09 c0       	rjmp	.+18     	; 0x12f2 <udc_update_iface_desc+0x50>
    12e0:	93 81       	ldd	r25, Z+3	; 0x03
    12e2:	96 13       	cpse	r25, r22
    12e4:	06 c0       	rjmp	.+12     	; 0x12f2 <udc_update_iface_desc+0x50>
    12e6:	e0 93 e4 21 	sts	0x21E4, r30	; 0x8021e4 <udc_ptr_iface>
    12ea:	f0 93 e5 21 	sts	0x21E5, r31	; 0x8021e5 <udc_ptr_iface+0x1>
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	08 95       	ret
    12f2:	90 81       	ld	r25, Z
    12f4:	e9 0f       	add	r30, r25
    12f6:	f1 1d       	adc	r31, r1
    12f8:	e2 17       	cp	r30, r18
    12fa:	f3 07       	cpc	r31, r19
    12fc:	58 f3       	brcs	.-42     	; 0x12d4 <udc_update_iface_desc+0x32>
    12fe:	e0 93 e4 21 	sts	0x21E4, r30	; 0x8021e4 <udc_ptr_iface>
    1302:	f0 93 e5 21 	sts	0x21E5, r31	; 0x8021e5 <udc_ptr_iface+0x1>
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	08 95       	ret
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	08 95       	ret
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	08 95       	ret
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	08 95       	ret

00001316 <udc_iface_disable>:
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	c8 2f       	mov	r28, r24
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	be df       	rcall	.-132    	; 0x12a2 <udc_update_iface_desc>
    1326:	18 2f       	mov	r17, r24
    1328:	88 23       	and	r24, r24
    132a:	81 f1       	breq	.+96     	; 0x138c <udc_iface_disable+0x76>
    132c:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    1330:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1334:	ec 2f       	mov	r30, r28
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	ee 0f       	add	r30, r30
    133a:	ff 1f       	adc	r31, r31
    133c:	12 96       	adiw	r26, 0x02	; 2
    133e:	8d 91       	ld	r24, X+
    1340:	9c 91       	ld	r25, X
    1342:	13 97       	sbiw	r26, 0x03	; 3
    1344:	e8 0f       	add	r30, r24
    1346:	f9 1f       	adc	r31, r25
    1348:	e0 80       	ld	r14, Z
    134a:	f1 80       	ldd	r15, Z+1	; 0x01
    134c:	d7 01       	movw	r26, r14
    134e:	16 96       	adiw	r26, 0x06	; 6
    1350:	ed 91       	ld	r30, X+
    1352:	fc 91       	ld	r31, X
    1354:	17 97       	sbiw	r26, 0x07	; 7
    1356:	19 95       	eicall
    1358:	68 2f       	mov	r22, r24
    135a:	8c 2f       	mov	r24, r28
    135c:	a2 df       	rcall	.-188    	; 0x12a2 <udc_update_iface_desc>
    135e:	18 2f       	mov	r17, r24
    1360:	88 23       	and	r24, r24
    1362:	a1 f0       	breq	.+40     	; 0x138c <udc_iface_disable+0x76>
    1364:	c0 91 e4 21 	lds	r28, 0x21E4	; 0x8021e4 <udc_ptr_iface>
    1368:	d0 91 e5 21 	lds	r29, 0x21E5	; 0x8021e5 <udc_ptr_iface+0x1>
    136c:	65 e0       	ldi	r22, 0x05	; 5
    136e:	ce 01       	movw	r24, r28
    1370:	5e df       	rcall	.-324    	; 0x122e <udc_next_desc_in_iface>
    1372:	ec 01       	movw	r28, r24
    1374:	89 2b       	or	r24, r25
    1376:	21 f0       	breq	.+8      	; 0x1380 <udc_iface_disable+0x6a>
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <udd_ep_free>
    137e:	f6 cf       	rjmp	.-20     	; 0x136c <udc_iface_disable+0x56>
    1380:	d7 01       	movw	r26, r14
    1382:	12 96       	adiw	r26, 0x02	; 2
    1384:	ed 91       	ld	r30, X+
    1386:	fc 91       	ld	r31, X
    1388:	13 97       	sbiw	r26, 0x03	; 3
    138a:	19 95       	eicall
    138c:	81 2f       	mov	r24, r17
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	ff 90       	pop	r15
    1396:	ef 90       	pop	r14
    1398:	08 95       	ret

0000139a <udc_iface_enable>:
    139a:	1f 93       	push	r17
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	18 2f       	mov	r17, r24
    13a2:	7f df       	rcall	.-258    	; 0x12a2 <udc_update_iface_desc>
    13a4:	88 23       	and	r24, r24
    13a6:	39 f1       	breq	.+78     	; 0x13f6 <udc_iface_enable+0x5c>
    13a8:	c0 91 e4 21 	lds	r28, 0x21E4	; 0x8021e4 <udc_ptr_iface>
    13ac:	d0 91 e5 21 	lds	r29, 0x21E5	; 0x8021e5 <udc_ptr_iface+0x1>
    13b0:	65 e0       	ldi	r22, 0x05	; 5
    13b2:	ce 01       	movw	r24, r28
    13b4:	3c df       	rcall	.-392    	; 0x122e <udc_next_desc_in_iface>
    13b6:	ec 01       	movw	r28, r24
    13b8:	89 2b       	or	r24, r25
    13ba:	41 f0       	breq	.+16     	; 0x13cc <udc_iface_enable+0x32>
    13bc:	4c 81       	ldd	r20, Y+4	; 0x04
    13be:	5d 81       	ldd	r21, Y+5	; 0x05
    13c0:	6b 81       	ldd	r22, Y+3	; 0x03
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	14 d7       	rcall	.+3624   	; 0x21ee <udd_ep_alloc>
    13c6:	81 11       	cpse	r24, r1
    13c8:	f3 cf       	rjmp	.-26     	; 0x13b0 <udc_iface_enable+0x16>
    13ca:	15 c0       	rjmp	.+42     	; 0x13f6 <udc_iface_enable+0x5c>
    13cc:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    13d0:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    13d4:	e1 2f       	mov	r30, r17
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	ee 0f       	add	r30, r30
    13da:	ff 1f       	adc	r31, r31
    13dc:	12 96       	adiw	r26, 0x02	; 2
    13de:	8d 91       	ld	r24, X+
    13e0:	9c 91       	ld	r25, X
    13e2:	13 97       	sbiw	r26, 0x03	; 3
    13e4:	e8 0f       	add	r30, r24
    13e6:	f9 1f       	adc	r31, r25
    13e8:	01 90       	ld	r0, Z+
    13ea:	f0 81       	ld	r31, Z
    13ec:	e0 2d       	mov	r30, r0
    13ee:	01 90       	ld	r0, Z+
    13f0:	f0 81       	ld	r31, Z
    13f2:	e0 2d       	mov	r30, r0
    13f4:	19 95       	eicall
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	1f 91       	pop	r17
    13fc:	08 95       	ret

000013fe <udc_get_interface_desc>:
    13fe:	80 91 e4 21 	lds	r24, 0x21E4	; 0x8021e4 <udc_ptr_iface>
    1402:	90 91 e5 21 	lds	r25, 0x21E5	; 0x8021e5 <udc_ptr_iface+0x1>
    1406:	08 95       	ret

00001408 <udc_start>:
    1408:	55 c6       	rjmp	.+3242   	; 0x20b4 <udd_enable>
    140a:	08 95       	ret

0000140c <udc_reset>:
    140c:	cf 93       	push	r28
    140e:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    1412:	88 23       	and	r24, r24
    1414:	c1 f0       	breq	.+48     	; 0x1446 <udc_reset+0x3a>
    1416:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    141a:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    141e:	01 90       	ld	r0, Z+
    1420:	f0 81       	ld	r31, Z
    1422:	e0 2d       	mov	r30, r0
    1424:	84 81       	ldd	r24, Z+4	; 0x04
    1426:	88 23       	and	r24, r24
    1428:	71 f0       	breq	.+28     	; 0x1446 <udc_reset+0x3a>
    142a:	c0 e0       	ldi	r28, 0x00	; 0
    142c:	8c 2f       	mov	r24, r28
    142e:	73 df       	rcall	.-282    	; 0x1316 <udc_iface_disable>
    1430:	cf 5f       	subi	r28, 0xFF	; 255
    1432:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    1436:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    143a:	01 90       	ld	r0, Z+
    143c:	f0 81       	ld	r31, Z
    143e:	e0 2d       	mov	r30, r0
    1440:	84 81       	ldd	r24, Z+4	; 0x04
    1442:	c8 17       	cp	r28, r24
    1444:	98 f3       	brcs	.-26     	; 0x142c <udc_reset+0x20>
    1446:	10 92 e8 21 	sts	0x21E8, r1	; 0x8021e8 <udc_num_configuration>
    144a:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <udc_device_status>
    144e:	81 fd       	sbrc	r24, 1
    1450:	0e 94 00 15 	call	0x2a00	; 0x2a00 <main_remotewakeup_disable>
    1454:	10 92 ec 21 	sts	0x21EC, r1	; 0x8021ec <udc_device_status>
    1458:	10 92 ed 21 	sts	0x21ED, r1	; 0x8021ed <udc_device_status+0x1>
    145c:	cf 91       	pop	r28
    145e:	08 95       	ret

00001460 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1460:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1462:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    1466:	88 23       	and	r24, r24
    1468:	49 f1       	breq	.+82     	; 0x14bc <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    146a:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    146e:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1472:	ed 91       	ld	r30, X+
    1474:	fc 91       	ld	r31, X
    1476:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1478:	84 81       	ldd	r24, Z+4	; 0x04
    147a:	88 23       	and	r24, r24
    147c:	f9 f0       	breq	.+62     	; 0x14bc <udc_sof_notify+0x5c>
    147e:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1480:	ec 2f       	mov	r30, r28
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	ee 0f       	add	r30, r30
    1486:	ff 1f       	adc	r31, r31
    1488:	12 96       	adiw	r26, 0x02	; 2
    148a:	8d 91       	ld	r24, X+
    148c:	9c 91       	ld	r25, X
    148e:	13 97       	sbiw	r26, 0x03	; 3
    1490:	e8 0f       	add	r30, r24
    1492:	f9 1f       	adc	r31, r25
    1494:	01 90       	ld	r0, Z+
    1496:	f0 81       	ld	r31, Z
    1498:	e0 2d       	mov	r30, r0
    149a:	00 84       	ldd	r0, Z+8	; 0x08
    149c:	f1 85       	ldd	r31, Z+9	; 0x09
    149e:	e0 2d       	mov	r30, r0
    14a0:	30 97       	sbiw	r30, 0x00	; 0
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    14a4:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    14a6:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    14a8:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    14ac:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    14b0:	ed 91       	ld	r30, X+
    14b2:	fc 91       	ld	r31, X
    14b4:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    14b6:	84 81       	ldd	r24, Z+4	; 0x04
    14b8:	c8 17       	cp	r28, r24
    14ba:	10 f3       	brcs	.-60     	; 0x1480 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    14bc:	cf 91       	pop	r28
    14be:	08 95       	ret

000014c0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    14c8:	e9 eb       	ldi	r30, 0xB9	; 185
    14ca:	f3 e2       	ldi	r31, 0x23	; 35
    14cc:	12 86       	std	Z+10, r1	; 0x0a
    14ce:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    14d0:	14 86       	std	Z+12, r1	; 0x0c
    14d2:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    14d4:	16 86       	std	Z+14, r1	; 0x0e
    14d6:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    14d8:	80 81       	ld	r24, Z
    14da:	88 23       	and	r24, r24
    14dc:	0c f0       	brlt	.+2      	; 0x14e0 <udc_process_setup+0x20>
    14de:	7e c2       	rjmp	.+1276   	; 0x19dc <udc_process_setup+0x51c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    14e0:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    14e4:	30 91 c0 23 	lds	r19, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    14e8:	21 15       	cp	r18, r1
    14ea:	31 05       	cpc	r19, r1
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <udc_process_setup+0x30>
    14ee:	7b c2       	rjmp	.+1270   	; 0x19e6 <udc_process_setup+0x526>
    14f0:	6d c2       	rjmp	.+1242   	; 0x19cc <udc_process_setup+0x50c>
    14f2:	8f 71       	andi	r24, 0x1F	; 31
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <udc_process_setup+0x38>
    14f6:	a0 c0       	rjmp	.+320    	; 0x1638 <udc_process_setup+0x178>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    14f8:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    14fc:	96 30       	cpi	r25, 0x06	; 6
    14fe:	79 f0       	breq	.+30     	; 0x151e <udc_process_setup+0x5e>
    1500:	98 30       	cpi	r25, 0x08	; 8
    1502:	09 f4       	brne	.+2      	; 0x1506 <udc_process_setup+0x46>
    1504:	8f c0       	rjmp	.+286    	; 0x1624 <udc_process_setup+0x164>
    1506:	91 11       	cpse	r25, r1
    1508:	97 c0       	rjmp	.+302    	; 0x1638 <udc_process_setup+0x178>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	09 f0       	breq	.+2      	; 0x1512 <udc_process_setup+0x52>
    1510:	19 c2       	rjmp	.+1074   	; 0x1944 <udc_process_setup+0x484>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    1512:	62 e0       	ldi	r22, 0x02	; 2
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	8c ee       	ldi	r24, 0xEC	; 236
    1518:	91 e2       	ldi	r25, 0x21	; 33
    151a:	62 d6       	rcall	.+3268   	; 0x21e0 <udd_set_setup_payload>
    151c:	69 c2       	rjmp	.+1234   	; 0x19f0 <udc_process_setup+0x530>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    151e:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1522:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1526:	29 2f       	mov	r18, r25
    1528:	33 27       	eor	r19, r19
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	a9 f0       	breq	.+42     	; 0x155a <udc_process_setup+0x9a>
    1530:	20 f4       	brcc	.+8      	; 0x153a <udc_process_setup+0x7a>
    1532:	21 30       	cpi	r18, 0x01	; 1
    1534:	31 05       	cpc	r19, r1
    1536:	41 f0       	breq	.+16     	; 0x1548 <udc_process_setup+0x88>
    1538:	c7 c1       	rjmp	.+910    	; 0x18c8 <udc_process_setup+0x408>
    153a:	23 30       	cpi	r18, 0x03	; 3
    153c:	31 05       	cpc	r19, r1
    153e:	d9 f1       	breq	.+118    	; 0x15b6 <udc_process_setup+0xf6>
    1540:	2f 30       	cpi	r18, 0x0F	; 15
    1542:	31 05       	cpc	r19, r1
    1544:	51 f1       	breq	.+84     	; 0x159a <udc_process_setup+0xda>
    1546:	c0 c1       	rjmp	.+896    	; 0x18c8 <udc_process_setup+0x408>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    1548:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <udc_config>
    154c:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1550:	dc 01       	movw	r26, r24
    1552:	6c 91       	ld	r22, X
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	44 d6       	rcall	.+3208   	; 0x21e0 <udd_set_setup_payload>
    1558:	56 c0       	rjmp	.+172    	; 0x1606 <udc_process_setup+0x146>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    155a:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    155e:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
    1562:	21 89       	ldd	r18, Z+17	; 0x11
    1564:	82 17       	cp	r24, r18
    1566:	08 f0       	brcs	.+2      	; 0x156a <udc_process_setup+0xaa>
    1568:	ed c1       	rjmp	.+986    	; 0x1944 <udc_process_setup+0x484>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    156a:	99 27       	eor	r25, r25
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    1578:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    157c:	e8 0f       	add	r30, r24
    157e:	f9 1f       	adc	r31, r25
    1580:	80 81       	ld	r24, Z
    1582:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1584:	fc 01       	movw	r30, r24
    1586:	62 81       	ldd	r22, Z+2	; 0x02
    1588:	73 81       	ldd	r23, Z+3	; 0x03
    158a:	2a d6       	rcall	.+3156   	; 0x21e0 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    158c:	e0 91 c1 23 	lds	r30, 0x23C1	; 0x8023c1 <udd_g_ctrlreq+0x8>
    1590:	f0 91 c2 23 	lds	r31, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x9>
    1594:	82 e0       	ldi	r24, 0x02	; 2
    1596:	81 83       	std	Z+1, r24	; 0x01
    1598:	36 c0       	rjmp	.+108    	; 0x1606 <udc_process_setup+0x146>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    159a:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <udc_config+0x4>
    159e:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <udc_config+0x5>
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <udc_process_setup+0xe8>
    15a6:	ce c1       	rjmp	.+924    	; 0x1944 <udc_process_setup+0x484>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    15a8:	dc 01       	movw	r26, r24
    15aa:	12 96       	adiw	r26, 0x02	; 2
    15ac:	6d 91       	ld	r22, X+
    15ae:	7c 91       	ld	r23, X
    15b0:	13 97       	sbiw	r26, 0x03	; 3
    15b2:	16 d6       	rcall	.+3116   	; 0x21e0 <udd_set_setup_payload>
    15b4:	28 c0       	rjmp	.+80     	; 0x1606 <udc_process_setup+0x146>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    15b6:	99 27       	eor	r25, r25
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	91 05       	cpc	r25, r1
    15bc:	71 f0       	breq	.+28     	; 0x15da <udc_process_setup+0x11a>
    15be:	38 f0       	brcs	.+14     	; 0x15ce <udc_process_setup+0x10e>
    15c0:	02 97       	sbiw	r24, 0x02	; 2
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <udc_process_setup+0x106>
    15c4:	8a c1       	rjmp	.+788    	; 0x18da <udc_process_setup+0x41a>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
    15c6:	e4 e5       	ldi	r30, 0x54	; 84
    15c8:	f1 e2       	ldi	r31, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    15ca:	31 e2       	ldi	r19, 0x21	; 33
    15cc:	09 c0       	rjmp	.+18     	; 0x15e0 <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    15ce:	64 e0       	ldi	r22, 0x04	; 4
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	80 e8       	ldi	r24, 0x80	; 128
    15d4:	91 e2       	ldi	r25, 0x21	; 33
    15d6:	04 d6       	rcall	.+3080   	; 0x21e0 <udd_set_setup_payload>
    15d8:	16 c0       	rjmp	.+44     	; 0x1606 <udc_process_setup+0x146>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    15da:	e6 e7       	ldi	r30, 0x76	; 118
    15dc:	f1 e2       	ldi	r31, 0x21	; 33
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    15de:	39 e0       	ldi	r19, 0x09	; 9
    15e0:	a2 e1       	ldi	r26, 0x12	; 18
    15e2:	b1 e2       	ldi	r27, 0x21	; 33
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    15e4:	20 e0       	ldi	r18, 0x00	; 0
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    15e6:	81 91       	ld	r24, Z+
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	8d 93       	st	X+, r24
    15ec:	9d 93       	st	X+, r25
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    15ee:	2f 5f       	subi	r18, 0xFF	; 255
    15f0:	23 17       	cp	r18, r19
    15f2:	c8 f3       	brcs	.-14     	; 0x15e6 <udc_process_setup+0x126>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    15f4:	63 2f       	mov	r22, r19
    15f6:	66 0f       	add	r22, r22
    15f8:	6e 5f       	subi	r22, 0xFE	; 254
    15fa:	60 93 10 21 	sts	0x2110, r22	; 0x802110 <udc_string_desc>
		udd_set_setup_payload(
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	80 e1       	ldi	r24, 0x10	; 16
    1602:	91 e2       	ldi	r25, 0x21	; 33
    1604:	ed d5       	rcall	.+3034   	; 0x21e0 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1606:	e9 eb       	ldi	r30, 0xB9	; 185
    1608:	f3 e2       	ldi	r31, 0x23	; 35
    160a:	86 81       	ldd	r24, Z+6	; 0x06
    160c:	97 81       	ldd	r25, Z+7	; 0x07
    160e:	22 85       	ldd	r18, Z+10	; 0x0a
    1610:	33 85       	ldd	r19, Z+11	; 0x0b
    1612:	82 17       	cp	r24, r18
    1614:	93 07       	cpc	r25, r19
    1616:	08 f0       	brcs	.+2      	; 0x161a <udc_process_setup+0x15a>
    1618:	eb c1       	rjmp	.+982    	; 0x19f0 <udc_process_setup+0x530>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    161a:	80 93 c3 23 	sts	0x23C3, r24	; 0x8023c3 <udd_g_ctrlreq+0xa>
    161e:	90 93 c4 23 	sts	0x23C4, r25	; 0x8023c4 <udd_g_ctrlreq+0xb>
    1622:	e6 c1       	rjmp	.+972    	; 0x19f0 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1624:	21 30       	cpi	r18, 0x01	; 1
    1626:	31 05       	cpc	r19, r1
    1628:	09 f0       	breq	.+2      	; 0x162c <udc_process_setup+0x16c>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    162a:	8c c1       	rjmp	.+792    	; 0x1944 <udc_process_setup+0x484>
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	88 ee       	ldi	r24, 0xE8	; 232
    1632:	91 e2       	ldi	r25, 0x21	; 33
    1634:	d5 d5       	rcall	.+2986   	; 0x21e0 <udd_set_setup_payload>
    1636:	dc c1       	rjmp	.+952    	; 0x19f0 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	e1 f5       	brne	.+120    	; 0x16b4 <udc_process_setup+0x1f4>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    163c:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1640:	9a 30       	cpi	r25, 0x0A	; 10
    1642:	c1 f5       	brne	.+112    	; 0x16b4 <udc_process_setup+0x1f4>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1644:	21 30       	cpi	r18, 0x01	; 1
    1646:	31 05       	cpc	r19, r1
    1648:	09 f0       	breq	.+2      	; 0x164c <udc_process_setup+0x18c>
    164a:	4c c1       	rjmp	.+664    	; 0x18e4 <udc_process_setup+0x424>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    164c:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    1650:	88 23       	and	r24, r24
    1652:	09 f4       	brne	.+2      	; 0x1656 <udc_process_setup+0x196>
    1654:	47 c1       	rjmp	.+654    	; 0x18e4 <udc_process_setup+0x424>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1656:	c0 91 bd 23 	lds	r28, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    165a:	d0 91 be 23 	lds	r29, 0x23BE	; 0x8023be <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    165e:	00 91 e6 21 	lds	r16, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    1662:	10 91 e7 21 	lds	r17, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1666:	d8 01       	movw	r26, r16
    1668:	ed 91       	ld	r30, X+
    166a:	fc 91       	ld	r31, X
    166c:	84 81       	ldd	r24, Z+4	; 0x04
    166e:	c8 17       	cp	r28, r24
    1670:	08 f0       	brcs	.+2      	; 0x1674 <udc_process_setup+0x1b4>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1672:	38 c1       	rjmp	.+624    	; 0x18e4 <udc_process_setup+0x424>
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	8c 2f       	mov	r24, r28
    1678:	14 de       	rcall	.-984    	; 0x12a2 <udc_update_iface_desc>
    167a:	88 23       	and	r24, r24
    167c:	09 f4       	brne	.+2      	; 0x1680 <udc_process_setup+0x1c0>
    167e:	2d c1       	rjmp	.+602    	; 0x18da <udc_process_setup+0x41a>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1680:	ce 01       	movw	r24, r28
    1682:	99 27       	eor	r25, r25
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	d8 01       	movw	r26, r16
    168a:	12 96       	adiw	r26, 0x02	; 2
    168c:	ed 91       	ld	r30, X+
    168e:	fc 91       	ld	r31, X
    1690:	13 97       	sbiw	r26, 0x03	; 3
    1692:	e8 0f       	add	r30, r24
    1694:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1696:	01 90       	ld	r0, Z+
    1698:	f0 81       	ld	r31, Z
    169a:	e0 2d       	mov	r30, r0
    169c:	86 81       	ldd	r24, Z+6	; 0x06
    169e:	97 81       	ldd	r25, Z+7	; 0x07
    16a0:	fc 01       	movw	r30, r24
    16a2:	19 95       	eicall
    16a4:	80 93 ea 21 	sts	0x21EA, r24	; 0x8021ea <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    16a8:	61 e0       	ldi	r22, 0x01	; 1
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	8a ee       	ldi	r24, 0xEA	; 234
    16ae:	91 e2       	ldi	r25, 0x21	; 33
    16b0:	97 d5       	rcall	.+2862   	; 0x21e0 <udd_set_setup_payload>
    16b2:	9e c1       	rjmp	.+828    	; 0x19f0 <udc_process_setup+0x530>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    16b4:	82 30       	cpi	r24, 0x02	; 2
    16b6:	09 f0       	breq	.+2      	; 0x16ba <udc_process_setup+0x1fa>
    16b8:	10 c1       	rjmp	.+544    	; 0x18da <udc_process_setup+0x41a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    16ba:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    16be:	81 11       	cpse	r24, r1
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    16c0:	05 c1       	rjmp	.+522    	; 0x18cc <udc_process_setup+0x40c>
    16c2:	22 30       	cpi	r18, 0x02	; 2
    16c4:	31 05       	cpc	r19, r1
    16c6:	09 f0       	breq	.+2      	; 0x16ca <udc_process_setup+0x20a>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    16c8:	3d c1       	rjmp	.+634    	; 0x1944 <udc_process_setup+0x484>
    16ca:	80 91 bd 23 	lds	r24, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    16ce:	17 d6       	rcall	.+3118   	; 0x22fe <udd_ep_is_halted>
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	80 93 e2 21 	sts	0x21E2, r24	; 0x8021e2 <udc_ep_status.4574>
    16d6:	90 93 e3 21 	sts	0x21E3, r25	; 0x8021e3 <udc_ep_status.4574+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    16da:	62 e0       	ldi	r22, 0x02	; 2
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	82 ee       	ldi	r24, 0xE2	; 226
    16e0:	91 e2       	ldi	r25, 0x21	; 33
    16e2:	7e d5       	rcall	.+2812   	; 0x21e0 <udd_set_setup_payload>
    16e4:	85 c1       	rjmp	.+778    	; 0x19f0 <udc_process_setup+0x530>
    16e6:	8f 71       	andi	r24, 0x1F	; 31
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    16e8:	09 f0       	breq	.+2      	; 0x16ec <udc_process_setup+0x22c>
    16ea:	9f c0       	rjmp	.+318    	; 0x182a <udc_process_setup+0x36a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    16ec:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    16f0:	93 30       	cpi	r25, 0x03	; 3
    16f2:	91 f1       	breq	.+100    	; 0x1758 <udc_process_setup+0x298>
    16f4:	18 f4       	brcc	.+6      	; 0x16fc <udc_process_setup+0x23c>
    16f6:	91 30       	cpi	r25, 0x01	; 1
    16f8:	a9 f0       	breq	.+42     	; 0x1724 <udc_process_setup+0x264>
    16fa:	97 c0       	rjmp	.+302    	; 0x182a <udc_process_setup+0x36a>
    16fc:	95 30       	cpi	r25, 0x05	; 5
    16fe:	21 f0       	breq	.+8      	; 0x1708 <udc_process_setup+0x248>
    1700:	99 30       	cpi	r25, 0x09	; 9
    1702:	09 f4       	brne	.+2      	; 0x1706 <udc_process_setup+0x246>
    1704:	43 c0       	rjmp	.+134    	; 0x178c <udc_process_setup+0x2cc>
    1706:	91 c0       	rjmp	.+290    	; 0x182a <udc_process_setup+0x36a>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1708:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    170c:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1710:	89 2b       	or	r24, r25
    1712:	09 f0       	breq	.+2      	; 0x1716 <udc_process_setup+0x256>
    1714:	17 c1       	rjmp	.+558    	; 0x1944 <udc_process_setup+0x484>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1716:	8c e4       	ldi	r24, 0x4C	; 76
    1718:	99 e0       	ldi	r25, 0x09	; 9
    171a:	80 93 c5 23 	sts	0x23C5, r24	; 0x8023c5 <udd_g_ctrlreq+0xc>
    171e:	90 93 c6 23 	sts	0x23C6, r25	; 0x8023c6 <udd_g_ctrlreq+0xd>
    1722:	66 c1       	rjmp	.+716    	; 0x19f0 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1724:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1728:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    172c:	89 2b       	or	r24, r25
    172e:	09 f0       	breq	.+2      	; 0x1732 <udc_process_setup+0x272>
    1730:	09 c1       	rjmp	.+530    	; 0x1944 <udc_process_setup+0x484>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1732:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    1736:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	09 f0       	breq	.+2      	; 0x1740 <udc_process_setup+0x280>
    173e:	02 c1       	rjmp	.+516    	; 0x1944 <udc_process_setup+0x484>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1740:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <udc_device_status>
    1744:	90 91 ed 21 	lds	r25, 0x21ED	; 0x8021ed <udc_device_status+0x1>
    1748:	8d 7f       	andi	r24, 0xFD	; 253
    174a:	80 93 ec 21 	sts	0x21EC, r24	; 0x8021ec <udc_device_status>
    174e:	90 93 ed 21 	sts	0x21ED, r25	; 0x8021ed <udc_device_status+0x1>
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    1752:	0e 94 00 15 	call	0x2a00	; 0x2a00 <main_remotewakeup_disable>
    1756:	4c c1       	rjmp	.+664    	; 0x19f0 <udc_process_setup+0x530>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1758:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    175c:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1760:	89 2b       	or	r24, r25
    1762:	09 f0       	breq	.+2      	; 0x1766 <udc_process_setup+0x2a6>
    1764:	ef c0       	rjmp	.+478    	; 0x1944 <udc_process_setup+0x484>
		return false;
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1766:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    176a:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	09 f0       	breq	.+2      	; 0x1774 <udc_process_setup+0x2b4>
    1772:	ae c0       	rjmp	.+348    	; 0x18d0 <udc_process_setup+0x410>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    1774:	80 91 ec 21 	lds	r24, 0x21EC	; 0x8021ec <udc_device_status>
    1778:	90 91 ed 21 	lds	r25, 0x21ED	; 0x8021ed <udc_device_status+0x1>
    177c:	82 60       	ori	r24, 0x02	; 2
    177e:	80 93 ec 21 	sts	0x21EC, r24	; 0x8021ec <udc_device_status>
    1782:	90 93 ed 21 	sts	0x21ED, r25	; 0x8021ed <udc_device_status+0x1>
		UDC_REMOTEWAKEUP_ENABLE();
    1786:	0e 94 ff 14 	call	0x29fe	; 0x29fe <main_remotewakeup_enable>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    178a:	32 c1       	rjmp	.+612    	; 0x19f0 <udc_process_setup+0x530>
    178c:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1790:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1794:	89 2b       	or	r24, r25
    1796:	09 f0       	breq	.+2      	; 0x179a <udc_process_setup+0x2da>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1798:	d5 c0       	rjmp	.+426    	; 0x1944 <udc_process_setup+0x484>
    179a:	1a d5       	rcall	.+2612   	; 0x21d0 <udd_getaddress>
    179c:	88 23       	and	r24, r24
    179e:	09 f4       	brne	.+2      	; 0x17a2 <udc_process_setup+0x2e2>
    17a0:	9c c0       	rjmp	.+312    	; 0x18da <udc_process_setup+0x41a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    17a2:	20 91 bb 23 	lds	r18, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    17a6:	30 91 bc 23 	lds	r19, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
				udc_config.confdev_lsfs->bNumConfigurations) {
    17aa:	33 27       	eor	r19, r19
    17ac:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <udc_config>
    17b0:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    17b4:	81 89       	ldd	r24, Z+17	; 0x11
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	82 17       	cp	r24, r18
    17ba:	93 07       	cpc	r25, r19
    17bc:	08 f4       	brcc	.+2      	; 0x17c0 <udc_process_setup+0x300>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    17be:	8d c0       	rjmp	.+282    	; 0x18da <udc_process_setup+0x41a>
    17c0:	25 de       	rcall	.-950    	; 0x140c <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    17c2:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    17c6:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    17ca:	80 93 e8 21 	sts	0x21E8, r24	; 0x8021e8 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    17ce:	88 23       	and	r24, r24
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <udc_process_setup+0x314>
    17d2:	0e c1       	rjmp	.+540    	; 0x19f0 <udc_process_setup+0x530>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    17d4:	99 27       	eor	r25, r25
    17d6:	81 50       	subi	r24, 0x01	; 1
    17d8:	90 4c       	sbci	r25, 0xC0	; 192
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <udc_config+0x2>
    17e6:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <udc_config+0x3>
    17ea:	e8 0f       	add	r30, r24
    17ec:	f9 1f       	adc	r31, r25
    17ee:	e0 93 e6 21 	sts	0x21E6, r30	; 0x8021e6 <udc_ptr_conf>
    17f2:	f0 93 e7 21 	sts	0x21E7, r31	; 0x8021e7 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    17f6:	01 90       	ld	r0, Z+
    17f8:	f0 81       	ld	r31, Z
    17fa:	e0 2d       	mov	r30, r0
    17fc:	84 81       	ldd	r24, Z+4	; 0x04
    17fe:	88 23       	and	r24, r24
    1800:	09 f4       	brne	.+2      	; 0x1804 <udc_process_setup+0x344>
    1802:	f6 c0       	rjmp	.+492    	; 0x19f0 <udc_process_setup+0x530>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1804:	c0 e0       	ldi	r28, 0x00	; 0
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	8c 2f       	mov	r24, r28
    180a:	c7 dd       	rcall	.-1138   	; 0x139a <udc_iface_enable>
    180c:	88 23       	and	r24, r24
    180e:	09 f4       	brne	.+2      	; 0x1812 <udc_process_setup+0x352>
    1810:	64 c0       	rjmp	.+200    	; 0x18da <udc_process_setup+0x41a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1812:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1814:	e0 91 e6 21 	lds	r30, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    1818:	f0 91 e7 21 	lds	r31, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    181c:	01 90       	ld	r0, Z+
    181e:	f0 81       	ld	r31, Z
    1820:	e0 2d       	mov	r30, r0
    1822:	84 81       	ldd	r24, Z+4	; 0x04
    1824:	c8 17       	cp	r28, r24
    1826:	78 f3       	brcs	.-34     	; 0x1806 <udc_process_setup+0x346>
    1828:	e3 c0       	rjmp	.+454    	; 0x19f0 <udc_process_setup+0x530>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    182a:	81 30       	cpi	r24, 0x01	; 1
    182c:	e9 f4       	brne	.+58     	; 0x1868 <udc_process_setup+0x3a8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    182e:	90 91 ba 23 	lds	r25, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1832:	9b 30       	cpi	r25, 0x0B	; 11
    1834:	c9 f4       	brne	.+50     	; 0x1868 <udc_process_setup+0x3a8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1836:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    183a:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    183e:	89 2b       	or	r24, r25
    1840:	09 f0       	breq	.+2      	; 0x1844 <udc_process_setup+0x384>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1842:	50 c0       	rjmp	.+160    	; 0x18e4 <udc_process_setup+0x424>
    1844:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    1848:	88 23       	and	r24, r24
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    184a:	09 f4       	brne	.+2      	; 0x184e <udc_process_setup+0x38e>
    184c:	4b c0       	rjmp	.+150    	; 0x18e4 <udc_process_setup+0x424>
    184e:	e9 eb       	ldi	r30, 0xB9	; 185
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1850:	f3 e2       	ldi	r31, 0x23	; 35

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1852:	c4 81       	ldd	r28, Z+4	; 0x04
    1854:	d2 81       	ldd	r29, Z+2	; 0x02
    1856:	8c 2f       	mov	r24, r28
    1858:	5e dd       	rcall	.-1348   	; 0x1316 <udc_iface_disable>
    185a:	88 23       	and	r24, r24
    185c:	09 f4       	brne	.+2      	; 0x1860 <udc_process_setup+0x3a0>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    185e:	3d c0       	rjmp	.+122    	; 0x18da <udc_process_setup+0x41a>
    1860:	6d 2f       	mov	r22, r29
    1862:	8c 2f       	mov	r24, r28
    1864:	9a dd       	rcall	.-1228   	; 0x139a <udc_iface_enable>
    1866:	37 c0       	rjmp	.+110    	; 0x18d6 <udc_process_setup+0x416>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1868:	82 30       	cpi	r24, 0x02	; 2
    186a:	b9 f5       	brne	.+110    	; 0x18da <udc_process_setup+0x41a>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    186c:	80 91 ba 23 	lds	r24, 0x23BA	; 0x8023ba <udd_g_ctrlreq+0x1>
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	19 f0       	breq	.+6      	; 0x187a <udc_process_setup+0x3ba>
    1874:	83 30       	cpi	r24, 0x03	; 3
    1876:	99 f0       	breq	.+38     	; 0x189e <udc_process_setup+0x3de>
    1878:	2d c0       	rjmp	.+90     	; 0x18d4 <udc_process_setup+0x414>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    187a:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    187e:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1882:	89 2b       	or	r24, r25
    1884:	09 f0       	breq	.+2      	; 0x1888 <udc_process_setup+0x3c8>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1886:	5e c0       	rjmp	.+188    	; 0x1944 <udc_process_setup+0x484>
    1888:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    188c:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    1890:	89 2b       	or	r24, r25
    1892:	09 f0       	breq	.+2      	; 0x1896 <udc_process_setup+0x3d6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1894:	57 c0       	rjmp	.+174    	; 0x1944 <udc_process_setup+0x484>
    1896:	80 91 bd 23 	lds	r24, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    189a:	4c d5       	rcall	.+2712   	; 0x2334 <udd_ep_clear_halt>
    189c:	1c c0       	rjmp	.+56     	; 0x18d6 <udc_process_setup+0x416>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    189e:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    18a2:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    18a6:	89 2b       	or	r24, r25
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    18a8:	09 f0       	breq	.+2      	; 0x18ac <udc_process_setup+0x3ec>
    18aa:	4c c0       	rjmp	.+152    	; 0x1944 <udc_process_setup+0x484>
    18ac:	80 91 bb 23 	lds	r24, 0x23BB	; 0x8023bb <udd_g_ctrlreq+0x2>
    18b0:	90 91 bc 23 	lds	r25, 0x23BC	; 0x8023bc <udd_g_ctrlreq+0x3>
    18b4:	89 2b       	or	r24, r25
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    18b6:	09 f0       	breq	.+2      	; 0x18ba <udc_process_setup+0x3fa>
    18b8:	45 c0       	rjmp	.+138    	; 0x1944 <udc_process_setup+0x484>
    18ba:	c9 eb       	ldi	r28, 0xB9	; 185
    18bc:	d3 e2       	ldi	r29, 0x23	; 35
    18be:	8c 81       	ldd	r24, Y+4	; 0x04
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    18c0:	3a d6       	rcall	.+3188   	; 0x2536 <udd_ep_abort>
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	a3 d6       	rcall	.+3398   	; 0x260c <udd_ep_set_halt>
    18c6:	07 c0       	rjmp	.+14     	; 0x18d6 <udc_process_setup+0x416>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	05 c0       	rjmp	.+10     	; 0x18d6 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	03 c0       	rjmp	.+6      	; 0x18d6 <udc_process_setup+0x416>
		break;
#endif
	default:
		break;
	}
	return false;
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	01 c0       	rjmp	.+2      	; 0x18d6 <udc_process_setup+0x416>
				break;
			}
		}
#endif
	}
	return false;
    18d4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    18d6:	81 11       	cpse	r24, r1
    18d8:	8c c0       	rjmp	.+280    	; 0x19f2 <udc_process_setup+0x532>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    18da:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    18de:	8f 71       	andi	r24, 0x1F	; 31
    18e0:	81 30       	cpi	r24, 0x01	; 1
    18e2:	81 f5       	brne	.+96     	; 0x1944 <udc_process_setup+0x484>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    18e4:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    18e8:	88 23       	and	r24, r24
    18ea:	09 f4       	brne	.+2      	; 0x18ee <udc_process_setup+0x42e>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    18ec:	71 c0       	rjmp	.+226    	; 0x19d0 <udc_process_setup+0x510>
    18ee:	00 91 bd 23 	lds	r16, 0x23BD	; 0x8023bd <udd_g_ctrlreq+0x4>
    18f2:	10 91 be 23 	lds	r17, 0x23BE	; 0x8023be <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    18f6:	c0 91 e6 21 	lds	r28, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    18fa:	d0 91 e7 21 	lds	r29, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    18fe:	e8 81       	ld	r30, Y
    1900:	f9 81       	ldd	r31, Y+1	; 0x01
    1902:	84 81       	ldd	r24, Z+4	; 0x04
    1904:	08 17       	cp	r16, r24
    1906:	08 f0       	brcs	.+2      	; 0x190a <udc_process_setup+0x44a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1908:	65 c0       	rjmp	.+202    	; 0x19d4 <udc_process_setup+0x514>
    190a:	60 e0       	ldi	r22, 0x00	; 0
    190c:	80 2f       	mov	r24, r16
    190e:	c9 dc       	rcall	.-1646   	; 0x12a2 <udc_update_iface_desc>
    1910:	88 23       	and	r24, r24
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1912:	c1 f0       	breq	.+48     	; 0x1944 <udc_process_setup+0x484>
    1914:	f8 01       	movw	r30, r16
    1916:	ff 27       	eor	r31, r31
    1918:	cf 01       	movw	r24, r30
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	ea 81       	ldd	r30, Y+2	; 0x02
    1920:	fb 81       	ldd	r31, Y+3	; 0x03
    1922:	e8 0f       	add	r30, r24
    1924:	f9 1f       	adc	r31, r25
    1926:	c0 81       	ld	r28, Z
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1928:	d1 81       	ldd	r29, Z+1	; 0x01
    192a:	ee 81       	ldd	r30, Y+6	; 0x06
    192c:	ff 81       	ldd	r31, Y+7	; 0x07
    192e:	19 95       	eicall
    1930:	68 2f       	mov	r22, r24
    1932:	80 2f       	mov	r24, r16
    1934:	b6 dc       	rcall	.-1684   	; 0x12a2 <udc_update_iface_desc>
    1936:	88 23       	and	r24, r24
    1938:	29 f0       	breq	.+10     	; 0x1944 <udc_process_setup+0x484>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    193a:	ec 81       	ldd	r30, Y+4	; 0x04
    193c:	fd 81       	ldd	r31, Y+5	; 0x05
    193e:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1940:	81 11       	cpse	r24, r1
    1942:	57 c0       	rjmp	.+174    	; 0x19f2 <udc_process_setup+0x532>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1944:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    1948:	8f 71       	andi	r24, 0x1F	; 31
    194a:	82 30       	cpi	r24, 0x02	; 2
    194c:	09 f0       	breq	.+2      	; 0x1950 <udc_process_setup+0x490>
    194e:	44 c0       	rjmp	.+136    	; 0x19d8 <udc_process_setup+0x518>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1950:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udc_num_configuration>
    1954:	88 23       	and	r24, r24
    1956:	b1 f1       	breq	.+108    	; 0x19c4 <udc_process_setup+0x504>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1958:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    195c:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    1960:	ed 91       	ld	r30, X+
    1962:	fc 91       	ld	r31, X
    1964:	11 97       	sbiw	r26, 0x01	; 1
    1966:	84 81       	ldd	r24, Z+4	; 0x04
    1968:	88 23       	and	r24, r24
    196a:	71 f1       	breq	.+92     	; 0x19c8 <udc_process_setup+0x508>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    196c:	c0 e0       	ldi	r28, 0x00	; 0
    196e:	ec 2f       	mov	r30, r28
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	ee 0f       	add	r30, r30
    1974:	ff 1f       	adc	r31, r31
    1976:	12 96       	adiw	r26, 0x02	; 2
    1978:	8d 91       	ld	r24, X+
    197a:	9c 91       	ld	r25, X
    197c:	13 97       	sbiw	r26, 0x03	; 3
    197e:	e8 0f       	add	r30, r24
    1980:	f9 1f       	adc	r31, r25
    1982:	00 81       	ld	r16, Z
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1984:	11 81       	ldd	r17, Z+1	; 0x01
    1986:	d8 01       	movw	r26, r16
    1988:	16 96       	adiw	r26, 0x06	; 6
    198a:	ed 91       	ld	r30, X+
    198c:	fc 91       	ld	r31, X
    198e:	17 97       	sbiw	r26, 0x07	; 7
    1990:	19 95       	eicall
    1992:	68 2f       	mov	r22, r24
    1994:	8c 2f       	mov	r24, r28
    1996:	85 dc       	rcall	.-1782   	; 0x12a2 <udc_update_iface_desc>
    1998:	88 23       	and	r24, r24
    199a:	59 f1       	breq	.+86     	; 0x19f2 <udc_process_setup+0x532>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    199c:	d8 01       	movw	r26, r16
    199e:	14 96       	adiw	r26, 0x04	; 4
    19a0:	ed 91       	ld	r30, X+
    19a2:	fc 91       	ld	r31, X
    19a4:	15 97       	sbiw	r26, 0x05	; 5
    19a6:	19 95       	eicall
    19a8:	81 11       	cpse	r24, r1
    19aa:	23 c0       	rjmp	.+70     	; 0x19f2 <udc_process_setup+0x532>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    19ac:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    19ae:	a0 91 e6 21 	lds	r26, 0x21E6	; 0x8021e6 <udc_ptr_conf>
    19b2:	b0 91 e7 21 	lds	r27, 0x21E7	; 0x8021e7 <udc_ptr_conf+0x1>
    19b6:	ed 91       	ld	r30, X+
    19b8:	fc 91       	ld	r31, X
    19ba:	11 97       	sbiw	r26, 0x01	; 1
    19bc:	94 81       	ldd	r25, Z+4	; 0x04
    19be:	c9 17       	cp	r28, r25
    19c0:	b0 f2       	brcs	.-84     	; 0x196e <udc_process_setup+0x4ae>
    19c2:	17 c0       	rjmp	.+46     	; 0x19f2 <udc_process_setup+0x532>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	15 c0       	rjmp	.+42     	; 0x19f2 <udc_process_setup+0x532>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	13 c0       	rjmp	.+38     	; 0x19f2 <udc_process_setup+0x532>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	11 c0       	rjmp	.+34     	; 0x19f2 <udc_process_setup+0x532>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	0f c0       	rjmp	.+30     	; 0x19f2 <udc_process_setup+0x532>
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	0d c0       	rjmp	.+26     	; 0x19f2 <udc_process_setup+0x532>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	0b c0       	rjmp	.+22     	; 0x19f2 <udc_process_setup+0x532>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    19dc:	98 2f       	mov	r25, r24
    19de:	90 76       	andi	r25, 0x60	; 96
    19e0:	09 f0       	breq	.+2      	; 0x19e4 <udc_process_setup+0x524>
    19e2:	7b cf       	rjmp	.-266    	; 0x18da <udc_process_setup+0x41a>
    19e4:	80 ce       	rjmp	.-768    	; 0x16e6 <udc_process_setup+0x226>
    19e6:	98 2f       	mov	r25, r24
    19e8:	90 76       	andi	r25, 0x60	; 96
    19ea:	09 f0       	breq	.+2      	; 0x19ee <udc_process_setup+0x52e>
    19ec:	76 cf       	rjmp	.-276    	; 0x18da <udc_process_setup+0x41a>
    19ee:	81 cd       	rjmp	.-1278   	; 0x14f2 <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    19f0:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	1f 91       	pop	r17
    19f8:	0f 91       	pop	r16
    19fa:	08 95       	ret

000019fc <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    19fc:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1a00:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1a02:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1a04:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1a08:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1a0a:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7be1ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1a0e:	08 95       	ret

00001a10 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1a10:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1a12:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1a14:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1a16:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1a18:	60 83       	st	Z, r22
	ret                             // Return to caller
    1a1a:	08 95       	ret

00001a1c <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	1f 92       	push	r1
    1a22:	1f 92       	push	r1
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	81 11       	cpse	r24, r1
    1a2a:	26 c0       	rjmp	.+76     	; 0x1a78 <udd_sleep_mode+0x5c>
    1a2c:	90 91 ac 23 	lds	r25, 0x23AC	; 0x8023ac <udd_b_idle>
    1a30:	99 23       	and	r25, r25
    1a32:	f9 f0       	breq	.+62     	; 0x1a72 <udd_sleep_mode+0x56>
    1a34:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <sleepmgr_locks+0x1>
    1a38:	91 11       	cpse	r25, r1
    1a3a:	01 c0       	rjmp	.+2      	; 0x1a3e <udd_sleep_mode+0x22>
    1a3c:	ff cf       	rjmp	.-2      	; 0x1a3c <udd_sleep_mode+0x20>
    1a3e:	9f b7       	in	r25, 0x3f	; 63
    1a40:	9a 83       	std	Y+2, r25	; 0x02
    1a42:	f8 94       	cli
    1a44:	2a 81       	ldd	r18, Y+2	; 0x02
    1a46:	e3 eb       	ldi	r30, 0xB3	; 179
    1a48:	f3 e2       	ldi	r31, 0x23	; 35
    1a4a:	91 81       	ldd	r25, Z+1	; 0x01
    1a4c:	91 50       	subi	r25, 0x01	; 1
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	2f bf       	out	0x3f, r18	; 63
    1a52:	0f c0       	rjmp	.+30     	; 0x1a72 <udd_sleep_mode+0x56>
    1a54:	90 91 b4 23 	lds	r25, 0x23B4	; 0x8023b4 <sleepmgr_locks+0x1>
    1a58:	9f 3f       	cpi	r25, 0xFF	; 255
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <udd_sleep_mode+0x42>
    1a5c:	ff cf       	rjmp	.-2      	; 0x1a5c <udd_sleep_mode+0x40>
    1a5e:	9f b7       	in	r25, 0x3f	; 63
    1a60:	99 83       	std	Y+1, r25	; 0x01
    1a62:	f8 94       	cli
    1a64:	29 81       	ldd	r18, Y+1	; 0x01
    1a66:	e3 eb       	ldi	r30, 0xB3	; 179
    1a68:	f3 e2       	ldi	r31, 0x23	; 35
    1a6a:	91 81       	ldd	r25, Z+1	; 0x01
    1a6c:	9f 5f       	subi	r25, 0xFF	; 255
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	2f bf       	out	0x3f, r18	; 63
    1a72:	80 93 ac 23 	sts	0x23AC, r24	; 0x8023ac <udd_b_idle>
    1a76:	05 c0       	rjmp	.+10     	; 0x1a82 <udd_sleep_mode+0x66>
    1a78:	90 91 ac 23 	lds	r25, 0x23AC	; 0x8023ac <udd_b_idle>
    1a7c:	99 23       	and	r25, r25
    1a7e:	51 f3       	breq	.-44     	; 0x1a54 <udd_sleep_mode+0x38>
    1a80:	f8 cf       	rjmp	.-16     	; 0x1a72 <udd_sleep_mode+0x56>
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	08 95       	ret

00001a8c <udd_ctrl_init>:
    1a8c:	0f 93       	push	r16
    1a8e:	e8 ec       	ldi	r30, 0xC8	; 200
    1a90:	f4 e0       	ldi	r31, 0x04	; 4
    1a92:	80 81       	ld	r24, Z
    1a94:	8f 7d       	andi	r24, 0xDF	; 223
    1a96:	80 83       	st	Z, r24
    1a98:	80 81       	ld	r24, Z
    1a9a:	8f 7d       	andi	r24, 0xDF	; 223
    1a9c:	80 83       	st	Z, r24
    1a9e:	e0 e6       	ldi	r30, 0x60	; 96
    1aa0:	f3 e2       	ldi	r31, 0x23	; 35
    1aa2:	02 e0       	ldi	r16, 0x02	; 2
    1aa4:	05 93       	las	Z, r16
    1aa6:	10 92 62 23 	sts	0x2362, r1	; 0x802362 <udd_sram+0x1e>
    1aaa:	10 92 63 23 	sts	0x2363, r1	; 0x802363 <udd_sram+0x1f>
    1aae:	00 e2       	ldi	r16, 0x20	; 32
    1ab0:	06 93       	lac	Z, r16
    1ab2:	00 e4       	ldi	r16, 0x40	; 64
    1ab4:	06 93       	lac	Z, r16
    1ab6:	e8 e5       	ldi	r30, 0x58	; 88
    1ab8:	f3 e2       	ldi	r31, 0x23	; 35
    1aba:	00 e4       	ldi	r16, 0x40	; 64
    1abc:	06 93       	lac	Z, r16
    1abe:	e9 eb       	ldi	r30, 0xB9	; 185
    1ac0:	f3 e2       	ldi	r31, 0x23	; 35
    1ac2:	14 86       	std	Z+12, r1	; 0x0c
    1ac4:	15 86       	std	Z+13, r1	; 0x0d
    1ac6:	16 86       	std	Z+14, r1	; 0x0e
    1ac8:	17 86       	std	Z+15, r1	; 0x0f
    1aca:	12 86       	std	Z+10, r1	; 0x0a
    1acc:	13 86       	std	Z+11, r1	; 0x0b
    1ace:	10 92 43 23 	sts	0x2343, r1	; 0x802343 <udd_ep_control_state>
    1ad2:	0f 91       	pop	r16
    1ad4:	08 95       	ret

00001ad6 <udd_ctrl_stall_data>:
    1ad6:	0f 93       	push	r16
    1ad8:	85 e0       	ldi	r24, 0x05	; 5
    1ada:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
    1ade:	e1 e6       	ldi	r30, 0x61	; 97
    1ae0:	f3 e2       	ldi	r31, 0x23	; 35
    1ae2:	04 e0       	ldi	r16, 0x04	; 4
    1ae4:	05 93       	las	Z, r16
    1ae6:	e9 e5       	ldi	r30, 0x59	; 89
    1ae8:	f3 e2       	ldi	r31, 0x23	; 35
    1aea:	04 e0       	ldi	r16, 0x04	; 4
    1aec:	05 93       	las	Z, r16
    1aee:	0f 91       	pop	r16
    1af0:	08 95       	ret

00001af2 <udd_ctrl_send_zlp_in>:
    1af2:	0f 93       	push	r16
    1af4:	83 e0       	ldi	r24, 0x03	; 3
    1af6:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
    1afa:	10 92 62 23 	sts	0x2362, r1	; 0x802362 <udd_sram+0x1e>
    1afe:	10 92 63 23 	sts	0x2363, r1	; 0x802363 <udd_sram+0x1f>
    1b02:	e0 e6       	ldi	r30, 0x60	; 96
    1b04:	f3 e2       	ldi	r31, 0x23	; 35
    1b06:	02 e0       	ldi	r16, 0x02	; 2
    1b08:	06 93       	lac	Z, r16
    1b0a:	0f 91       	pop	r16
    1b0c:	08 95       	ret

00001b0e <udd_ctrl_endofrequest>:
    1b0e:	e0 91 c5 23 	lds	r30, 0x23C5	; 0x8023c5 <udd_g_ctrlreq+0xc>
    1b12:	f0 91 c6 23 	lds	r31, 0x23C6	; 0x8023c6 <udd_g_ctrlreq+0xd>
    1b16:	30 97       	sbiw	r30, 0x00	; 0
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <udd_ctrl_endofrequest+0xe>
    1b1a:	19 95       	eicall
    1b1c:	08 95       	ret

00001b1e <udd_ctrl_in_sent>:
    1b1e:	0f 93       	push	r16
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
    1b24:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_ep_control_state>
    1b28:	83 30       	cpi	r24, 0x03	; 3
    1b2a:	19 f4       	brne	.+6      	; 0x1b32 <udd_ctrl_in_sent+0x14>
    1b2c:	f0 df       	rcall	.-32     	; 0x1b0e <udd_ctrl_endofrequest>
    1b2e:	ae df       	rcall	.-164    	; 0x1a8c <udd_ctrl_init>
    1b30:	5e c0       	rjmp	.+188    	; 0x1bee <udd_ctrl_in_sent+0xd0>
    1b32:	80 91 3f 23 	lds	r24, 0x233F	; 0x80233f <udd_ctrl_payload_nb_trans>
    1b36:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1b3a:	c0 91 c3 23 	lds	r28, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    1b3e:	d0 91 c4 23 	lds	r29, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    1b42:	c8 1b       	sub	r28, r24
    1b44:	d9 0b       	sbc	r29, r25
    1b46:	71 f5       	brne	.+92     	; 0x1ba4 <udd_ctrl_in_sent+0x86>
    1b48:	20 91 41 23 	lds	r18, 0x2341	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    1b4c:	30 91 42 23 	lds	r19, 0x2342	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    1b50:	82 0f       	add	r24, r18
    1b52:	93 1f       	adc	r25, r19
    1b54:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    1b58:	90 93 42 23 	sts	0x2342, r25	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    1b5c:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1b60:	30 91 c0 23 	lds	r19, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1b64:	82 17       	cp	r24, r18
    1b66:	93 07       	cpc	r25, r19
    1b68:	21 f0       	breq	.+8      	; 0x1b72 <udd_ctrl_in_sent+0x54>
    1b6a:	80 91 ee 21 	lds	r24, 0x21EE	; 0x8021ee <b_shortpacket.5290>
    1b6e:	88 23       	and	r24, r24
    1b70:	41 f0       	breq	.+16     	; 0x1b82 <udd_ctrl_in_sent+0x64>
    1b72:	84 e0       	ldi	r24, 0x04	; 4
    1b74:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
    1b78:	e8 e5       	ldi	r30, 0x58	; 88
    1b7a:	f3 e2       	ldi	r31, 0x23	; 35
    1b7c:	02 e0       	ldi	r16, 0x02	; 2
    1b7e:	06 93       	lac	Z, r16
    1b80:	36 c0       	rjmp	.+108    	; 0x1bee <udd_ctrl_in_sent+0xd0>
    1b82:	e0 91 c7 23 	lds	r30, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0xe>
    1b86:	f0 91 c8 23 	lds	r31, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0xf>
    1b8a:	30 97       	sbiw	r30, 0x00	; 0
    1b8c:	99 f0       	breq	.+38     	; 0x1bb4 <udd_ctrl_in_sent+0x96>
    1b8e:	19 95       	eicall
    1b90:	88 23       	and	r24, r24
    1b92:	81 f0       	breq	.+32     	; 0x1bb4 <udd_ctrl_in_sent+0x96>
    1b94:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udd_ctrl_payload_nb_trans>
    1b98:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1b9c:	c0 91 c3 23 	lds	r28, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    1ba0:	d0 91 c4 23 	lds	r29, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    1ba4:	c8 30       	cpi	r28, 0x08	; 8
    1ba6:	d1 05       	cpc	r29, r1
    1ba8:	28 f0       	brcs	.+10     	; 0x1bb4 <udd_ctrl_in_sent+0x96>
    1baa:	10 92 ee 21 	sts	0x21EE, r1	; 0x8021ee <b_shortpacket.5290>
    1bae:	c8 e0       	ldi	r28, 0x08	; 8
    1bb0:	d0 e0       	ldi	r29, 0x00	; 0
    1bb2:	03 c0       	rjmp	.+6      	; 0x1bba <udd_ctrl_in_sent+0x9c>
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	80 93 ee 21 	sts	0x21EE, r24	; 0x8021ee <b_shortpacket.5290>
    1bba:	e4 e4       	ldi	r30, 0x44	; 68
    1bbc:	f3 e2       	ldi	r31, 0x23	; 35
    1bbe:	c6 8f       	std	Z+30, r28	; 0x1e
    1bc0:	d7 8f       	std	Z+31, r29	; 0x1f
    1bc2:	80 91 3f 23 	lds	r24, 0x233F	; 0x80233f <udd_ctrl_payload_nb_trans>
    1bc6:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1bca:	20 91 c1 23 	lds	r18, 0x23C1	; 0x8023c1 <udd_g_ctrlreq+0x8>
    1bce:	30 91 c2 23 	lds	r19, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x9>
    1bd2:	28 0f       	add	r18, r24
    1bd4:	39 1f       	adc	r19, r25
    1bd6:	20 a3       	std	Z+32, r18	; 0x20
    1bd8:	31 a3       	std	Z+33, r19	; 0x21
    1bda:	c8 0f       	add	r28, r24
    1bdc:	d9 1f       	adc	r29, r25
    1bde:	c0 93 3f 23 	sts	0x233F, r28	; 0x80233f <udd_ctrl_payload_nb_trans>
    1be2:	d0 93 40 23 	sts	0x2340, r29	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1be6:	e0 e6       	ldi	r30, 0x60	; 96
    1be8:	f3 e2       	ldi	r31, 0x23	; 35
    1bea:	02 e0       	ldi	r16, 0x02	; 2
    1bec:	06 93       	lac	Z, r16
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	0f 91       	pop	r16
    1bf4:	08 95       	ret

00001bf6 <udd_ep_get_size>:
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	81 81       	ldd	r24, Z+1	; 0x01
    1bfa:	e8 2f       	mov	r30, r24
    1bfc:	e7 70       	andi	r30, 0x07	; 7
    1bfe:	8e 2f       	mov	r24, r30
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	fc 01       	movw	r30, r24
    1c04:	31 97       	sbiw	r30, 0x01	; 1
    1c06:	e7 30       	cpi	r30, 0x07	; 7
    1c08:	f1 05       	cpc	r31, r1
    1c0a:	d0 f4       	brcc	.+52     	; 0x1c40 <udd_ep_get_size+0x4a>
    1c0c:	88 27       	eor	r24, r24
    1c0e:	e9 5f       	subi	r30, 0xF9	; 249
    1c10:	fe 4f       	sbci	r31, 0xFE	; 254
    1c12:	8f 4f       	sbci	r24, 0xFF	; 255
    1c14:	24 c7       	rjmp	.+3656   	; 0x2a5e <__tablejump2__>
    1c16:	80 e1       	ldi	r24, 0x10	; 16
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	08 95       	ret
    1c1c:	80 e2       	ldi	r24, 0x20	; 32
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	08 95       	ret
    1c22:	80 e4       	ldi	r24, 0x40	; 64
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	08 95       	ret
    1c28:	80 e8       	ldi	r24, 0x80	; 128
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	08 95       	ret
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	91 e0       	ldi	r25, 0x01	; 1
    1c32:	08 95       	ret
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	92 e0       	ldi	r25, 0x02	; 2
    1c38:	08 95       	ret
    1c3a:	8f ef       	ldi	r24, 0xFF	; 255
    1c3c:	93 e0       	ldi	r25, 0x03	; 3
    1c3e:	08 95       	ret
    1c40:	88 e0       	ldi	r24, 0x08	; 8
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	08 95       	ret

00001c46 <udd_ep_get_job>:
    1c46:	28 2f       	mov	r18, r24
    1c48:	2f 70       	andi	r18, 0x0F	; 15
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	22 0f       	add	r18, r18
    1c4e:	33 1f       	adc	r19, r19
    1c50:	08 2e       	mov	r0, r24
    1c52:	00 0c       	add	r0, r0
    1c54:	99 0b       	sbc	r25, r25
    1c56:	88 27       	eor	r24, r24
    1c58:	99 0f       	add	r25, r25
    1c5a:	88 1f       	adc	r24, r24
    1c5c:	99 27       	eor	r25, r25
    1c5e:	82 0f       	add	r24, r18
    1c60:	93 1f       	adc	r25, r19
    1c62:	02 97       	sbiw	r24, 0x02	; 2
    1c64:	9c 01       	movw	r18, r24
    1c66:	22 0f       	add	r18, r18
    1c68:	33 1f       	adc	r19, r19
    1c6a:	22 0f       	add	r18, r18
    1c6c:	33 1f       	adc	r19, r19
    1c6e:	22 0f       	add	r18, r18
    1c70:	33 1f       	adc	r19, r19
    1c72:	82 0f       	add	r24, r18
    1c74:	93 1f       	adc	r25, r19
    1c76:	81 51       	subi	r24, 0x11	; 17
    1c78:	9d 4d       	sbci	r25, 0xDD	; 221
    1c7a:	08 95       	ret

00001c7c <udd_ctrl_interrupt_tc_setup>:
    1c7c:	0f 93       	push	r16
    1c7e:	cf 93       	push	r28
    1c80:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1c84:	80 ff       	sbrs	r24, 0
    1c86:	64 c0       	rjmp	.+200    	; 0x1d50 <udd_ctrl_interrupt_tc_setup+0xd4>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    1c8e:	e8 e5       	ldi	r30, 0x58	; 88
    1c90:	f3 e2       	ldi	r31, 0x23	; 35
    1c92:	00 e8       	ldi	r16, 0x80	; 128
    1c94:	06 93       	lac	Z, r16
    1c96:	e0 e6       	ldi	r30, 0x60	; 96
    1c98:	f3 e2       	ldi	r31, 0x23	; 35
    1c9a:	00 e8       	ldi	r16, 0x80	; 128
    1c9c:	06 93       	lac	Z, r16
    1c9e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    1ca2:	e8 e5       	ldi	r30, 0x58	; 88
    1ca4:	f3 e2       	ldi	r31, 0x23	; 35
    1ca6:	00 e1       	ldi	r16, 0x10	; 16
    1ca8:	06 93       	lac	Z, r16
    1caa:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_ep_control_state>
    1cae:	88 23       	and	r24, r24
    1cb0:	29 f0       	breq	.+10     	; 0x1cbc <udd_ctrl_interrupt_tc_setup+0x40>
    1cb2:	83 50       	subi	r24, 0x03	; 3
    1cb4:	82 30       	cpi	r24, 0x02	; 2
    1cb6:	08 f4       	brcc	.+2      	; 0x1cba <udd_ctrl_interrupt_tc_setup+0x3e>
    1cb8:	2a df       	rcall	.-428    	; 0x1b0e <udd_ctrl_endofrequest>
    1cba:	e8 de       	rcall	.-560    	; 0x1a8c <udd_ctrl_init>
    1cbc:	80 91 5a 23 	lds	r24, 0x235A	; 0x80235a <udd_sram+0x16>
    1cc0:	90 91 5b 23 	lds	r25, 0x235B	; 0x80235b <udd_sram+0x17>
    1cc4:	08 97       	sbiw	r24, 0x08	; 8
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <udd_ctrl_interrupt_tc_setup+0x4e>
    1cc8:	45 c0       	rjmp	.+138    	; 0x1d54 <udd_ctrl_interrupt_tc_setup+0xd8>
    1cca:	88 e0       	ldi	r24, 0x08	; 8
    1ccc:	e7 e3       	ldi	r30, 0x37	; 55
    1cce:	f3 e2       	ldi	r31, 0x23	; 35
    1cd0:	a9 eb       	ldi	r26, 0xB9	; 185
    1cd2:	b3 e2       	ldi	r27, 0x23	; 35
    1cd4:	01 90       	ld	r0, Z+
    1cd6:	0d 92       	st	X+, r0
    1cd8:	8a 95       	dec	r24
    1cda:	e1 f7       	brne	.-8      	; 0x1cd4 <udd_ctrl_interrupt_tc_setup+0x58>
    1cdc:	e8 ec       	ldi	r30, 0xC8	; 200
    1cde:	f4 e0       	ldi	r31, 0x04	; 4
    1ce0:	80 81       	ld	r24, Z
    1ce2:	80 62       	ori	r24, 0x20	; 32
    1ce4:	80 83       	st	Z, r24
    1ce6:	80 81       	ld	r24, Z
    1ce8:	80 62       	ori	r24, 0x20	; 32
    1cea:	80 83       	st	Z, r24
    1cec:	e9 db       	rcall	.-2094   	; 0x14c0 <udc_process_setup>
    1cee:	c8 2f       	mov	r28, r24
    1cf0:	81 11       	cpse	r24, r1
    1cf2:	03 c0       	rjmp	.+6      	; 0x1cfa <udd_ctrl_interrupt_tc_setup+0x7e>
    1cf4:	f0 de       	rcall	.-544    	; 0x1ad6 <udd_ctrl_stall_data>
    1cf6:	c1 e0       	ldi	r28, 0x01	; 1
    1cf8:	2e c0       	rjmp	.+92     	; 0x1d56 <udd_ctrl_interrupt_tc_setup+0xda>
    1cfa:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <udd_g_ctrlreq>
    1cfe:	88 23       	and	r24, r24
    1d00:	6c f4       	brge	.+26     	; 0x1d1c <udd_ctrl_interrupt_tc_setup+0xa0>
    1d02:	10 92 41 23 	sts	0x2341, r1	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    1d06:	10 92 42 23 	sts	0x2342, r1	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    1d0a:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udd_ctrl_payload_nb_trans>
    1d0e:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
    1d18:	02 df       	rcall	.-508    	; 0x1b1e <udd_ctrl_in_sent>
    1d1a:	1d c0       	rjmp	.+58     	; 0x1d56 <udd_ctrl_interrupt_tc_setup+0xda>
    1d1c:	80 91 bf 23 	lds	r24, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    1d20:	90 91 c0 23 	lds	r25, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    1d24:	89 2b       	or	r24, r25
    1d26:	11 f4       	brne	.+4      	; 0x1d2c <udd_ctrl_interrupt_tc_setup+0xb0>
    1d28:	e4 de       	rcall	.-568    	; 0x1af2 <udd_ctrl_send_zlp_in>
    1d2a:	15 c0       	rjmp	.+42     	; 0x1d56 <udd_ctrl_interrupt_tc_setup+0xda>
    1d2c:	10 92 41 23 	sts	0x2341, r1	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    1d30:	10 92 42 23 	sts	0x2342, r1	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    1d34:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udd_ctrl_payload_nb_trans>
    1d38:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
    1d42:	e8 e5       	ldi	r30, 0x58	; 88
    1d44:	f3 e2       	ldi	r31, 0x23	; 35
    1d46:	02 e0       	ldi	r16, 0x02	; 2
    1d48:	06 93       	lac	Z, r16
    1d4a:	00 e2       	ldi	r16, 0x20	; 32
    1d4c:	06 93       	lac	Z, r16
    1d4e:	03 c0       	rjmp	.+6      	; 0x1d56 <udd_ctrl_interrupt_tc_setup+0xda>
    1d50:	c0 e0       	ldi	r28, 0x00	; 0
    1d52:	01 c0       	rjmp	.+2      	; 0x1d56 <udd_ctrl_interrupt_tc_setup+0xda>
    1d54:	c1 e0       	ldi	r28, 0x01	; 1
    1d56:	8c 2f       	mov	r24, r28
    1d58:	cf 91       	pop	r28
    1d5a:	0f 91       	pop	r16
    1d5c:	08 95       	ret

00001d5e <udd_ep_trans_complet>:
    1d5e:	8f 92       	push	r8
    1d60:	9f 92       	push	r9
    1d62:	af 92       	push	r10
    1d64:	bf 92       	push	r11
    1d66:	df 92       	push	r13
    1d68:	ef 92       	push	r14
    1d6a:	ff 92       	push	r15
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	d8 2e       	mov	r13, r24
    1d76:	67 df       	rcall	.-306    	; 0x1c46 <udd_ep_get_job>
    1d78:	8c 01       	movw	r16, r24
    1d7a:	cd 2d       	mov	r28, r13
    1d7c:	cf 70       	andi	r28, 0x0F	; 15
    1d7e:	d0 e0       	ldi	r29, 0x00	; 0
    1d80:	ce 01       	movw	r24, r28
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	cd 2d       	mov	r28, r13
    1d88:	0d 2c       	mov	r0, r13
    1d8a:	00 0c       	add	r0, r0
    1d8c:	dd 0b       	sbc	r29, r29
    1d8e:	cc 27       	eor	r28, r28
    1d90:	dd 0f       	add	r29, r29
    1d92:	cc 1f       	adc	r28, r28
    1d94:	dd 27       	eor	r29, r29
    1d96:	c8 0f       	add	r28, r24
    1d98:	d9 1f       	adc	r29, r25
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	88 0f       	add	r24, r24
    1da6:	99 1f       	adc	r25, r25
    1da8:	9c 01       	movw	r18, r24
    1daa:	28 5a       	subi	r18, 0xA8	; 168
    1dac:	3c 4d       	sbci	r19, 0xDC	; 220
    1dae:	79 01       	movw	r14, r18
    1db0:	c9 01       	movw	r24, r18
    1db2:	21 df       	rcall	.-446    	; 0x1bf6 <udd_ep_get_size>
    1db4:	4c 01       	movw	r8, r24
    1db6:	dd 20       	and	r13, r13
    1db8:	0c f0       	brlt	.+2      	; 0x1dbc <udd_ep_trans_complet+0x5e>
    1dba:	79 c0       	rjmp	.+242    	; 0x1eae <udd_ep_trans_complet+0x150>
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	ee 0f       	add	r30, r30
    1dc0:	ff 1f       	adc	r31, r31
    1dc2:	ee 0f       	add	r30, r30
    1dc4:	ff 1f       	adc	r31, r31
    1dc6:	ee 0f       	add	r30, r30
    1dc8:	ff 1f       	adc	r31, r31
    1dca:	ec 5b       	subi	r30, 0xBC	; 188
    1dcc:	fc 4d       	sbci	r31, 0xDC	; 220
    1dce:	22 8d       	ldd	r18, Z+26	; 0x1a
    1dd0:	33 8d       	ldd	r19, Z+27	; 0x1b
    1dd2:	d8 01       	movw	r26, r16
    1dd4:	15 96       	adiw	r26, 0x05	; 5
    1dd6:	8d 91       	ld	r24, X+
    1dd8:	9c 91       	ld	r25, X
    1dda:	16 97       	sbiw	r26, 0x06	; 6
    1ddc:	82 0f       	add	r24, r18
    1dde:	93 1f       	adc	r25, r19
    1de0:	15 96       	adiw	r26, 0x05	; 5
    1de2:	8d 93       	st	X+, r24
    1de4:	9c 93       	st	X, r25
    1de6:	16 97       	sbiw	r26, 0x06	; 6
    1de8:	13 96       	adiw	r26, 0x03	; 3
    1dea:	2d 91       	ld	r18, X+
    1dec:	3c 91       	ld	r19, X
    1dee:	14 97       	sbiw	r26, 0x04	; 4
    1df0:	82 17       	cp	r24, r18
    1df2:	93 07       	cpc	r25, r19
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <udd_ep_trans_complet+0x9a>
    1df6:	45 c0       	rjmp	.+138    	; 0x1e82 <udd_ep_trans_complet+0x124>
    1df8:	28 1b       	sub	r18, r24
    1dfa:	39 0b       	sbc	r19, r25
    1dfc:	21 15       	cp	r18, r1
    1dfe:	b4 e0       	ldi	r27, 0x04	; 4
    1e00:	3b 07       	cpc	r19, r27
    1e02:	38 f0       	brcs	.+14     	; 0x1e12 <udd_ep_trans_complet+0xb4>
    1e04:	2f ef       	ldi	r18, 0xFF	; 255
    1e06:	33 e0       	ldi	r19, 0x03	; 3
    1e08:	c9 01       	movw	r24, r18
    1e0a:	b4 01       	movw	r22, r8
    1e0c:	14 d6       	rcall	.+3112   	; 0x2a36 <__udivmodhi4>
    1e0e:	28 1b       	sub	r18, r24
    1e10:	39 0b       	sbc	r19, r25
    1e12:	f8 01       	movw	r30, r16
    1e14:	80 81       	ld	r24, Z
    1e16:	81 ff       	sbrs	r24, 1
    1e18:	09 c0       	rjmp	.+18     	; 0x1e2c <udd_ep_trans_complet+0xce>
    1e1a:	c9 01       	movw	r24, r18
    1e1c:	b4 01       	movw	r22, r8
    1e1e:	0b d6       	rcall	.+3094   	; 0x2a36 <__udivmodhi4>
    1e20:	41 e0       	ldi	r20, 0x01	; 1
    1e22:	89 2b       	or	r24, r25
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <udd_ep_trans_complet+0xca>
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	84 2f       	mov	r24, r20
    1e2a:	01 c0       	rjmp	.+2      	; 0x1e2e <udd_ep_trans_complet+0xd0>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	d8 01       	movw	r26, r16
    1e30:	9c 91       	ld	r25, X
    1e32:	80 fb       	bst	r24, 0
    1e34:	91 f9       	bld	r25, 1
    1e36:	9c 93       	st	X, r25
    1e38:	fe 01       	movw	r30, r28
    1e3a:	ee 0f       	add	r30, r30
    1e3c:	ff 1f       	adc	r31, r31
    1e3e:	ee 0f       	add	r30, r30
    1e40:	ff 1f       	adc	r31, r31
    1e42:	ee 0f       	add	r30, r30
    1e44:	ff 1f       	adc	r31, r31
    1e46:	ec 5b       	subi	r30, 0xBC	; 188
    1e48:	fc 4d       	sbci	r31, 0xDC	; 220
    1e4a:	12 8e       	std	Z+26, r1	; 0x1a
    1e4c:	13 8e       	std	Z+27, r1	; 0x1b
    1e4e:	26 8b       	std	Z+22, r18	; 0x16
    1e50:	37 8b       	std	Z+23, r19	; 0x17
    1e52:	11 96       	adiw	r26, 0x01	; 1
    1e54:	2d 91       	ld	r18, X+
    1e56:	3c 91       	ld	r19, X
    1e58:	12 97       	sbiw	r26, 0x02	; 2
    1e5a:	15 96       	adiw	r26, 0x05	; 5
    1e5c:	8d 91       	ld	r24, X+
    1e5e:	9c 91       	ld	r25, X
    1e60:	16 97       	sbiw	r26, 0x06	; 6
    1e62:	82 0f       	add	r24, r18
    1e64:	93 1f       	adc	r25, r19
    1e66:	cc 0f       	add	r28, r28
    1e68:	dd 1f       	adc	r29, r29
    1e6a:	cc 0f       	add	r28, r28
    1e6c:	dd 1f       	adc	r29, r29
    1e6e:	cc 0f       	add	r28, r28
    1e70:	dd 1f       	adc	r29, r29
    1e72:	c4 5a       	subi	r28, 0xA4	; 164
    1e74:	dc 4d       	sbci	r29, 0xDC	; 220
    1e76:	88 83       	st	Y, r24
    1e78:	99 83       	std	Y+1, r25	; 0x01
    1e7a:	f7 01       	movw	r30, r14
    1e7c:	02 e0       	ldi	r16, 0x02	; 2
    1e7e:	06 93       	lac	Z, r16
    1e80:	e0 c0       	rjmp	.+448    	; 0x2042 <udd_ep_trans_complet+0x2e4>
    1e82:	d8 01       	movw	r26, r16
    1e84:	8c 91       	ld	r24, X
    1e86:	81 ff       	sbrs	r24, 1
    1e88:	c9 c0       	rjmp	.+402    	; 0x201c <udd_ep_trans_complet+0x2be>
    1e8a:	8d 7f       	andi	r24, 0xFD	; 253
    1e8c:	8c 93       	st	X, r24
    1e8e:	cc 0f       	add	r28, r28
    1e90:	dd 1f       	adc	r29, r29
    1e92:	cc 0f       	add	r28, r28
    1e94:	dd 1f       	adc	r29, r29
    1e96:	cc 0f       	add	r28, r28
    1e98:	dd 1f       	adc	r29, r29
    1e9a:	cc 5b       	subi	r28, 0xBC	; 188
    1e9c:	dc 4d       	sbci	r29, 0xDC	; 220
    1e9e:	1a 8e       	std	Y+26, r1	; 0x1a
    1ea0:	1b 8e       	std	Y+27, r1	; 0x1b
    1ea2:	1e 8a       	std	Y+22, r1	; 0x16
    1ea4:	1f 8a       	std	Y+23, r1	; 0x17
    1ea6:	f7 01       	movw	r30, r14
    1ea8:	02 e0       	ldi	r16, 0x02	; 2
    1eaa:	06 93       	lac	Z, r16
    1eac:	ca c0       	rjmp	.+404    	; 0x2042 <udd_ep_trans_complet+0x2e4>
    1eae:	fe 01       	movw	r30, r28
    1eb0:	ee 0f       	add	r30, r30
    1eb2:	ff 1f       	adc	r31, r31
    1eb4:	ee 0f       	add	r30, r30
    1eb6:	ff 1f       	adc	r31, r31
    1eb8:	ee 0f       	add	r30, r30
    1eba:	ff 1f       	adc	r31, r31
    1ebc:	ec 5b       	subi	r30, 0xBC	; 188
    1ebe:	fc 4d       	sbci	r31, 0xDC	; 220
    1ec0:	a6 88       	ldd	r10, Z+22	; 0x16
    1ec2:	b7 88       	ldd	r11, Z+23	; 0x17
    1ec4:	d8 01       	movw	r26, r16
    1ec6:	8c 91       	ld	r24, X
    1ec8:	82 ff       	sbrs	r24, 2
    1eca:	19 c0       	rjmp	.+50     	; 0x1efe <udd_ep_trans_complet+0x1a0>
    1ecc:	11 96       	adiw	r26, 0x01	; 1
    1ece:	ed 91       	ld	r30, X+
    1ed0:	fc 91       	ld	r31, X
    1ed2:	12 97       	sbiw	r26, 0x02	; 2
    1ed4:	15 96       	adiw	r26, 0x05	; 5
    1ed6:	2d 91       	ld	r18, X+
    1ed8:	3c 91       	ld	r19, X
    1eda:	16 97       	sbiw	r26, 0x06	; 6
    1edc:	13 96       	adiw	r26, 0x03	; 3
    1ede:	8d 91       	ld	r24, X+
    1ee0:	9c 91       	ld	r25, X
    1ee2:	14 97       	sbiw	r26, 0x04	; 4
    1ee4:	b4 01       	movw	r22, r8
    1ee6:	a7 d5       	rcall	.+2894   	; 0x2a36 <__udivmodhi4>
    1ee8:	b0 e4       	ldi	r27, 0x40	; 64
    1eea:	db 9e       	mul	r13, r27
    1eec:	b0 01       	movw	r22, r0
    1eee:	11 24       	eor	r1, r1
    1ef0:	61 55       	subi	r22, 0x51	; 81
    1ef2:	7e 4d       	sbci	r23, 0xDE	; 222
    1ef4:	ac 01       	movw	r20, r24
    1ef6:	cf 01       	movw	r24, r30
    1ef8:	82 0f       	add	r24, r18
    1efa:	93 1f       	adc	r25, r19
    1efc:	b8 d5       	rcall	.+2928   	; 0x2a6e <memcpy>
    1efe:	f8 01       	movw	r30, r16
    1f00:	25 81       	ldd	r18, Z+5	; 0x05
    1f02:	36 81       	ldd	r19, Z+6	; 0x06
    1f04:	2a 0d       	add	r18, r10
    1f06:	3b 1d       	adc	r19, r11
    1f08:	25 83       	std	Z+5, r18	; 0x05
    1f0a:	36 83       	std	Z+6, r19	; 0x06
    1f0c:	83 81       	ldd	r24, Z+3	; 0x03
    1f0e:	94 81       	ldd	r25, Z+4	; 0x04
    1f10:	82 17       	cp	r24, r18
    1f12:	93 07       	cpc	r25, r19
    1f14:	68 f4       	brcc	.+26     	; 0x1f30 <udd_ep_trans_complet+0x1d2>
    1f16:	85 83       	std	Z+5, r24	; 0x05
    1f18:	96 83       	std	Z+6, r25	; 0x06
    1f1a:	cc 0f       	add	r28, r28
    1f1c:	dd 1f       	adc	r29, r29
    1f1e:	cc 0f       	add	r28, r28
    1f20:	dd 1f       	adc	r29, r29
    1f22:	cc 0f       	add	r28, r28
    1f24:	dd 1f       	adc	r29, r29
    1f26:	cc 5b       	subi	r28, 0xBC	; 188
    1f28:	dc 4d       	sbci	r29, 0xDC	; 220
    1f2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f2c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f2e:	76 c0       	rjmp	.+236    	; 0x201c <udd_ep_trans_complet+0x2be>
    1f30:	fe 01       	movw	r30, r28
    1f32:	ee 0f       	add	r30, r30
    1f34:	ff 1f       	adc	r31, r31
    1f36:	ee 0f       	add	r30, r30
    1f38:	ff 1f       	adc	r31, r31
    1f3a:	ee 0f       	add	r30, r30
    1f3c:	ff 1f       	adc	r31, r31
    1f3e:	ec 5b       	subi	r30, 0xBC	; 188
    1f40:	fc 4d       	sbci	r31, 0xDC	; 220
    1f42:	42 8d       	ldd	r20, Z+26	; 0x1a
    1f44:	53 8d       	ldd	r21, Z+27	; 0x1b
    1f46:	a4 16       	cp	r10, r20
    1f48:	b5 06       	cpc	r11, r21
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <udd_ep_trans_complet+0x1f0>
    1f4c:	67 c0       	rjmp	.+206    	; 0x201c <udd_ep_trans_complet+0x2be>
    1f4e:	28 17       	cp	r18, r24
    1f50:	39 07       	cpc	r19, r25
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <udd_ep_trans_complet+0x1f8>
    1f54:	63 c0       	rjmp	.+198    	; 0x201c <udd_ep_trans_complet+0x2be>
    1f56:	ac 01       	movw	r20, r24
    1f58:	42 1b       	sub	r20, r18
    1f5a:	53 0b       	sbc	r21, r19
    1f5c:	9a 01       	movw	r18, r20
    1f5e:	21 15       	cp	r18, r1
    1f60:	54 e0       	ldi	r21, 0x04	; 4
    1f62:	35 07       	cpc	r19, r21
    1f64:	40 f0       	brcs	.+16     	; 0x1f76 <udd_ep_trans_complet+0x218>
    1f66:	2f ef       	ldi	r18, 0xFF	; 255
    1f68:	33 e0       	ldi	r19, 0x03	; 3
    1f6a:	c9 01       	movw	r24, r18
    1f6c:	b4 01       	movw	r22, r8
    1f6e:	63 d5       	rcall	.+2758   	; 0x2a36 <__udivmodhi4>
    1f70:	28 1b       	sub	r18, r24
    1f72:	39 0b       	sbc	r19, r25
    1f74:	05 c0       	rjmp	.+10     	; 0x1f80 <udd_ep_trans_complet+0x222>
    1f76:	c9 01       	movw	r24, r18
    1f78:	b4 01       	movw	r22, r8
    1f7a:	5d d5       	rcall	.+2746   	; 0x2a36 <__udivmodhi4>
    1f7c:	28 1b       	sub	r18, r24
    1f7e:	39 0b       	sbc	r19, r25
    1f80:	fe 01       	movw	r30, r28
    1f82:	ee 0f       	add	r30, r30
    1f84:	ff 1f       	adc	r31, r31
    1f86:	ee 0f       	add	r30, r30
    1f88:	ff 1f       	adc	r31, r31
    1f8a:	ee 0f       	add	r30, r30
    1f8c:	ff 1f       	adc	r31, r31
    1f8e:	ec 5b       	subi	r30, 0xBC	; 188
    1f90:	fc 4d       	sbci	r31, 0xDC	; 220
    1f92:	16 8a       	std	Z+22, r1	; 0x16
    1f94:	17 8a       	std	Z+23, r1	; 0x17
    1f96:	28 15       	cp	r18, r8
    1f98:	39 05       	cpc	r19, r9
    1f9a:	00 f5       	brcc	.+64     	; 0x1fdc <udd_ep_trans_complet+0x27e>
    1f9c:	d8 01       	movw	r26, r16
    1f9e:	8c 91       	ld	r24, X
    1fa0:	84 60       	ori	r24, 0x04	; 4
    1fa2:	8c 93       	st	X, r24
    1fa4:	b0 e4       	ldi	r27, 0x40	; 64
    1fa6:	db 9e       	mul	r13, r27
    1fa8:	c0 01       	movw	r24, r0
    1faa:	11 24       	eor	r1, r1
    1fac:	81 55       	subi	r24, 0x51	; 81
    1fae:	9e 4d       	sbci	r25, 0xDE	; 222
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	ee 0f       	add	r30, r30
    1fb4:	ff 1f       	adc	r31, r31
    1fb6:	ee 0f       	add	r30, r30
    1fb8:	ff 1f       	adc	r31, r31
    1fba:	ee 0f       	add	r30, r30
    1fbc:	ff 1f       	adc	r31, r31
    1fbe:	e4 5a       	subi	r30, 0xA4	; 164
    1fc0:	fc 4d       	sbci	r31, 0xDC	; 220
    1fc2:	80 83       	st	Z, r24
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	cc 0f       	add	r28, r28
    1fc8:	dd 1f       	adc	r29, r29
    1fca:	cc 0f       	add	r28, r28
    1fcc:	dd 1f       	adc	r29, r29
    1fce:	cc 0f       	add	r28, r28
    1fd0:	dd 1f       	adc	r29, r29
    1fd2:	cc 5b       	subi	r28, 0xBC	; 188
    1fd4:	dc 4d       	sbci	r29, 0xDC	; 220
    1fd6:	8a 8e       	std	Y+26, r8	; 0x1a
    1fd8:	9b 8e       	std	Y+27, r9	; 0x1b
    1fda:	1c c0       	rjmp	.+56     	; 0x2014 <udd_ep_trans_complet+0x2b6>
    1fdc:	f8 01       	movw	r30, r16
    1fde:	41 81       	ldd	r20, Z+1	; 0x01
    1fe0:	52 81       	ldd	r21, Z+2	; 0x02
    1fe2:	85 81       	ldd	r24, Z+5	; 0x05
    1fe4:	96 81       	ldd	r25, Z+6	; 0x06
    1fe6:	84 0f       	add	r24, r20
    1fe8:	95 1f       	adc	r25, r21
    1fea:	fe 01       	movw	r30, r28
    1fec:	ee 0f       	add	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	ee 0f       	add	r30, r30
    1ff2:	ff 1f       	adc	r31, r31
    1ff4:	ee 0f       	add	r30, r30
    1ff6:	ff 1f       	adc	r31, r31
    1ff8:	e4 5a       	subi	r30, 0xA4	; 164
    1ffa:	fc 4d       	sbci	r31, 0xDC	; 220
    1ffc:	80 83       	st	Z, r24
    1ffe:	91 83       	std	Z+1, r25	; 0x01
    2000:	cc 0f       	add	r28, r28
    2002:	dd 1f       	adc	r29, r29
    2004:	cc 0f       	add	r28, r28
    2006:	dd 1f       	adc	r29, r29
    2008:	cc 0f       	add	r28, r28
    200a:	dd 1f       	adc	r29, r29
    200c:	cc 5b       	subi	r28, 0xBC	; 188
    200e:	dc 4d       	sbci	r29, 0xDC	; 220
    2010:	2a 8f       	std	Y+26, r18	; 0x1a
    2012:	3b 8f       	std	Y+27, r19	; 0x1b
    2014:	f7 01       	movw	r30, r14
    2016:	02 e0       	ldi	r16, 0x02	; 2
    2018:	06 93       	lac	Z, r16
    201a:	13 c0       	rjmp	.+38     	; 0x2042 <udd_ep_trans_complet+0x2e4>
    201c:	d8 01       	movw	r26, r16
    201e:	8c 91       	ld	r24, X
    2020:	80 ff       	sbrs	r24, 0
    2022:	0f c0       	rjmp	.+30     	; 0x2042 <udd_ep_trans_complet+0x2e4>
    2024:	8e 7f       	andi	r24, 0xFE	; 254
    2026:	8c 93       	st	X, r24
    2028:	17 96       	adiw	r26, 0x07	; 7
    202a:	ed 91       	ld	r30, X+
    202c:	fc 91       	ld	r31, X
    202e:	18 97       	sbiw	r26, 0x08	; 8
    2030:	30 97       	sbiw	r30, 0x00	; 0
    2032:	39 f0       	breq	.+14     	; 0x2042 <udd_ep_trans_complet+0x2e4>
    2034:	15 96       	adiw	r26, 0x05	; 5
    2036:	6d 91       	ld	r22, X+
    2038:	7c 91       	ld	r23, X
    203a:	16 97       	sbiw	r26, 0x06	; 6
    203c:	4d 2d       	mov	r20, r13
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	19 95       	eicall
    2042:	df 91       	pop	r29
    2044:	cf 91       	pop	r28
    2046:	1f 91       	pop	r17
    2048:	0f 91       	pop	r16
    204a:	ff 90       	pop	r15
    204c:	ef 90       	pop	r14
    204e:	df 90       	pop	r13
    2050:	bf 90       	pop	r11
    2052:	af 90       	pop	r10
    2054:	9f 90       	pop	r9
    2056:	8f 90       	pop	r8
    2058:	08 95       	ret

0000205a <udd_attach>:
    205a:	1f 93       	push	r17
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	1f 92       	push	r1
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	8f b7       	in	r24, 0x3f	; 63
    2068:	89 83       	std	Y+1, r24	; 0x01
    206a:	f8 94       	cli
    206c:	19 81       	ldd	r17, Y+1	; 0x01
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	d5 dc       	rcall	.-1622   	; 0x1a1c <udd_sleep_mode>
    2072:	ea ec       	ldi	r30, 0xCA	; 202
    2074:	f4 e0       	ldi	r31, 0x04	; 4
    2076:	80 e4       	ldi	r24, 0x40	; 64
    2078:	80 83       	st	Z, r24
    207a:	80 e2       	ldi	r24, 0x20	; 32
    207c:	80 83       	st	Z, r24
    207e:	e1 ec       	ldi	r30, 0xC1	; 193
    2080:	f4 e0       	ldi	r31, 0x04	; 4
    2082:	80 81       	ld	r24, Z
    2084:	81 60       	ori	r24, 0x01	; 1
    2086:	80 83       	st	Z, r24
    2088:	a9 ec       	ldi	r26, 0xC9	; 201
    208a:	b4 e0       	ldi	r27, 0x04	; 4
    208c:	8c 91       	ld	r24, X
    208e:	82 60       	ori	r24, 0x02	; 2
    2090:	8c 93       	st	X, r24
    2092:	e8 ec       	ldi	r30, 0xC8	; 200
    2094:	f4 e0       	ldi	r31, 0x04	; 4
    2096:	80 81       	ld	r24, Z
    2098:	80 64       	ori	r24, 0x40	; 64
    209a:	80 83       	st	Z, r24
    209c:	8c 91       	ld	r24, X
    209e:	81 60       	ori	r24, 0x01	; 1
    20a0:	8c 93       	st	X, r24
    20a2:	80 81       	ld	r24, Z
    20a4:	80 68       	ori	r24, 0x80	; 128
    20a6:	80 83       	st	Z, r24
    20a8:	1f bf       	out	0x3f, r17	; 63
    20aa:	0f 90       	pop	r0
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	1f 91       	pop	r17
    20b2:	08 95       	ret

000020b4 <udd_enable>:
    20b4:	0f 93       	push	r16
    20b6:	1f 93       	push	r17
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	1f 92       	push	r1
    20be:	1f 92       	push	r1
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	00 e6       	ldi	r16, 0x60	; 96
    20c6:	10 e0       	ldi	r17, 0x00	; 0
    20c8:	f8 01       	movw	r30, r16
    20ca:	10 82       	st	Z, r1
    20cc:	80 e3       	ldi	r24, 0x30	; 48
    20ce:	0e 94 ff 06 	call	0xdfe	; 0xdfe <sysclk_enable_usb>
    20d2:	e0 ec       	ldi	r30, 0xC0	; 192
    20d4:	f4 e0       	ldi	r31, 0x04	; 4
    20d6:	80 81       	ld	r24, Z
    20d8:	80 64       	ori	r24, 0x40	; 64
    20da:	80 83       	st	Z, r24
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	f8 01       	movw	r30, r16
    20e0:	80 83       	st	Z, r24
    20e2:	8f b7       	in	r24, 0x3f	; 63
    20e4:	8a 83       	std	Y+2, r24	; 0x02
    20e6:	f8 94       	cli
    20e8:	1a 81       	ldd	r17, Y+2	; 0x02
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	fc 01       	movw	r30, r24
    20f0:	ee 0f       	add	r30, r30
    20f2:	ff 1f       	adc	r31, r31
    20f4:	ee 0f       	add	r30, r30
    20f6:	ff 1f       	adc	r31, r31
    20f8:	ee 0f       	add	r30, r30
    20fa:	ff 1f       	adc	r31, r31
    20fc:	ec 5b       	subi	r30, 0xBC	; 188
    20fe:	fc 4d       	sbci	r31, 0xDC	; 220
    2100:	15 8a       	std	Z+21, r1	; 0x15
    2102:	01 96       	adiw	r24, 0x01	; 1
    2104:	8a 30       	cpi	r24, 0x0A	; 10
    2106:	91 05       	cpc	r25, r1
    2108:	91 f7       	brne	.-28     	; 0x20ee <udd_enable+0x3a>
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	fc 01       	movw	r30, r24
    2110:	ee 0f       	add	r30, r30
    2112:	ff 1f       	adc	r31, r31
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	ee 0f       	add	r30, r30
    211a:	ff 1f       	adc	r31, r31
    211c:	e8 0f       	add	r30, r24
    211e:	f9 1f       	adc	r31, r25
    2120:	e1 51       	subi	r30, 0x11	; 17
    2122:	fd 4d       	sbci	r31, 0xDD	; 221
    2124:	20 81       	ld	r18, Z
    2126:	2e 7f       	andi	r18, 0xFE	; 254
    2128:	20 83       	st	Z, r18
    212a:	01 96       	adiw	r24, 0x01	; 1
    212c:	88 30       	cpi	r24, 0x08	; 8
    212e:	91 05       	cpc	r25, r1
    2130:	71 f7       	brne	.-36     	; 0x210e <udd_enable+0x5a>
    2132:	6a e1       	ldi	r22, 0x1A	; 26
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	61 dc       	rcall	.-1854   	; 0x19fc <nvm_read_byte>
    213a:	8f 3f       	cpi	r24, 0xFF	; 255
    213c:	19 f0       	breq	.+6      	; 0x2144 <udd_enable+0x90>
    213e:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    2142:	03 c0       	rjmp	.+6      	; 0x214a <udd_enable+0x96>
    2144:	8f e1       	ldi	r24, 0x1F	; 31
    2146:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7be4fa>
    214a:	6b e1       	ldi	r22, 0x1B	; 27
    214c:	70 e0       	ldi	r23, 0x00	; 0
    214e:	82 e0       	ldi	r24, 0x02	; 2
    2150:	55 dc       	rcall	.-1878   	; 0x19fc <nvm_read_byte>
    2152:	8f 3f       	cpi	r24, 0xFF	; 255
    2154:	19 f0       	breq	.+6      	; 0x215c <udd_enable+0xa8>
    2156:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    215a:	03 c0       	rjmp	.+6      	; 0x2162 <udd_enable+0xae>
    215c:	8f e1       	ldi	r24, 0x1F	; 31
    215e:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7be4fb>
    2162:	e0 ec       	ldi	r30, 0xC0	; 192
    2164:	f4 e0       	ldi	r31, 0x04	; 4
    2166:	80 81       	ld	r24, Z
    2168:	84 60       	ori	r24, 0x04	; 4
    216a:	80 83       	st	Z, r24
    216c:	80 81       	ld	r24, Z
    216e:	80 68       	ori	r24, 0x80	; 128
    2170:	80 83       	st	Z, r24
    2172:	80 81       	ld	r24, Z
    2174:	80 61       	ori	r24, 0x10	; 16
    2176:	80 83       	st	Z, r24
    2178:	88 e5       	ldi	r24, 0x58	; 88
    217a:	93 e2       	ldi	r25, 0x23	; 35
    217c:	86 83       	std	Z+6, r24	; 0x06
    217e:	97 83       	std	Z+7, r25	; 0x07
    2180:	80 81       	ld	r24, Z
    2182:	80 62       	ori	r24, 0x20	; 32
    2184:	80 83       	st	Z, r24
    2186:	8f ef       	ldi	r24, 0xFF	; 255
    2188:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
    218c:	e8 ec       	ldi	r30, 0xC8	; 200
    218e:	f4 e0       	ldi	r31, 0x04	; 4
    2190:	80 81       	ld	r24, Z
    2192:	81 60       	ori	r24, 0x01	; 1
    2194:	80 83       	st	Z, r24
    2196:	10 92 ac 23 	sts	0x23AC, r1	; 0x8023ac <udd_b_idle>
    219a:	80 91 b8 23 	lds	r24, 0x23B8	; 0x8023b8 <sleepmgr_locks+0x5>
    219e:	8f 3f       	cpi	r24, 0xFF	; 255
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <udd_enable+0xf0>
    21a2:	ff cf       	rjmp	.-2      	; 0x21a2 <udd_enable+0xee>
    21a4:	8f b7       	in	r24, 0x3f	; 63
    21a6:	89 83       	std	Y+1, r24	; 0x01
    21a8:	f8 94       	cli
    21aa:	99 81       	ldd	r25, Y+1	; 0x01
    21ac:	e3 eb       	ldi	r30, 0xB3	; 179
    21ae:	f3 e2       	ldi	r31, 0x23	; 35
    21b0:	85 81       	ldd	r24, Z+5	; 0x05
    21b2:	8f 5f       	subi	r24, 0xFF	; 255
    21b4:	85 83       	std	Z+5, r24	; 0x05
    21b6:	9f bf       	out	0x3f, r25	; 63
    21b8:	50 df       	rcall	.-352    	; 0x205a <udd_attach>
    21ba:	1f bf       	out	0x3f, r17	; 63
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	1f 91       	pop	r17
    21c6:	0f 91       	pop	r16
    21c8:	08 95       	ret

000021ca <udd_set_address>:
    21ca:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    21ce:	08 95       	ret

000021d0 <udd_getaddress>:
    21d0:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
    21d4:	08 95       	ret

000021d6 <udd_get_frame_number>:
    21d6:	80 91 a8 23 	lds	r24, 0x23A8	; 0x8023a8 <udd_sram+0x64>
    21da:	90 91 a9 23 	lds	r25, 0x23A9	; 0x8023a9 <udd_sram+0x65>
    21de:	08 95       	ret

000021e0 <udd_set_setup_payload>:
    21e0:	e9 eb       	ldi	r30, 0xB9	; 185
    21e2:	f3 e2       	ldi	r31, 0x23	; 35
    21e4:	80 87       	std	Z+8, r24	; 0x08
    21e6:	91 87       	std	Z+9, r25	; 0x09
    21e8:	62 87       	std	Z+10, r22	; 0x0a
    21ea:	73 87       	std	Z+11, r23	; 0x0b
    21ec:	08 95       	ret

000021ee <udd_ep_alloc>:
    21ee:	28 2f       	mov	r18, r24
    21f0:	2f 70       	andi	r18, 0x0F	; 15
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	22 0f       	add	r18, r18
    21f6:	33 1f       	adc	r19, r19
    21f8:	08 2e       	mov	r0, r24
    21fa:	00 0c       	add	r0, r0
    21fc:	99 0b       	sbc	r25, r25
    21fe:	88 27       	eor	r24, r24
    2200:	99 0f       	add	r25, r25
    2202:	88 1f       	adc	r24, r24
    2204:	99 27       	eor	r25, r25
    2206:	82 0f       	add	r24, r18
    2208:	93 1f       	adc	r25, r19
    220a:	fc 01       	movw	r30, r24
    220c:	ee 0f       	add	r30, r30
    220e:	ff 1f       	adc	r31, r31
    2210:	ee 0f       	add	r30, r30
    2212:	ff 1f       	adc	r31, r31
    2214:	ee 0f       	add	r30, r30
    2216:	ff 1f       	adc	r31, r31
    2218:	ec 5b       	subi	r30, 0xBC	; 188
    221a:	fc 4d       	sbci	r31, 0xDC	; 220
    221c:	25 89       	ldd	r18, Z+21	; 0x15
    221e:	20 7c       	andi	r18, 0xC0	; 192
    2220:	09 f0       	breq	.+2      	; 0x2224 <udd_ep_alloc+0x36>
    2222:	69 c0       	rjmp	.+210    	; 0x22f6 <udd_ep_alloc+0x108>
    2224:	63 70       	andi	r22, 0x03	; 3
    2226:	61 30       	cpi	r22, 0x01	; 1
    2228:	11 f0       	breq	.+4      	; 0x222e <udd_ep_alloc+0x40>
    222a:	18 f4       	brcc	.+6      	; 0x2232 <udd_ep_alloc+0x44>
    222c:	04 c0       	rjmp	.+8      	; 0x2236 <udd_ep_alloc+0x48>
    222e:	60 ec       	ldi	r22, 0xC0	; 192
    2230:	03 c0       	rjmp	.+6      	; 0x2238 <udd_ep_alloc+0x4a>
    2232:	60 e8       	ldi	r22, 0x80	; 128
    2234:	01 c0       	rjmp	.+2      	; 0x2238 <udd_ep_alloc+0x4a>
    2236:	60 e4       	ldi	r22, 0x40	; 64
    2238:	40 38       	cpi	r20, 0x80	; 128
    223a:	51 05       	cpc	r21, r1
    223c:	e9 f0       	breq	.+58     	; 0x2278 <udd_ep_alloc+0x8a>
    223e:	50 f4       	brcc	.+20     	; 0x2254 <udd_ep_alloc+0x66>
    2240:	40 32       	cpi	r20, 0x20	; 32
    2242:	51 05       	cpc	r21, r1
    2244:	a9 f0       	breq	.+42     	; 0x2270 <udd_ep_alloc+0x82>
    2246:	40 34       	cpi	r20, 0x40	; 64
    2248:	51 05       	cpc	r21, r1
    224a:	a1 f0       	breq	.+40     	; 0x2274 <udd_ep_alloc+0x86>
    224c:	40 31       	cpi	r20, 0x10	; 16
    224e:	51 05       	cpc	r21, r1
    2250:	d9 f4       	brne	.+54     	; 0x2288 <udd_ep_alloc+0x9a>
    2252:	0c c0       	rjmp	.+24     	; 0x226c <udd_ep_alloc+0x7e>
    2254:	41 15       	cp	r20, r1
    2256:	22 e0       	ldi	r18, 0x02	; 2
    2258:	52 07       	cpc	r21, r18
    225a:	91 f0       	breq	.+36     	; 0x2280 <udd_ep_alloc+0x92>
    225c:	4f 3f       	cpi	r20, 0xFF	; 255
    225e:	23 e0       	ldi	r18, 0x03	; 3
    2260:	52 07       	cpc	r21, r18
    2262:	81 f0       	breq	.+32     	; 0x2284 <udd_ep_alloc+0x96>
    2264:	41 15       	cp	r20, r1
    2266:	51 40       	sbci	r21, 0x01	; 1
    2268:	79 f4       	brne	.+30     	; 0x2288 <udd_ep_alloc+0x9a>
    226a:	08 c0       	rjmp	.+16     	; 0x227c <udd_ep_alloc+0x8e>
    226c:	21 e0       	ldi	r18, 0x01	; 1
    226e:	0d c0       	rjmp	.+26     	; 0x228a <udd_ep_alloc+0x9c>
    2270:	22 e0       	ldi	r18, 0x02	; 2
    2272:	0b c0       	rjmp	.+22     	; 0x228a <udd_ep_alloc+0x9c>
    2274:	23 e0       	ldi	r18, 0x03	; 3
    2276:	09 c0       	rjmp	.+18     	; 0x228a <udd_ep_alloc+0x9c>
    2278:	24 e0       	ldi	r18, 0x04	; 4
    227a:	07 c0       	rjmp	.+14     	; 0x228a <udd_ep_alloc+0x9c>
    227c:	25 e0       	ldi	r18, 0x05	; 5
    227e:	05 c0       	rjmp	.+10     	; 0x228a <udd_ep_alloc+0x9c>
    2280:	26 e0       	ldi	r18, 0x06	; 6
    2282:	03 c0       	rjmp	.+6      	; 0x228a <udd_ep_alloc+0x9c>
    2284:	27 e0       	ldi	r18, 0x07	; 7
    2286:	01 c0       	rjmp	.+2      	; 0x228a <udd_ep_alloc+0x9c>
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	fc 01       	movw	r30, r24
    228c:	ee 0f       	add	r30, r30
    228e:	ff 1f       	adc	r31, r31
    2290:	ee 0f       	add	r30, r30
    2292:	ff 1f       	adc	r31, r31
    2294:	ee 0f       	add	r30, r30
    2296:	ff 1f       	adc	r31, r31
    2298:	ec 5b       	subi	r30, 0xBC	; 188
    229a:	fc 4d       	sbci	r31, 0xDC	; 220
    229c:	15 8a       	std	Z+21, r1	; 0x15
    229e:	36 e0       	ldi	r19, 0x06	; 6
    22a0:	34 8b       	std	Z+20, r19	; 0x14
    22a2:	26 2b       	or	r18, r22
    22a4:	25 8b       	std	Z+21, r18	; 0x15
    22a6:	fc 01       	movw	r30, r24
    22a8:	ee 0f       	add	r30, r30
    22aa:	ff 1f       	adc	r31, r31
    22ac:	ee 0f       	add	r30, r30
    22ae:	ff 1f       	adc	r31, r31
    22b0:	ee 0f       	add	r30, r30
    22b2:	ff 1f       	adc	r31, r31
    22b4:	ec 5b       	subi	r30, 0xBC	; 188
    22b6:	fc 4d       	sbci	r31, 0xDC	; 220
    22b8:	25 89       	ldd	r18, Z+21	; 0x15
    22ba:	20 7c       	andi	r18, 0xC0	; 192
    22bc:	20 3c       	cpi	r18, 0xC0	; 192
    22be:	69 f4       	brne	.+26     	; 0x22da <udd_ep_alloc+0xec>
    22c0:	fc 01       	movw	r30, r24
    22c2:	ee 0f       	add	r30, r30
    22c4:	ff 1f       	adc	r31, r31
    22c6:	ee 0f       	add	r30, r30
    22c8:	ff 1f       	adc	r31, r31
    22ca:	ee 0f       	add	r30, r30
    22cc:	ff 1f       	adc	r31, r31
    22ce:	ec 5b       	subi	r30, 0xBC	; 188
    22d0:	fc 4d       	sbci	r31, 0xDC	; 220
    22d2:	25 89       	ldd	r18, Z+21	; 0x15
    22d4:	27 70       	andi	r18, 0x07	; 7
    22d6:	27 30       	cpi	r18, 0x07	; 7
    22d8:	81 f0       	breq	.+32     	; 0x22fa <udd_ep_alloc+0x10c>
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	88 0f       	add	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	fc 01       	movw	r30, r24
    22e8:	ec 5b       	subi	r30, 0xBC	; 188
    22ea:	fc 4d       	sbci	r31, 0xDC	; 220
    22ec:	85 89       	ldd	r24, Z+21	; 0x15
    22ee:	80 62       	ori	r24, 0x20	; 32
    22f0:	85 8b       	std	Z+21, r24	; 0x15
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	08 95       	ret
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	08 95       	ret
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	08 95       	ret

000022fe <udd_ep_is_halted>:
    22fe:	e8 2f       	mov	r30, r24
    2300:	ef 70       	andi	r30, 0x0F	; 15
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	ee 0f       	add	r30, r30
    2306:	ff 1f       	adc	r31, r31
    2308:	08 2e       	mov	r0, r24
    230a:	00 0c       	add	r0, r0
    230c:	99 0b       	sbc	r25, r25
    230e:	88 27       	eor	r24, r24
    2310:	99 0f       	add	r25, r25
    2312:	88 1f       	adc	r24, r24
    2314:	99 27       	eor	r25, r25
    2316:	e8 0f       	add	r30, r24
    2318:	f9 1f       	adc	r31, r25
    231a:	ee 0f       	add	r30, r30
    231c:	ff 1f       	adc	r31, r31
    231e:	ee 0f       	add	r30, r30
    2320:	ff 1f       	adc	r31, r31
    2322:	ee 0f       	add	r30, r30
    2324:	ff 1f       	adc	r31, r31
    2326:	ec 5b       	subi	r30, 0xBC	; 188
    2328:	fc 4d       	sbci	r31, 0xDC	; 220
    232a:	85 89       	ldd	r24, Z+21	; 0x15
    232c:	82 fb       	bst	r24, 2
    232e:	88 27       	eor	r24, r24
    2330:	80 f9       	bld	r24, 0
    2332:	08 95       	ret

00002334 <udd_ep_clear_halt>:
    2334:	0f 93       	push	r16
    2336:	28 2f       	mov	r18, r24
    2338:	2f 70       	andi	r18, 0x0F	; 15
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	a9 01       	movw	r20, r18
    233e:	44 0f       	add	r20, r20
    2340:	55 1f       	adc	r21, r21
    2342:	28 2f       	mov	r18, r24
    2344:	08 2e       	mov	r0, r24
    2346:	00 0c       	add	r0, r0
    2348:	33 0b       	sbc	r19, r19
    234a:	22 27       	eor	r18, r18
    234c:	33 0f       	add	r19, r19
    234e:	22 1f       	adc	r18, r18
    2350:	33 27       	eor	r19, r19
    2352:	24 0f       	add	r18, r20
    2354:	35 1f       	adc	r19, r21
    2356:	a9 01       	movw	r20, r18
    2358:	44 0f       	add	r20, r20
    235a:	55 1f       	adc	r21, r21
    235c:	44 0f       	add	r20, r20
    235e:	55 1f       	adc	r21, r21
    2360:	44 0f       	add	r20, r20
    2362:	55 1f       	adc	r21, r21
    2364:	fa 01       	movw	r30, r20
    2366:	e8 5a       	subi	r30, 0xA8	; 168
    2368:	fc 4d       	sbci	r31, 0xDC	; 220
    236a:	01 e0       	ldi	r16, 0x01	; 1
    236c:	06 93       	lac	Z, r16
    236e:	fa 01       	movw	r30, r20
    2370:	ec 5b       	subi	r30, 0xBC	; 188
    2372:	fc 4d       	sbci	r31, 0xDC	; 220
    2374:	95 89       	ldd	r25, Z+21	; 0x15
    2376:	92 ff       	sbrs	r25, 2
    2378:	11 c0       	rjmp	.+34     	; 0x239c <udd_ep_clear_halt+0x68>
    237a:	fa 01       	movw	r30, r20
    237c:	ec 5b       	subi	r30, 0xBC	; 188
    237e:	fc 4d       	sbci	r31, 0xDC	; 220
    2380:	95 89       	ldd	r25, Z+21	; 0x15
    2382:	9b 7f       	andi	r25, 0xFB	; 251
    2384:	95 8b       	std	Z+21, r25	; 0x15
    2386:	5f dc       	rcall	.-1858   	; 0x1c46 <udd_ep_get_job>
    2388:	fc 01       	movw	r30, r24
    238a:	80 81       	ld	r24, Z
    238c:	80 ff       	sbrs	r24, 0
    238e:	06 c0       	rjmp	.+12     	; 0x239c <udd_ep_clear_halt+0x68>
    2390:	8e 7f       	andi	r24, 0xFE	; 254
    2392:	80 83       	st	Z, r24
    2394:	07 80       	ldd	r0, Z+7	; 0x07
    2396:	f0 85       	ldd	r31, Z+8	; 0x08
    2398:	e0 2d       	mov	r30, r0
    239a:	19 95       	eicall
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	0f 91       	pop	r16
    23a0:	08 95       	ret

000023a2 <udd_ep_run>:
    23a2:	6f 92       	push	r6
    23a4:	7f 92       	push	r7
    23a6:	8f 92       	push	r8
    23a8:	9f 92       	push	r9
    23aa:	af 92       	push	r10
    23ac:	bf 92       	push	r11
    23ae:	cf 92       	push	r12
    23b0:	df 92       	push	r13
    23b2:	ef 92       	push	r14
    23b4:	ff 92       	push	r15
    23b6:	0f 93       	push	r16
    23b8:	1f 93       	push	r17
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	1f 92       	push	r1
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	78 2e       	mov	r7, r24
    23c6:	66 2e       	mov	r6, r22
    23c8:	4a 01       	movw	r8, r20
    23ca:	59 01       	movw	r10, r18
    23cc:	3c dc       	rcall	.-1928   	; 0x1c46 <udd_ep_get_job>
    23ce:	6c 01       	movw	r12, r24
    23d0:	27 2d       	mov	r18, r7
    23d2:	87 2d       	mov	r24, r7
    23d4:	8f 70       	andi	r24, 0x0F	; 15
    23d6:	e8 2e       	mov	r14, r24
    23d8:	f1 2c       	mov	r15, r1
    23da:	c7 01       	movw	r24, r14
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	e7 2c       	mov	r14, r7
    23e2:	07 2c       	mov	r0, r7
    23e4:	00 0c       	add	r0, r0
    23e6:	ff 08       	sbc	r15, r15
    23e8:	ee 24       	eor	r14, r14
    23ea:	ff 0c       	add	r15, r15
    23ec:	ee 1c       	adc	r14, r14
    23ee:	ff 24       	eor	r15, r15
    23f0:	e8 0e       	add	r14, r24
    23f2:	f9 1e       	adc	r15, r25
    23f4:	f7 01       	movw	r30, r14
    23f6:	ee 0f       	add	r30, r30
    23f8:	ff 1f       	adc	r31, r31
    23fa:	ee 0f       	add	r30, r30
    23fc:	ff 1f       	adc	r31, r31
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 1f       	adc	r31, r31
    2402:	ec 5b       	subi	r30, 0xBC	; 188
    2404:	fc 4d       	sbci	r31, 0xDC	; 220
    2406:	85 89       	ldd	r24, Z+21	; 0x15
    2408:	80 7c       	andi	r24, 0xC0	; 192
    240a:	09 f4       	brne	.+2      	; 0x240e <udd_ep_run+0x6c>
    240c:	81 c0       	rjmp	.+258    	; 0x2510 <udd_ep_run+0x16e>
    240e:	f7 01       	movw	r30, r14
    2410:	ee 0f       	add	r30, r30
    2412:	ff 1f       	adc	r31, r31
    2414:	ee 0f       	add	r30, r30
    2416:	ff 1f       	adc	r31, r31
    2418:	ee 0f       	add	r30, r30
    241a:	ff 1f       	adc	r31, r31
    241c:	ec 5b       	subi	r30, 0xBC	; 188
    241e:	fc 4d       	sbci	r31, 0xDC	; 220
    2420:	85 89       	ldd	r24, Z+21	; 0x15
    2422:	80 7c       	andi	r24, 0xC0	; 192
    2424:	80 3c       	cpi	r24, 0xC0	; 192
    2426:	61 f0       	breq	.+24     	; 0x2440 <udd_ep_run+0x9e>
    2428:	f7 01       	movw	r30, r14
    242a:	ee 0f       	add	r30, r30
    242c:	ff 1f       	adc	r31, r31
    242e:	ee 0f       	add	r30, r30
    2430:	ff 1f       	adc	r31, r31
    2432:	ee 0f       	add	r30, r30
    2434:	ff 1f       	adc	r31, r31
    2436:	ec 5b       	subi	r30, 0xBC	; 188
    2438:	fc 4d       	sbci	r31, 0xDC	; 220
    243a:	85 89       	ldd	r24, Z+21	; 0x15
    243c:	82 fd       	sbrc	r24, 2
    243e:	6a c0       	rjmp	.+212    	; 0x2514 <udd_ep_run+0x172>
    2440:	8f b7       	in	r24, 0x3f	; 63
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	f8 94       	cli
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	f6 01       	movw	r30, r12
    244a:	90 81       	ld	r25, Z
    244c:	90 ff       	sbrs	r25, 0
    244e:	03 c0       	rjmp	.+6      	; 0x2456 <udd_ep_run+0xb4>
    2450:	8f bf       	out	0x3f, r24	; 63
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	60 c0       	rjmp	.+192    	; 0x2516 <udd_ep_run+0x174>
    2456:	f6 01       	movw	r30, r12
    2458:	90 81       	ld	r25, Z
    245a:	91 60       	ori	r25, 0x01	; 1
    245c:	90 83       	st	Z, r25
    245e:	8f bf       	out	0x3f, r24	; 63
    2460:	81 82       	std	Z+1, r8	; 0x01
    2462:	92 82       	std	Z+2, r9	; 0x02
    2464:	a3 82       	std	Z+3, r10	; 0x03
    2466:	b4 82       	std	Z+4, r11	; 0x04
    2468:	15 82       	std	Z+5, r1	; 0x05
    246a:	16 82       	std	Z+6, r1	; 0x06
    246c:	07 83       	std	Z+7, r16	; 0x07
    246e:	10 87       	std	Z+8, r17	; 0x08
    2470:	61 10       	cpse	r6, r1
    2472:	06 c0       	rjmp	.+12     	; 0x2480 <udd_ep_run+0xde>
    2474:	91 e0       	ldi	r25, 0x01	; 1
    2476:	a1 14       	cp	r10, r1
    2478:	b1 04       	cpc	r11, r1
    247a:	19 f0       	breq	.+6      	; 0x2482 <udd_ep_run+0xe0>
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	01 c0       	rjmp	.+2      	; 0x2482 <udd_ep_run+0xe0>
    2480:	91 e0       	ldi	r25, 0x01	; 1
    2482:	f6 01       	movw	r30, r12
    2484:	80 81       	ld	r24, Z
    2486:	90 fb       	bst	r25, 0
    2488:	81 f9       	bld	r24, 1
    248a:	8b 7f       	andi	r24, 0xFB	; 251
    248c:	80 83       	st	Z, r24
    248e:	22 23       	and	r18, r18
    2490:	64 f4       	brge	.+24     	; 0x24aa <udd_ep_run+0x108>
    2492:	f7 01       	movw	r30, r14
    2494:	ee 0f       	add	r30, r30
    2496:	ff 1f       	adc	r31, r31
    2498:	ee 0f       	add	r30, r30
    249a:	ff 1f       	adc	r31, r31
    249c:	ee 0f       	add	r30, r30
    249e:	ff 1f       	adc	r31, r31
    24a0:	ec 5b       	subi	r30, 0xBC	; 188
    24a2:	fc 4d       	sbci	r31, 0xDC	; 220
    24a4:	12 8e       	std	Z+26, r1	; 0x1a
    24a6:	13 8e       	std	Z+27, r1	; 0x1b
    24a8:	2f c0       	rjmp	.+94     	; 0x2508 <udd_ep_run+0x166>
    24aa:	f7 01       	movw	r30, r14
    24ac:	ee 0f       	add	r30, r30
    24ae:	ff 1f       	adc	r31, r31
    24b0:	ee 0f       	add	r30, r30
    24b2:	ff 1f       	adc	r31, r31
    24b4:	ee 0f       	add	r30, r30
    24b6:	ff 1f       	adc	r31, r31
    24b8:	ec 5b       	subi	r30, 0xBC	; 188
    24ba:	fc 4d       	sbci	r31, 0xDC	; 220
    24bc:	85 89       	ldd	r24, Z+21	; 0x15
    24be:	80 7c       	andi	r24, 0xC0	; 192
    24c0:	80 3c       	cpi	r24, 0xC0	; 192
    24c2:	a9 f4       	brne	.+42     	; 0x24ee <udd_ep_run+0x14c>
    24c4:	c7 01       	movw	r24, r14
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	88 0f       	add	r24, r24
    24cc:	99 1f       	adc	r25, r25
    24ce:	88 0f       	add	r24, r24
    24d0:	99 1f       	adc	r25, r25
    24d2:	88 5a       	subi	r24, 0xA8	; 168
    24d4:	9c 4d       	sbci	r25, 0xDC	; 220
    24d6:	8f db       	rcall	.-2274   	; 0x1bf6 <udd_ep_get_size>
    24d8:	bc 01       	movw	r22, r24
    24da:	c5 01       	movw	r24, r10
    24dc:	ac d2       	rcall	.+1368   	; 0x2a36 <__udivmodhi4>
    24de:	89 2b       	or	r24, r25
    24e0:	31 f0       	breq	.+12     	; 0x24ee <udd_ep_run+0x14c>
    24e2:	f6 01       	movw	r30, r12
    24e4:	80 81       	ld	r24, Z
    24e6:	8e 7f       	andi	r24, 0xFE	; 254
    24e8:	80 83       	st	Z, r24
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	14 c0       	rjmp	.+40     	; 0x2516 <udd_ep_run+0x174>
    24ee:	f7 01       	movw	r30, r14
    24f0:	ee 0f       	add	r30, r30
    24f2:	ff 1f       	adc	r31, r31
    24f4:	ee 0f       	add	r30, r30
    24f6:	ff 1f       	adc	r31, r31
    24f8:	ee 0f       	add	r30, r30
    24fa:	ff 1f       	adc	r31, r31
    24fc:	ec 5b       	subi	r30, 0xBC	; 188
    24fe:	fc 4d       	sbci	r31, 0xDC	; 220
    2500:	16 8a       	std	Z+22, r1	; 0x16
    2502:	17 8a       	std	Z+23, r1	; 0x17
    2504:	12 8e       	std	Z+26, r1	; 0x1a
    2506:	13 8e       	std	Z+27, r1	; 0x1b
    2508:	87 2d       	mov	r24, r7
    250a:	29 dc       	rcall	.-1966   	; 0x1d5e <udd_ep_trans_complet>
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	03 c0       	rjmp	.+6      	; 0x2516 <udd_ep_run+0x174>
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	01 c0       	rjmp	.+2      	; 0x2516 <udd_ep_run+0x174>
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	0f 90       	pop	r0
    2518:	df 91       	pop	r29
    251a:	cf 91       	pop	r28
    251c:	1f 91       	pop	r17
    251e:	0f 91       	pop	r16
    2520:	ff 90       	pop	r15
    2522:	ef 90       	pop	r14
    2524:	df 90       	pop	r13
    2526:	cf 90       	pop	r12
    2528:	bf 90       	pop	r11
    252a:	af 90       	pop	r10
    252c:	9f 90       	pop	r9
    252e:	8f 90       	pop	r8
    2530:	7f 90       	pop	r7
    2532:	6f 90       	pop	r6
    2534:	08 95       	ret

00002536 <udd_ep_abort>:
    2536:	ff 92       	push	r15
    2538:	0f 93       	push	r16
    253a:	1f 93       	push	r17
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	18 2f       	mov	r17, r24
    2542:	c8 2f       	mov	r28, r24
    2544:	cf 70       	andi	r28, 0x0F	; 15
    2546:	d0 e0       	ldi	r29, 0x00	; 0
    2548:	ce 01       	movw	r24, r28
    254a:	88 0f       	add	r24, r24
    254c:	99 1f       	adc	r25, r25
    254e:	c1 2f       	mov	r28, r17
    2550:	01 2e       	mov	r0, r17
    2552:	00 0c       	add	r0, r0
    2554:	dd 0b       	sbc	r29, r29
    2556:	cc 27       	eor	r28, r28
    2558:	dd 0f       	add	r29, r29
    255a:	cc 1f       	adc	r28, r28
    255c:	dd 27       	eor	r29, r29
    255e:	c8 0f       	add	r28, r24
    2560:	d9 1f       	adc	r29, r25
    2562:	81 2f       	mov	r24, r17
    2564:	70 db       	rcall	.-2336   	; 0x1c46 <udd_ep_get_job>
    2566:	dc 01       	movw	r26, r24
    2568:	fe 01       	movw	r30, r28
    256a:	ee 0f       	add	r30, r30
    256c:	ff 1f       	adc	r31, r31
    256e:	ee 0f       	add	r30, r30
    2570:	ff 1f       	adc	r31, r31
    2572:	ee 0f       	add	r30, r30
    2574:	ff 1f       	adc	r31, r31
    2576:	e8 5a       	subi	r30, 0xA8	; 168
    2578:	fc 4d       	sbci	r31, 0xDC	; 220
    257a:	02 e0       	ldi	r16, 0x02	; 2
    257c:	05 93       	las	Z, r16
    257e:	8c 91       	ld	r24, X
    2580:	80 ff       	sbrs	r24, 0
    2582:	22 c0       	rjmp	.+68     	; 0x25c8 <udd_ep_abort+0x92>
    2584:	8e 7f       	andi	r24, 0xFE	; 254
    2586:	8c 93       	st	X, r24
    2588:	17 96       	adiw	r26, 0x07	; 7
    258a:	ed 91       	ld	r30, X+
    258c:	fc 91       	ld	r31, X
    258e:	18 97       	sbiw	r26, 0x08	; 8
    2590:	30 97       	sbiw	r30, 0x00	; 0
    2592:	d1 f0       	breq	.+52     	; 0x25c8 <udd_ep_abort+0x92>
    2594:	11 23       	and	r17, r17
    2596:	5c f4       	brge	.+22     	; 0x25ae <udd_ep_abort+0x78>
    2598:	cc 0f       	add	r28, r28
    259a:	dd 1f       	adc	r29, r29
    259c:	cc 0f       	add	r28, r28
    259e:	dd 1f       	adc	r29, r29
    25a0:	cc 0f       	add	r28, r28
    25a2:	dd 1f       	adc	r29, r29
    25a4:	cc 5b       	subi	r28, 0xBC	; 188
    25a6:	dc 4d       	sbci	r29, 0xDC	; 220
    25a8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    25aa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    25ac:	0a c0       	rjmp	.+20     	; 0x25c2 <udd_ep_abort+0x8c>
    25ae:	cc 0f       	add	r28, r28
    25b0:	dd 1f       	adc	r29, r29
    25b2:	cc 0f       	add	r28, r28
    25b4:	dd 1f       	adc	r29, r29
    25b6:	cc 0f       	add	r28, r28
    25b8:	dd 1f       	adc	r29, r29
    25ba:	cc 5b       	subi	r28, 0xBC	; 188
    25bc:	dc 4d       	sbci	r29, 0xDC	; 220
    25be:	6e 89       	ldd	r22, Y+22	; 0x16
    25c0:	7f 89       	ldd	r23, Y+23	; 0x17
    25c2:	41 2f       	mov	r20, r17
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	19 95       	eicall
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	ff 90       	pop	r15
    25d2:	08 95       	ret

000025d4 <udd_ep_free>:
    25d4:	cf 93       	push	r28
    25d6:	c8 2f       	mov	r28, r24
    25d8:	ae df       	rcall	.-164    	; 0x2536 <udd_ep_abort>
    25da:	ec 2f       	mov	r30, r28
    25dc:	ef 70       	andi	r30, 0x0F	; 15
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	ee 0f       	add	r30, r30
    25e2:	ff 1f       	adc	r31, r31
    25e4:	8c 2f       	mov	r24, r28
    25e6:	cc 0f       	add	r28, r28
    25e8:	99 0b       	sbc	r25, r25
    25ea:	88 27       	eor	r24, r24
    25ec:	99 0f       	add	r25, r25
    25ee:	88 1f       	adc	r24, r24
    25f0:	99 27       	eor	r25, r25
    25f2:	e8 0f       	add	r30, r24
    25f4:	f9 1f       	adc	r31, r25
    25f6:	ee 0f       	add	r30, r30
    25f8:	ff 1f       	adc	r31, r31
    25fa:	ee 0f       	add	r30, r30
    25fc:	ff 1f       	adc	r31, r31
    25fe:	ee 0f       	add	r30, r30
    2600:	ff 1f       	adc	r31, r31
    2602:	ec 5b       	subi	r30, 0xBC	; 188
    2604:	fc 4d       	sbci	r31, 0xDC	; 220
    2606:	15 8a       	std	Z+21, r1	; 0x15
    2608:	cf 91       	pop	r28
    260a:	08 95       	ret

0000260c <udd_ep_set_halt>:
    260c:	e8 2f       	mov	r30, r24
    260e:	ef 70       	andi	r30, 0x0F	; 15
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	ee 0f       	add	r30, r30
    2614:	ff 1f       	adc	r31, r31
    2616:	28 2f       	mov	r18, r24
    2618:	08 2e       	mov	r0, r24
    261a:	00 0c       	add	r0, r0
    261c:	33 0b       	sbc	r19, r19
    261e:	22 27       	eor	r18, r18
    2620:	33 0f       	add	r19, r19
    2622:	22 1f       	adc	r18, r18
    2624:	33 27       	eor	r19, r19
    2626:	e2 0f       	add	r30, r18
    2628:	f3 1f       	adc	r31, r19
    262a:	ee 0f       	add	r30, r30
    262c:	ff 1f       	adc	r31, r31
    262e:	ee 0f       	add	r30, r30
    2630:	ff 1f       	adc	r31, r31
    2632:	ee 0f       	add	r30, r30
    2634:	ff 1f       	adc	r31, r31
    2636:	ec 5b       	subi	r30, 0xBC	; 188
    2638:	fc 4d       	sbci	r31, 0xDC	; 220
    263a:	95 89       	ldd	r25, Z+21	; 0x15
    263c:	94 60       	ori	r25, 0x04	; 4
    263e:	95 8b       	std	Z+21, r25	; 0x15
    2640:	7a df       	rcall	.-268    	; 0x2536 <udd_ep_abort>
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	08 95       	ret

00002646 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2646:	1f 92       	push	r1
    2648:	0f 92       	push	r0
    264a:	0f b6       	in	r0, 0x3f	; 63
    264c:	0f 92       	push	r0
    264e:	11 24       	eor	r1, r1
    2650:	0b b6       	in	r0, 0x3b	; 59
    2652:	0f 92       	push	r0
    2654:	0f 93       	push	r16
    2656:	2f 93       	push	r18
    2658:	3f 93       	push	r19
    265a:	4f 93       	push	r20
    265c:	5f 93       	push	r21
    265e:	6f 93       	push	r22
    2660:	7f 93       	push	r23
    2662:	8f 93       	push	r24
    2664:	9f 93       	push	r25
    2666:	af 93       	push	r26
    2668:	bf 93       	push	r27
    266a:	cf 93       	push	r28
    266c:	ef 93       	push	r30
    266e:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2670:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2674:	88 23       	and	r24, r24
    2676:	3c f4       	brge	.+14     	; 0x2686 <__vector_125+0x40>
		udd_ack_start_of_frame_event();
    2678:	80 e8       	ldi	r24, 0x80	; 128
    267a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		udc_sof_notify();
    267e:	0e 94 30 0a 	call	0x1460	; 0x1460 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2682:	b1 d1       	rcall	.+866    	; 0x29e6 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2684:	89 c0       	rjmp	.+274    	; 0x2798 <__vector_125+0x152>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2686:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    268a:	82 ff       	sbrs	r24, 2
    268c:	20 c0       	rjmp	.+64     	; 0x26ce <__vector_125+0x88>
		udd_ack_underflow_event();
    268e:	84 e0       	ldi	r24, 0x04	; 4
    2690:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_in_underflow()) {
    2694:	80 91 60 23 	lds	r24, 0x2360	; 0x802360 <udd_sram+0x1c>
    2698:	86 ff       	sbrs	r24, 6
    269a:	7e c0       	rjmp	.+252    	; 0x2798 <__vector_125+0x152>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    269c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    26a0:	81 fd       	sbrc	r24, 1
    26a2:	7a c0       	rjmp	.+244    	; 0x2798 <__vector_125+0x152>
    26a4:	eb da       	rcall	.-2602   	; 0x1c7c <udd_ctrl_interrupt_tc_setup>
    26a6:	81 11       	cpse	r24, r1
    26a8:	77 c0       	rjmp	.+238    	; 0x2798 <__vector_125+0x152>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    26aa:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_ep_control_state>
    26ae:	81 30       	cpi	r24, 0x01	; 1
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    26b0:	11 f4       	brne	.+4      	; 0x26b6 <__vector_125+0x70>
    26b2:	1f da       	rcall	.-3010   	; 0x1af2 <udd_ctrl_send_zlp_in>
    26b4:	71 c0       	rjmp	.+226    	; 0x2798 <__vector_125+0x152>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    26b6:	84 30       	cpi	r24, 0x04	; 4
    26b8:	09 f0       	breq	.+2      	; 0x26bc <__vector_125+0x76>
    26ba:	6e c0       	rjmp	.+220    	; 0x2798 <__vector_125+0x152>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    26bc:	e1 e6       	ldi	r30, 0x61	; 97
    26be:	f3 e2       	ldi	r31, 0x23	; 35
    26c0:	04 e0       	ldi	r16, 0x04	; 4
    26c2:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    26c4:	e9 e5       	ldi	r30, 0x59	; 89
    26c6:	f3 e2       	ldi	r31, 0x23	; 35
    26c8:	04 e0       	ldi	r16, 0x04	; 4
    26ca:	05 93       	las	Z, r16
    26cc:	65 c0       	rjmp	.+202    	; 0x2798 <__vector_125+0x152>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    26ce:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    26d2:	81 ff       	sbrs	r24, 1
    26d4:	5c c0       	rjmp	.+184    	; 0x278e <__vector_125+0x148>
		udd_ack_overflow_event();
    26d6:	82 e0       	ldi	r24, 0x02	; 2
    26d8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
		if (udd_control_out_overflow()) {
    26dc:	80 91 58 23 	lds	r24, 0x2358	; 0x802358 <udd_sram+0x14>
    26e0:	86 ff       	sbrs	r24, 6
    26e2:	5a c0       	rjmp	.+180    	; 0x2798 <__vector_125+0x152>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    26e4:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    26e8:	81 fd       	sbrc	r24, 1
    26ea:	56 c0       	rjmp	.+172    	; 0x2798 <__vector_125+0x152>
    26ec:	c7 da       	rcall	.-2674   	; 0x1c7c <udd_ctrl_interrupt_tc_setup>
    26ee:	81 11       	cpse	r24, r1
    26f0:	53 c0       	rjmp	.+166    	; 0x2798 <__vector_125+0x152>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    26f2:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_ep_control_state>
    26f6:	82 30       	cpi	r24, 0x02	; 2
    26f8:	41 f4       	brne	.+16     	; 0x270a <__vector_125+0xc4>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    26fa:	84 e0       	ldi	r24, 0x04	; 4
    26fc:	80 93 43 23 	sts	0x2343, r24	; 0x802343 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2700:	e8 e5       	ldi	r30, 0x58	; 88
    2702:	f3 e2       	ldi	r31, 0x23	; 35
    2704:	02 e0       	ldi	r16, 0x02	; 2
    2706:	06 93       	lac	Z, r16
    2708:	47 c0       	rjmp	.+142    	; 0x2798 <__vector_125+0x152>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    270a:	83 30       	cpi	r24, 0x03	; 3
    270c:	09 f0       	breq	.+2      	; 0x2710 <__vector_125+0xca>
    270e:	44 c0       	rjmp	.+136    	; 0x2798 <__vector_125+0x152>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2710:	e1 e6       	ldi	r30, 0x61	; 97
    2712:	f3 e2       	ldi	r31, 0x23	; 35
    2714:	04 e0       	ldi	r16, 0x04	; 4
    2716:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2718:	e9 e5       	ldi	r30, 0x59	; 89
    271a:	f3 e2       	ldi	r31, 0x23	; 35
    271c:	04 e0       	ldi	r16, 0x04	; 4
    271e:	05 93       	las	Z, r16
    2720:	3b c0       	rjmp	.+118    	; 0x2798 <__vector_125+0x152>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2722:	80 e1       	ldi	r24, 0x10	; 16
    2724:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2728:	c1 e0       	ldi	r28, 0x01	; 1
    272a:	8c 2f       	mov	r24, r28
			udd_ep_abort(i | USB_EP_DIR_IN);
    272c:	04 df       	rcall	.-504    	; 0x2536 <udd_ep_abort>
    272e:	8c 2f       	mov	r24, r28
    2730:	80 68       	ori	r24, 0x80	; 128
    2732:	01 df       	rcall	.-510    	; 0x2536 <udd_ep_abort>
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
    2734:	cf 5f       	subi	r28, 0xFF	; 255
    2736:	c5 30       	cpi	r28, 0x05	; 5
    2738:	c1 f7       	brne	.-16     	; 0x272a <__vector_125+0xe4>
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    273a:	0e 94 06 0a 	call	0x140c	; 0x140c <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    273e:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7be4c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2742:	e4 e4       	ldi	r30, 0x44	; 68
    2744:	f3 e2       	ldi	r31, 0x23	; 35
    2746:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    2748:	96 e0       	ldi	r25, 0x06	; 6
    274a:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    274c:	80 e4       	ldi	r24, 0x40	; 64
    274e:	85 8b       	std	Z+21, r24	; 0x15
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2750:	15 8e       	std	Z+29, r1	; 0x1d
	udd_endpoint_clear_status(ep_ctrl);
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2752:	94 8f       	std	Z+28, r25	; 0x1c
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2754:	85 8f       	std	Z+29, r24	; 0x1d
    2756:	87 e3       	ldi	r24, 0x37	; 55
    2758:	93 e2       	ldi	r25, 0x23	; 35
    275a:	80 8f       	std	Z+24, r24	; 0x18
		// Reset endpoint control management
		udd_ctrl_init();
    275c:	91 8f       	std	Z+25, r25	; 0x19
    275e:	96 d9       	rcall	.-3284   	; 0x1a8c <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2760:	1b c0       	rjmp	.+54     	; 0x2798 <__vector_125+0x152>
	}

	if (udd_is_suspend_event()) {
    2762:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_suspend_event();
    2766:	86 ff       	sbrs	r24, 6
    2768:	07 c0       	rjmp	.+14     	; 0x2778 <__vector_125+0x132>
    276a:	80 e4       	ldi	r24, 0x40	; 64
		udd_sleep_mode(false); // Enter in SUSPEND mode
    276c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2770:	80 e0       	ldi	r24, 0x00	; 0
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2772:	54 d9       	rcall	.-3416   	; 0x1a1c <udd_sleep_mode>
    2774:	36 d1       	rcall	.+620    	; 0x29e2 <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

	if (udd_is_resume_event()) {
    2776:	10 c0       	rjmp	.+32     	; 0x2798 <__vector_125+0x152>
    2778:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
		udd_ack_resume_event();
    277c:	85 ff       	sbrs	r24, 5
    277e:	0c c0       	rjmp	.+24     	; 0x2798 <__vector_125+0x152>
    2780:	80 e2       	ldi	r24, 0x20	; 32
		udd_sleep_mode(true); // Enter in power reduction mode
    2782:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7be4ca>
    2786:	81 e0       	ldi	r24, 0x01	; 1
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2788:	49 d9       	rcall	.-3438   	; 0x1a1c <udd_sleep_mode>
    278a:	2c d1       	rcall	.+600    	; 0x29e4 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
    278c:	05 c0       	rjmp	.+10     	; 0x2798 <__vector_125+0x152>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    278e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7be4cb>
    2792:	84 fd       	sbrc	r24, 4
    2794:	c6 cf       	rjmp	.-116    	; 0x2722 <__vector_125+0xdc>
    2796:	e5 cf       	rjmp	.-54     	; 0x2762 <__vector_125+0x11c>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2798:	ff 91       	pop	r31
    279a:	ef 91       	pop	r30
    279c:	cf 91       	pop	r28
    279e:	bf 91       	pop	r27
    27a0:	af 91       	pop	r26
    27a2:	9f 91       	pop	r25
    27a4:	8f 91       	pop	r24
    27a6:	7f 91       	pop	r23
    27a8:	6f 91       	pop	r22
    27aa:	5f 91       	pop	r21
    27ac:	4f 91       	pop	r20
    27ae:	3f 91       	pop	r19
    27b0:	2f 91       	pop	r18
    27b2:	0f 91       	pop	r16
    27b4:	0f 90       	pop	r0
    27b6:	0b be       	out	0x3b, r0	; 59
    27b8:	0f 90       	pop	r0
    27ba:	0f be       	out	0x3f, r0	; 63
    27bc:	0f 90       	pop	r0
    27be:	1f 90       	pop	r1
    27c0:	18 95       	reti

000027c2 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    27c2:	1f 92       	push	r1
    27c4:	0f 92       	push	r0
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	0f 92       	push	r0
    27ca:	11 24       	eor	r1, r1
    27cc:	0b b6       	in	r0, 0x3b	; 59
    27ce:	0f 92       	push	r0
    27d0:	0f 93       	push	r16
    27d2:	1f 93       	push	r17
    27d4:	2f 93       	push	r18
    27d6:	3f 93       	push	r19
    27d8:	4f 93       	push	r20
    27da:	5f 93       	push	r21
    27dc:	6f 93       	push	r22
    27de:	7f 93       	push	r23
    27e0:	8f 93       	push	r24
    27e2:	9f 93       	push	r25
    27e4:	af 93       	push	r26
    27e6:	bf 93       	push	r27
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	ef 93       	push	r30
    27ee:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    27f0:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>
    27f4:	81 fd       	sbrc	r24, 1
    27f6:	03 c0       	rjmp	.+6      	; 0x27fe <__vector_126+0x3c>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    27f8:	41 da       	rcall	.-2942   	; 0x1c7c <udd_ctrl_interrupt_tc_setup>
    27fa:	81 11       	cpse	r24, r1
    27fc:	c3 c0       	rjmp	.+390    	; 0x2984 <__vector_126+0x1c2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    27fe:	82 e0       	ldi	r24, 0x02	; 2
    2800:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7be4cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2804:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7be4c5>
	i_fifo = 2 * (1 + ~rp);
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2808:	81 95       	neg	r24
    280a:	88 0f       	add	r24, r24
    280c:	e8 e5       	ldi	r30, 0x58	; 88
    280e:	f3 e2       	ldi	r31, 0x23	; 35
    2810:	e8 1b       	sub	r30, r24
    2812:	f1 09       	sbc	r31, r1
    2814:	20 81       	ld	r18, Z
    2816:	31 81       	ldd	r19, Z+1	; 0x01
    2818:	28 55       	subi	r18, 0x58	; 88
    281a:	33 42       	sbci	r19, 0x23	; 35
    281c:	36 95       	lsr	r19
    281e:	27 95       	ror	r18
    2820:	36 95       	lsr	r19
    2822:	27 95       	ror	r18
    2824:	36 95       	lsr	r19
    2826:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2828:	82 2f       	mov	r24, r18
    282a:	86 95       	lsr	r24
    282c:	20 fd       	sbrc	r18, 0
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <__vector_126+0x72>
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	01 c0       	rjmp	.+2      	; 0x2836 <__vector_126+0x74>
    2834:	90 e8       	ldi	r25, 0x80	; 128
    2836:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2838:	e8 2f       	mov	r30, r24
    283a:	ef 70       	andi	r30, 0x0F	; 15
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	ee 0f       	add	r30, r30
    2840:	ff 1f       	adc	r31, r31
    2842:	28 2f       	mov	r18, r24
    2844:	08 2e       	mov	r0, r24
    2846:	00 0c       	add	r0, r0
    2848:	33 0b       	sbc	r19, r19
    284a:	22 27       	eor	r18, r18
    284c:	33 0f       	add	r19, r19
    284e:	22 1f       	adc	r18, r18
    2850:	33 27       	eor	r19, r19
    2852:	e2 0f       	add	r30, r18
    2854:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2856:	df 01       	movw	r26, r30
    2858:	aa 0f       	add	r26, r26
    285a:	bb 1f       	adc	r27, r27
    285c:	aa 0f       	add	r26, r26
    285e:	bb 1f       	adc	r27, r27
    2860:	aa 0f       	add	r26, r26
    2862:	bb 1f       	adc	r27, r27
    2864:	ac 5b       	subi	r26, 0xBC	; 188
    2866:	bc 4d       	sbci	r27, 0xDC	; 220
    2868:	54 96       	adiw	r26, 0x14	; 20
    286a:	9c 91       	ld	r25, X
    286c:	95 ff       	sbrs	r25, 5
    286e:	8a c0       	rjmp	.+276    	; 0x2984 <__vector_126+0x1c2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2870:	ee 0f       	add	r30, r30
    2872:	ff 1f       	adc	r31, r31
    2874:	ee 0f       	add	r30, r30
    2876:	ff 1f       	adc	r31, r31
    2878:	ee 0f       	add	r30, r30
    287a:	ff 1f       	adc	r31, r31
    287c:	e8 5a       	subi	r30, 0xA8	; 168
    287e:	fc 4d       	sbci	r31, 0xDC	; 220
    2880:	00 e2       	ldi	r16, 0x20	; 32
    2882:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2884:	81 11       	cpse	r24, r1
    2886:	79 c0       	rjmp	.+242    	; 0x297a <__vector_126+0x1b8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2888:	80 91 43 23 	lds	r24, 0x2343	; 0x802343 <udd_ep_control_state>
    288c:	84 30       	cpi	r24, 0x04	; 4
		// Valid end of setup request
		udd_ctrl_endofrequest();
    288e:	19 f4       	brne	.+6      	; 0x2896 <__vector_126+0xd4>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2890:	3e d9       	rcall	.-3460   	; 0x1b0e <udd_ctrl_endofrequest>
    2892:	fc d8       	rcall	.-3592   	; 0x1a8c <udd_ctrl_init>
    2894:	77 c0       	rjmp	.+238    	; 0x2984 <__vector_126+0x1c2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2896:	00 91 5a 23 	lds	r16, 0x235A	; 0x80235a <udd_sram+0x16>
    289a:	10 91 5b 23 	lds	r17, 0x235B	; 0x80235b <udd_sram+0x17>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    289e:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    28a2:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    28a6:	c0 91 3f 23 	lds	r28, 0x233F	; 0x80233f <udd_ctrl_payload_nb_trans>
    28aa:	d0 91 40 23 	lds	r29, 0x2340	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    28ae:	98 01       	movw	r18, r16
    28b0:	2c 0f       	add	r18, r28
    28b2:	3d 1f       	adc	r19, r29
    28b4:	82 17       	cp	r24, r18
    28b6:	93 07       	cpc	r25, r19
    28b8:	18 f4       	brcc	.+6      	; 0x28c0 <__vector_126+0xfe>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    28ba:	8c 01       	movw	r16, r24
    28bc:	0c 1b       	sub	r16, r28
    28be:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    28c0:	80 91 c1 23 	lds	r24, 0x23C1	; 0x8023c1 <udd_g_ctrlreq+0x8>
    28c4:	90 91 c2 23 	lds	r25, 0x23C2	; 0x8023c2 <udd_g_ctrlreq+0x9>
    28c8:	a8 01       	movw	r20, r16
    28ca:	67 e3       	ldi	r22, 0x37	; 55
    28cc:	73 e2       	ldi	r23, 0x23	; 35
    28ce:	8c 0f       	add	r24, r28
    28d0:	9d 1f       	adc	r25, r29
    28d2:	cd d0       	rcall	.+410    	; 0x2a6e <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    28d4:	c0 0f       	add	r28, r16
    28d6:	d1 1f       	adc	r29, r17
    28d8:	c0 93 3f 23 	sts	0x233F, r28	; 0x80233f <udd_ctrl_payload_nb_trans>
    28dc:	d0 93 40 23 	sts	0x2340, r29	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    28e0:	08 30       	cpi	r16, 0x08	; 8
    28e2:	11 05       	cpc	r17, r1
    28e4:	69 f4       	brne	.+26     	; 0x2900 <__vector_126+0x13e>
    28e6:	80 91 41 23 	lds	r24, 0x2341	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    28ea:	90 91 42 23 	lds	r25, 0x2342	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    28ee:	8c 0f       	add	r24, r28
    28f0:	9d 1f       	adc	r25, r29
    28f2:	20 91 bf 23 	lds	r18, 0x23BF	; 0x8023bf <udd_g_ctrlreq+0x6>
    28f6:	30 91 c0 23 	lds	r19, 0x23C0	; 0x8023c0 <udd_g_ctrlreq+0x7>
    28fa:	82 17       	cp	r24, r18
    28fc:	93 07       	cpc	r25, r19
    28fe:	80 f0       	brcs	.+32     	; 0x2920 <__vector_126+0x15e>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2900:	e9 eb       	ldi	r30, 0xB9	; 185
    2902:	f3 e2       	ldi	r31, 0x23	; 35
    2904:	c2 87       	std	Z+10, r28	; 0x0a
    2906:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2908:	06 84       	ldd	r0, Z+14	; 0x0e
    290a:	f7 85       	ldd	r31, Z+15	; 0x0f
    290c:	e0 2d       	mov	r30, r0
    290e:	30 97       	sbiw	r30, 0x00	; 0
			if (!udd_g_ctrlreq.over_under_run()) {
    2910:	29 f0       	breq	.+10     	; 0x291c <__vector_126+0x15a>
    2912:	19 95       	eicall
				// Stall ZLP
				udd_ctrl_stall_data();
    2914:	81 11       	cpse	r24, r1
    2916:	02 c0       	rjmp	.+4      	; 0x291c <__vector_126+0x15a>
    2918:	de d8       	rcall	.-3652   	; 0x1ad6 <udd_ctrl_stall_data>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    291a:	34 c0       	rjmp	.+104    	; 0x2984 <__vector_126+0x1c2>
    291c:	ea d8       	rcall	.-3628   	; 0x1af2 <udd_ctrl_send_zlp_in>
    291e:	32 c0       	rjmp	.+100    	; 0x2984 <__vector_126+0x1c2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2920:	80 91 c3 23 	lds	r24, 0x23C3	; 0x8023c3 <udd_g_ctrlreq+0xa>
    2924:	90 91 c4 23 	lds	r25, 0x23C4	; 0x8023c4 <udd_g_ctrlreq+0xb>
    2928:	c8 17       	cp	r28, r24
    292a:	d9 07       	cpc	r29, r25
    292c:	f9 f4       	brne	.+62     	; 0x296c <__vector_126+0x1aa>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    292e:	e0 91 c7 23 	lds	r30, 0x23C7	; 0x8023c7 <udd_g_ctrlreq+0xe>
    2932:	f0 91 c8 23 	lds	r31, 0x23C8	; 0x8023c8 <udd_g_ctrlreq+0xf>
    2936:	30 97       	sbiw	r30, 0x00	; 0
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2938:	11 f4       	brne	.+4      	; 0x293e <__vector_126+0x17c>
    293a:	cd d8       	rcall	.-3686   	; 0x1ad6 <udd_ctrl_stall_data>
    293c:	23 c0       	rjmp	.+70     	; 0x2984 <__vector_126+0x1c2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    293e:	19 95       	eicall
    2940:	81 11       	cpse	r24, r1
    2942:	02 c0       	rjmp	.+4      	; 0x2948 <__vector_126+0x186>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2944:	c8 d8       	rcall	.-3696   	; 0x1ad6 <udd_ctrl_stall_data>
    2946:	1e c0       	rjmp	.+60     	; 0x2984 <__vector_126+0x1c2>
    2948:	20 91 41 23 	lds	r18, 0x2341	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    294c:	30 91 42 23 	lds	r19, 0x2342	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    2950:	80 91 3f 23 	lds	r24, 0x233F	; 0x80233f <udd_ctrl_payload_nb_trans>
    2954:	90 91 40 23 	lds	r25, 0x2340	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    2958:	82 0f       	add	r24, r18
    295a:	93 1f       	adc	r25, r19
    295c:	80 93 41 23 	sts	0x2341, r24	; 0x802341 <udd_ctrl_prev_payload_nb_trans>
    2960:	90 93 42 23 	sts	0x2342, r25	; 0x802342 <udd_ctrl_prev_payload_nb_trans+0x1>
    2964:	10 92 3f 23 	sts	0x233F, r1	; 0x80233f <udd_ctrl_payload_nb_trans>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2968:	10 92 40 23 	sts	0x2340, r1	; 0x802340 <udd_ctrl_payload_nb_trans+0x1>
    296c:	e8 e5       	ldi	r30, 0x58	; 88
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    296e:	f3 e2       	ldi	r31, 0x23	; 35
    2970:	02 e0       	ldi	r16, 0x02	; 2
    2972:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2974:	00 e2       	ldi	r16, 0x20	; 32
    2976:	06 93       	lac	Z, r16
    2978:	05 c0       	rjmp	.+10     	; 0x2984 <__vector_126+0x1c2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    297a:	80 38       	cpi	r24, 0x80	; 128
		udd_ctrl_in_sent();
    297c:	11 f4       	brne	.+4      	; 0x2982 <__vector_126+0x1c0>
    297e:	cf d8       	rcall	.-3682   	; 0x1b1e <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2980:	01 c0       	rjmp	.+2      	; 0x2984 <__vector_126+0x1c2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2982:	ed d9       	rcall	.-3110   	; 0x1d5e <udd_ep_trans_complet>
    2984:	ff 91       	pop	r31
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2986:	ef 91       	pop	r30
    2988:	df 91       	pop	r29
    298a:	cf 91       	pop	r28
    298c:	bf 91       	pop	r27
    298e:	af 91       	pop	r26
    2990:	9f 91       	pop	r25
    2992:	8f 91       	pop	r24
    2994:	7f 91       	pop	r23
    2996:	6f 91       	pop	r22
    2998:	5f 91       	pop	r21
    299a:	4f 91       	pop	r20
    299c:	3f 91       	pop	r19
    299e:	2f 91       	pop	r18
    29a0:	1f 91       	pop	r17
    29a2:	0f 91       	pop	r16
    29a4:	0f 90       	pop	r0
    29a6:	0b be       	out	0x3b, r0	; 59
    29a8:	0f 90       	pop	r0
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	0f 90       	pop	r0
    29ae:	1f 90       	pop	r1
    29b0:	18 95       	reti

000029b2 <main>:
static volatile bool main_b_led_enable = false;


int main (void)
{
	irq_initialize_vectors();  // initializes vector table
    29b2:	87 e0       	ldi	r24, 0x07	; 7
    29b4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	cpu_irq_enable();          // enables CPU interrupts
    29b8:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    29ba:	e3 eb       	ldi	r30, 0xB3	; 179
    29bc:	f3 e2       	ldi	r31, 0x23	; 35
    29be:	10 82       	st	Z, r1
    29c0:	11 82       	std	Z+1, r1	; 0x01
    29c2:	12 82       	std	Z+2, r1	; 0x02
    29c4:	13 82       	std	Z+3, r1	; 0x03
    29c6:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	85 83       	std	Z+5, r24	; 0x05
	sleepmgr_init();           // initialize sleep manager
	sysclk_init();             // initialize clock
    29cc:	0e 94 72 06 	call	0xce4	; 0xce4 <sysclk_init>

	io_init();                 // initializes board i/o pins
    29d0:	0e 94 8c 01 	call	0x318	; 0x318 <io_init>

	udc_start();               // starts USB device controller
    29d4:	0e 94 04 0a 	call	0x1408	; 0x1408 <udc_start>

	startupSequence(4);        // pick preferred sequence (1-5)
    29d8:	84 e0       	ldi	r24, 0x04	; 4
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	0e 94 11 04 	call	0x822	; 0x822 <startupSequence>
    29e0:	ff cf       	rjmp	.-2      	; 0x29e0 <main+0x2e>

000029e2 <main_suspend_action>:

	while (true) { }
}

/* -------------------------------- USB -------------------------------- */
void main_suspend_action(void) { }
    29e2:	08 95       	ret

000029e4 <main_resume_action>:
void main_resume_action(void) { }
    29e4:	08 95       	ret

000029e6 <main_sof_action>:

void main_sof_action(void) {	// called each Start of Frame event (1 ms)
	if (!main_b_kbd_enable)
    29e6:	80 91 af 23 	lds	r24, 0x23AF	; 0x8023af <main_b_kbd_enable>
    29ea:	88 23       	and	r24, r24
    29ec:	39 f0       	breq	.+14     	; 0x29fc <main_sof_action+0x16>
	return;
	kbd_ui_process();
    29ee:	0e 94 6e 06 	call	0xcdc	; 0xcdc <kbd_ui_process>

	if (!main_b_generic_enable)
    29f2:	80 91 ae 23 	lds	r24, 0x23AE	; 0x8023ae <main_b_generic_enable>
    29f6:	81 11       	cpse	r24, r1
		return;
	jstk_ui_process();
    29f8:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <jstk_ui_process>
    29fc:	08 95       	ret

000029fe <main_remotewakeup_enable>:
}

void main_remotewakeup_enable(void) { }
    29fe:	08 95       	ret

00002a00 <main_remotewakeup_disable>:
void main_remotewakeup_disable(void) { }
    2a00:	08 95       	ret

00002a02 <main_kbd_enable>:

/* ----------------------------- keyboard ------------------------------ */
bool main_kbd_enable(void) {
	main_b_kbd_enable = true;
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	80 93 af 23 	sts	0x23AF, r24	; 0x8023af <main_b_kbd_enable>
	return true;
}
    2a08:	08 95       	ret

00002a0a <main_kbd_disable>:

void main_kbd_disable(void) {
	main_b_kbd_enable = false;
    2a0a:	10 92 af 23 	sts	0x23AF, r1	; 0x8023af <main_b_kbd_enable>
    2a0e:	08 95       	ret

00002a10 <main_generic_enable>:
}

/* ----------------------------- joystick ------------------------------ */
bool main_generic_enable(void) {
	main_b_generic_enable = true;
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	80 93 ae 23 	sts	0x23AE, r24	; 0x8023ae <main_b_generic_enable>
	return true;
}
    2a16:	08 95       	ret

00002a18 <main_generic_disable>:

void main_generic_disable(void) {
	main_b_generic_enable = false;
    2a18:	10 92 ae 23 	sts	0x23AE, r1	; 0x8023ae <main_b_generic_enable>
    2a1c:	08 95       	ret

00002a1e <main_led_enable>:
}

/* ------------------------------- LEDs -------------------------------- */
bool main_led_enable(void) {
	main_b_led_enable = true;
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	80 93 ad 23 	sts	0x23AD, r24	; 0x8023ad <main_b_led_enable>
	return true;
}
    2a24:	08 95       	ret

00002a26 <main_led_disable>:

void main_led_disable(void) {
	main_b_led_enable = false;
    2a26:	10 92 ad 23 	sts	0x23AD, r1	; 0x8023ad <main_b_led_enable>
    2a2a:	08 95       	ret

00002a2c <main_led_report_out>:
}

void main_led_report_out(uint8_t const *report) {
	led_ui_process(report[0]);
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	80 81       	ld	r24, Z
    2a30:	0c 94 70 06 	jmp	0xce0	; 0xce0 <led_ui_process>
    2a34:	08 95       	ret

00002a36 <__udivmodhi4>:
    2a36:	aa 1b       	sub	r26, r26
    2a38:	bb 1b       	sub	r27, r27
    2a3a:	51 e1       	ldi	r21, 0x11	; 17
    2a3c:	07 c0       	rjmp	.+14     	; 0x2a4c <__udivmodhi4_ep>

00002a3e <__udivmodhi4_loop>:
    2a3e:	aa 1f       	adc	r26, r26
    2a40:	bb 1f       	adc	r27, r27
    2a42:	a6 17       	cp	r26, r22
    2a44:	b7 07       	cpc	r27, r23
    2a46:	10 f0       	brcs	.+4      	; 0x2a4c <__udivmodhi4_ep>
    2a48:	a6 1b       	sub	r26, r22
    2a4a:	b7 0b       	sbc	r27, r23

00002a4c <__udivmodhi4_ep>:
    2a4c:	88 1f       	adc	r24, r24
    2a4e:	99 1f       	adc	r25, r25
    2a50:	5a 95       	dec	r21
    2a52:	a9 f7       	brne	.-22     	; 0x2a3e <__udivmodhi4_loop>
    2a54:	80 95       	com	r24
    2a56:	90 95       	com	r25
    2a58:	bc 01       	movw	r22, r24
    2a5a:	cd 01       	movw	r24, r26
    2a5c:	08 95       	ret

00002a5e <__tablejump2__>:
    2a5e:	ee 0f       	add	r30, r30
    2a60:	ff 1f       	adc	r31, r31
    2a62:	88 1f       	adc	r24, r24
    2a64:	8b bf       	out	0x3b, r24	; 59
    2a66:	07 90       	elpm	r0, Z+
    2a68:	f6 91       	elpm	r31, Z
    2a6a:	e0 2d       	mov	r30, r0
    2a6c:	19 94       	eijmp

00002a6e <memcpy>:
    2a6e:	fb 01       	movw	r30, r22
    2a70:	dc 01       	movw	r26, r24
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <memcpy+0xa>
    2a74:	01 90       	ld	r0, Z+
    2a76:	0d 92       	st	X+, r0
    2a78:	41 50       	subi	r20, 0x01	; 1
    2a7a:	50 40       	sbci	r21, 0x00	; 0
    2a7c:	d8 f7       	brcc	.-10     	; 0x2a74 <memcpy+0x6>
    2a7e:	08 95       	ret

00002a80 <_exit>:
    2a80:	f8 94       	cli

00002a82 <__stop_program>:
    2a82:	ff cf       	rjmp	.-2      	; 0x2a82 <__stop_program>
